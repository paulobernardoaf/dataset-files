<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\misc\bstrlib.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/bstrlib.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bstr__alloc</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>al_malloc(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bstr__free</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>al_free(p)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bstr__realloc</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>al_realloc((p), (x))</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MEMORY_DEBUG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BSTRLIB_MEMORY_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdbg.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>bstr__alloc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bstr__alloc</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>malloc (x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>bstr__free</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bstr__free</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free (p)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>bstr__realloc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bstr__realloc</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>realloc ((p), (x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>bstr__memcpy</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bstr__memcpy</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcpy ((d), (s), (l))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>bstr__memmove</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bstr__memmove</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memmove ((d), (s), (l))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>bstr__memset</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bstr__memset</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset ((d), (c), (l))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>bstr__memcmp</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bstr__memcmp</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcmp ((d), (c), (l))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>bstr__memchr</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bstr__memchr</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memchr ((s), (c), (l))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bBlockCopy</name><parameter_list>(<parameter><type><name>D</name></type></parameter>,<parameter><type><name>S</name></type></parameter>,<parameter><type><name>L</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if ((L) &gt; 0) bstr__memmove ((D),(S),(L)); }</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>int</name></type> <name>snapUpSize</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>|=</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>|=</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>|=</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>|=</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>UINT_MAX</name> <operator>!=</operator> <literal type="number">0xffff</literal><operator>)</operator></expr></cpp:if>
<expr_stmt><expr><name>j</name> <operator>|=</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>UINT_MAX</name> <operator>&gt;</operator> <literal type="number">0xffffffffUL</literal><operator>)</operator></expr></cpp:if>
<expr_stmt><expr><name>j</name> <operator>|=</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <name>j</name> <operator>&gt;=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>_al_balloc</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>olen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> 
<name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>||</operator> <name>olen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>olen</name> <operator>&gt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>snapUpSize</name> <argument_list>(<argument><expr><name>olen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_OK</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><literal type="number">7</literal> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition> <block>{<block_content>




<label><name>reallocStrategy</name>:</label><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>bstr__realloc</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>bstr__realloc</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>len</name> <operator>=</operator> <name>olen</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>bstr__alloc</name> <argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>




<goto>goto <name>reallocStrategy</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bstr__memcpy</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>x</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bstr__free</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>_al_ballocmin</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>slen</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> 
<name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>||</operator> <name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>bstr__realloc</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>_al_bstring</name></type> <name>_al_bfromcstr</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>_al_bstring</name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>strlen</name><operator>)</operator> <operator>(</operator><name>str</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>snapUpSize</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>j</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <operator>(</operator><name>j</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>_al_bstring</name><operator>)</operator> <call><name>bstr__alloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>_al_tagbstring</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>j</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>bstr__alloc</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>=</operator> <name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bstr__free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bstr__memcpy</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>_al_bstring</name></type> <name>_al_bfromcstralloc</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>mlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>_al_bstring</name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>strlen</name><operator>)</operator> <operator>(</operator><name>str</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>snapUpSize</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>j</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <operator>(</operator><name>j</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>_al_bstring</name><operator>)</operator> <call><name>bstr__alloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>_al_tagbstring</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>j</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>mlen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <name>mlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>bstr__alloc</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>=</operator> <name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bstr__free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bstr__memcpy</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>_al_bstring</name></type> <name>_al_blk2bstr</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>blk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>_al_bstring</name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>blk</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>_al_bstring</name><operator>)</operator> <call><name>bstr__alloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>_al_tagbstring</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>len</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <operator>(</operator><name>len</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>snapUpSize</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>bstr__alloc</name> <argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bstr__free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bstr__memcpy</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>char</name> <modifier>*</modifier></type> <name>_al_bstr2cstr</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>bstr__alloc</name> <argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>l</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>z</name></expr> </then><else>: <expr><operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>r</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>












<function><type><name>int</name></type> <name>_al_bcstrfree</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bstr__free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>_al_bconcat</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_al_bstring</name></type> <name>aux</name> <init>= <expr><operator>(</operator><name>_al_bstring</name><operator>)</operator> <name>b1</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b0</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>b1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b0</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>b0</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name> <operator>|</operator> <operator>(</operator><name><name>b0</name><operator>-&gt;</operator><name>mlen</name></name> <operator>-</operator> <name>d</name><operator>)</operator> <operator>|</operator> <name>len</name> <operator>|</operator> <operator>(</operator><name>d</name> <operator>+</operator> <name>len</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <name>d</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>pd</name> <init>= <expr><name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>-</operator> <name><name>b0</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>pd</name> <operator>&amp;&amp;</operator> <name>pd</name> <operator>&lt;</operator> <name><name>b0</name><operator>-&gt;</operator><name>mlen</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>aux</name> <operator>=</operator> <call><name>_al_bstrcpy</name> <argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_al_balloc</name> <argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><name>d</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>_AL_BSTR_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>aux</name> <operator>!=</operator> <name>b1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bBlockCopy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>b0</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aux</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b0</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>d</name> <operator>+</operator> <name>len</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>d</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>aux</name> <operator>!=</operator> <name>b1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>_al_bconchar</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name> <operator>|</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>-</operator> <name>d</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>_al_balloc</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>d</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>_AL_BSTR_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>d</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>d</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>_al_bcatcstr</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name>
<operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>


<return>return <expr><call><name>_al_bcatblk</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator> <name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>_al_bcatblk</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name>
<operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <operator>(</operator><name>nl</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>+</operator> <name>len</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <name>nl</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&gt;</operator> <call><name>_al_balloc</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>nl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bBlockCopy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>nl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>nl</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>_al_bstring</name></type> <name>_al_bstrcpy</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>_al_bstring</name></type> <name>b0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b0</name> <operator>=</operator> <operator>(</operator><name>_al_bstring</name><operator>)</operator> <call><name>bstr__alloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>_al_tagbstring</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b0</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>snapUpSize</name> <argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b0</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>bstr__alloc</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b0</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>bstr__alloc</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bstr__free</name> <argument_list>(<argument><expr><name>b0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>b0</name><operator>-&gt;</operator><name>mlen</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bstr__memcpy</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>b0</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>b0</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>b0</name><operator>-&gt;</operator><name>slen</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>b0</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>_al_bassign</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_al_balloc</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>_AL_BSTR_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bstr__memmove</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>slen</name></name> <operator>||</operator> 
<name><name>a</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>mlen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>_al_bassignmidstr</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>left</name></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>-</operator> <name>left</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>-</operator> <name>left</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>slen</name></name> <operator>||</operator>
<name><name>a</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>mlen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_al_balloc</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>_AL_BSTR_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bstr__memmove</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>left</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>a</name><operator>-&gt;</operator><name>slen</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>_al_bassigncstr</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>slen</name></name> <operator>||</operator>
<name><name>a</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>mlen</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>str</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>mlen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="char">'\0'</literal> <operator>==</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>||</operator> <name>i</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>INT_MAX</name> <operator>||</operator>
<literal type="number">0</literal> <operator>&gt;</operator> <call><name>_al_balloc</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>i</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bBlockCopy</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>slen</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>_al_bassignblk</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>slen</name></name> <operator>||</operator>
<name><name>a</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>mlen</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>s</name> <operator>||</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&gt;</operator> <call><name>_al_balloc</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bBlockCopy</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>_al_btrunc</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>||</operator>
<name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&gt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>upcase</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(toupper ((unsigned char) c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>downcase</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(tolower ((unsigned char) c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wspace</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(isspace ((unsigned char) c))</cpp:value></cpp:define>





<function><type><name>int</name></type> <name>_al_btoupper</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>||</operator>
<name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>len</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <call><name>upcase</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>_al_btolower</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>||</operator>
<name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>len</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <call><name>downcase</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>_al_bstricmp</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_bdata</name> <argument_list>(<argument><expr><name>b0</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> 
<call><name>_al_bdata</name> <argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SHRT_MIN</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <name><name>b0</name><operator>-&gt;</operator><name>slen</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>&amp;&amp;</operator> <name><name>b0</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_OK</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>downcase</name> <argument_list>(<argument><expr><name><name>b0</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>-</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>downcase</name> <argument_list>(<argument><expr><name><name>b1</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>v</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>v</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>&gt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>downcase</name> <argument_list>(<argument><expr><name><name>b0</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>v</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>UCHAR_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>&gt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>-</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>downcase</name> <argument_list>(<argument><expr><name><name>b1</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>v</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>UCHAR_MAX</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>











<function><type><name>int</name></type> <name>_al_bstrnicmp</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_bdata</name> <argument_list>(<argument><expr><name>b0</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> 
<call><name>_al_bdata</name> <argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SHRT_MIN</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;</operator> <name><name>b0</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>b0</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>downcase</name> <argument_list>(<argument><expr><name><name>b0</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>-=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>downcase</name> <argument_list>(<argument><expr><name><name>b1</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>b0</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>m</name> <operator>||</operator> <name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>&gt;</operator> <name>m</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>downcase</name> <argument_list>(<argument><expr><name><name>b0</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>v</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>UCHAR_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>-</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>downcase</name> <argument_list>(<argument><expr><name><name>b1</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>v</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>UCHAR_MAX</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>_al_biseqcaseless</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_bdata</name> <argument_list>(<argument><expr><name>b0</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> 
<call><name>_al_bdata</name> <argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>!=</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>||</operator> <name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>n</name><operator>=</operator><name><name>b0</name><operator>-&gt;</operator><name>slen</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <call><name>downcase</name> <argument_list>(<argument><expr><name><name>b0</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <call><name>downcase</name> <argument_list>(<argument><expr><name><name>b1</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>_al_bisstemeqcaselessblk</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>blk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_bdata</name> <argument_list>(<argument><expr><name>b0</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>blk</name> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>blk</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>blk</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>downcase</name> <argument_list>(<argument><expr><name><name>b0</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> 
<call><name>downcase</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>blk</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>_al_bltrimws</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>||</operator>
<name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wspace</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>_al_bdelete</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>_al_brtrimws</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>||</operator>
<name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wspace</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&gt;</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>_al_btrimws</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>||</operator>
<name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wspace</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&gt;</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>wspace</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content/>}</block></for>
<return>return <expr><call><name>_al_bdelete</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>_al_biseq</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>b0</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>b1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b0</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>!=</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>||</operator> <name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>!</operator><call><name>bstr__memcmp</name> <argument_list>(<argument><expr><name><name>b0</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>b1</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>b0</name><operator>-&gt;</operator><name>slen</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>_al_bisstemeqblk</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>blk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_bdata</name> <argument_list>(<argument><expr><name>b0</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>blk</name> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>blk</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>blk</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_OK</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>












<function><type><name>int</name></type> <name>_al_biseqcstr</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_OK</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>;</return>
</block_content>}</block></function>













<function><type><name>int</name></type> <name>_al_biseqcstrcaseless</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> 
<operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> 
<call><name>downcase</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <call><name>downcase</name> <argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>;</return>
</block_content>}</block></function>















<function><type><name>int</name></type> <name>_al_bstrcmp</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b0</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>b1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b0</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SHRT_MIN</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>b0</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>b0</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>||</operator> <name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <name><name>b0</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>v</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_OK</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>&gt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>&gt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>











<function><type><name>int</name></type> <name>_al_bstrncmp</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b0</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>b1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b0</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SHRT_MIN</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;</operator> <name><name>b0</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>b0</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <name><name>b0</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>v</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_OK</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>m</name> <operator>||</operator> <name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>&gt;</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>








<function><type><name>_al_bstring</name></type> <name>_al_bmidstr</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>left</name></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>-</operator> <name>left</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>-</operator> <name>left</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>_al_bfromcstr</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>_al_blk2bstr</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>left</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>_al_bdelete</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> 
<name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pos</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <name>len</name> <operator>&gt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>bBlockCopy</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>pos</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>pos</name> <operator>+</operator> <name>len</name><operator>)</operator></expr></argument>, 
<argument><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>-</operator> <operator>(</operator><name>pos</name><operator>+</operator><name>len</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>_al_bdestroy</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>||</operator>
<name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bstr__free</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>=</operator> <operator>-</operator><name>__LINE__</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bstr__free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>_al_binstr</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>ii</name></decl>, <decl><type ref="prev"/><name>ll</name></decl>, <decl><type ref="prev"/><name>lf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>d0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>d1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>char</name></type> <name>c1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name>b2</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b2</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b2</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>b2</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><name>pos</name></expr></then><else>:<expr><name>_AL_BSTR_ERR</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <name>pos</name> <operator>||</operator> <name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b2</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>pos</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lf</name> <operator>=</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>-</operator> <name><name>b2</name><operator>-&gt;</operator><name>slen</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name><name>b2</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name>pos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d0</name> <operator>=</operator> <name><name>b2</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ll</name> <operator>=</operator> <name><name>b2</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>c0</name> <operator>=</operator> <name><name>d0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name>ll</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>lf</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><name>c0</name> <operator>==</operator> <name><name>d1</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lf</name> <operator>=</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ii</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>lf</name></expr>)</condition><block type="pseudo"><block_content> <do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name><name>d1</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name><name>d1</name><index>[<expr><literal type="number">1</literal><operator>+</operator><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ii</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>ll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>d0</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<label><name>N0</name>:</label><empty_stmt>;</empty_stmt>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>ii</name><operator>+</operator><name>j</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ii</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>i</name> <operator>-=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c0</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>lf</name></expr>)</condition>;</do></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>lf</name> <operator>&amp;&amp;</operator> <name>ll</name> <operator>==</operator> <name>j</name><operator>+</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>==</operator> <name><name>d1</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>N0</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>_al_binstrr</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>d0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type> <name>d1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name>b2</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b2</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b2</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <name>pos</name> <operator>&amp;&amp;</operator> <name><name>b2</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>pos</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <name>pos</name> <operator>||</operator> <name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b2</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>pos</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name><name>b2</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name>pos</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>b2</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;=</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>-</operator> <name><name>b2</name><operator>-&gt;</operator><name>slen</name></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d0</name> <operator>=</operator> <name><name>b2</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>b2</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>d0</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>d1</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>l</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>_al_binstrcaseless</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>ll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>d0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type> <name>d1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name>b2</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b2</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b2</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>b2</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><name>pos</name></expr></then><else>:<expr><name>_AL_BSTR_ERR</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <name>pos</name> <operator>||</operator> <name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b2</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>pos</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>-</operator> <name><name>b2</name><operator>-&gt;</operator><name>slen</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name><name>b2</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name>pos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d0</name> <operator>=</operator> <name><name>b2</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ll</name> <operator>=</operator> <name><name>b2</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>d0</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>d1</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>||</operator> <call><name>downcase</name> <argument_list>(<argument><expr><name><name>d0</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>downcase</name> <argument_list>(<argument><expr><name><name>d1</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>ll</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>l</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>_al_binstrrcaseless</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>d0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type> <name>d1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name>b2</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b2</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b2</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <name>pos</name> <operator>&amp;&amp;</operator> <name><name>b2</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>pos</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <name>pos</name> <operator>||</operator> <name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b2</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>pos</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name><name>b2</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name>pos</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>b2</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;=</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>-</operator> <name><name>b2</name><operator>-&gt;</operator><name>slen</name></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d0</name> <operator>=</operator> <name><name>b2</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>b2</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>d0</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>d1</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>||</operator> <call><name>downcase</name> <argument_list>(<argument><expr><name><name>d0</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>downcase</name> <argument_list>(<argument><expr><name><name>d1</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>l</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>_al_bstrchrp</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;=</operator> <name>pos</name> <operator>||</operator> <name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>bstr__memchr</name> <argument_list>(<argument><expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>pos</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>c</name></expr></argument>, <argument><expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>-</operator> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>_al_bstrrchrp</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;=</operator> <name>pos</name> <operator>||</operator> <name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>pos</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>BSTRLIB_AGGRESSIVE_MEMORY_FOR_SPEED_TRADEOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_LOG_BITS_QTY</name></cpp:macro> <cpp:value>(3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_BITS_QTY</name></cpp:macro> <cpp:value>(1 &lt;&lt; LONG_LOG_BITS_QTY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_TYPE</name></cpp:macro> <cpp:value>unsigned char</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFCLEN</name></cpp:macro> <cpp:value>((1 &lt;&lt; CHAR_BIT) / LONG_BITS_QTY)</cpp:value></cpp:define>
<struct>struct <name>charField</name> <block>{ <decl_stmt><decl><type><name>LONG_TYPE</name></type> <name><name>content</name><index>[<expr><name>CFCLEN</name></expr>]</index></name></decl>;</decl_stmt> }</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>testInCharField</name><parameter_list>(<parameter><type><name>cf</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((cf)-&gt;content[(c) &gt;&gt; LONG_LOG_BITS_QTY] &amp; (((long)1) &lt;&lt; ((c) &amp; (LONG_BITS_QTY-1))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setInCharField</name><parameter_list>(<parameter><type><name>cf</name></type></parameter>,<parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ unsigned int c = (unsigned int) (idx); (cf)-&gt;content[c &gt;&gt; LONG_LOG_BITS_QTY] |= (LONG_TYPE) (1ul &lt;&lt; (c &amp; (LONG_BITS_QTY-1))); }</cpp:value></cpp:define>




<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFCLEN</name></cpp:macro> <cpp:value>(1 &lt;&lt; CHAR_BIT)</cpp:value></cpp:define>
<struct>struct <name>charField</name> <block>{ <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>content</name><index>[<expr><name>CFCLEN</name></expr>]</index></name></decl>;</decl_stmt> }</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>testInCharField</name><parameter_list>(<parameter><type><name>cf</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((cf)-&gt;content[(unsigned char) (c)])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setInCharField</name><parameter_list>(<parameter><type><name>cf</name></type></parameter>,<parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(cf)-&gt;content[(unsigned int) (idx)] = ~0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>int</name></type> <name>buildCharField</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>charField</name></name> <modifier>*</modifier></type> <name>cf</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>cf</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>charField</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>setInCharField</name> <argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>invertCharField</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>charField</name></name> <modifier>*</modifier></type> <name>cf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CFCLEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>content</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>cf</name><operator>-&gt;</operator><name>content</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>binchrCF</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>charField</name></name> <modifier>*</modifier></type> <name>cf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>pos</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>testInCharField</name> <argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>_al_binchr</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>charField</name></name></type> <name>chrs</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>b0</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b0</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;=</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>_al_bstrchrp</name> <argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><name><name>b1</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>buildCharField</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>chrs</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>binchrCF</name> <argument_list>(<argument><expr><name><name>b0</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>b0</name><operator>-&gt;</operator><name>slen</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chrs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>binchrrCF</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>charField</name></name> <modifier>*</modifier></type> <name>cf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>pos</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>testInCharField</name> <argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>_al_binchrr</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>charField</name></name></type> <name>chrs</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>b0</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b0</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>b1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name><name>b0</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pos</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>_al_bstrrchrp</name> <argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><name><name>b1</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>buildCharField</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>chrs</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>binchrrCF</name> <argument_list>(<argument><expr><name><name>b0</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chrs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>_al_bninchr</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>charField</name></name></type> <name>chrs</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>b0</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b0</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> 
<name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;=</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>buildCharField</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>chrs</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>invertCharField</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>chrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>binchrCF</name> <argument_list>(<argument><expr><name><name>b0</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>b0</name><operator>-&gt;</operator><name>slen</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chrs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>_al_bninchrr</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>charField</name></name></type> <name>chrs</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>b0</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b0</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> 
<name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name><name>b0</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pos</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>buildCharField</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>chrs</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>invertCharField</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>chrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>binchrrCF</name> <argument_list>(<argument><expr><name><name>b0</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chrs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>_al_bsetstr</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>fill</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>newlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>pd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_al_bstring</name></type> <name>aux</name> <init>= <expr><operator>(</operator><name>_al_bstring</name><operator>)</operator> <name>b1</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>b0</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>b0</name><operator>-&gt;</operator><name>data</name></name> <operator>||</operator> 
<name><name>b0</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>||</operator> <name><name>b0</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>b1</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>aux</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pd</name> <operator>=</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator> <operator>(</operator><name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>-</operator> <name><name>b0</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pd</name> <operator>&lt;</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator> <name><name>b0</name><operator>-&gt;</operator><name>mlen</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>aux</name> <operator>=</operator> <call><name>_al_bstrcpy</name> <argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <name><name>aux</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>_al_balloc</name> <argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><name>d</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>_AL_BSTR_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>aux</name> <operator>!=</operator> <name>b1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>newlen</name> <operator>=</operator> <name><name>b0</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <name>newlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bstr__memset</name> <argument_list>(<argument><expr><name><name>b0</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>b0</name><operator>-&gt;</operator><name>slen</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>fill</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <name><name>b0</name><operator>-&gt;</operator><name>slen</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>newlen</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>aux</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bBlockCopy</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>b0</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>pos</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>aux</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>aux</name><operator>-&gt;</operator><name>slen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>aux</name> <operator>!=</operator> <name>b1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;</operator> <name>newlen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>newlen</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>b0</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>newlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b0</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>newlen</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>_al_binsert</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b2</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>fill</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>pd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_al_bstring</name></type> <name>aux</name> <init>= <expr><operator>(</operator><name>_al_bstring</name><operator>)</operator> <name>b2</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>b1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>b2</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> 
<name><name>b2</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b1</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>||</operator> <name><name>b1</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pd</name> <operator>=</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator> <operator>(</operator><name><name>b2</name><operator>-&gt;</operator><name>data</name></name> <operator>-</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pd</name> <operator>&lt;</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator> <name><name>b1</name><operator>-&gt;</operator><name>mlen</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>aux</name> <operator>=</operator> <call><name>_al_bstrcpy</name> <argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>+</operator> <name><name>aux</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <name><name>aux</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name><operator>|</operator><name>l</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>d</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>_al_balloc</name> <argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>_AL_BSTR_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>aux</name> <operator>!=</operator> <name>b2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bstr__memset</name> <argument_list>(<argument><expr><name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>fill</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>_al_balloc</name> <argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>d</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>_AL_BSTR_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>aux</name> <operator>!=</operator> <name>b2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bBlockCopy</name> <argument_list>(<argument><expr><name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>l</name></expr></argument>, <argument><expr><name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>d</name> <operator>-</operator> <name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>bBlockCopy</name> <argument_list>(<argument><expr><name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name><name>aux</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>aux</name><operator>-&gt;</operator><name>slen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b1</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>b1</name><operator>-&gt;</operator><name>slen</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>aux</name> <operator>!=</operator> <name>b2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>_al_breplace</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b2</name></decl></parameter>, 
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>fill</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pl</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>pd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_al_bstring</name></type> <name>aux</name> <init>= <expr><operator>(</operator><name>_al_bstring</name><operator>)</operator> <name>b2</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>pl</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>b1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> 
<name>b2</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b2</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> 
<name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b2</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b1</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>||</operator>
<name><name>b1</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>pl</name> <operator>&gt;=</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_al_bsetstr</name> <argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>fill</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <name><name>b2</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>pos</name> <operator>+</operator> <name><name>b2</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b1</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>b1</name><operator>-&gt;</operator><name>slen</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pd</name> <operator>=</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator> <operator>(</operator><name><name>b2</name><operator>-&gt;</operator><name>data</name></name> <operator>-</operator> <name><name>b1</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pd</name> <operator>&lt;</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator> <name><name>b1</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>aux</name> <operator>=</operator> <call><name>_al_bstrcpy</name> <argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>slen</name></name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_al_balloc</name> <argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>+</operator> <name><name>aux</name><operator>-&gt;</operator><name>slen</name></name> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>_AL_BSTR_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>aux</name> <operator>!=</operator> <name>b2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>slen</name></name> <operator>!=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bstr__memmove</name> <argument_list>(<argument><expr><name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>pos</name> <operator>+</operator> <name><name>aux</name><operator>-&gt;</operator><name>slen</name></name></expr></argument>, <argument><expr><name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>pos</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>-</operator> <operator>(</operator><name>pos</name> <operator>+</operator> <name>len</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bstr__memcpy</name> <argument_list>(<argument><expr><name><name>b1</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name><name>aux</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>aux</name><operator>-&gt;</operator><name>slen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b1</name><operator>-&gt;</operator><name>slen</name></name> <operator>+=</operator> <name><name>aux</name><operator>-&gt;</operator><name>slen</name></name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b1</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>b1</name><operator>-&gt;</operator><name>slen</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>aux</name> <operator>!=</operator> <name>b2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>








<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>instr_fnptr</name>) <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>s2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>findreplaceengine</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>find</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>repl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>instr_fnptr</name></type> <name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>slen</name></decl>, <decl><type ref="prev"/><name>mlen</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>, <decl><type ref="prev"/><name>acc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>static_d</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>pd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_al_bstring</name></type> <name>auxf</name> <init>= <expr><operator>(</operator><name>_al_bstring</name><operator>)</operator> <name>find</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_al_bstring</name></type> <name>auxr</name> <init>= <expr><operator>(</operator><name>_al_bstring</name><operator>)</operator> <name>repl</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>find</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>find</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>repl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>repl</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> 
<name><name>pos</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name><name>find</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr></argument> &gt;</argument_list></name> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>||</operator> 
<name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>repl</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>-</operator> <name><name>find</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_OK</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>pd</name> <operator>=</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator> <operator>(</operator><name><name>find</name><operator>-&gt;</operator><name>data</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <name><name>find</name><operator>-&gt;</operator><name>slen</name></name><operator>)</operator> <operator>&lt;</operator> <name>pd</name> <operator>&amp;&amp;</operator> <name>pd</name> <operator>&lt;</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>auxf</name> <operator>=</operator> <call><name>_al_bstrcpy</name> <argument_list>(<argument><expr><name>find</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>pd</name> <operator>=</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator> <operator>(</operator><name><name>repl</name><operator>-&gt;</operator><name>data</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <name><name>repl</name><operator>-&gt;</operator><name>slen</name></name><operator>)</operator> <operator>&lt;</operator> <name>pd</name> <operator>&amp;&amp;</operator> <name>pd</name> <operator>&lt;</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>auxr</name> <operator>=</operator> <call><name>_al_bstrcpy</name> <argument_list>(<argument><expr><name>repl</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>auxf</name> <operator>!=</operator> <name>find</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>auxf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name><name>auxf</name><operator>-&gt;</operator><name>slen</name></name> <operator>-</operator> <name><name>auxr</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>pos</name> <operator>=</operator> <call><name>instr</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>auxf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bstr__memcpy</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name><name>auxr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>auxr</name><operator>-&gt;</operator><name>slen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name><name>auxf</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>auxf</name> <operator>!=</operator> <name>find</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>auxf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>auxr</name> <operator>!=</operator> <name>repl</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>auxr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>acc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>instr</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>auxf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>acc</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bstr__memmove</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>pos</name> <operator>-</operator> <name>acc</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>auxr</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bstr__memcpy</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>i</name> <operator>-</operator> <name>acc</name></expr></argument>, <argument><expr><name><name>auxr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>auxr</name><operator>-&gt;</operator><name>slen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>acc</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>i</name> <operator>+</operator> <name><name>auxf</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>acc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bstr__memmove</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>pos</name> <operator>-</operator> <name>acc</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>-=</operator> <name>acc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>auxf</name> <operator>!=</operator> <name>find</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>auxf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>auxr</name> <operator>!=</operator> <name>repl</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>auxr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>mlen</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>static_d</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>acc</name> <operator>=</operator> <name>slen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>pos</name> <operator>=</operator> <call><name>instr</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>auxf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>mlen</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type> <name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mlen</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sl</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>mlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>static_d</name> <operator>==</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sl</name> <operator>&lt;</operator> <name>mlen</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <operator>(</operator><name>t</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>bstr__realloc</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>_AL_BSTR_ERR</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bstr__memcpy</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>static_d</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>static_d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>slen</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>slen</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>acc</name> <operator>-=</operator> <name>delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name><name>auxf</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>acc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>_AL_BSTR_ERR</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>slen</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>_AL_BSTR_OK</name> <operator>==</operator> <operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_al_balloc</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>+</operator> <name>acc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>+=</operator> <name>acc</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>slen</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>auxf</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bstr__memmove</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>s</name> <operator>+</operator> <name>acc</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>auxr</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bstr__memmove</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>s</name> <operator>+</operator> <name>acc</name> <operator>-</operator> <name><name>auxr</name><operator>-&gt;</operator><name>slen</name></name></expr></argument>, 
<argument><expr><name><name>auxr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>auxr</name><operator>-&gt;</operator><name>slen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>acc</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt> 
</block_content>}</block></for>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>done</name>:</label><empty_stmt>;</empty_stmt>
<if_stmt><if>if <condition>(<expr><name>static_d</name> <operator>==</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bstr__free</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>auxf</name> <operator>!=</operator> <name>find</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>auxf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>auxr</name> <operator>!=</operator> <name>repl</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>auxr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>_al_bfindreplace</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>find</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>repl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>findreplaceengine</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>find</name></expr></argument>, <argument><expr><name>repl</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>_al_binstr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>_al_bfindreplacecaseless</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>find</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>repl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>findreplaceengine</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>find</name></expr></argument>, <argument><expr><name>repl</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>_al_binstrcaseless</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>_al_binsertch</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>fill</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>||</operator>
<name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name><operator>|</operator><name>l</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>d</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>_al_balloc</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>_AL_BSTR_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>_al_balloc</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>d</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>_AL_BSTR_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>d</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>-</operator> <name>len</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>pos</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>fill</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>_al_bpattern</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>_al_blength</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>_al_balloc</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>_AL_BSTR_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>_al_bsetstr</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>d</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>-</operator> <name>d</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BS_BUFF_SZ</name></cpp:macro> <cpp:value>(1024)</cpp:value></cpp:define>







<function><type><name>int</name></type> <name>_al_breada</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>_al_bNread</name></type> <name>readPtr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>||</operator>
<name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>readPtr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">16</literal></expr>;</init> <condition>;</condition> <incr><expr><name>n</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&lt;</operator> <name>BS_BUFF_SZ</name><operator>)</operator></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><name>BS_BUFF_SZ</name></expr></else></ternary><operator>)</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>_AL_BSTR_OK</name> <operator>!=</operator> <call><name>_al_balloc</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>readPtr</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>i</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>parm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>_al_bstring</name></type> <name>_al_bread</name> <parameter_list>(<parameter><decl><type><name>_al_bNread</name></type> <name>readPtr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>_al_bstring</name></type> <name>buff</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>_al_breada</name> <argument_list>(<argument><expr><name>buff</name> <operator>=</operator> <call><name>_al_bfromcstr</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>readPtr</name></expr></argument>, <argument><expr><name>parm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>buff</name></expr>;</return>
</block_content>}</block></function>














<function><type><name>int</name></type> <name>_al_bassigngets</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>_al_bNgetc</name></type> <name>getcPtr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>terminator</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>||</operator>
<name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>getcPtr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getcPtr</name> <argument_list>(<argument><expr><name>parm</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;</operator> <name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_al_balloc</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>d</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>_AL_BSTR_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>d</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>terminator</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>d</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<return>return <expr><name>d</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>














<function><type><name>int</name></type> <name>_al_bgetsa</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>_al_bNgetc</name></type> <name>getcPtr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>terminator</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>||</operator>
<name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>getcPtr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getcPtr</name> <argument_list>(<argument><expr><name>parm</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;</operator> <name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_al_balloc</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>d</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>_AL_BSTR_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>d</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>terminator</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>d</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<return>return <expr><name>d</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>












<function><type><name>_al_bstring</name></type> <name>_al_bgets</name> <parameter_list>(<parameter><decl><type><name>_al_bNgetc</name></type> <name>getcPtr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>terminator</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>_al_bstring</name></type> <name>buff</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>_al_bgetsa</name> <argument_list>(<argument><expr><name>buff</name> <operator>=</operator> <call><name>_al_bfromcstr</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>getcPtr</name></expr></argument>, <argument><expr><name>parm</name></expr></argument>, <argument><expr><name>terminator</name></expr></argument>)</argument_list></call> <operator>||</operator> <literal type="number">0</literal> <operator>&gt;=</operator> <name><name>buff</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buff</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>buff</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>_al_bStream</name> <block>{
<decl_stmt><decl><type><name>_al_bstring</name></type> <name>buff</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>_al_bNread</name></type> <name>readFnPtr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>isEOF</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>maxBuffSz</name></decl>;</decl_stmt>
}</block>;</struct>







<function><type><name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>_al_bsopen</name> <parameter_list>(<parameter><decl><type><name>_al_bNread</name></type> <name>readPtr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>readPtr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator>struct <name>_al_bStream</name> <operator>*</operator><operator>)</operator> <call><name>bstr__alloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>_al_bStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parm</name></name> <operator>=</operator> <name>parm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buff</name></name> <operator>=</operator> <call><name>_al_bfromcstr</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>readFnPtr</name></name> <operator>=</operator> <name>readPtr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>maxBuffSz</name></name> <operator>=</operator> <name>BS_BUFF_SZ</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>isEOF</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>_al_bsbufflength</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>oldSz</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>sz</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>oldSz</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>maxBuffSz</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>maxBuffSz</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>oldSz</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_al_bseof</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>readFnPtr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>isEOF</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>buff</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name> <modifier>*</modifier></type> <name>_al_bsclose</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>readFnPtr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buff</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buff</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>parm</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>parm</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parm</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>isEOF</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bstr__free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>parm</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>_al_bsreadlna</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>terminator</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>rlo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_al_tagbstring</name></name></type> <name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>buff</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>r</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>r</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buff</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>_AL_BSTR_OK</name> <operator>!=</operator> <call><name>_al_balloc</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxBuffSz</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>buff</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>b</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>b</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name>terminator</name></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>terminator</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>.</operator><name>slen</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_al_bconcat</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buff</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>_AL_BSTR_OK</name> <operator>==</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_al_bdelete</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rlo</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>x</name><operator>.</operator><name>slen</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>_AL_BSTR_OK</name> <operator>!=</operator> <call><name>_al_bconcat</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>



<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>_AL_BSTR_OK</name> <operator>!=</operator> <call><name>_al_balloc</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>slen</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>maxBuffSz</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>slen</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>s</name><operator>-&gt;</operator><name>readFnPtr</name></name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxBuffSz</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>parm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>slen</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buff</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>isEOF</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>_AL_BSTR_ERR</name> <operator>&amp;</operator> <operator>-</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <name>rlo</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name>terminator</name></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>terminator</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>slen</name></name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>slen</name></name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buff</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>l</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bstr__memcpy</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buff</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>l</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>slen</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>_al_bsreadlnsa</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>term</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>rlo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_al_tagbstring</name></name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>charField</name></name></type> <name>cf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>buff</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>r</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>term</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>term</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>r</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>_al_bsreadlna</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>buildCharField</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cf</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buff</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>_AL_BSTR_OK</name> <operator>!=</operator> <call><name>_al_balloc</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxBuffSz</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>buff</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>b</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><call><name>testInCharField</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cf</name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>.</operator><name>slen</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_al_bconcat</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buff</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>_AL_BSTR_OK</name> <operator>==</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_al_bdelete</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rlo</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>x</name><operator>.</operator><name>slen</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>_AL_BSTR_OK</name> <operator>!=</operator> <call><name>_al_bconcat</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>



<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>_AL_BSTR_OK</name> <operator>!=</operator> <call><name>_al_balloc</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>slen</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>maxBuffSz</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>slen</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>s</name><operator>-&gt;</operator><name>readFnPtr</name></name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxBuffSz</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>parm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>slen</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buff</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>isEOF</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>_AL_BSTR_ERR</name> <operator>&amp;</operator> <operator>-</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <name>rlo</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><call><name>testInCharField</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cf</name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>slen</name></name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>slen</name></name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buff</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>l</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bstr__memcpy</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buff</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>l</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>slen</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>_al_bsreada</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>orslen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_al_tagbstring</name></name></type> <name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>buff</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>r</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>slen</name></name> <operator>||</operator> <name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>r</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buff</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>orslen</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>l</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>isEOF</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&gt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>s</name><operator>-&gt;</operator><name>readFnPtr</name></name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>slen</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>slen</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>parm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;=</operator> <name>l</name> <operator>||</operator> <name>l</name> <operator>&gt;</operator> <name>n</name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>isEOF</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>slen</name></name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>slen</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>_AL_BSTR_OK</name> <operator>!=</operator> <call><name>_al_balloc</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxBuffSz</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>buff</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>b</name></expr>;</expr_stmt>

<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>slen</name></name> <operator>&gt;=</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>.</operator><name>slen</name></name> <operator>=</operator> <name>n</name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_al_bconcat</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buff</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>_AL_BSTR_OK</name> <operator>==</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_al_bdelete</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>slen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>_AL_BSTR_ERR</name> <operator>&amp;</operator> <operator>-</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <name>orslen</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>x</name><operator>.</operator><name>slen</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>_AL_BSTR_OK</name> <operator>!=</operator> <call><name>_al_bconcat</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>n</name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>maxBuffSz</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>maxBuffSz</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>s</name><operator>-&gt;</operator><name>readFnPtr</name></name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>parm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>isEOF</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buff</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_ERR</name> <operator>&amp;</operator> <operator>-</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <name>orslen</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>_al_bsreadln</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>terminator</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>buff</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>r</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>_AL_BSTR_OK</name> <operator>!=</operator> <call><name>_al_balloc</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxBuffSz</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>_al_bsreadlna</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>terminator</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>_al_bsreadlns</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>term</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>buff</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>r</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>term</name> <operator>==</operator> <name>NULL</name> 
<operator>||</operator> <name><name>term</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>_al_bsreadln</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>_AL_BSTR_OK</name> <operator>!=</operator> <call><name>_al_balloc</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxBuffSz</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>_al_bsreadlnsa</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>_al_bsread</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>buff</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>r</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal>
<operator>||</operator> <name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>_AL_BSTR_OK</name> <operator>!=</operator> <call><name>_al_balloc</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxBuffSz</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>_al_bsreada</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>_al_bsunread</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>buff</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>_al_binsert</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>_al_bspeek</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>buff</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>_al_bassign</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>_al_bstring</name></type> <name>_al_bjoin</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_al_bstrList</name></name> <modifier>*</modifier></type> <name>bl</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>sep</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>_al_bstring</name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>bl</name><operator>-&gt;</operator><name>qty</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sep</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sep</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sep</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bl</name><operator>-&gt;</operator><name>qty</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>bl</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>slen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>c</name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>sep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name><name>bl</name><operator>-&gt;</operator><name>qty</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>sep</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>_al_bstring</name><operator>)</operator> <call><name>bstr__alloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>_al_tagbstring</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>bstr__alloc</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bstr__free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>c</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bl</name><operator>-&gt;</operator><name>qty</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>sep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bstr__memcpy</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>c</name></expr></argument>, <argument><expr><name><name>sep</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>sep</name><operator>-&gt;</operator><name>slen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <name><name>sep</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>bl</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>slen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bstr__memcpy</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>c</name></expr></argument>, <argument><expr><name><name>bl</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSSSC_BUFF_LEN</name></cpp:macro> <cpp:value>(256)</cpp:value></cpp:define>


















<function><type><name>int</name></type> <name>_al_bssplitscb</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>splitStr</name></decl></parameter>, 
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>cb</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ofs</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>entry</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>charField</name></name></type> <name>chrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_al_bstring</name></type> <name>buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>readFnPtr</name></name> <operator>==</operator> <name>NULL</name> 
<operator>||</operator> <name>splitStr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>splitStr</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>buff</name> <operator>=</operator> <call><name>_al_bfromcstr</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>splitStr</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><call><name>_al_bsreada</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>BSSSC_BUFF_LEN</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>cb</name> <argument_list>(<argument><expr><name>parm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>buildCharField</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>chrs</name></expr></argument>, <argument><expr><name>splitStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>p</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>buff</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_bsreada</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>BSSSC_BUFF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>buff</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <operator>(</operator><name>ret</name> <operator>=</operator> <call><name>cb</name> <argument_list>(<argument><expr><name>parm</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>testInCharField</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>chrs</name></expr></argument>, <argument><expr><name><name>buff</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_al_tagbstring</name></name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_blk2tbstr</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>buff</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>buff</name><operator>-&gt;</operator><name>slen</name></name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_al_bsunread</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buff</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>buff</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buff</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>cb</name> <argument_list>(<argument><expr><name>parm</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buff</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buff</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


















<function><type><name>int</name></type> <name>_al_bssplitstrcb</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>splitStr</name></decl></parameter>, 
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>cb</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ofs</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>entry</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>_al_bstring</name></type> <name>buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>readFnPtr</name></name> <operator>==</operator> <name>NULL</name> 
<operator>||</operator> <name>splitStr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>splitStr</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>splitStr</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>_al_bssplitscb</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>splitStr</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>parm</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>buff</name> <operator>=</operator> <call><name>_al_bfromcstr</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>splitStr</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><call><name>_al_bsreada</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>BSSSC_BUFF_LEN</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>cb</name> <argument_list>(<argument><expr><name>parm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buff</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>p</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>p</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_al_binstr</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>splitStr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_al_tagbstring</name></name></type> <name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_blk2tbstr</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>buff</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>ret</name> <operator>+</operator> <name><name>splitStr</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>cb</name> <argument_list>(<argument><expr><name>parm</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_bdelete</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>_al_bsreada</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>BSSSC_BUFF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_al_bseof</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>cb</name> <argument_list>(<argument><expr><name>parm</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>





<function><type><name><name>struct</name> <name>_al_bstrList</name></name> <modifier>*</modifier></type> <name>_al_bstrListCreate</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_al_bstrList</name></name> <modifier>*</modifier></type> <name>sl</name> <init>= <expr><operator>(</operator>struct <name>_al_bstrList</name> <operator>*</operator><operator>)</operator> <call><name>bstr__alloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>_al_bstrList</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <operator>(</operator><name>_al_bstring</name> <operator>*</operator><operator>)</operator> <call><name>bstr__alloc</name> <argument_list>(<argument><expr><literal type="number">1</literal><operator>*</operator><sizeof>sizeof <argument_list>(<argument><expr><name>_al_bstring</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sl</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bstr__free</name> <argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>qty</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mlen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>sl</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>_al_bstrListDestroy</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_al_bstrList</name></name> <modifier>*</modifier></type> <name>sl</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>sl</name><operator>-&gt;</operator><name>qty</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>qty</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>qty</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bstr__free</name> <argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bstr__free</name> <argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>_al_bstrListAlloc</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_al_bstrList</name></name> <modifier>*</modifier></type> <name>sl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>msz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>_al_bstring</name> <modifier>*</modifier></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>smsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nsz</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sl</name> <operator>||</operator> <name>msz</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>sl</name><operator>-&gt;</operator><name>entry</name></name> <operator>||</operator> <name><name>sl</name><operator>-&gt;</operator><name>qty</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sl</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sl</name><operator>-&gt;</operator><name>qty</name></name> <operator>&gt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>mlen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&gt;=</operator> <name>msz</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>smsz</name> <operator>=</operator> <call><name>snapUpSize</name> <argument_list>(<argument><expr><name>msz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nsz</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name>smsz</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>_al_bstring</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nsz</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>smsz</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>_al_bstring</name> <operator>*</operator><operator>)</operator> <call><name>bstr__realloc</name> <argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name>nsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>l</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>smsz</name> <operator>=</operator> <name>msz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nsz</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name>smsz</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>_al_bstring</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>_al_bstring</name> <operator>*</operator><operator>)</operator> <call><name>bstr__realloc</name> <argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name>nsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>l</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mlen</name></name> <operator>=</operator> <name>smsz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>_al_bstrListAllocMin</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_al_bstrList</name></name> <modifier>*</modifier></type> <name>sl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>msz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>_al_bstring</name> <modifier>*</modifier></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nsz</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sl</name> <operator>||</operator> <name>msz</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>sl</name><operator>-&gt;</operator><name>entry</name></name> <operator>||</operator> <name><name>sl</name><operator>-&gt;</operator><name>qty</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sl</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sl</name><operator>-&gt;</operator><name>qty</name></name> <operator>&gt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>mlen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>msz</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>qty</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>msz</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>qty</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>mlen</name></name> <operator>==</operator> <name>msz</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nsz</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name>msz</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>_al_bstring</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nsz</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>msz</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>_al_bstring</name> <operator>*</operator><operator>)</operator> <call><name>bstr__realloc</name> <argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name>nsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>l</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mlen</name></name> <operator>=</operator> <name>msz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>
















<function><type><name>int</name></type> <name>_al_bsplitcb</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>splitChar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>cb</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ofs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pos</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>pos</name></expr></argument> &gt;</argument_list></name> <name><name>str</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>p</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>str</name><operator>-&gt;</operator><name>slen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>str</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>splitChar</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>cb</name> <argument_list>(<argument><expr><name>parm</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>p</name> <operator>&lt;=</operator> <name><name>str</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition>;</do>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>

















<function><type><name>int</name></type> <name>_al_bsplitscb</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>splitStr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>cb</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ofs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>charField</name></name></type> <name>chrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pos</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>pos</name></expr></argument> &gt;</argument_list></name> <name><name>str</name><operator>-&gt;</operator><name>slen</name></name> 
<operator>||</operator> <name>splitStr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>splitStr</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>splitStr</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>cb</name> <argument_list>(<argument><expr><name>parm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>str</name><operator>-&gt;</operator><name>slen</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>splitStr</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><call><name>_al_bsplitcb</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>splitStr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>parm</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>buildCharField</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>chrs</name></expr></argument>, <argument><expr><name>splitStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>p</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>str</name><operator>-&gt;</operator><name>slen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>testInCharField</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>chrs</name></expr></argument>, <argument><expr><name><name>str</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>cb</name> <argument_list>(<argument><expr><name>parm</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>p</name> <operator>&lt;=</operator> <name><name>str</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition>;</do>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>

















<function><type><name>int</name></type> <name>_al_bsplitstrcb</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>splitStr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>cb</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ofs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pos</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>pos</name></expr></argument> &gt;</argument_list></name> <name><name>str</name><operator>-&gt;</operator><name>slen</name></name> 
<operator>||</operator> <name>splitStr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>splitStr</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>splitStr</name><operator>-&gt;</operator><name>slen</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>pos</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>str</name><operator>-&gt;</operator><name>slen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>cb</name> <argument_list>(<argument><expr><name>parm</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>splitStr</name><operator>-&gt;</operator><name>slen</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><call><name>_al_bsplitcb</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>splitStr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>parm</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>p</name><operator>=</operator><name>pos</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>str</name><operator>-&gt;</operator><name>slen</name></name> <operator>-</operator> <name><name>splitStr</name><operator>-&gt;</operator><name>slen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>bstr__memcmp</name> <argument_list>(<argument><expr><name><name>splitStr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>splitStr</name><operator>-&gt;</operator><name>slen</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>cb</name> <argument_list>(<argument><expr><name>parm</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>splitStr</name><operator>-&gt;</operator><name>slen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>cb</name> <argument_list>(<argument><expr><name>parm</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>str</name><operator>-&gt;</operator><name>slen</name></name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>genBstrList</name> <block>{
<decl_stmt><decl><type><name>_al_bstring</name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_al_bstrList</name></name> <modifier>*</modifier></type> <name>bl</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bscb</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ofs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>genBstrList</name></name> <modifier>*</modifier></type> <name>g</name> <init>= <expr><operator>(</operator>struct <name>genBstrList</name> <operator>*</operator><operator>)</operator> <name>parm</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>bl</name><operator>-&gt;</operator><name>qty</name></name> <operator>&gt;=</operator> <name><name>g</name><operator>-&gt;</operator><name>bl</name><operator>-&gt;</operator><name>mlen</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mlen</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>bl</name><operator>-&gt;</operator><name>mlen</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_al_bstring</name> <modifier>*</modifier></type> <name>tbl</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>bl</name><operator>-&gt;</operator><name>qty</name></name> <operator>&gt;=</operator> <name>mlen</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mlen</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>bl</name><operator>-&gt;</operator><name>mlen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mlen</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>tbl</name> <operator>=</operator> <operator>(</operator><name>_al_bstring</name> <operator>*</operator><operator>)</operator> <call><name>bstr__realloc</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>bl</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>_al_bstring</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>mlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tbl</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>bl</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <name>tbl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>bl</name><operator>-&gt;</operator><name>mlen</name></name> <operator>=</operator> <name>mlen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>bl</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>bl</name><operator>-&gt;</operator><name>qty</name></name></expr>]</index></name> <operator>=</operator> <call><name>_al_bmidstr</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>ofs</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>bl</name><operator>-&gt;</operator><name>qty</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name><name>struct</name> <name>_al_bstrList</name></name> <modifier>*</modifier></type> <name>_al_bsplit</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>splitChar</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>genBstrList</name></name></type> <name>g</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>str</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>str</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>.</operator><name>bl</name></name> <operator>=</operator> <operator>(</operator>struct <name>_al_bstrList</name> <operator>*</operator><operator>)</operator> <call><name>bstr__alloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>_al_bstrList</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>.</operator><name>bl</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>g</name><operator>.</operator><name>bl</name><operator>-&gt;</operator><name>mlen</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>.</operator><name>bl</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <operator>(</operator><name>_al_bstring</name> <operator>*</operator><operator>)</operator> <call><name>bstr__alloc</name> <argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>bl</name><operator>-&gt;</operator><name>mlen</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>_al_bstring</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>g</name><operator>.</operator><name>bl</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bstr__free</name> <argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>bl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><name>_al_bstring</name><operator>)</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>.</operator><name>bl</name><operator>-&gt;</operator><name>qty</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_al_bsplitcb</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>splitChar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bscb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_bstrListDestroy</name> <argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>bl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>g</name><operator>.</operator><name>bl</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name><name>struct</name> <name>_al_bstrList</name></name> <modifier>*</modifier></type> <name>_al_bsplitstr</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>splitStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>genBstrList</name></name></type> <name>g</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>str</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>str</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>.</operator><name>bl</name></name> <operator>=</operator> <operator>(</operator>struct <name>_al_bstrList</name> <operator>*</operator><operator>)</operator> <call><name>bstr__alloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>_al_bstrList</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>.</operator><name>bl</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>g</name><operator>.</operator><name>bl</name><operator>-&gt;</operator><name>mlen</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>.</operator><name>bl</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <operator>(</operator><name>_al_bstring</name> <operator>*</operator><operator>)</operator> <call><name>bstr__alloc</name> <argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>bl</name><operator>-&gt;</operator><name>mlen</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>_al_bstring</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>g</name><operator>.</operator><name>bl</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bstr__free</name> <argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>bl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><name>_al_bstring</name><operator>)</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>.</operator><name>bl</name><operator>-&gt;</operator><name>qty</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_al_bsplitstrcb</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>splitStr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bscb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_bstrListDestroy</name> <argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>bl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>g</name><operator>.</operator><name>bl</name></name></expr>;</return>
</block_content>}</block></function>







<function><type><name><name>struct</name> <name>_al_bstrList</name></name> <modifier>*</modifier></type> <name>_al_bsplits</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>splitStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>genBstrList</name></name></type> <name>g</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>str</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>str</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>splitStr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>splitStr</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>splitStr</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>.</operator><name>bl</name></name> <operator>=</operator> <operator>(</operator>struct <name>_al_bstrList</name> <operator>*</operator><operator>)</operator> <call><name>bstr__alloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>_al_bstrList</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>.</operator><name>bl</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>g</name><operator>.</operator><name>bl</name><operator>-&gt;</operator><name>mlen</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>.</operator><name>bl</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <operator>(</operator><name>_al_bstring</name> <operator>*</operator><operator>)</operator> <call><name>bstr__alloc</name> <argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>bl</name><operator>-&gt;</operator><name>mlen</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>_al_bstring</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>g</name><operator>.</operator><name>bl</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bstr__free</name> <argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>bl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>g</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><name>_al_bstring</name><operator>)</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>.</operator><name>bl</name><operator>-&gt;</operator><name>qty</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_bsplitscb</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>splitStr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bscb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_bstrListDestroy</name> <argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>bl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>g</name><operator>.</operator><name>bl</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__TURBOC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>__BORLANDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BSTRLIB_NOVSNP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSTRLIB_NOVSNP</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WATCOMC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exvsnprintf</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{r = _vsnprintf (b,n,f,a);}</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSTRLIB_NOVSNP</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exvsnprintf</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{vsprintf (b,f,a); r = -1;}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>START_VSNBUFF</name></cpp:macro> <cpp:value>(256)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>








<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exvsnprintf</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{r = vsnprintf (b,n,f,a);}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>BSTRLIB_NOVSNP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>START_VSNBUFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>START_VSNBUFF</name></cpp:macro> <cpp:value>(16)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
















<function><type><name>int</name></type> <name>_al_bformata</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>arglist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_al_bstring</name></type> <name>buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>fmt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> 
<operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>START_VSNBUFF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>START_VSNBUFF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>buff</name> <operator>=</operator> <call><name>_al_bfromcstralloc</name> <argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>buff</name> <operator>=</operator> <call><name>_al_bfromcstralloc</name> <argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>arglist</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exvsnprintf</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>buff</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>arglist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>arglist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buff</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buff</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>strlen</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>buff</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buff</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>_AL_BSTR_OK</name> <operator>!=</operator> <call><name>_al_balloc</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_al_bconcat</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>_al_bassignformat</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>arglist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_al_bstring</name></type> <name>buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>fmt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> 
<operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>START_VSNBUFF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>START_VSNBUFF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>buff</name> <operator>=</operator> <call><name>_al_bfromcstralloc</name> <argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>buff</name> <operator>=</operator> <call><name>_al_bfromcstralloc</name> <argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>arglist</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exvsnprintf</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>buff</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>arglist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>arglist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buff</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buff</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>strlen</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>buff</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buff</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>_AL_BSTR_OK</name> <operator>!=</operator> <call><name>_al_balloc</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_al_bassign</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>_al_bstring</name></type> <name>_al_bformat</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>arglist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_al_bstring</name></type> <name>buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>START_VSNBUFF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>START_VSNBUFF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>buff</name> <operator>=</operator> <call><name>_al_bfromcstralloc</name> <argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>buff</name> <operator>=</operator> <call><name>_al_bfromcstralloc</name> <argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>arglist</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exvsnprintf</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>buff</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>arglist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>arglist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buff</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buff</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>strlen</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>buff</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buff</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>_AL_BSTR_OK</name> <operator>!=</operator> <call><name>_al_balloc</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_bdestroy</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>buff</name></expr>;</return>
</block_content>}</block></function>





















<function><type><name>int</name></type> <name>_al_bvcformata</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>fmt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>mlen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <operator>(</operator><name>n</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>+</operator> <name>count</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>_AL_BSTR_OK</name> <operator>!=</operator> <call><name>_al_balloc</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_AL_BSTR_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>exvsnprintf</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr></argument>, <argument><expr><name>count</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <operator>(</operator><name>l</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>strlen</name><operator>)</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>slen</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<return>return <expr><name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>slen</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name>count</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>l</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>count</name><operator>+</operator><name>count</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>l</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>l</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>_AL_BSTR_ERR</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>_AL_BSTR_ERR</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
