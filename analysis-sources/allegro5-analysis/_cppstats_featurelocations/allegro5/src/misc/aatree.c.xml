<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\misc\aatree.c">















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_AATREE</name></cpp:macro> <cpp:value>Aatree</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_aatree.h"</cpp:file></cpp:include>

<struct>struct <name>DelInfo</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_al_cmp_t</name></type> <name>compare</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Aatree</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Aatree</name> <modifier>*</modifier></type><name>deleted</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>Aatree</name></type> <name>nil</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>nil</name></expr>, <expr><operator>&amp;</operator><name>nil</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>Aatree</name> <modifier>*</modifier></type><name>skew</name><parameter_list>(<parameter><decl><type><name>Aatree</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>T</name> <operator>==</operator> <operator>&amp;</operator><name>nil</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>T</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>T</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <name><name>T</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Aatree</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><name><name>T</name><operator>-&gt;</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>T</name></expr>;</expr_stmt>
<return>return <expr><name>L</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>T</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Aatree</name> <modifier>*</modifier></type><name>split</name><parameter_list>(<parameter><decl><type><name>Aatree</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>T</name> <operator>==</operator> <operator>&amp;</operator><name>nil</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>T</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>T</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <name><name>T</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Aatree</name> <modifier>*</modifier></type><name>R</name> <init>= <expr><name><name>T</name><operator>-&gt;</operator><name>right</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name><name>R</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>T</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>R</name><operator>-&gt;</operator><name>level</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>R</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>T</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Aatree</name> <modifier>*</modifier></type><name>singleton</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Aatree</name> <modifier>*</modifier></type><name>T</name> <init>= <expr><call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Aatree</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <operator>&amp;</operator><name>nil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <operator>&amp;</operator><name>nil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return <expr><name>T</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Aatree</name> <modifier>*</modifier></type><name>doinsert</name><parameter_list>(<parameter><decl><type><name>Aatree</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><name>_al_cmp_t</name></type> <name>compare</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>T</name> <operator>==</operator> <operator>&amp;</operator><name>nil</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>singleton</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>compare</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>T</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <call><name>doinsert</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <call><name>doinsert</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<return>return <expr><name>T</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>T</name> <operator>=</operator> <call><name>skew</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>T</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>T</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Aatree</name> <modifier>*</modifier></type><name>_al_aa_insert</name><parameter_list>(<parameter><decl><type><name>Aatree</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><name>_al_cmp_t</name></type> <name>compare</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>T</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>T</name> <operator>=</operator> <operator>&amp;</operator><name>nil</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>doinsert</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>compare</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>_al_aa_search</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Aatree</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>_al_cmp_t</name></type> <name>compare</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>T</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>T</name> <operator>!=</operator> <operator>&amp;</operator><name>nil</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>compare</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>T</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>T</name><operator>-&gt;</operator><name>value</name></name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>T</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>T</name><operator>-&gt;</operator><name>left</name></name></expr> </then><else>: <expr><name><name>T</name><operator>-&gt;</operator><name>right</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Aatree</name> <modifier>*</modifier></type><name>dodelete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>DelInfo</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>Aatree</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>T</name> <operator>==</operator> <operator>&amp;</operator><name>nil</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>T</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>T</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>info</name><operator>-&gt;</operator><name>compare</name></name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>T</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <call><name>dodelete</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>T</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>ret_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>deleted</name></name> <operator>=</operator> <name>T</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <call><name>dodelete</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>T</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>ret_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>T</name> <operator>==</operator> <name><name>info</name><operator>-&gt;</operator><name>last</name></name> <operator>&amp;&amp;</operator>
<name><name>info</name><operator>-&gt;</operator><name>deleted</name></name> <operator>!=</operator> <operator>&amp;</operator><name>nil</name> <operator>&amp;&amp;</operator>
<call><name><name>info</name><operator>-&gt;</operator><name>compare</name></name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>deleted</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Aatree</name> <modifier>*</modifier></type><name>right</name> <init>= <expr><name><name>T</name><operator>-&gt;</operator><name>right</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>ret_value</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>deleted</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>deleted</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>deleted</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>deleted</name></name> <operator>=</operator> <operator>&amp;</operator><name>nil</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>right</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>T</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>level</name></name> <operator>&lt;</operator> <name><name>T</name><operator>-&gt;</operator><name>level</name></name> <operator>-</operator> <literal type="number">1</literal>
<operator>||</operator> <name><name>T</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>level</name></name> <operator>&lt;</operator> <name><name>T</name><operator>-&gt;</operator><name>level</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>level</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>T</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>level</name></name> <operator>&gt;</operator> <name><name>T</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>T</name> <operator>=</operator> <call><name>skew</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <call><name>skew</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <call><name>skew</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>T</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>T</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>Aatree</name> <modifier>*</modifier></type><name>_al_aa_delete</name><parameter_list>(<parameter><decl><type><name>Aatree</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>_al_cmp_t</name></type> <name>compare</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>DelInfo</name></name></type> <name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>compare</name></name> <operator>=</operator> <name>compare</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><name>nil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>deleted</name></name> <operator>=</operator> <operator>&amp;</operator><name>nil</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>T</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>T</name> <operator>=</operator> <call><name>dodelete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><name>ret_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>T</name> <operator>==</operator> <operator>&amp;</operator><name>nil</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>T</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>T</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_aa_free</name><parameter_list>(<parameter><decl><type><name>Aatree</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>T</name> <operator>&amp;&amp;</operator> <name>T</name> <operator>!=</operator> <operator>&amp;</operator><name>nil</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_aa_free</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_aa_free</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


</unit>
