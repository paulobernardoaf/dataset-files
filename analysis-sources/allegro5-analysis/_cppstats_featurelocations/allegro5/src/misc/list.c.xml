<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\misc\list.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_list.h"</cpp:file></cpp:include>


<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"list"</literal></argument>)</argument_list></macro>



<struct>struct <name>_AL_LIST</name> <block>{



<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>capacity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>item_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>item_size_with_extra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>next_free</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>user_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_LIST_DTOR</name></type> <name>dtor</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>_AL_LIST_ITEM</name> <block>{
<decl_stmt><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_LIST_ITEM_DTOR</name></type> <name>dtor</name></decl>;</decl_stmt>
}</block>;</struct>



<function_decl><type><specifier>static</specifier> <name>_AL_LIST</name><modifier>*</modifier></type> <name>list_do_create</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>item_extra_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>list_is_static</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>list_get_free_item</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>list_create_item</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>list_destroy_item</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name></decl></parameter>)</parameter_list>;</function_decl>




























<function><type><specifier>static</specifier> <name>_AL_LIST</name><modifier>*</modifier></type> <name>list_do_create</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>extra_item_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>memory_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>memory_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>






<expr_stmt><expr><name>memory_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_AL_LIST</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name>capacity</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>_AL_LIST_ITEM</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>extra_item_size</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>memory_ptr</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><call><name>al_malloc</name><argument_list>(<argument><expr><name>memory_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>memory_ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <operator>(</operator><name>_AL_LIST</name><operator>*</operator><operator>)</operator><name>memory_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>memory_ptr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_AL_LIST</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>capacity</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>item_size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_AL_LIST_ITEM</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>item_size_with_extra</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_AL_LIST_ITEM</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>extra_item_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>next_free</name></name> <operator>=</operator> <operator>(</operator><name>_AL_LIST_ITEM</name><operator>*</operator><operator>)</operator><name>memory_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>dtor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>



<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next_free</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>list</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>memory_ptr</name> <operator>+=</operator> <name><name>list</name><operator>-&gt;</operator><name>item_size_with_extra</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>(</operator><name>_AL_LIST_ITEM</name><operator>*</operator><operator>)</operator><name>memory_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <call><name>list_get_free_item</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>dtor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>

<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>bool</name></type> <name>list_is_static</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal> <operator>!=</operator> <name><name>list</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>list_get_free_item</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name></decl>;</decl_stmt>





<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next_free</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>item</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>next_free</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>list_create_item</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>list_is_static</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>list_get_free_item</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>(</operator><name>_AL_LIST_ITEM</name><operator>*</operator><operator>)</operator><call><name>al_malloc</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>item_size_with_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>list_destroy_item</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>list</name> <operator>==</operator> <name><name>item</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>item</name><operator>-&gt;</operator><name>dtor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>item</name><operator>-&gt;</operator><name>dtor</name></name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>list_is_static</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next_free</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>next_free</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>








<function><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>_al_list_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>list_do_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>_al_list_create_static</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>capacity</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Cannot create static list without any capacity."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>list_do_create</name><argument_list>(<argument><expr><name>capacity</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>_al_list_destroy</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>dtor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>list</name><operator>-&gt;</operator><name>dtor</name></name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_list_clear</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>_al_list_set_dtor</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_DTOR</name></type> <name>dtor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>dtor</name></name> <operator>=</operator> <name>dtor</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>_AL_LIST_DTOR</name></type> <name>_al_list_get_dtor</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>list</name><operator>-&gt;</operator><name>dtor</name></name></expr>;</return>
</block_content>}</block></function>







<function><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>_al_list_push_front</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_list_insert_after</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>_al_list_push_front_ex</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM_DTOR</name></type> <name>dtor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_list_insert_after_ex</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dtor</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>_al_list_push_back</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_list_insert_before</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>_al_list_push_back_ex</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM_DTOR</name></type> <name>dtor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_list_insert_before_ex</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dtor</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>_al_list_pop_front</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_al_list_erase</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>_al_list_pop_back</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_al_list_erase</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>_al_list_insert_after</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>where</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_list_insert_after_ex</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>_al_list_insert_after_ex</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>where</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM_DTOR</name></type> <name>dtor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>list</name> <operator>==</operator> <name><name>where</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>list_create_item</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>item</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>dtor</name></name> <operator>=</operator> <name>dtor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>where</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>where</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>where</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>where</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>_al_list_insert_before</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>where</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_list_insert_before_ex</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>_al_list_insert_before_ex</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>where</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM_DTOR</name></type> <name>dtor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>list</name> <operator>==</operator> <name><name>where</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>list_create_item</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>item</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>dtor</name></name> <operator>=</operator> <name>dtor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>where</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>where</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>where</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>where</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>_al_list_erase</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>item</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>list</name> <operator>==</operator> <name><name>item</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_destroy_item</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>_al_list_clear</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>_al_list_front</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>item</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>_al_list_next</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_list_erase</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>_al_list_remove</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>next</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>_al_list_find_first</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>item</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>_al_list_find_after</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_list_erase</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>_al_list_is_empty</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal> <operator>==</operator> <name><name>list</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>_al_list_contains</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>NULL</name> <operator>!=</operator> <call><name>_al_list_find_first</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>_al_list_find_first</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_list_find_after</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>_al_list_find_last</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_list_find_before</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>_al_list_find_after</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>where</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>list</name> <operator>==</operator> <name><name>where</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>item</name> <operator>=</operator> <name><name>where</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>item</name> <operator>!=</operator> <name><name>list</name><operator>-&gt;</operator><name>root</name></name></expr>;</condition> <incr><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>item</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>_al_list_find_before</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>where</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>list</name> <operator>==</operator> <name><name>where</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>item</name> <operator>=</operator> <name><name>where</name><operator>-&gt;</operator><name>prev</name></name></expr>;</init> <condition><expr><name>item</name> <operator>!=</operator> <name><name>list</name><operator>-&gt;</operator><name>root</name></name></expr>;</condition> <incr><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>prev</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>item</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>size_t</name></type> <name>_al_list_size</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>_al_list_at</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>list</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>index</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>prev</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>index</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>index</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>_al_list_front</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>list</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>next</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>_al_list_back</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>list</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>prev</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>_al_list_next</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>list</name> <operator>==</operator> <name><name>item</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>list</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name><name>item</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>_al_list_previous</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>list</name> <operator>==</operator> <name><name>item</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>list</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>prev</name></name> <operator>!=</operator> <name><name>item</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>prev</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>






<function><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>_al_list_next_circular</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>list</name> <operator>==</operator> <name><name>item</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name><name>item</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>list</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>next</name></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>






<function><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>_al_list_previous_circular</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>list</name> <operator>==</operator> <name><name>item</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>prev</name></name> <operator>!=</operator> <name><name>item</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>prev</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>list</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>prev</name></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name><modifier>*</modifier></type> <name>_al_list_item_data</name><parameter_list>(<parameter><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>_al_list_item_set_dtor</name><parameter_list>(<parameter><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM_DTOR</name></type> <name>dtor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>dtor</name></name> <operator>=</operator> <name>dtor</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>_AL_LIST_ITEM_DTOR</name></type> <name>_al_list_item_get_dtor</name><parameter_list>(<parameter><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>dtor</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>_al_list_set_user_data</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>user_data</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name><modifier>*</modifier></type> <name>_al_list_get_user_data</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>list</name><operator>-&gt;</operator><name>user_data</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
