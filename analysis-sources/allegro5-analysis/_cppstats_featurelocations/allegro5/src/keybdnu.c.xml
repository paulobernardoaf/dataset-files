<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\keybdnu.c">




















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_NO_COMPATIBILITY</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_events.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_exitfunc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_keyboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>




<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_KEYBOARD_DRIVER</name> <modifier>*</modifier></type><name>new_keyboard_driver</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>








<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>_al_keyboard_common_names</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">"(none)"</literal></expr>, <expr><literal type="string">"A"</literal></expr>, <expr><literal type="string">"B"</literal></expr>, <expr><literal type="string">"C"</literal></expr>,
<expr><literal type="string">"D"</literal></expr>, <expr><literal type="string">"E"</literal></expr>, <expr><literal type="string">"F"</literal></expr>, <expr><literal type="string">"G"</literal></expr>,
<expr><literal type="string">"H"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><literal type="string">"J"</literal></expr>, <expr><literal type="string">"K"</literal></expr>,
<expr><literal type="string">"L"</literal></expr>, <expr><literal type="string">"M"</literal></expr>, <expr><literal type="string">"N"</literal></expr>, <expr><literal type="string">"O"</literal></expr>,
<expr><literal type="string">"P"</literal></expr>, <expr><literal type="string">"Q"</literal></expr>, <expr><literal type="string">"R"</literal></expr>, <expr><literal type="string">"S"</literal></expr>,
<expr><literal type="string">"T"</literal></expr>, <expr><literal type="string">"U"</literal></expr>, <expr><literal type="string">"V"</literal></expr>, <expr><literal type="string">"W"</literal></expr>,
<expr><literal type="string">"X"</literal></expr>, <expr><literal type="string">"Y"</literal></expr>, <expr><literal type="string">"Z"</literal></expr>, <expr><literal type="string">"0"</literal></expr>,
<expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"3"</literal></expr>, <expr><literal type="string">"4"</literal></expr>,
<expr><literal type="string">"5"</literal></expr>, <expr><literal type="string">"6"</literal></expr>, <expr><literal type="string">"7"</literal></expr>, <expr><literal type="string">"8"</literal></expr>,
<expr><literal type="string">"9"</literal></expr>, <expr><literal type="string">"PAD 0"</literal></expr>, <expr><literal type="string">"PAD 1"</literal></expr>, <expr><literal type="string">"PAD 2"</literal></expr>,
<expr><literal type="string">"PAD 3"</literal></expr>, <expr><literal type="string">"PAD 4"</literal></expr>, <expr><literal type="string">"PAD 5"</literal></expr>, <expr><literal type="string">"PAD 6"</literal></expr>,
<expr><literal type="string">"PAD 7"</literal></expr>, <expr><literal type="string">"PAD 8"</literal></expr>, <expr><literal type="string">"PAD 9"</literal></expr>, <expr><literal type="string">"F1"</literal></expr>,
<expr><literal type="string">"F2"</literal></expr>, <expr><literal type="string">"F3"</literal></expr>, <expr><literal type="string">"F4"</literal></expr>, <expr><literal type="string">"F5"</literal></expr>,
<expr><literal type="string">"F6"</literal></expr>, <expr><literal type="string">"F7"</literal></expr>, <expr><literal type="string">"F8"</literal></expr>, <expr><literal type="string">"F9"</literal></expr>,
<expr><literal type="string">"F10"</literal></expr>, <expr><literal type="string">"F11"</literal></expr>, <expr><literal type="string">"F12"</literal></expr>, <expr><literal type="string">"ESCAPE"</literal></expr>,
<expr><literal type="string">"KEY60"</literal></expr>, <expr><literal type="string">"KEY61"</literal></expr>, <expr><literal type="string">"KEY62"</literal></expr>, <expr><literal type="string">"BACKSPACE"</literal></expr>,
<expr><literal type="string">"TAB"</literal></expr>, <expr><literal type="string">"KEY65"</literal></expr>, <expr><literal type="string">"KEY66"</literal></expr>, <expr><literal type="string">"ENTER"</literal></expr>,
<expr><literal type="string">"KEY68"</literal></expr>, <expr><literal type="string">"KEY69"</literal></expr>, <expr><literal type="string">"BACKSLASH"</literal></expr>, <expr><literal type="string">"KEY71"</literal></expr>,
<expr><literal type="string">"KEY72"</literal></expr>, <expr><literal type="string">"KEY73"</literal></expr>, <expr><literal type="string">"KEY74"</literal></expr>, <expr><literal type="string">"SPACE"</literal></expr>,
<expr><literal type="string">"INSERT"</literal></expr>, <expr><literal type="string">"DELETE"</literal></expr>, <expr><literal type="string">"HOME"</literal></expr>, <expr><literal type="string">"END"</literal></expr>,
<expr><literal type="string">"PGUP"</literal></expr>, <expr><literal type="string">"PGDN"</literal></expr>, <expr><literal type="string">"LEFT"</literal></expr>, <expr><literal type="string">"RIGHT"</literal></expr>,
<expr><literal type="string">"UP"</literal></expr>, <expr><literal type="string">"DOWN"</literal></expr>, <expr><literal type="string">"PAD /"</literal></expr>, <expr><literal type="string">"PAD *"</literal></expr>,
<expr><literal type="string">"PAD -"</literal></expr>, <expr><literal type="string">"PAD +"</literal></expr>, <expr><literal type="string">"PAD DELETE"</literal></expr>, <expr><literal type="string">"PAD ENTER"</literal></expr>,
<expr><literal type="string">"PRINTSCREEN"</literal></expr>,<expr><literal type="string">"PAUSE"</literal></expr>, <expr><literal type="string">"KEY94"</literal></expr>, <expr><literal type="string">"KEY95"</literal></expr>,
<expr><literal type="string">"KEY96"</literal></expr>, <expr><literal type="string">"KEY97"</literal></expr>, <expr><literal type="string">"KEY98"</literal></expr>, <expr><literal type="string">"KEY99"</literal></expr>,
<expr><literal type="string">"KEY100"</literal></expr>, <expr><literal type="string">"KEY101"</literal></expr>, <expr><literal type="string">"KEY102"</literal></expr>, <expr><literal type="string">"PAD ="</literal></expr>,
<expr><literal type="string">"KEY104"</literal></expr>, <expr><literal type="string">"KEY105"</literal></expr>, <expr><literal type="string">"KEY106"</literal></expr>, <expr><literal type="string">"KEY107"</literal></expr>,
<expr><literal type="string">"KEY108"</literal></expr>, <expr><literal type="string">"KEY109"</literal></expr>, <expr><literal type="string">"KEY110"</literal></expr>, <expr><literal type="string">"KEY111"</literal></expr>,
<expr><literal type="string">"KEY112"</literal></expr>, <expr><literal type="string">"KEY113"</literal></expr>, <expr><literal type="string">"KEY114"</literal></expr>, <expr><literal type="string">"KEY115"</literal></expr>,
<expr><literal type="string">"KEY116"</literal></expr>, <expr><literal type="string">"KEY117"</literal></expr>, <expr><literal type="string">"KEY118"</literal></expr>, <expr><literal type="string">"KEY119"</literal></expr>,
<expr><literal type="string">"KEY120"</literal></expr>, <expr><literal type="string">"KEY121"</literal></expr>, <expr><literal type="string">"KEY122"</literal></expr>, <expr><literal type="string">"KEY123"</literal></expr>,
<expr><literal type="string">"KEY124"</literal></expr>, <expr><literal type="string">"KEY125"</literal></expr>, <expr><literal type="string">"KEY126"</literal></expr>, <expr><literal type="string">"KEY127"</literal></expr>,
<expr><literal type="string">"KEY128"</literal></expr>, <expr><literal type="string">"KEY129"</literal></expr>, <expr><literal type="string">"KEY130"</literal></expr>, <expr><literal type="string">"KEY131"</literal></expr>,
<expr><literal type="string">"KEY132"</literal></expr>, <expr><literal type="string">"KEY133"</literal></expr>, <expr><literal type="string">"KEY134"</literal></expr>, <expr><literal type="string">"KEY135"</literal></expr>,
<expr><literal type="string">"KEY136"</literal></expr>, <expr><literal type="string">"KEY137"</literal></expr>, <expr><literal type="string">"KEY138"</literal></expr>, <expr><literal type="string">"KEY139"</literal></expr>,
<expr><literal type="string">"KEY140"</literal></expr>, <expr><literal type="string">"KEY141"</literal></expr>, <expr><literal type="string">"KEY142"</literal></expr>, <expr><literal type="string">"KEY143"</literal></expr>,
<expr><literal type="string">"KEY144"</literal></expr>, <expr><literal type="string">"KEY145"</literal></expr>, <expr><literal type="string">"KEY146"</literal></expr>, <expr><literal type="string">"KEY147"</literal></expr>,
<expr><literal type="string">"KEY148"</literal></expr>, <expr><literal type="string">"KEY149"</literal></expr>, <expr><literal type="string">"KEY150"</literal></expr>, <expr><literal type="string">"KEY151"</literal></expr>,
<expr><literal type="string">"KEY152"</literal></expr>, <expr><literal type="string">"KEY153"</literal></expr>, <expr><literal type="string">"KEY154"</literal></expr>, <expr><literal type="string">"KEY155"</literal></expr>,
<expr><literal type="string">"KEY156"</literal></expr>, <expr><literal type="string">"KEY157"</literal></expr>, <expr><literal type="string">"KEY158"</literal></expr>, <expr><literal type="string">"KEY159"</literal></expr>,
<expr><literal type="string">"KEY160"</literal></expr>, <expr><literal type="string">"KEY161"</literal></expr>, <expr><literal type="string">"KEY162"</literal></expr>, <expr><literal type="string">"KEY163"</literal></expr>,
<expr><literal type="string">"KEY164"</literal></expr>, <expr><literal type="string">"KEY165"</literal></expr>, <expr><literal type="string">"KEY166"</literal></expr>, <expr><literal type="string">"KEY167"</literal></expr>,
<expr><literal type="string">"KEY168"</literal></expr>, <expr><literal type="string">"KEY169"</literal></expr>, <expr><literal type="string">"KEY170"</literal></expr>, <expr><literal type="string">"KEY171"</literal></expr>,
<expr><literal type="string">"KEY172"</literal></expr>, <expr><literal type="string">"KEY173"</literal></expr>, <expr><literal type="string">"KEY174"</literal></expr>, <expr><literal type="string">"KEY175"</literal></expr>,
<expr><literal type="string">"KEY176"</literal></expr>, <expr><literal type="string">"KEY177"</literal></expr>, <expr><literal type="string">"KEY178"</literal></expr>, <expr><literal type="string">"KEY179"</literal></expr>,
<expr><literal type="string">"KEY180"</literal></expr>, <expr><literal type="string">"KEY181"</literal></expr>, <expr><literal type="string">"KEY182"</literal></expr>, <expr><literal type="string">"KEY183"</literal></expr>,
<expr><literal type="string">"KEY184"</literal></expr>, <expr><literal type="string">"KEY185"</literal></expr>, <expr><literal type="string">"KEY186"</literal></expr>, <expr><literal type="string">"KEY187"</literal></expr>,
<expr><literal type="string">"KEY188"</literal></expr>, <expr><literal type="string">"KEY189"</literal></expr>, <expr><literal type="string">"KEY190"</literal></expr>, <expr><literal type="string">"KEY191"</literal></expr>,
<expr><literal type="string">"KEY192"</literal></expr>, <expr><literal type="string">"KEY193"</literal></expr>, <expr><literal type="string">"KEY194"</literal></expr>, <expr><literal type="string">"KEY195"</literal></expr>,
<expr><literal type="string">"KEY196"</literal></expr>, <expr><literal type="string">"KEY197"</literal></expr>, <expr><literal type="string">"KEY198"</literal></expr>, <expr><literal type="string">"KEY199"</literal></expr>,
<expr><literal type="string">"KEY200"</literal></expr>, <expr><literal type="string">"KEY201"</literal></expr>, <expr><literal type="string">"KEY202"</literal></expr>, <expr><literal type="string">"KEY203"</literal></expr>,
<expr><literal type="string">"KEY204"</literal></expr>, <expr><literal type="string">"KEY205"</literal></expr>, <expr><literal type="string">"KEY206"</literal></expr>, <expr><literal type="string">"KEY207"</literal></expr>,
<expr><literal type="string">"KEY208"</literal></expr>, <expr><literal type="string">"KEY209"</literal></expr>, <expr><literal type="string">"KEY210"</literal></expr>, <expr><literal type="string">"KEY211"</literal></expr>,
<expr><literal type="string">"KEY212"</literal></expr>, <expr><literal type="string">"KEY213"</literal></expr>, <expr><literal type="string">"KEY214"</literal></expr>, <expr><literal type="string">"LSHIFT"</literal></expr>,
<expr><literal type="string">"RSHIFT"</literal></expr>, <expr><literal type="string">"LCTRL"</literal></expr>, <expr><literal type="string">"RCTRL"</literal></expr>, <expr><literal type="string">"ALT"</literal></expr>,
<expr><literal type="string">"ALTGR"</literal></expr>, <expr><literal type="string">"LWIN"</literal></expr>, <expr><literal type="string">"RWIN"</literal></expr>, <expr><literal type="string">"MENU"</literal></expr>,
<expr><literal type="string">"SCROLLLOCK"</literal></expr>, <expr><literal type="string">"NUMLOCK"</literal></expr>, <expr><literal type="string">"CAPSLOCK"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_STATIC_ASSERT</name><argument_list>(<argument><expr><name>keybdnu</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_al_keyboard_common_names</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>_al_keyboard_common_names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof>
<operator>==</operator> <name>ALLEGRO_KEY_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<function><type><name>bool</name></type> <name>al_is_keyboard_installed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>new_keyboard_driver</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>al_install_keyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>new_keyboard_driver</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>al_get_system_driver</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>vt</name><operator>-&gt;</operator><name>get_keyboard_driver</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_keyboard_driver</name> <operator>=</operator> <call><name>al_get_system_driver</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name><name>vt</name><operator>-&gt;</operator><name>get_keyboard_driver</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>new_keyboard_driver</name><operator>-&gt;</operator><name>init_keyboard</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_keyboard_driver</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>_al_add_exit_func</name><argument_list>(<argument><expr><name>al_uninstall_keyboard</name></expr></argument>, <argument><expr><literal type="string">"al_uninstall_keyboard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>




























</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_uninstall_keyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_keyboard_driver</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name><name>new_keyboard_driver</name><operator>-&gt;</operator><name>exit_keyboard</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_keyboard_driver</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>ALLEGRO_KEYBOARD</name> <modifier>*</modifier></type><name>al_get_keyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>new_keyboard_driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_KEYBOARD</name> <modifier>*</modifier></type><name>kbd</name> <init>= <expr><call><name><name>new_keyboard_driver</name><operator>-&gt;</operator><name>get_keyboard</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>kbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>kbd</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>al_set_keyboard_leds</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>leds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>new_keyboard_driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>new_keyboard_driver</name><operator>-&gt;</operator><name>set_keyboard_leds</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>new_keyboard_driver</name><operator>-&gt;</operator><name>set_keyboard_leds</name></name><argument_list>(<argument><expr><name>leds</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>al_keycode_to_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>keycode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>new_keyboard_driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>keycode</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>keycode</name> <operator>&lt;</operator> <name>ALLEGRO_KEY_MAX</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>new_keyboard_driver</name><operator>-&gt;</operator><name>keycode_to_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>new_keyboard_driver</name><operator>-&gt;</operator><name>keycode_to_name</name></name><argument_list>(<argument><expr><name>keycode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>_al_keyboard_common_names</name><index>[<expr><name>keycode</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_get_keyboard_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_KEYBOARD_STATE</name> <modifier>*</modifier></type><name>ret_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>new_keyboard_driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>new_keyboard_driver</name><operator>-&gt;</operator><name>get_keyboard_state</name></name><argument_list>(<argument><expr><name>ret_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_clear_keyboard_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>new_keyboard_driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_KEYBOARD_STATE</name></type> <name>ks</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>al_get_keyboard_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>keycode</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>keycode</name> <operator>=</operator> <name>ALLEGRO_KEY_A</name></expr>;</init> <condition><expr><name>keycode</name> <operator>&lt;</operator> <name>ALLEGRO_KEY_MAX</name></expr>;</condition> <incr><expr><name>keycode</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>al_key_down</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ks</name></expr></argument>, <argument><expr><name>keycode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_KEY_UP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <name>keycode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>unichar</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>modifiers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>new_keyboard_driver</name><operator>-&gt;</operator><name>clear_keyboard_state</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>al_key_down</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_KEYBOARD_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keycode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_AL_KEYBOARD_STATE_KEY_DOWN</name><argument_list>(<argument><expr><operator>*</operator><name>state</name></expr></argument>, <argument><expr><name>keycode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>al_get_keyboard_event_source</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_KEYBOARD</name> <modifier>*</modifier></type><name>keyboard</name> <init>= <expr><call><name>al_get_keyboard</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>keyboard</name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>keyboard</name><operator>-&gt;</operator><name>es</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>match_key_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ALLEGRO_KEY_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>_al_stricmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>_al_keyboard_common_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>match_modifier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>_al_stricmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"SHIFT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ALLEGRO_KEYMOD_SHIFT</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>_al_stricmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"CTRL"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ALLEGRO_KEYMOD_CTRL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>_al_stricmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"ALT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ALLEGRO_KEYMOD_ALT</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>_al_stricmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"LWIN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ALLEGRO_KEYMOD_LWIN</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>_al_stricmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"RWIN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ALLEGRO_KEYMOD_RWIN</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>_al_stricmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"ALTGR"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ALLEGRO_KEYMOD_ALTGR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>_al_stricmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"COMMAND"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ALLEGRO_KEYMOD_COMMAND</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>_al_parse_key_binding</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>modifiers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keycode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_trim_ws</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>modifiers</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>start</name> <operator>&lt;</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><call><name>al_ustr_find_set_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="string">"+-"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mod</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keycode</name> <operator>=</operator> <call><name>match_key_name</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>al_ustr_set_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mod</name> <operator>=</operator> <call><name>match_modifier</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mod</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>modifiers</name><operator>)</operator> <operator>|=</operator> <name>mod</name></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>keycode</name></expr>;</return>
</block_content>}</block></function>









</unit>
