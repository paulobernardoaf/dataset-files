<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\display.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_display.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_shader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>


<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"display"</literal></argument>)</argument_list></macro>




<function><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>al_create_display</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>system</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_INTERFACE</name> <modifier>*</modifier></type><name>driver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier></type><name>settings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>system</name> <operator>=</operator> <call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>driver</name> <operator>=</operator> <call><name><name>system</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>get_display_driver</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>driver</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to create display (no display driver)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name><name>driver</name><operator>-&gt;</operator><name>create_display</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to create display (NULL)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>settings</name> <operator>=</operator> <operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>extra_settings</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>settings</name><operator>-&gt;</operator><name>required</name></name> <operator>|</operator> <name><name>settings</name><operator>-&gt;</operator><name>suggested</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>ALLEGRO_AUTO_CONVERT_BITMAPS</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>settings</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_AUTO_CONVERT_BITMAPS</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>min_w</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>min_h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>max_w</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>max_h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>use_constraints</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>extra_resize_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>vertex_cache</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>num_cache_vertices</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>cache_enabled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>vertex_cache_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>cache_texture</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>projview_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>default_shader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>display_invalidated_callbacks</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>display_validated_callbacks</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>render_state</name><operator>.</operator><name>write_mask</name></name> <operator>=</operator> <name>ALLEGRO_MASK_RGBA</name> <operator>|</operator> <name>ALLEGRO_MASK_DEPTH</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>render_state</name><operator>.</operator><name>depth_test</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>render_state</name><operator>.</operator><name>depth_function</name></name> <operator>=</operator> <name>ALLEGRO_RENDER_LESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>render_state</name><operator>.</operator><name>alpha_test</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>render_state</name><operator>.</operator><name>alpha_function</name></name> <operator>=</operator> <name>ALLEGRO_RENDER_ALWAYS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>render_state</name><operator>.</operator><name>alpha_test_value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_BITMAP</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>settings</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_COMPATIBLE_DISPLAY</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><call><name>al_get_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"ALLEGRO_COMPATIBLE_DISPLAY not set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_set_current_display_only</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>default_shader</name></name> <operator>=</operator> <call><name>_al_create_default_shader</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>display</name><operator>-&gt;</operator><name>default_shader</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_destroy_display</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>al_use_shader</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>default_shader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>settings</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_COMPATIBLE_DISPLAY</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
al_flip_display();
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>settings</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_AUTO_CONVERT_BITMAPS</name></expr>]</index></name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>al_convert_memory_bitmaps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>display</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_destroy_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>display</name></expr>)</condition> <block>{<block_content>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bmp</name> <operator>&amp;&amp;</operator> <call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>display</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>display</name> <operator>==</operator> <call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_al_set_current_display_only</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>al_destroy_shader</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>default_shader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>default_shader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>destroy_display</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>al_get_backbuffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>get_backbuffer</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_flip_display</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>flip_display</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_update_display_region</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>update_display_region</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>al_acknowledge_resize</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>acknowledge_resize</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>acknowledge_resize</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>al_resize_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Requested display resize %dx%d+%d\n"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>extra_resize_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>resize_display</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>resize_display</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name> <operator>+</operator> <name><name>display</name><operator>-&gt;</operator><name>extra_resize_height</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>al_is_compatible_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>is_compatible_bitmap</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>al_get_display_width</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>display</name><operator>-&gt;</operator><name>w</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>al_get_display_height</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>display</name><operator>-&gt;</operator><name>h</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_get_display_format</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>display</name><operator>-&gt;</operator><name>backbuffer_format</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_get_display_refresh_rate</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>display</name><operator>-&gt;</operator><name>refresh_rate</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>al_get_display_flags</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_get_display_orientation</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name><modifier>*</modifier></type> <name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>display</name> <operator>&amp;&amp;</operator> <name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>get_orientation</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>get_orientation</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>ALLEGRO_DISPLAY_ORIENTATION_UNKNOWN</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_wait_for_vsync</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>wait_for_vsync</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>wait_for_vsync</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_set_display_icon</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>icon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name><name>icons</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>icon</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_set_display_icons</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>icons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_set_display_icons</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_icons</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name><name>icons</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>num_icons</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>icons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_icons</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>icons</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>set_icons</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>set_icons</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>num_icons</name></expr></argument>, <argument><expr><name>icons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_set_window_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name> <operator>&amp;&amp;</operator> <name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name> <operator>&amp;&amp;</operator> <name><name>display</name><operator>-&gt;</operator><name>vt</name></name> <operator>&amp;&amp;</operator> <name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>set_window_position</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>set_window_position</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_get_window_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name> <operator>&amp;&amp;</operator> <name><name>display</name><operator>-&gt;</operator><name>vt</name></name> <operator>&amp;&amp;</operator> <name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>get_window_position</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>get_window_position</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <operator>*</operator><name>y</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_set_window_constraints</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>min_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>min_w</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>min_h</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>max_w</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>max_h</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>min_w</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>max_w</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>max_w</name> <operator>&lt;</operator> <name>min_w</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>min_h</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>max_h</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>max_h</name> <operator>&lt;</operator> <name>min_h</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_RESIZABLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name> <operator>&amp;&amp;</operator> <name><name>display</name><operator>-&gt;</operator><name>vt</name></name> <operator>&amp;&amp;</operator> <name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>set_window_constraints</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>set_window_constraints</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>min_w</name></expr></argument>, <argument><expr><name>min_h</name></expr></argument>,
<argument><expr><name>max_w</name></expr></argument>, <argument><expr><name>max_h</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_get_window_constraints</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>min_w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>min_h</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>max_w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>max_h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>min_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>min_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>max_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>max_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name> <operator>&amp;&amp;</operator> <name><name>display</name><operator>-&gt;</operator><name>vt</name></name> <operator>&amp;&amp;</operator> <name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>get_window_constraints</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>get_window_constraints</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>min_w</name></expr></argument>, <argument><expr><name>min_h</name></expr></argument>,
<argument><expr><name>max_w</name></expr></argument>, <argument><expr><name>max_h</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_set_display_flag</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>onoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name> <operator>&amp;&amp;</operator> <name><name>display</name><operator>-&gt;</operator><name>vt</name></name> <operator>&amp;&amp;</operator> <name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>set_display_flag</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>set_display_flag</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>onoff</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_set_window_title</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>display</name> <operator>&amp;&amp;</operator> <name><name>display</name><operator>-&gt;</operator><name>vt</name></name> <operator>&amp;&amp;</operator> <name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>set_window_title</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>set_window_title</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>al_get_display_event_source</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>es</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_hold_bitmap_drawing</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>hold</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>current_display</name> <init>= <expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>current_display</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hold</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>current_display</name><operator>-&gt;</operator><name>cache_enabled</name></name></expr>)</condition> <block>{<block_content>






<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>old</name></decl>, <decl><type ref="prev"/><name>ident</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_copy_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old</name></expr></argument>, <argument><expr><call><name>al_get_current_transform</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current_display</name><operator>-&gt;</operator><name>cache_enabled</name></name> <operator>=</operator> <name>hold</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>current_display</name><operator>-&gt;</operator><name>cache_enabled</name></name> <operator>=</operator> <name>hold</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hold</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>current_display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>flush_vertex_cache</name></name><argument_list>(<argument><expr><name>current_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><call><name>al_get_current_transform</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>al_is_bitmap_drawing_held</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>current_display</name> <init>= <expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>current_display</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>current_display</name><operator>-&gt;</operator><name>cache_enabled</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_add_display_invalidated_callback</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name><modifier>*</modifier></type> <name>display</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>display_invalidated</name>)<parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_al_vector_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>display_invalidated_callbacks</name></name></expr></argument>, <argument><expr><name>display_invalidated</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>display_invalidated_callbacks</name></name></expr></argument>)</argument_list></call></expr></init>;</function_decl>
<expr_stmt><expr><operator>*</operator><name>callback</name> <operator>=</operator> <name>display_invalidated</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_add_display_validated_callback</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name><modifier>*</modifier></type> <name>display</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>display_validated</name>)<parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_al_vector_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>display_validated_callbacks</name></name></expr></argument>, <argument><expr><name>display_validated</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>display_validated_callbacks</name></name></expr></argument>)</argument_list></call></expr></init>;</function_decl>
<expr_stmt><expr><operator>*</operator><name>callback</name> <operator>=</operator> <name>display_validated</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_remove_display_invalidated_callback</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_al_vector_find_and_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>display_invalidated_callbacks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_remove_display_validated_callback</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_al_vector_find_and_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>display_validated_callbacks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_acknowledge_drawing_halt</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>acknowledge_drawing_halt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>acknowledge_drawing_halt</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_acknowledge_drawing_resume</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>acknowledge_drawing_resume</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>acknowledge_drawing_resume</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_set_render_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_RENDER_STATE</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_ALPHA_TEST</name></expr>:</case>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>render_state</name><operator>.</operator><name>alpha_test</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_WRITE_MASK</name></expr>:</case>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>render_state</name><operator>.</operator><name>write_mask</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_DEPTH_TEST</name></expr>:</case>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>render_state</name><operator>.</operator><name>depth_test</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_DEPTH_FUNCTION</name></expr>:</case>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>render_state</name><operator>.</operator><name>depth_function</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_ALPHA_FUNCTION</name></expr>:</case>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>render_state</name><operator>.</operator><name>alpha_function</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_ALPHA_TEST_VALUE</name></expr>:</case>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>render_state</name><operator>.</operator><name>alpha_test_value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"unknown state to change: %d\n"</literal></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>vt</name></name> <operator>&amp;&amp;</operator> <name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>update_render_state</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>update_render_state</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_backup_dirty_bitmaps</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>display</name><operator>-&gt;</operator><name>bitmaps</name><operator>.</operator><name>_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>bptr</name> <init>= <expr><operator>(</operator><name>ALLEGRO_BITMAP</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name> <init>= <expr><operator>*</operator><name>bptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>display</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bmp</name><operator>-&gt;</operator><name>vt</name></name> <operator>&amp;&amp;</operator> <name><name>bmp</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>backup_dirty_bitmap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>bmp</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>backup_dirty_bitmap</name></name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_apply_window_constraints</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>onoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>use_constraints</name></name> <operator>=</operator> <name>onoff</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>vt</name></name> <operator>&amp;&amp;</operator> <name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>apply_window_constraints</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>apply_window_constraints</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>onoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


</unit>
