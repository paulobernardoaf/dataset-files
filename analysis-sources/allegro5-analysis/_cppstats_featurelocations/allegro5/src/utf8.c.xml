<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\utf8.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/utf8.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/bstrlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ALLEGRO_STATIC_ASSERT</name><argument_list>(<argument><expr><name>utf8</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_USTR_INFO</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>_al_tagbstring</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_MSVC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name> <name>(</name><name>disable</name><name>:</name> <name>4066</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_HAVE_VA_COPY</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>va_copy</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) = (b))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SINGLE_BYTE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((unsigned)(c) &amp; 0x80) == 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_LEAD_BYTE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((unsigned)(c) - 0xC0) &lt; 0x3E)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_TRAIL_BYTE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((unsigned)(c) &amp; 0xC0) == 0x80)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>all_ascii</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>_al_bdata</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>_al_blength</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>size</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>al_ustr_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_bfromcstr</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>al_ustr_new_from_buffer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_blk2bstr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>al_ustr_newf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_vappendf</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>us</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_ustr_free</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_al_bdestroy</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>al_cstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><call><name>_al_bdata</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_ustr_to_buffer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>need</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>need</name> <operator>=</operator> <call><name>_al_blength</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>need</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>need</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>_al_sane_strncpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>_al_bdata</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>char</name> <modifier>*</modifier></type><name>al_cstr_dup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_bstr2cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>al_ustr_dup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_bstrcpy</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>al_ustr_dup_substr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_pos</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>end_pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_bmidstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>end_pos</name> <operator>-</operator> <name>start_pos</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>al_ustr_empty_string</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>_al_tagbstring</name></name></type> <name>empty</name> <init>= <expr><call><name>_al_bsStatic</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>&amp;</operator><name>empty</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>al_ref_cstr</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_al_tagbstring</name></name> <modifier>*</modifier></type><name>tb</name> <init>= <expr><operator>(</operator>struct <name>_al_tagbstring</name> <operator>*</operator><operator>)</operator> <name>info</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_btfromcstr</name><argument_list>(<argument><expr><operator>*</operator><name>tb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tb</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>al_ref_buffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_al_tagbstring</name></name> <modifier>*</modifier></type><name>tb</name> <init>= <expr><operator>(</operator>struct <name>_al_tagbstring</name> <operator>*</operator><operator>)</operator> <name>info</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_blk2tbstr</name><argument_list>(<argument><expr><operator>*</operator><name>tb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tb</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>al_ref_ustr</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>start_pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_al_tagbstring</name></name> <modifier>*</modifier></type><name>tb</name> <init>= <expr><operator>(</operator>struct <name>_al_tagbstring</name> <operator>*</operator><operator>)</operator> <name>info</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_bmid2tbstr</name><argument_list>(<argument><expr><operator>*</operator><name>tb</name></expr></argument>, <argument><expr><name>us</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>end_pos</name> <operator>-</operator> <name>start_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tb</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>size_t</name></type> <name>al_ustr_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_blength</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>size_t</name></type> <name>al_ustr_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>al_ustr_next</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_ustr_offset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index</name> <operator>+=</operator> <call><name>al_ustr_length</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>index</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_ustr_next</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>pos</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>pos</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>_al_bdata</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>_al_blength</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pos</name> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>++</operator><operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>data</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_SINGLE_BYTE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_LEAD_BYTE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_prev</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>_al_bdata</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pos</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>data</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_SINGLE_BYTE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_LEAD_BYTE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int32_t</name></type> <name>al_ustr_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>ub</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>remain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>minc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>_al_bchare</name><argument_list>(<argument><expr><name>ub</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0x7F</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0xC1</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>EILSEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0xDF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>&amp;=</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>remain</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>minc</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0xEF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>&amp;=</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>remain</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>minc</name> <operator>=</operator> <literal type="number">0x800</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0xF4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>&amp;=</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>remain</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>minc</name> <operator>=</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>EILSEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <name>remain</name> <operator>&gt;</operator> <call><name>_al_blength</name><argument_list>(<argument><expr><name>ub</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>EILSEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>_al_bdata</name><argument_list>(<argument><expr><name>ub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>remain</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>data</name><index>[<expr><operator>++</operator><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_TRAIL_BYTE</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>EILSEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>d</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>






<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <name>minc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>EILSEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int32_t</name></type> <name>al_ustr_get_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>*</operator><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator> <operator>+=</operator> <call><name>al_utf8_width</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>al_ustr_next</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int32_t</name></type> <name>al_ustr_prev_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>al_ustr_prev</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>*</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_insert</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_binsert</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>us2</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_insert_cstr</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>;</decl_stmt>

<return>return <expr><call><name>al_ustr_insert</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>size_t</name></type> <name>al_ustr_insert_chr</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>uc</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>_al_binsertch</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>_AL_BSTR_OK</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>al_utf8_width</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_al_binsertch</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>_AL_BSTR_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>_al_bdataofs</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>al_utf8_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_append</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_bconcat</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><name>us2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_append_cstr</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_bcatcstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>size_t</name></type> <name>al_ustr_append_chr</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>uc</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>_al_bconchar</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>_AL_BSTR_OK</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>al_ustr_insert_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_appendf</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>al_ustr_vappendf</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_vappendf</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>arglist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGMODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>arglist</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_al_bvcformata</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>arglist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arglist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>_AL_BSTR_ERR</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>sz</name> <operator>=</operator> <operator>-</operator><name>rc</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_remove_chr</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>al_utf8_width</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>_al_bdelete</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_remove_range</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_bdelete</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>end_pos</name> <operator>-</operator> <name>start_pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_truncate</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_btrunc</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_ltrim_ws</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_bltrimws</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_rtrim_ws</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_brtrimws</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_trim_ws</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_btrimws</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_assign</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_bassign</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><name>us2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_assign_substr</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>start_pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>_al_bassignmidstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><name>us2</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>end_pos</name> <operator>-</operator> <name>start_pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>rc</name> <operator>==</operator> <name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_assign_cstr</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_bassigncstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>size_t</name></type> <name>al_ustr_set_chr</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_pos</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>oldc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>oldw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>neww</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>oldc</name> <operator>=</operator> <call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>oldc</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>oldw</name> <operator>=</operator> <call><name>al_utf8_width</name><argument_list>(<argument><expr><name>oldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>neww</name> <operator>=</operator> <call><name>al_utf8_width</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>neww</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>oldw</name> <operator>&gt;</operator> <name>neww</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_al_bdelete</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>oldw</name> <operator>-</operator> <name>neww</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>neww</name> <operator>&gt;</operator> <name>oldw</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_al_binsertch</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>neww</name> <operator>-</operator> <name>oldw</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>_AL_BSTR_OK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>_AL_BSTR_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>_al_bdataofs</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>al_utf8_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_replace_range</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_pos1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_pos1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_breplace</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><name>start_pos1</name></expr></argument>, <argument><expr><name>end_pos1</name> <operator>-</operator> <name>start_pos1</name></expr></argument>, <argument><expr><name>us2</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call>
<operator>==</operator> <name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_ustr_find_chr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_pos</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>encc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sizec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_al_tagbstring</name></name></type> <name>enctb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_al_bstrchrp</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>_AL_BSTR_ERR</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>rc</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>sizec</name> <operator>=</operator> <call><name>al_utf8_encode</name><argument_list>(<argument><expr><name>encc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sizec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_blk2tbstr</name><argument_list>(<argument><expr><name>enctb</name></expr></argument>, <argument><expr><name>encc</name></expr></argument>, <argument><expr><name>sizec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_al_binstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enctb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>_AL_BSTR_ERR</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>rc</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_ustr_rfind_chr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_pos</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>encc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sizec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_al_tagbstring</name></name></type> <name>enctb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_al_bstrrchrp</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>end_pos</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>_AL_BSTR_ERR</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>rc</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>sizec</name> <operator>=</operator> <call><name>al_utf8_encode</name><argument_list>(<argument><expr><name>encc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sizec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_blk2tbstr</name><argument_list>(<argument><expr><name>enctb</name></expr></argument>, <argument><expr><name>encc</name></expr></argument>, <argument><expr><name>sizec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_al_binstrr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>end_pos</name> <operator>-</operator> <name>sizec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enctb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>_AL_BSTR_ERR</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>rc</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_ustr_find_set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_pos</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>accept</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>set_pos</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>all_ascii</name><argument_list>(<argument><expr><name>accept</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_al_binchr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>accept</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>_AL_BSTR_ERR</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>rc</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>set_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <call><name>al_ustr_get_next</name><argument_list>(<argument><expr><name>accept</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set_pos</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>pos</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>al_utf8_width</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_ustr_find_set_cstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_pos</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>accept</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>accept_us</name> <init>= <expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>accept</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>al_ustr_find_set</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>accept_us</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_ustr_find_cset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_pos</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>reject</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>set_pos</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>all_ascii</name><argument_list>(<argument><expr><name>reject</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_al_bninchr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>reject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>_AL_BSTR_ERR</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>rc</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>set_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <call><name>al_ustr_get_next</name><argument_list>(<argument><expr><name>reject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set_pos</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>pos</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>al_utf8_width</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_ustr_find_cset_cstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_pos</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reject</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>reject_us</name> <init>= <expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>reject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>al_ustr_find_cset</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>reject_us</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_ustr_find_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>haystack</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_pos</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>needle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>_al_binstr</name><argument_list>(<argument><expr><name>haystack</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>needle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>_AL_BSTR_ERR</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>rc</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_ustr_find_cstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>haystack</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_pos</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>needle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>needle_us</name> <init>= <expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>needle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>al_ustr_find_str</name><argument_list>(<argument><expr><name>haystack</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>needle_us</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_ustr_rfind_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>haystack</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_pos</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>needle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>_al_binstrr</name><argument_list>(<argument><expr><name>haystack</name></expr></argument>, <argument><expr><name>end_pos</name> <operator>-</operator> <call><name>_al_blength</name><argument_list>(<argument><expr><name>needle</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>needle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>_AL_BSTR_ERR</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>rc</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_ustr_rfind_cstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>haystack</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_pos</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>needle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>needle_us</name> <init>= <expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>needle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>al_ustr_rfind_str</name><argument_list>(<argument><expr><name>haystack</name></expr></argument>, <argument><expr><name>end_pos</name></expr></argument>, <argument><expr><name>needle_us</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_find_replace</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_pos</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>find</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>replace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_bfindreplace</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>find</name></expr></argument>, <argument><expr><name>replace</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>_AL_BSTR_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_find_replace_cstr</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_pos</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>find</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>replace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>find_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>repl_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>find_us</name> <init>= <expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>find_info</name></expr></argument>, <argument><expr><name>find</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>repl_us</name> <init>= <expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repl_info</name></expr></argument>, <argument><expr><name>replace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>al_ustr_find_replace</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>find_us</name></expr></argument>, <argument><expr><name>repl_us</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_equal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_biseq</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><name>us2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_ustr_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>c1</name> <init>= <expr><call><name>al_ustr_get_next</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>c2</name> <init>= <expr><call><name>al_ustr_get_next</name><argument_list>(<argument><expr><name>us2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>c1</name> <operator>-</operator> <name>c2</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_ustr_ncompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>c1</name> <init>= <expr><call><name>al_ustr_get_next</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>c2</name> <init>= <expr><call><name>al_ustr_get_next</name><argument_list>(<argument><expr><name>us2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>c1</name> <operator>-</operator> <name>c2</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>--</operator><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_has_prefix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal> <operator>==</operator> <call><name>_al_bstrncmp</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><name>us2</name></expr></argument>, <argument><expr><call><name>_al_blength</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_has_prefix_cstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name> <init>= <expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>al_ustr_has_prefix</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_has_suffix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_al_tagbstring</name></name></type> <name>tb1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>_al_blength</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>_al_blength</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_bmid2tbstr</name><argument_list>(<argument><expr><name>tb1</name></expr></argument>, <argument><expr><name>us1</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>_al_biseq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb1</name></expr></argument>, <argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_ustr_has_suffix_cstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name> <init>= <expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>al_ustr_has_suffix</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>size_t</name></type> <name>al_utf8_width</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>uint32_t</name></type> <name>uc</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&lt;=</operator> <literal type="number">0x7f</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&lt;=</operator> <literal type="number">0x7ff</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&lt;=</operator> <literal type="number">0xffff</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&lt;=</operator> <literal type="number">0x10ffff</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>size_t</name></type> <name>al_utf8_encode</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name><name>s</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>uc</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&lt;=</operator> <literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>uc</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&lt;=</operator> <literal type="number">0x7ff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xC0</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>uc</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&lt;=</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xE0</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>uc</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&lt;=</operator> <literal type="number">0x10ffff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xF0</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>uc</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>size_t</name></type> <name>al_utf16_width</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>uint32_t</name></type> <name>uc</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&lt;=</operator> <literal type="number">0xffff</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&lt;=</operator> <literal type="number">0x10ffff</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>size_t</name></type> <name>al_utf16_encode</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name><name>s</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>uc</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&lt;=</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>uc</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&lt;=</operator> <literal type="number">0x10ffff</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>u_</name> <init>= <expr><name>uc</name> <operator>-</operator> <literal type="number">0x10000</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xd800</literal> <operator>|</operator> <operator>(</operator><name>u_</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xdc00</literal> <operator>|</operator> <operator>(</operator><name>u_</name> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>size_t</name></type> <name>_al_utf16_get</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xd800</literal> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0xdfff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="number">0x10000</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>al_ustr_new_from_utf16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>ustr</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>_al_utf16_get</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>al_ustr_append_chr</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>ustr</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>size_t</name></type> <name>al_ustr_size_utf16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><call><name>al_ustr_get_next</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sz</name> <operator>+=</operator> <call><name>al_utf16_width</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>



<expr_stmt><expr><name>sz</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><name>sz</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>size_t</name></type> <name>al_ustr_encode_utf16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>encoded</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><call><name>al_ustr_get_next</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>al_utf16_encode</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>sz</name> <operator>&gt;</operator> <name>n</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>encoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>encoded</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>



</unit>
