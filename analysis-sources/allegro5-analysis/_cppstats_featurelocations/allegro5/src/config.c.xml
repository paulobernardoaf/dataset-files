<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\config.c">


















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_aatree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_config.h"</cpp:file></cpp:include>



<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_ustr</name><parameter_list>(<parameter><decl><type><name>void</name> <specifier>const</specifier> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <specifier>const</specifier> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>al_ustr_compare</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>al_create_config</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_CONFIG</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>config</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_CONFIG_SECTION</name> <modifier>*</modifier></type><name>find_section</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>config</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>section</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_aa_search</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>cmp_ustr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_CONFIG_ENTRY</name> <modifier>*</modifier></type><name>find_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_CONFIG_SECTION</name> <modifier>*</modifier></type><name>section</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_aa_search</name><argument_list>(<argument><expr><name><name>section</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>cmp_ustr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>get_key_and_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>eq</name> <init>= <expr><call><name>al_ustr_find_chr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eq</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_ustr_assign</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_assign_cstr</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>al_ustr_assign_substr</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_assign_substr</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>eq</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_ustr_trim_ws</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_trim_ws</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_CONFIG_SECTION</name> <modifier>*</modifier></type><name>config_add_section</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>config</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG_SECTION</name> <modifier>*</modifier></type><name>sec</name> <init>= <expr><name><name>config</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG_SECTION</name> <modifier>*</modifier></type><name>section</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>section</name> <operator>=</operator> <call><name>find_section</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>section</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>section</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_CONFIG_SECTION</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>al_ustr_dup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sec</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>section</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>section</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>section</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>section</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>tree</name></name> <operator>=</operator> <call><name>_al_aa_insert</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>cmp_ustr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>section</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_add_config_section</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>name_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>uname</name></decl>;</decl_stmt>

<expr_stmt><expr><name>uname</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name_info</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>config_add_section</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>uname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>config_set_value</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>config</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>section</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG_SECTION</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>find_section</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>find_entry</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_ustr_assign</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_trim_ws</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_CONFIG_ENTRY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>is_comment</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>al_ustr_dup</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>al_ustr_dup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_trim_ws</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>config_add_section</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tree</name></name> <operator>=</operator> <call><name>_al_aa_insert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>cmp_ustr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_set_config_value</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>config</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>section_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>key_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>value_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>usection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>ukey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>uvalue</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>section</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>section</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>usection</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>section_info</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ukey</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key_info</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uvalue</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value_info</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_set_value</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>usection</name></expr></argument>, <argument><expr><name>ukey</name></expr></argument>, <argument><expr><name>uvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>config_add_comment</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>config</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>section</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>comment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG_SECTION</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>find_section</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_CONFIG_ENTRY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>is_comment</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>al_ustr_dup</name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>al_ustr_find_replace_cstr</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>config_add_section</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_add_config_comment</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>config</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>section_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>comment_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>usection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>ucomment</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>section</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>section</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>usection</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>section_info</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ucomment</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>comment_info</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_add_comment</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>usection</name></expr></argument>, <argument><expr><name>ucomment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>config_get_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>config</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>section</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG_SECTION</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG_ENTRY</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>find_section</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>find_entry</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_value</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>al_get_config_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>config</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>section_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>key_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>usection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>ukey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>section</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>section</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>usection</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>section_info</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ukey</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key_info</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>config_get_value</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>usection</name></expr></argument>, <argument><expr><name>ukey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>readline</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_fgets</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><call><name>al_ustr_append_cstr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>al_ustr_has_suffix_cstr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><call><name>al_fgets</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>al_load_config_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cfg</name> <operator>=</operator> <call><name>al_load_config_file_f</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>cfg</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>al_load_config_file_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG_SECTION</name> <modifier>*</modifier></type><name>current_section</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>section</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>al_create_config</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>section</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_ustr_assign_cstr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readline</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>al_ustr_trim_ws</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_ustr_has_prefix_cstr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>current_section</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>current_section</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>al_ustr_empty_string</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>config_add_comment</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>al_ustr_has_prefix_cstr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rbracket</name> <init>= <expr><call><name>al_ustr_rfind_chr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rbracket</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rbracket</name> <operator>=</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>al_ustr_assign_substr</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rbracket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_section</name> <operator>=</operator> <call><name>config_add_section</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_key_and_value</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>current_section</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>config_set_value</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><call><name>al_ustr_empty_string</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>config_set_value</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name><name>current_section</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>config</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>config_write_section</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_CONFIG_SECTION</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG_ENTRY</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_fputc</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_fputs</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_fputs</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>al_ferror</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>is_comment</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_ustr_has_prefix_cstr</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_fputs</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>al_fputs</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>al_fputc</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>al_fputs</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_fputc</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_fputs</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_fputc</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>al_ferror</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>!</operator><call><name>al_feof</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_save_config_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>retsave</name> <init>= <expr><call><name>al_save_config_file_f</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>retclose</name> <init>= <expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>retsave</name> <operator>&amp;&amp;</operator> <name>retclose</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_save_config_file_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG_SECTION</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>


<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>config_write_section</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>config_write_section</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>!</operator><call><name>al_feof</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>do_config_merge_into</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>master</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>add</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>merge_comments</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG_SECTION</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG_ENTRY</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>add</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>add</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>config_add_section</name><argument_list>(<argument><expr><name>master</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>is_comment</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>config_set_value</name><argument_list>(<argument><expr><name>master</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>merge_comments</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>config_add_comment</name><argument_list>(<argument><expr><name>master</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_merge_config_into</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>master</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>add</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>do_config_merge_into</name><argument_list>(<argument><expr><name>master</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>al_merge_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>cfg1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>cfg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><call><name>al_create_config</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>do_config_merge_into</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>cfg1</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_config_merge_into</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>cfg2</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>config</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy_entry</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG_ENTRY</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy_section</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG_SECTION</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG_ENTRY</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG_ENTRY</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>destroy_entry</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_aa_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_destroy_config</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG_SECTION</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG_SECTION</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>destroy_section</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>_al_aa_free</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>al_get_first_config_section</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <specifier>const</specifier> <modifier>*</modifier></type><name>config</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_CONFIG_SECTION</name> <modifier>*</modifier><modifier>*</modifier></type><name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG_SECTION</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iterator</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>iterator</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name>s</name></expr> ?</condition><then> <expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>al_get_next_config_section</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG_SECTION</name> <modifier>*</modifier><modifier>*</modifier></type><name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG_SECTION</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iterator</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>iterator</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>iterator</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>s</name></expr> ?</condition><then> <expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>al_get_first_config_entry</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <specifier>const</specifier> <modifier>*</modifier></type><name>config</name></decl></parameter>,
<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>section</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_CONFIG_ENTRY</name> <modifier>*</modifier><modifier>*</modifier></type><name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>section_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>usection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG_SECTION</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG_ENTRY</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>section</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>section</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>usection</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>section_info</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>find_section</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>usection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>e</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>is_comment</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>iterator</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>iterator</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name>e</name></expr> ?</condition><then> <expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>al_get_next_config_entry</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG_ENTRY</name> <modifier>*</modifier><modifier>*</modifier></type><name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG_ENTRY</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iterator</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><name>iterator</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>e</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>is_comment</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>iterator</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>e</name></expr> ?</condition><then> <expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_remove_config_section</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>section</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>section_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <specifier>const</specifier> <modifier>*</modifier></type><name>usection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG_SECTION</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>section</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>section</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>usection</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>section_info</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>tree</name></name> <operator>=</operator> <call><name>_al_aa_delete</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>, <argument><expr><name>usection</name></expr></argument>, <argument><expr><name>cmp_ustr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>destroy_section</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_remove_config_key</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>section</name></decl></parameter>,
<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>section_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>key_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <specifier>const</specifier> <modifier>*</modifier></type><name>usection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <specifier>const</specifier> <modifier>*</modifier></type><name>ukey</name> <init>= <expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key_info</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG_ENTRY</name> <modifier>*</modifier></type> <name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>section</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>section</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>usection</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>section_info</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_CONFIG_SECTION</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>find_section</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>usection</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tree</name></name> <operator>=</operator> <call><name>_al_aa_delete</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>, <argument><expr><name>ukey</name></expr></argument>, <argument><expr><name>cmp_ustr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>destroy_entry</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


</unit>
