<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\linux\lkeybdnu.c">





























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_NO_COMPATIBILITY</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/input.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/kd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/keyboard.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/vt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_driver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_events.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_keyboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintlnx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintunix.h"</cpp:file></cpp:include>


<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"keyboard"</literal></argument>)</argument_list></macro>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_I</name></cpp:macro> <cpp:value>"al-ckey INFO: "</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_W</name></cpp:macro> <cpp:value>"al-ckey WARNING: "</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_E</name></cpp:macro> <cpp:value>"al-ckey ERROR: "</cpp:value></cpp:define>



<typedef>typedef <type><struct>struct <name>ALLEGRO_KEYBOARD_LINUX</name>
<block>{
<decl_stmt><decl><type><name>ALLEGRO_KEYBOARD</name></type> <name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>termios</name></name></type> <name>startup_termio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>termios</name></name></type> <name>work_termio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>startup_kbmode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_KEYBOARD_STATE</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>modifiers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>three_finger_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>key_led_flag</name></decl>;</decl_stmt>
}</block></struct></type> <name>ALLEGRO_KEYBOARD_LINUX</name>;</typedef>




<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_KEYBOARD_LINUX</name></type> <name>the_keyboard</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>pid_t</name></type> <name>main_pid</name></decl>;</decl_stmt>




<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lkeybd_init_keyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lkeybd_exit_keyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ALLEGRO_KEYBOARD</name> <modifier>*</modifier></type><name>lkeybd_get_keyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lkeybd_set_keyboard_leds</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>leds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lkeybd_get_keyboard_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_KEYBOARD_STATE</name> <modifier>*</modifier></type><name>ret_state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lkeybd_clear_keyboard_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>process_new_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>process_character</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_key_press</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mycode</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ascii</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_key_release</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mycode</name></decl></parameter>)</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYDRV_LINUX</name></cpp:macro> <cpp:value>AL_ID('L','N','X','C')</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_KEYBOARD_DRIVER</name></type> <name>keydrv_linux</name> <init>=
<expr><block>{
<expr><name>KEYDRV_LINUX</name></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"Linux console keyboard"</literal></expr>,
<expr><name>lkeybd_init_keyboard</name></expr>,
<expr><name>lkeybd_exit_keyboard</name></expr>,
<expr><name>lkeybd_get_keyboard</name></expr>,
<expr><name>lkeybd_set_keyboard_leds</name></expr>,
<expr><name>NULL</name></expr>, 
<expr><name>lkeybd_get_keyboard_state</name></expr>,
<expr><name>lkeybd_clear_keyboard_state</name></expr>
}</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>_AL_DRIVER_INFO</name></type> <name><name>_al_linux_keyboard_driver_list</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><name>KEYDRV_LINUX</name></expr>, <expr><operator>&amp;</operator><name>keydrv_linux</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KB_MODIFIERS</name></cpp:macro> <cpp:value>(ALLEGRO_KEYMOD_SHIFT | ALLEGRO_KEYMOD_CTRL | ALLEGRO_KEYMOD_ALT | ALLEGRO_KEYMOD_ALTGR | ALLEGRO_KEYMOD_LWIN | ALLEGRO_KEYMOD_RWIN | ALLEGRO_KEYMOD_MENU)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KB_LED_FLAGS</name></cpp:macro> <cpp:value>(ALLEGRO_KEYMOD_SCROLLLOCK | ALLEGRO_KEYMOD_NUMLOCK | ALLEGRO_KEYMOD_CAPSLOCK)</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>kernel_to_mycode</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><name>ALLEGRO_KEY_ESCAPE</name></expr>, <expr><name>ALLEGRO_KEY_1</name></expr>, <expr><name>ALLEGRO_KEY_2</name></expr>,
<expr><name>ALLEGRO_KEY_3</name></expr>, <expr><name>ALLEGRO_KEY_4</name></expr>, <expr><name>ALLEGRO_KEY_5</name></expr>, <expr><name>ALLEGRO_KEY_6</name></expr>,
<expr><name>ALLEGRO_KEY_7</name></expr>, <expr><name>ALLEGRO_KEY_8</name></expr>, <expr><name>ALLEGRO_KEY_9</name></expr>, <expr><name>ALLEGRO_KEY_0</name></expr>,
<expr><name>ALLEGRO_KEY_MINUS</name></expr>, <expr><name>ALLEGRO_KEY_EQUALS</name></expr>, <expr><name>ALLEGRO_KEY_BACKSPACE</name></expr>, <expr><name>ALLEGRO_KEY_TAB</name></expr>,
<expr><name>ALLEGRO_KEY_Q</name></expr>, <expr><name>ALLEGRO_KEY_W</name></expr>, <expr><name>ALLEGRO_KEY_E</name></expr>, <expr><name>ALLEGRO_KEY_R</name></expr>,
<expr><name>ALLEGRO_KEY_T</name></expr>, <expr><name>ALLEGRO_KEY_Y</name></expr>, <expr><name>ALLEGRO_KEY_U</name></expr>, <expr><name>ALLEGRO_KEY_I</name></expr>,
<expr><name>ALLEGRO_KEY_O</name></expr>, <expr><name>ALLEGRO_KEY_P</name></expr>, <expr><name>ALLEGRO_KEY_OPENBRACE</name></expr>, <expr><name>ALLEGRO_KEY_CLOSEBRACE</name></expr>,
<expr><name>ALLEGRO_KEY_ENTER</name></expr>, <expr><name>ALLEGRO_KEY_LCTRL</name></expr>, <expr><name>ALLEGRO_KEY_A</name></expr>, <expr><name>ALLEGRO_KEY_S</name></expr>,
<expr><name>ALLEGRO_KEY_D</name></expr>, <expr><name>ALLEGRO_KEY_F</name></expr>, <expr><name>ALLEGRO_KEY_G</name></expr>, <expr><name>ALLEGRO_KEY_H</name></expr>,
<expr><name>ALLEGRO_KEY_J</name></expr>, <expr><name>ALLEGRO_KEY_K</name></expr>, <expr><name>ALLEGRO_KEY_L</name></expr>, <expr><name>ALLEGRO_KEY_SEMICOLON</name></expr>,
<expr><name>ALLEGRO_KEY_QUOTE</name></expr>, <expr><name>ALLEGRO_KEY_TILDE</name></expr>, <expr><name>ALLEGRO_KEY_LSHIFT</name></expr>, <expr><name>ALLEGRO_KEY_BACKSLASH</name></expr>,
<expr><name>ALLEGRO_KEY_Z</name></expr>, <expr><name>ALLEGRO_KEY_X</name></expr>, <expr><name>ALLEGRO_KEY_C</name></expr>, <expr><name>ALLEGRO_KEY_V</name></expr>,
<expr><name>ALLEGRO_KEY_B</name></expr>, <expr><name>ALLEGRO_KEY_N</name></expr>, <expr><name>ALLEGRO_KEY_M</name></expr>, <expr><name>ALLEGRO_KEY_COMMA</name></expr>,
<expr><name>ALLEGRO_KEY_FULLSTOP</name></expr>, <expr><name>ALLEGRO_KEY_SLASH</name></expr>, <expr><name>ALLEGRO_KEY_RSHIFT</name></expr>, <expr><name>ALLEGRO_KEY_PAD_ASTERISK</name></expr>,
<expr><name>ALLEGRO_KEY_ALT</name></expr>, <expr><name>ALLEGRO_KEY_SPACE</name></expr>, <expr><name>ALLEGRO_KEY_CAPSLOCK</name></expr>, <expr><name>ALLEGRO_KEY_F1</name></expr>,
<expr><name>ALLEGRO_KEY_F2</name></expr>, <expr><name>ALLEGRO_KEY_F3</name></expr>, <expr><name>ALLEGRO_KEY_F4</name></expr>, <expr><name>ALLEGRO_KEY_F5</name></expr>,
<expr><name>ALLEGRO_KEY_F6</name></expr>, <expr><name>ALLEGRO_KEY_F7</name></expr>, <expr><name>ALLEGRO_KEY_F8</name></expr>, <expr><name>ALLEGRO_KEY_F9</name></expr>,
<expr><name>ALLEGRO_KEY_F10</name></expr>, <expr><name>ALLEGRO_KEY_NUMLOCK</name></expr>, <expr><name>ALLEGRO_KEY_SCROLLLOCK</name></expr>, <expr><name>ALLEGRO_KEY_PAD_7</name></expr>,
<expr><name>ALLEGRO_KEY_PAD_8</name></expr>, <expr><name>ALLEGRO_KEY_PAD_9</name></expr>, <expr><name>ALLEGRO_KEY_PAD_MINUS</name></expr>, <expr><name>ALLEGRO_KEY_PAD_4</name></expr>,
<expr><name>ALLEGRO_KEY_PAD_5</name></expr>, <expr><name>ALLEGRO_KEY_PAD_6</name></expr>, <expr><name>ALLEGRO_KEY_PAD_PLUS</name></expr>, <expr><name>ALLEGRO_KEY_PAD_1</name></expr>,
<expr><name>ALLEGRO_KEY_PAD_2</name></expr>, <expr><name>ALLEGRO_KEY_PAD_3</name></expr>, <expr><name>ALLEGRO_KEY_PAD_0</name></expr>, <expr><name>ALLEGRO_KEY_PAD_DELETE</name></expr>,
<expr><name>ALLEGRO_KEY_PRINTSCREEN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ALLEGRO_KEY_BACKSLASH2</name></expr>, <expr><name>ALLEGRO_KEY_F11</name></expr>,
<expr><name>ALLEGRO_KEY_F12</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>ALLEGRO_KEY_PAD_ENTER</name></expr>, <expr><name>ALLEGRO_KEY_RCTRL</name></expr>, <expr><name>ALLEGRO_KEY_PAD_SLASH</name></expr>, <expr><name>ALLEGRO_KEY_PRINTSCREEN</name></expr>,
<expr><name>ALLEGRO_KEY_ALTGR</name></expr>, <expr><name>ALLEGRO_KEY_PAUSE</name></expr>, <expr><name>ALLEGRO_KEY_HOME</name></expr>, <expr><name>ALLEGRO_KEY_UP</name></expr>,
<expr><name>ALLEGRO_KEY_PGUP</name></expr>, <expr><name>ALLEGRO_KEY_LEFT</name></expr>, <expr><name>ALLEGRO_KEY_RIGHT</name></expr>, <expr><name>ALLEGRO_KEY_END</name></expr>,
<expr><name>ALLEGRO_KEY_DOWN</name></expr>, <expr><name>ALLEGRO_KEY_PGDN</name></expr>, <expr><name>ALLEGRO_KEY_INSERT</name></expr>, <expr><name>ALLEGRO_KEY_DELETE</name></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ALLEGRO_KEY_PAUSE</name></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><name>ALLEGRO_KEY_LWIN</name></expr>, <expr><name>ALLEGRO_KEY_RWIN</name></expr>, <expr><name>ALLEGRO_KEY_MENU</name></expr>








}</block></expr></init></decl>;</decl_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_PAD_KEYS</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pad_asciis</name><index>[<expr><name>NUM_PAD_KEYS</name></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">'2'</literal></expr>,<expr><literal type="char">'3'</literal></expr>,<expr><literal type="char">'4'</literal></expr>,<expr><literal type="char">'5'</literal></expr>,<expr><literal type="char">'6'</literal></expr>,<expr><literal type="char">'7'</literal></expr>,<expr><literal type="char">'8'</literal></expr>,<expr><literal type="char">'9'</literal></expr>,
<expr><literal type="char">'+'</literal></expr>,<expr><literal type="char">'-'</literal></expr>,<expr><literal type="char">'*'</literal></expr>,<expr><literal type="char">'/'</literal></expr>,<expr><literal type="char">'\r'</literal></expr>,<expr><literal type="char">','</literal></expr>,<expr><literal type="char">'.'</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pad_asciis_no_numlock</name><index>[<expr><name>NUM_PAD_KEYS</name></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="char">'+'</literal></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><literal type="char">'*'</literal></expr>, <expr><literal type="char">'/'</literal></expr>, <expr><literal type="char">'\r'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>modifier_table</name><index>[<expr><name>ALLEGRO_KEY_MAX</name> <operator>-</operator> <name>ALLEGRO_KEY_MODIFIERS</name></expr>]</index></name> <init>=
<expr><block>{
<expr><name>ALLEGRO_KEYMOD_SHIFT</name></expr>, <expr><name>ALLEGRO_KEYMOD_SHIFT</name></expr>, <expr><name>ALLEGRO_KEYMOD_CTRL</name></expr>,
<expr><name>ALLEGRO_KEYMOD_CTRL</name></expr>, <expr><name>ALLEGRO_KEYMOD_ALT</name></expr>, <expr><name>ALLEGRO_KEYMOD_ALTGR</name></expr>,
<expr><name>ALLEGRO_KEYMOD_LWIN</name></expr>, <expr><name>ALLEGRO_KEYMOD_RWIN</name></expr>, <expr><name>ALLEGRO_KEYMOD_MENU</name></expr>,
<expr><name>ALLEGRO_KEYMOD_SCROLLLOCK</name></expr>, <expr><name>ALLEGRO_KEYMOD_NUMLOCK</name></expr>, <expr><name>ALLEGRO_KEYMOD_CAPSLOCK</name></expr>
}</block></expr></init></decl>;</decl_stmt>












<function><type><specifier>static</specifier> <name>int</name></type> <name>keycode_to_char</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>keycode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>modifiers</name> <init>= <expr><name><name>the_keyboard</name><operator>.</operator><name>modifiers</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>kbentry</name></name></type> <name>kbe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keymap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ascii</name></decl>;</decl_stmt>


<expr_stmt><expr><name>keymap</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>&amp;</operator> <name>ALLEGRO_KEYMOD_SHIFT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>keymap</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>&amp;</operator> <name>ALLEGRO_KEYMOD_ALTGR</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>keymap</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>&amp;</operator> <name>ALLEGRO_KEYMOD_CTRL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>keymap</name> <operator>|=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>&amp;</operator> <name>ALLEGRO_KEYMOD_ALT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>keymap</name> <operator>|=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>kbe</name><operator>.</operator><name>kb_table</name></name> <operator>=</operator> <name>keymap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kbe</name><operator>.</operator><name>kb_index</name></name> <operator>=</operator> <name>keycode</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>KDGKBENT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kbe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keycode</name> <operator>==</operator> <name>KEY_BACKSPACE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ascii</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>kbe</name><operator>.</operator><name>kb_value</name></name> <operator>==</operator> <name>K_NOSUCHMAP</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>ascii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>ascii</name> <operator>=</operator> <call><name>KVAL</name><argument_list>(<argument><expr><name><name>kbe</name><operator>.</operator><name>kb_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>


<switch>switch <condition>(<expr><call><name>KTYP</name><argument_list>(<argument><expr><name><name>kbe</name><operator>.</operator><name>kb_value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>KT_CONS</name></expr>:</case>

<return>return <expr><operator>-</operator><operator>(</operator> <call><name>KVAL</name><argument_list>(<argument><expr><name><name>kbe</name><operator>.</operator><name>kb_value</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return>

<case>case <expr><name>KT_LETTER</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>&amp;</operator> <name>ALLEGRO_KEYMOD_CAPSLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ascii</name> <operator>^</operator> <literal type="number">0x20</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>ascii</name></expr>;</return></block_content></block></else></if_stmt>

<case>case <expr><name>KT_LATIN</name></expr>:</case>
<case>case <expr><name>KT_ASCII</name></expr>:</case>
<return>return <expr><name>ascii</name></expr>;</return>

<case>case <expr><name>KT_PAD</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>KVAL</name><argument_list>(<argument><expr><name><name>kbe</name><operator>.</operator><name>kb_value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>&amp;</operator> <name>ALLEGRO_KEYMOD_NUMLOCK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>val</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>val</name> <operator>&lt;</operator> <name>NUM_PAD_KEYS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ascii</name> <operator>=</operator> <name><name>pad_asciis</name><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>val</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>val</name> <operator>&lt;</operator> <name>NUM_PAD_KEYS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ascii</name> <operator>=</operator> <name><name>pad_asciis_no_numlock</name><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>ascii</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>KT_SPEC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>keycode</name> <operator>==</operator> <name>KEY_ENTER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="char">'\r'</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>bool</name></type> <name>lkeybd_init_keyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>can_restore_termio_and_kbmode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_keyboard</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>the_keyboard</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>the_keyboard</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"/dev/tty"</literal></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>tcgetattr</name><argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>startup_termio</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>Error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>KDGKBMODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>startup_kbmode</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>can_restore_termio_and_kbmode</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>



















<expr_stmt><expr><name><name>the_keyboard</name><operator>.</operator><name>work_termio</name></name> <operator>=</operator> <name><name>the_keyboard</name><operator>.</operator><name>startup_termio</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_keyboard</name><operator>.</operator><name>work_termio</name><operator>.</operator><name>c_iflag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ISTRIP</name> <operator>|</operator> <name>IGNCR</name> <operator>|</operator> <name>ICRNL</name> <operator>|</operator> <name>INLCR</name> <operator>|</operator> <name>IXOFF</name> <operator>|</operator> <name>IXON</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_keyboard</name><operator>.</operator><name>work_termio</name><operator>.</operator><name>c_cflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_keyboard</name><operator>.</operator><name>work_termio</name><operator>.</operator><name>c_cflag</name></name> <operator>|=</operator> <name>CS8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_keyboard</name><operator>.</operator><name>work_termio</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ICANON</name> <operator>|</operator> <name>ECHO</name> <operator>|</operator> <name>ISIG</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tcsetattr</name><argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>TCSANOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>work_termio</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>Error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>KDSKBMODE</name></expr></argument>, <argument><expr><name>K_MEDIUMRAW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>the_keyboard</name><operator>.</operator><name>three_finger_flag</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_keyboard</name><operator>.</operator><name>key_led_flag</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"keyboard"</literal></expr></argument>, <argument><expr><literal type="string">"enable_three_finger_exit"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>the_keyboard</name><operator>.</operator><name>three_finger_flag</name></name> <operator>=</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"keyboard"</literal></expr></argument>, <argument><expr><literal type="string">"enable_key_led_toggle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>the_keyboard</name><operator>.</operator><name>key_led_flag</name></name> <operator>=</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Three finger flag enabled: %s\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>the_keyboard</name><operator>.</operator><name>three_finger_flag</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Key LED toggle enabled: %s\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>the_keyboard</name><operator>.</operator><name>key_led_flag</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>_al_event_source_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>_al_unix_start_watching_fd</name><argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>process_new_data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>main_pid</name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>Error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>can_restore_termio_and_kbmode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tcsetattr</name><argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>TCSANOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>startup_termio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>KDSKBMODE</name></expr></argument>, <argument><expr><name><name>the_keyboard</name><operator>.</operator><name>startup_kbmode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>lkeybd_exit_keyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_al_unix_stop_watching_fd</name><argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tcsetattr</name><argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>TCSANOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>startup_termio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>KDSKBMODE</name></expr></argument>, <argument><expr><name><name>the_keyboard</name><operator>.</operator><name>startup_kbmode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>KDSETLED</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_keyboard</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>the_keyboard</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>ALLEGRO_KEYBOARD</name> <modifier>*</modifier></type><name>lkeybd_get_keyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>ALLEGRO_KEYBOARD</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>the_keyboard</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>bool</name></type> <name>lkeybd_set_keyboard_leds</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>leds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>leds</name> <operator>&amp;</operator> <name>ALLEGRO_KEYMOD_SCROLLLOCK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>val</name> <operator>|=</operator> <name>LED_SCR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>leds</name> <operator>&amp;</operator> <name>ALLEGRO_KEYMOD_NUMLOCK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>val</name> <operator>|=</operator> <name>LED_NUM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>leds</name> <operator>&amp;</operator> <name>ALLEGRO_KEYMOD_CAPSLOCK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>val</name> <operator>|=</operator> <name>LED_CAP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>ioctl</name><argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>KDSETLED</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>lkeybd_get_keyboard_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_KEYBOARD_STATE</name> <modifier>*</modifier></type><name>ret_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ret_state</name> <operator>=</operator> <name><name>the_keyboard</name><operator>.</operator><name>state</name></name></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>lkeybd_clear_keyboard_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>process_new_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>bytes_read</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>process_character</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>unused</name></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>void</name></type> <name>process_character</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>keycode</name> <init>= <expr><name>ch</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>press</name> <init>= <expr><operator>!</operator><operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mycode</name> <init>= <expr><name><name>kernel_to_mycode</name><index>[<expr><name>keycode</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>mycode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>mycode</name> <operator>&gt;=</operator> <name>ALLEGRO_KEY_MODIFIERS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><name><name>modifier_table</name><index>[<expr><name>mycode</name> <operator>-</operator> <name>ALLEGRO_KEY_MODIFIERS</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>press</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>KB_MODIFIERS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>the_keyboard</name><operator>.</operator><name>modifiers</name></name> <operator>|=</operator> <name>flag</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>KB_LED_FLAGS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>the_keyboard</name><operator>.</operator><name>key_led_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>the_keyboard</name><operator>.</operator><name>modifiers</name></name> <operator>^=</operator> <name>flag</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>KB_MODIFIERS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>the_keyboard</name><operator>.</operator><name>modifiers</name></name> <operator>&amp;=</operator> <operator>~</operator><name>flag</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>press</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ascii</name> <init>= <expr><call><name>keycode_to_char</name><argument_list>(<argument><expr><name>keycode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>ascii</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>console</name> <init>= <expr><operator>-</operator><name>ascii</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_console</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>VT_OPENQRY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_console</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>console</name> <operator>&lt;</operator> <name>last_console</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>VT_ACTIVATE</name></expr></argument>, <argument><expr><name>console</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>handle_key_press</name><argument_list>(<argument><expr><name>mycode</name></expr></argument>, <argument><expr><name>ascii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>handle_key_release</name><argument_list>(<argument><expr><name>mycode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>the_keyboard</name><operator>.</operator><name>three_finger_flag</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>mycode</name> <operator>==</operator> <name>ALLEGRO_KEY_DELETE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>mycode</name> <operator>==</operator> <name>ALLEGRO_KEY_END</name><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>the_keyboard</name><operator>.</operator><name>modifiers</name></name> <operator>&amp;</operator> <name>ALLEGRO_KEYMOD_CTRL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>the_keyboard</name><operator>.</operator><name>modifiers</name></name> <operator>&amp;</operator> <name>ALLEGRO_KEYMOD_ALT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name>main_pid</name></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_key_press</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mycode</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ascii</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT_TYPE</name></type> <name>event_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><name>event_type</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>_AL_KEYBOARD_STATE_KEY_DOWN</name><argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><name>mycode</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name>ALLEGRO_EVENT_KEY_CHAR</name></expr>
</then><else>: <expr><name>ALLEGRO_EVENT_KEY_DOWN</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><call><name>_AL_KEYBOARD_STATE_SET_KEY_DOWN</name><argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><name>mycode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>event_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <name>mycode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>unichar</name></name> <operator>=</operator> <name>ascii</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>modifiers</name></name> <operator>=</operator> <name><name>the_keyboard</name><operator>.</operator><name>modifiers</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>event_type</name> <operator>==</operator> <name>ALLEGRO_EVENT_KEY_DOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_KEY_CHAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_key_release</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mycode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_AL_KEYBOARD_STATE_KEY_DOWN</name><argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><name>mycode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>_AL_KEYBOARD_STATE_CLEAR_KEY_DOWN</name><argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><name>mycode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_KEY_UP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <name>mycode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>unichar</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>modifiers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









</unit>
