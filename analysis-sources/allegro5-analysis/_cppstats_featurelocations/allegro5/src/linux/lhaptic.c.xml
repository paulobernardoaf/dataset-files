<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\linux\lhaptic.c">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_haptic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_ljoynu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintunix.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_HAVE_LINUX_INPUT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/input.h&gt;</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"lhaptic"</literal></argument>)</argument_list></macro>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAPTICS_MAX</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAPTICS_EFFECTS_MAX</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ALLEGRO_HAPTIC</name></name></type> <name>parent</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>effects</name><index>[<expr><name>HAPTICS_EFFECTS_MAX</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ALLEGRO_HAPTIC_LINUX</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_BITS</name></cpp:macro> <cpp:value>(sizeof(long) * 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NLONGS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) + LONG_BITS - 1) / LONG_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BIT</name><parameter_list>(<parameter><type><name>nr</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((1UL &lt;&lt; ((nr) % LONG_BITS)) &amp; (addr)[(nr) / LONG_BITS])</cpp:value></cpp:define>




<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_init_haptic</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lhap_exit_haptic</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_is_mouse_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MOUSE</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_is_joystick_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_is_keyboard_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_KEYBOARD</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_is_display_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_is_touch_input_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TOUCH_INPUT</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>lhap_get_from_mouse</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MOUSE</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>lhap_get_from_joystick</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>lhap_get_from_keyboard</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_KEYBOARD</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>lhap_get_from_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>lhap_get_from_touch_input</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TOUCH_INPUT</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_release</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>haptic</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_get_active</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hap</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>lhap_get_capabilities</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>lhap_get_gain</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_set_gain</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>lhap_get_max_effects</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_is_effect_ok</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT</name> <modifier>*</modifier></type><name>eff</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_upload_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT</name> <modifier>*</modifier></type><name>eff</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_play_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loop</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_stop_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_is_effect_playing</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_release_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>lhap_get_autocenter</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_set_autocenter</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_DRIVER</name></type> <name>_al_hapdrv_linux</name> <init>=
<expr><block>{
<expr><name>_ALLEGRO_HAPDRV_LINUX</name></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"Linux haptic(s)"</literal></expr>,
<expr><name>lhap_init_haptic</name></expr>,
<expr><name>lhap_exit_haptic</name></expr>,

<expr><name>lhap_is_mouse_haptic</name></expr>,
<expr><name>lhap_is_joystick_haptic</name></expr>,
<expr><name>lhap_is_keyboard_haptic</name></expr>,
<expr><name>lhap_is_display_haptic</name></expr>,
<expr><name>lhap_is_touch_input_haptic</name></expr>,

<expr><name>lhap_get_from_mouse</name></expr>,
<expr><name>lhap_get_from_joystick</name></expr>,
<expr><name>lhap_get_from_keyboard</name></expr>,
<expr><name>lhap_get_from_display</name></expr>,
<expr><name>lhap_get_from_touch_input</name></expr>,

<expr><name>lhap_get_active</name></expr>,
<expr><name>lhap_get_capabilities</name></expr>,
<expr><name>lhap_get_gain</name></expr>,
<expr><name>lhap_set_gain</name></expr>,
<expr><name>lhap_get_max_effects</name></expr>,

<expr><name>lhap_is_effect_ok</name></expr>,
<expr><name>lhap_upload_effect</name></expr>,
<expr><name>lhap_play_effect</name></expr>,
<expr><name>lhap_stop_effect</name></expr>,
<expr><name>lhap_is_effect_playing</name></expr>,
<expr><name>lhap_release_effect</name></expr>,

<expr><name>lhap_release</name></expr>,

<expr><name>lhap_get_autocenter</name></expr>,
<expr><name>lhap_set_autocenter</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC_LINUX</name></type> <name><name>haptics</name><index>[<expr><name>HAPTICS_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>haptic_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<struct>struct <name>CAP_MAP</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>linux_bit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>allegro_bit</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>CAP_MAP</name></name></type> <name><name>cap_map</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>FF_PERIODIC</name></expr>, <expr><name>ALLEGRO_HAPTIC_PERIODIC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_RUMBLE</name></expr>, <expr><name>ALLEGRO_HAPTIC_RUMBLE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_CONSTANT</name></expr>, <expr><name>ALLEGRO_HAPTIC_CONSTANT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_SPRING</name></expr>, <expr><name>ALLEGRO_HAPTIC_SPRING</name></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_FRICTION</name></expr>, <expr><name>ALLEGRO_HAPTIC_FRICTION</name></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_DAMPER</name></expr>, <expr><name>ALLEGRO_HAPTIC_DAMPER</name></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_INERTIA</name></expr>, <expr><name>ALLEGRO_HAPTIC_INERTIA</name></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_RAMP</name></expr>, <expr><name>ALLEGRO_HAPTIC_RAMP</name></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_SQUARE</name></expr>, <expr><name>ALLEGRO_HAPTIC_SQUARE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_TRIANGLE</name></expr>, <expr><name>ALLEGRO_HAPTIC_TRIANGLE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_SINE</name></expr>, <expr><name>ALLEGRO_HAPTIC_SINE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_SAW_UP</name></expr>, <expr><name>ALLEGRO_HAPTIC_SAW_UP</name></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_SAW_DOWN</name></expr>, <expr><name>ALLEGRO_HAPTIC_SAW_DOWN</name></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_CUSTOM</name></expr>, <expr><name>ALLEGRO_HAPTIC_CUSTOM</name></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_GAIN</name></expr>, <expr><name>ALLEGRO_HAPTIC_GAIN</name></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_AUTOCENTER</name></expr>, <expr><name>ALLEGRO_HAPTIC_AUTOCENTER</name></expr> }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_init_haptic</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>haptic_mutex</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>haptic_mutex</name> <operator>=</operator> <call><name>al_create_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>haptic_mutex</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HAPTICS_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>haptics</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC_LINUX</name> <modifier>*</modifier></type><name>lhap_get_available_haptic</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HAPTICS_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>haptics</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>haptics</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>haptics</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC_LINUX</name> <modifier>*</modifier></type><name>lhap_from_al</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>ALLEGRO_HAPTIC_LINUX</name> <operator>*</operator><operator>)</operator><name>hap</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>lhap_exit_haptic</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>haptic_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name>haptic_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>haptic_mutex</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_type2lin</name><parameter_list>(<parameter><decl><type><name>__u16</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_HAPTIC_RUMBLE</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>res</name><operator>)</operator> <operator>=</operator> <name>FF_RUMBLE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_HAPTIC_PERIODIC</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>res</name><operator>)</operator> <operator>=</operator> <name>FF_PERIODIC</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_HAPTIC_CONSTANT</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>res</name><operator>)</operator> <operator>=</operator> <name>FF_CONSTANT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_HAPTIC_SPRING</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>res</name><operator>)</operator> <operator>=</operator> <name>FF_SPRING</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_HAPTIC_FRICTION</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>res</name><operator>)</operator> <operator>=</operator> <name>FF_FRICTION</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_HAPTIC_DAMPER</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>res</name><operator>)</operator> <operator>=</operator> <name>FF_DAMPER</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_HAPTIC_INERTIA</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>res</name><operator>)</operator> <operator>=</operator> <name>FF_INERTIA</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_HAPTIC_RAMP</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>res</name><operator>)</operator> <operator>=</operator> <name>FF_RAMP</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_wave2lin</name><parameter_list>(<parameter><decl><type><name>__u16</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_HAPTIC_SQUARE</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>res</name><operator>)</operator> <operator>=</operator> <name>FF_SQUARE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_HAPTIC_TRIANGLE</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>res</name><operator>)</operator> <operator>=</operator> <name>FF_TRIANGLE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_HAPTIC_SINE</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>res</name><operator>)</operator> <operator>=</operator> <name>FF_SINE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_HAPTIC_SAW_UP</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>res</name><operator>)</operator> <operator>=</operator> <name>FF_SAW_UP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_HAPTIC_SAW_DOWN</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>res</name><operator>)</operator> <operator>=</operator> <name>FF_SAW_DOWN</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_HAPTIC_CUSTOM</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>res</name><operator>)</operator> <operator>=</operator> <name>FF_CUSTOM</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_time2lin</name><parameter_list>(<parameter><decl><type><name>__u16</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sec</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0.0</literal> <operator>||</operator> <name>sec</name></expr></argument> &gt;</argument_list></name> <literal type="number">32.767</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>res</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>__u16</name><operator>)</operator> <call><name>round</name><argument_list>(<argument><expr><name>sec</name> <operator>*</operator> <literal type="number">1000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_stime2lin</name><parameter_list>(<parameter><decl><type><name>__s16</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sec</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">32.767</literal> <operator>||</operator> <name>sec</name></expr></argument> &gt;</argument_list></name> <literal type="number">32.767</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>res</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>__s16</name><operator>)</operator> <call><name>round</name><argument_list>(<argument><expr><name>sec</name> <operator>*</operator> <literal type="number">1000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_replay2lin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_replay</name></name> <modifier>*</modifier></type><name>lin</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ALLEGRO_HAPTIC_REPLAY</name></name> <modifier>*</modifier></type><name>al</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>lhap_time2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>delay</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>delay</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>lhap_time2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_level2lin</name><parameter_list>(<parameter><decl><type><name>__u16</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>level</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0.0</literal> <operator>||</operator> <name>level</name></expr></argument> &gt;</argument_list></name> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <operator>(</operator><name>__u16</name><operator>)</operator> <call><name>round</name><argument_list>(<argument><expr><name>level</name> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><literal type="number">0x7fff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_slevel2lin</name><parameter_list>(<parameter><decl><type><name>__s16</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>level</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">1.0</literal> <operator>||</operator> <name>level</name></expr></argument> &gt;</argument_list></name> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <operator>(</operator><name>__s16</name><operator>)</operator> <call><name>round</name><argument_list>(<argument><expr><name>level</name> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><literal type="number">0x7ffe</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_envelope2lin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_envelope</name></name> <modifier>*</modifier></type><name>lin</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ALLEGRO_HAPTIC_ENVELOPE</name></name> <modifier>*</modifier></type><name>al</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>lhap_time2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>attack_length</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>attack_length</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>lhap_time2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>fade_length</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>fade_length</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>lhap_level2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>attack_level</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>attack_level</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>lhap_level2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>fade_level</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>fade_level</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_rumble2lin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_rumble_effect</name></name> <modifier>*</modifier></type><name>lin</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ALLEGRO_HAPTIC_RUMBLE_EFFECT</name></name> <modifier>*</modifier></type><name>al</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>lhap_level2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>strong_magnitude</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>strong_magnitude</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>lhap_level2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>weak_magnitude</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>weak_magnitude</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_constant2lin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_constant_effect</name></name> <modifier>*</modifier></type><name>lin</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ALLEGRO_HAPTIC_CONSTANT_EFFECT</name></name> <modifier>*</modifier></type><name>al</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>lhap_envelope2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>envelope</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>al</name><operator>-&gt;</operator><name>envelope</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>lhap_slevel2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_ramp2lin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_ramp_effect</name></name> <modifier>*</modifier></type><name>lin</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ALLEGRO_HAPTIC_RAMP_EFFECT</name></name> <modifier>*</modifier></type><name>al</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>lhap_envelope2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>envelope</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>al</name><operator>-&gt;</operator><name>envelope</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>lhap_slevel2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>start_level</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>start_level</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>lhap_slevel2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>end_level</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>end_level</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_condition2lin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_condition_effect</name></name> <modifier>*</modifier></type><name>lin</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ALLEGRO_HAPTIC_CONDITION_EFFECT</name></name> <modifier>*</modifier></type><name>al</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>lhap_slevel2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>center</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>center</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>lhap_level2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>deadband</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>deadband</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>lhap_slevel2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>right_coeff</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>right_coeff</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>lhap_level2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>right_saturation</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>right_saturation</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>lhap_slevel2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>left_coeff</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>left_coeff</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>lhap_level2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>left_saturation</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>left_saturation</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_periodic2lin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_periodic_effect</name></name> <modifier>*</modifier></type><name>lin</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ALLEGRO_HAPTIC_PERIODIC_EFFECT</name></name> <modifier>*</modifier></type><name>al</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>al</name><operator>-&gt;</operator><name>custom_data</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>lhap_slevel2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>magnitude</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>magnitude</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>lhap_stime2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>lhap_time2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>period</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>period</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>lhap_time2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>phase</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>phase</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>lhap_wave2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>waveform</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>waveform</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>lhap_envelope2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>envelope</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>al</name><operator>-&gt;</operator><name>envelope</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_effect2lin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_effect</name></name> <modifier>*</modifier></type><name>lin</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT</name> <modifier>*</modifier></type><name>al</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>lin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>lin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lhap_type2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>lin</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <operator>(</operator><name>__u16</name><operator>)</operator>
<call><name>round</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><literal type="number">0xC000</literal> <operator>*</operator> <name><name>al</name><operator>-&gt;</operator><name>direction</name><operator>.</operator><name>angle</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>M_PI</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lin</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lhap_replay2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>replay</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>al</name><operator>-&gt;</operator><name>replay</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>lin</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FF_RUMBLE</name></expr>:</case>
<return>return <expr><call><name>lhap_rumble2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>rumble</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>al</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>rumble</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>FF_PERIODIC</name></expr>:</case>
<return>return <expr><call><name>lhap_periodic2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>periodic</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>al</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>periodic</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>FF_CONSTANT</name></expr>:</case>
<return>return <expr><call><name>lhap_constant2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>constant</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>al</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>constant</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>FF_RAMP</name></expr>:</case>
<return>return <expr><call><name>lhap_ramp2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>ramp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>al</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>ramp</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>FF_SPRING</name></expr>:</case> 
<case>case <expr><name>FF_FRICTION</name></expr>:</case> 
<case>case <expr><name>FF_DAMPER</name></expr>:</case> 
<case>case <expr><name>FF_INERTIA</name></expr>:</case>
<return>return <expr><call><name>lhap_condition2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lin</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>condition</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>al</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>condition</name></name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_get_active</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>haptic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_LINUX</name> <modifier>*</modifier></type><name>lhap</name> <init>= <expr><call><name>lhap_from_al</name><argument_list>(<argument><expr><name>haptic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>lhap</name><operator>-&gt;</operator><name>active</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_is_mouse_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MOUSE</name> <modifier>*</modifier></type><name>mouse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mouse</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_fd_can_ff</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name><name>bitmask</name><index>[<expr><call><name>NLONGS</name><argument_list>(<argument><expr><name>EV_CNT</name></expr></argument>)</argument_list></call></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>EVIOCGBIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bitmask</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bitmask</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name>EV_FF</name></expr></argument>, <argument><expr><name>bitmask</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_is_joystick_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier></type><name>ljoy</name> <init>= <expr><operator>(</operator><name>ALLEGRO_JOYSTICK_LINUX</name> <operator>*</operator><operator>)</operator> <name>joy</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_is_joystick_installed</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_get_joystick_active</name><argument_list>(<argument><expr><name>joy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ljoy</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>lhap_fd_can_ff</name><argument_list>(<argument><expr><name><name>ljoy</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_is_display_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_is_keyboard_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_KEYBOARD</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_is_touch_input_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TOUCH_INPUT</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>lhap_get_from_mouse</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MOUSE</name> <modifier>*</modifier></type><name>mouse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mouse</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_haptic_capabilities</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>capabilities</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>bitmask</name><index>[<expr><call><name>NLONGS</name><argument_list>(<argument><expr><name>FF_CNT</name></expr></argument>)</argument_list></call></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>caps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>EVIOCGBIT</name><argument_list>(<argument><expr><name>EV_FF</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bitmask</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bitmask</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"EVIOCGBIT failed for fd %d"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>caps</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cap_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>allegro_bit</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>cap_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>linux_bit</name></expr></argument>, <argument><expr><name>bitmask</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>caps</name> <operator>|=</operator> <name><name>cap_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>allegro_bit</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>capabilities</name><operator>)</operator> <operator>=</operator> <name>caps</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Capabilities: 0x%x\n"</literal></expr></argument>, <argument><expr><name>caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>lhap_get_from_joystick</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier></type><name>ljoy</name> <init>= <expr><operator>(</operator><name>ALLEGRO_JOYSTICK_LINUX</name> <operator>*</operator><operator>)</operator> <name>joy</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_LINUX</name> <modifier>*</modifier></type><name>lhap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_is_joystick_haptic</name><argument_list>(<argument><expr><name>joy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>haptic_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lhap</name> <operator>=</operator> <call><name>lhap_get_available_haptic</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lhap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>haptic_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lhap</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>device</name></name> <operator>=</operator> <name>joy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lhap</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>from</name></name> <operator>=</operator> <name>_AL_HAPTIC_FROM_JOYSTICK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lhap</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name><name>ljoy</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lhap</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HAPTICS_EFFECTS_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>lhap</name><operator>-&gt;</operator><name>effects</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></for>
<expr_stmt><expr><name><name>lhap</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>gain</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_haptic_capabilities</name><argument_list>(<argument><expr><name><name>lhap</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lhap</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>haptic_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>lhap</name><operator>-&gt;</operator><name>parent</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>lhap_get_from_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>lhap_get_from_keyboard</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_KEYBOARD</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>lhap_get_from_touch_input</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TOUCH_INPUT</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>lhap_get_capabilities</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_LINUX</name> <modifier>*</modifier></type><name>lhap</name> <init>= <expr><call><name>lhap_from_al</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>lhap</name><operator>-&gt;</operator><name>flags</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>double</name></type> <name>lhap_get_gain</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_LINUX</name> <modifier>*</modifier></type><name>lhap</name> <init>= <expr><call><name>lhap_from_al</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>al_is_haptic_capable</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>ALLEGRO_HAPTIC_GAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<return>return <expr><literal type="number">0.0</literal></expr>;</return> 
</block_content>}</block></if></if_stmt> 




<return>return <expr><name><name>lhap</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>gain</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_set_gain</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>gain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_LINUX</name> <modifier>*</modifier></type><name>lhap</name> <init>= <expr><call><name>lhap_from_al</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>input_event</name></name></type> <name>ie</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lhap</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>gain</name></name> <operator>=</operator> <name>gain</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ie</name><operator>.</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ie</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>EV_FF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ie</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>FF_GAIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ie</name><operator>.</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>__s32</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><literal type="number">0xFFFF</literal> <operator>*</operator> <name>gain</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>lhap</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ie</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ie</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_set_autocenter</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>autocenter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_LINUX</name> <modifier>*</modifier></type><name>lhap</name> <init>= <expr><call><name>lhap_from_al</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>input_event</name></name></type> <name>ie</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lhap</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>autocenter</name></name> <operator>=</operator> <name>autocenter</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ie</name><operator>.</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ie</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>EV_FF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ie</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>FF_AUTOCENTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ie</name><operator>.</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>__s32</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><literal type="number">0xFFFF</literal> <operator>*</operator> <name>autocenter</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>lhap</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ie</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ie</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>lhap_get_autocenter</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_LINUX</name> <modifier>*</modifier></type><name>lhap</name> <init>= <expr><call><name>lhap_from_al</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>al_is_haptic_capable</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>ALLEGRO_HAPTIC_AUTOCENTER</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<return>return <expr><literal type="number">0.0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<return>return <expr><name><name>lhap</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>autocenter</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>lhap_get_max_effects</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_LINUX</name> <modifier>*</modifier></type><name>lhap</name> <init>= <expr><call><name>lhap_from_al</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_effects</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>lhap</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>EVIOCGEFFECTS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_effects</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"EVIOCGEFFECTS failed on fd %d\n"</literal></expr></argument>, <argument><expr><name><name>lhap</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n_effects</name> <operator>=</operator> <name>HAPTICS_EFFECTS_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n_effects</name> <operator>&lt;</operator> <name>HAPTICS_EFFECTS_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>n_effects</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>HAPTICS_EFFECTS_MAX</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_is_effect_ok</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>haptic</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>caps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ff_effect</name></name></type> <name>leff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>caps</name> <operator>=</operator> <call><name>al_get_haptic_capabilities</name><argument_list>(<argument><expr><name>haptic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>caps</name> <operator>&amp;</operator> <name><name>effect</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>lhap_effect2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>leff</name></expr></argument>, <argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_upload_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_LINUX</name> <modifier>*</modifier></type><name>lhap</name> <init>= <expr><call><name>lhap_from_al</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ff_effect</name></name></type> <name>leff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_haptic</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_handle</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lhap_effect2lin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>leff</name></expr></argument>, <argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"lhap_effect2lin failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>found</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>al_get_max_haptic_effects</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lhap</name><operator>-&gt;</operator><name>effects</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>found</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"No free effect slot."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>leff</name><operator>.</operator><name>id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>lhap</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>EVIOCSFF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>leff</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"EVIOCSFF failed for fd %d\n"</literal></expr></argument>, <argument><expr><name><name>lhap</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_haptic</name></name> <operator>=</operator> <name>dev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_id</name></name> <operator>=</operator> <name>found</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_handle</name></name> <operator>=</operator> <name><name>leff</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_effect_duration</name></name> <operator>=</operator> <call><name>al_get_haptic_effect_duration</name><argument_list>(<argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_playing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>lhap</name><operator>-&gt;</operator><name>effects</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>found</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_play_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loops</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_LINUX</name> <modifier>*</modifier></type><name>lhap</name> <init>= <expr><operator>(</operator><name>ALLEGRO_HAPTIC_LINUX</name> <operator>*</operator><operator>)</operator> <name><name>id</name><operator>-&gt;</operator><name>_haptic</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>input_event</name></name></type> <name>play</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>duration</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lhap</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <name><name>lhap</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>play</name><operator>.</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>play</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>EV_FF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>play</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>_handle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>loops</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>loops</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>loops</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>play</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>loops</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>play</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>play</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Effect play failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>duration</name> <operator>=</operator> <name>loops</name> <operator>*</operator> <name><name>id</name><operator>-&gt;</operator><name>_effect_duration</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_playing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_start_time</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_end_time</name></name> <operator>=</operator> <name>now</name> <operator>+</operator> <name>duration</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_stop_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_LINUX</name> <modifier>*</modifier></type><name>lhap</name> <init>= <expr><operator>(</operator><name>ALLEGRO_HAPTIC_LINUX</name> <operator>*</operator><operator>)</operator> <name><name>id</name><operator>-&gt;</operator><name>_haptic</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>input_event</name></name></type> <name>play</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lhap</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>play</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>play</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>play</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>EV_FF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>play</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>_handle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>play</name><operator>.</operator><name>value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>lhap</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>play</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>play</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Stop effect failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_playing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_is_effect_playing</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<return>return <expr><operator>(</operator><name><name>id</name><operator>-&gt;</operator><name>_playing</name></name> <operator>&amp;&amp;</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name><name>id</name><operator>-&gt;</operator><name>_end_time</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_release_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_LINUX</name> <modifier>*</modifier></type><name>lhap</name> <init>= <expr><operator>(</operator><name>ALLEGRO_HAPTIC_LINUX</name> <operator>*</operator><operator>)</operator><name><name>id</name><operator>-&gt;</operator><name>_haptic</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lhap_stop_effect</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>lhap</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>EVIOCRMFF</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>_handle</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"EVIOCRMFF failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>lhap</name><operator>-&gt;</operator><name>effects</name><index>[<expr><name><name>id</name><operator>-&gt;</operator><name>_id</name></name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>lhap_release</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>haptic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_LINUX</name> <modifier>*</modifier></type><name>lhap</name> <init>= <expr><call><name>lhap_from_al</name><argument_list>(<argument><expr><name>haptic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>haptic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lhap</name><operator>-&gt;</operator><name>active</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>lhap</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lhap</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



</unit>
