<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\linux\lmseps2.c"><cpp:error>#<cpp:directive>error</cpp:directive> This driver has not been updated to the new mouse API.</cpp:error>


















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintunix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/linalleg.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>intellimouse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>packet_size</name></decl>;</decl_stmt>






















<function><type><specifier>static</specifier> <name>int</name></type> <name>processor</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name>packet_size</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 


<if_stmt><if>if <condition>(<expr><name>intellimouse</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc8</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x08</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x00</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="number">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>y</name> <operator>-=</operator> <literal type="number">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>intellimouse</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>z</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>z</name><operator>-</operator><literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>__al_linux_mouse_handler</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>l</name><operator>+</operator><operator>(</operator><name>r</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>m</name><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>packet_size</name></expr>;</return> 
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>analyse_data</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packets</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>errors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name>step</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>packets</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>buffer</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>step</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>step</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch></block_content></block></for>

<return>return <expr><operator>(</operator><name>errors</name> <operator>&lt;=</operator> <literal type="number">5</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>errors</name> <operator>&lt;</operator> <name>size</name> <operator>/</operator> <literal type="number">20</literal><operator>)</operator></expr>;</return> 
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>INTERNAL_MOUSE_DRIVER</name></type> <name>intdrv</name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><name>processor</name></expr>,
<expr><literal type="number">3</literal></expr>
}</block></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>void</name></type> <name>sync_mouse</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fd_set</name></type> <name>set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>bitbucket</name></decl>;</decl_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><call><name>FD_ZERO</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_SET</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>select</name> <argument_list>(<argument><expr><name>FD_SETSIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>read</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitbucket</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>result</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>wakeup_im</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>init</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">243</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">243</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">243</literal></expr>, <expr><literal type="number">80</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>init</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>init</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>!=</operator> <name>EINTR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>ret</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof <argument_list>(<argument><expr><name>init</name></expr></argument>)</argument_list></sizeof></expr>)</condition>;</do>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>mouse_init</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp1</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp2</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>udevice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>default_devices</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"/dev/mouse"</literal></expr>,
<expr><literal type="string">"/dev/input/mice"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>udevice</name> <operator>=</operator> <call><name>get_config_string</name> <argument_list>(<argument><expr><call><name>uconvert_ascii</name> <argument_list>(<argument><expr><literal type="string">"mouse"</literal></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>uconvert_ascii</name> <argument_list>(<argument><expr><literal type="string">"mouse_device"</literal></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>O_NONBLOCK</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>intellimouse</name></expr> ?</condition><then> <expr><name>O_RDWR</name></expr> </then><else>: <expr><name>O_RDONLY</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>udevice</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>intdrv</name><operator>.</operator><name>device</name></name> <operator>=</operator> <call><name>open</name> <argument_list>(<argument><expr><call><name>uconvert_toascii</name> <argument_list>(<argument><expr><name>udevice</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>default_devices</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>default_devices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>intdrv</name><operator>.</operator><name>device</name></name> <operator>=</operator> <call><name>open</name> <argument_list>(<argument><expr><name><name>default_devices</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>intdrv</name><operator>.</operator><name>device</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>intdrv</name><operator>.</operator><name>device</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>uszprintf</name> <argument_list>(<argument><expr><name>allegro_error</name></expr></argument>, <argument><expr><name>ALLEGRO_ERROR_SIZE</name></expr></argument>, <argument><expr><call><name>get_config_text</name> <argument_list>(<argument><expr><literal type="string">"Unable to open %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>udevice</name></expr> ?</condition><then> <expr><name>udevice</name></expr> </then><else>: <expr><call><name>get_config_text</name><argument_list>(<argument><expr><literal type="string">"one of the default mice devices"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
<argument><expr><call><name>ustrerror</name> <argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>intellimouse</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wakeup_im</name> <argument_list>(<argument><expr><name><name>intdrv</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>sync_mouse</name> <argument_list>(<argument><expr><name><name>intdrv</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>__al_linux_mouse_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>intdrv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>ps2_mouse_init</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>intellimouse</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>packet_size</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return <expr><call><name>mouse_init</name> <argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>ips2_mouse_init</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>intellimouse</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>packet_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><call><name>mouse_init</name> <argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>mouse_exit</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__al_linux_mouse_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>intdrv</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>MOUSE_DRIVER</name></type> <name>mousedrv_linux_ps2</name> <init>=
<expr><block>{
<expr><name>MOUSEDRV_LINUX_PS2</name></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"Linux PS/2 mouse"</literal></expr>,
<expr><name>ps2_mouse_init</name></expr>,
<expr><name>mouse_exit</name></expr>,
<expr><name>NULL</name></expr>, 
<expr><name>NULL</name></expr>, 
<expr><name>__al_linux_mouse_position</name></expr>,
<expr><name>__al_linux_mouse_set_range</name></expr>,
<expr><name>__al_linux_mouse_set_speed</name></expr>,
<expr><name>__al_linux_mouse_get_mickeys</name></expr>,
<expr><name>analyse_data</name></expr>,
<expr><name>NULL</name></expr>, 
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOUSE_DRIVER</name></type> <name>mousedrv_linux_ips2</name> <init>=
<expr><block>{
<expr><name>MOUSEDRV_LINUX_IPS2</name></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"Linux PS/2 Intellimouse"</literal></expr>,
<expr><name>ips2_mouse_init</name></expr>,
<expr><name>mouse_exit</name></expr>,
<expr><name>NULL</name></expr>, 
<expr><name>NULL</name></expr>, 
<expr><name>__al_linux_mouse_position</name></expr>,
<expr><name>__al_linux_mouse_set_range</name></expr>,
<expr><name>__al_linux_mouse_set_speed</name></expr>,
<expr><name>__al_linux_mouse_get_mickeys</name></expr>,
<expr><name>analyse_data</name></expr>,
<expr><name>NULL</name></expr>, 
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
