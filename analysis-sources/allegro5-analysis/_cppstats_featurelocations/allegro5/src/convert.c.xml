<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\convert.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_convert.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_8888_to_rgba_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_8888_TO_RGBA_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_8888_to_argb_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_8888_TO_ARGB_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_8888_to_rgb_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_ARGB_8888_TO_RGB_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_8888_to_rgb_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_8888_TO_RGB_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_8888_to_rgb_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_8888_TO_RGB_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_8888_to_rgba_5551</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_8888_TO_RGBA_5551</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_8888_to_argb_1555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_8888_TO_ARGB_1555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_8888_to_abgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_8888_TO_ABGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_8888_to_xbgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_8888_TO_XBGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_8888_to_bgr_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_ARGB_8888_TO_BGR_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_8888_to_bgr_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_8888_TO_BGR_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_8888_to_bgr_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_8888_TO_BGR_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_8888_to_rgbx_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_8888_TO_RGBX_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_8888_to_xrgb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_8888_TO_XRGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_8888_to_abgr_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_8888_TO_ABGR_F32</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_8888_to_abgr_8888_le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_8888_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_8888_to_rgba_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_8888_TO_RGBA_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_8888_to_single_channel_8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_8888_TO_SINGLE_CHANNEL_8</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_8888_to_argb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_8888_TO_ARGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_8888_to_argb_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_8888_TO_ARGB_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_8888_to_rgb_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_RGBA_8888_TO_RGB_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_8888_to_rgb_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_8888_TO_RGB_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_8888_to_rgb_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_8888_TO_RGB_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_8888_to_rgba_5551</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_8888_TO_RGBA_5551</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_8888_to_argb_1555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_8888_TO_ARGB_1555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_8888_to_abgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_8888_TO_ABGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_8888_to_xbgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_8888_TO_XBGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_8888_to_bgr_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_RGBA_8888_TO_BGR_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_8888_to_bgr_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_8888_TO_BGR_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_8888_to_bgr_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_8888_TO_BGR_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_8888_to_rgbx_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_8888_TO_RGBX_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_8888_to_xrgb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_8888_TO_XRGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_8888_to_abgr_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_8888_TO_ABGR_F32</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_8888_to_abgr_8888_le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_8888_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_8888_to_rgba_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_8888_TO_RGBA_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_8888_to_single_channel_8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_8888_TO_SINGLE_CHANNEL_8</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_4444_to_argb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_4444_TO_ARGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_4444_to_rgba_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_4444_TO_RGBA_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_4444_to_rgb_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_ARGB_4444_TO_RGB_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_4444_to_rgb_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_4444_TO_RGB_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_4444_to_rgb_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_4444_TO_RGB_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_4444_to_rgba_5551</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_4444_TO_RGBA_5551</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_4444_to_argb_1555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_4444_TO_ARGB_1555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_4444_to_abgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_4444_TO_ABGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_4444_to_xbgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_4444_TO_XBGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_4444_to_bgr_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_ARGB_4444_TO_BGR_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_4444_to_bgr_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_4444_TO_BGR_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_4444_to_bgr_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_4444_TO_BGR_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_4444_to_rgbx_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_4444_TO_RGBX_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_4444_to_xrgb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_4444_TO_XRGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_4444_to_abgr_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_4444_TO_ABGR_F32</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_4444_to_abgr_8888_le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_4444_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_4444_to_rgba_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_4444_TO_RGBA_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_4444_to_single_channel_8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_4444_TO_SINGLE_CHANNEL_8</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_888_to_argb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_888_TO_ARGB_8888</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_888_to_rgba_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_888_TO_RGBA_8888</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_888_to_argb_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_888_TO_ARGB_4444</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_888_to_rgb_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_888_TO_RGB_565</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_888_to_rgb_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_888_TO_RGB_555</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_888_to_rgba_5551</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_888_TO_RGBA_5551</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_888_to_argb_1555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_888_TO_ARGB_1555</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_888_to_abgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_888_TO_ABGR_8888</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_888_to_xbgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_888_TO_XBGR_8888</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_888_to_bgr_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_RGB_888_TO_BGR_888</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_888_to_bgr_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_888_TO_BGR_565</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_888_to_bgr_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_888_TO_BGR_555</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_888_to_rgbx_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_888_TO_RGBX_8888</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_888_to_xrgb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_888_TO_XRGB_8888</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_888_to_abgr_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_888_TO_ABGR_F32</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_888_to_abgr_8888_le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_888_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_888_to_rgba_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_888_TO_RGBA_4444</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_888_to_single_channel_8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_888_TO_SINGLE_CHANNEL_8</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_565_to_argb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_565_TO_ARGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_565_to_rgba_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_565_TO_RGBA_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_565_to_argb_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_565_TO_ARGB_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_565_to_rgb_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_RGB_565_TO_RGB_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_565_to_rgb_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_565_TO_RGB_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_565_to_rgba_5551</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_565_TO_RGBA_5551</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_565_to_argb_1555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_565_TO_ARGB_1555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_565_to_abgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_565_TO_ABGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_565_to_xbgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_565_TO_XBGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_565_to_bgr_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_RGB_565_TO_BGR_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_565_to_bgr_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_565_TO_BGR_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_565_to_bgr_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_565_TO_BGR_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_565_to_rgbx_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_565_TO_RGBX_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_565_to_xrgb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_565_TO_XRGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_565_to_abgr_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_565_TO_ABGR_F32</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_565_to_abgr_8888_le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_565_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_565_to_rgba_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_565_TO_RGBA_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_565_to_single_channel_8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_565_TO_SINGLE_CHANNEL_8</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_555_to_argb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_555_TO_ARGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_555_to_rgba_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_555_TO_RGBA_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_555_to_argb_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_555_TO_ARGB_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_555_to_rgb_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_RGB_555_TO_RGB_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_555_to_rgb_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_555_TO_RGB_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_555_to_rgba_5551</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_555_TO_RGBA_5551</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_555_to_argb_1555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_555_TO_ARGB_1555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_555_to_abgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_555_TO_ABGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_555_to_xbgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_555_TO_XBGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_555_to_bgr_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_RGB_555_TO_BGR_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_555_to_bgr_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_555_TO_BGR_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_555_to_bgr_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_555_TO_BGR_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_555_to_rgbx_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_555_TO_RGBX_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_555_to_xrgb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_555_TO_XRGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_555_to_abgr_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_555_TO_ABGR_F32</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_555_to_abgr_8888_le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_555_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_555_to_rgba_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_555_TO_RGBA_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_555_to_single_channel_8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_555_TO_SINGLE_CHANNEL_8</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_5551_to_argb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_5551_TO_ARGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_5551_to_rgba_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_5551_TO_RGBA_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_5551_to_argb_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_5551_TO_ARGB_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_5551_to_rgb_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_RGBA_5551_TO_RGB_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_5551_to_rgb_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_5551_TO_RGB_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_5551_to_rgb_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_5551_TO_RGB_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_5551_to_argb_1555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_5551_TO_ARGB_1555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_5551_to_abgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_5551_TO_ABGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_5551_to_xbgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_5551_TO_XBGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_5551_to_bgr_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_RGBA_5551_TO_BGR_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_5551_to_bgr_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_5551_TO_BGR_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_5551_to_bgr_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_5551_TO_BGR_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_5551_to_rgbx_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_5551_TO_RGBX_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_5551_to_xrgb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_5551_TO_XRGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_5551_to_abgr_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_5551_TO_ABGR_F32</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_5551_to_abgr_8888_le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_5551_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_5551_to_rgba_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_5551_TO_RGBA_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_5551_to_single_channel_8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_5551_TO_SINGLE_CHANNEL_8</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_1555_to_argb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_1555_TO_ARGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_1555_to_rgba_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_1555_TO_RGBA_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_1555_to_argb_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_1555_TO_ARGB_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_1555_to_rgb_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_ARGB_1555_TO_RGB_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_1555_to_rgb_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_1555_TO_RGB_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_1555_to_rgb_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_1555_TO_RGB_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_1555_to_rgba_5551</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_1555_TO_RGBA_5551</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_1555_to_abgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_1555_TO_ABGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_1555_to_xbgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_1555_TO_XBGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_1555_to_bgr_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_ARGB_1555_TO_BGR_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_1555_to_bgr_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_1555_TO_BGR_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_1555_to_bgr_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_1555_TO_BGR_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_1555_to_rgbx_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_1555_TO_RGBX_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_1555_to_xrgb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_1555_TO_XRGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_1555_to_abgr_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_1555_TO_ABGR_F32</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_1555_to_abgr_8888_le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_1555_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_1555_to_rgba_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_1555_TO_RGBA_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>argb_1555_to_single_channel_8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_1555_TO_SINGLE_CHANNEL_8</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_to_argb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_TO_ARGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_to_rgba_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_TO_RGBA_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_to_argb_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_TO_ARGB_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_to_rgb_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_ABGR_8888_TO_RGB_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_to_rgb_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_TO_RGB_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_to_rgb_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_TO_RGB_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_to_rgba_5551</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_TO_RGBA_5551</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_to_argb_1555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_TO_ARGB_1555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_to_xbgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_TO_XBGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_to_bgr_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_ABGR_8888_TO_BGR_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_to_bgr_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_TO_BGR_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_to_bgr_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_TO_BGR_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_to_rgbx_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_TO_RGBX_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_to_xrgb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_TO_XRGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_to_abgr_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_TO_ABGR_F32</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_to_abgr_8888_le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_to_rgba_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_TO_RGBA_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_to_single_channel_8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_TO_SINGLE_CHANNEL_8</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xbgr_8888_to_argb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XBGR_8888_TO_ARGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xbgr_8888_to_rgba_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XBGR_8888_TO_RGBA_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xbgr_8888_to_argb_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XBGR_8888_TO_ARGB_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xbgr_8888_to_rgb_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_XBGR_8888_TO_RGB_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xbgr_8888_to_rgb_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XBGR_8888_TO_RGB_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xbgr_8888_to_rgb_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XBGR_8888_TO_RGB_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xbgr_8888_to_rgba_5551</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XBGR_8888_TO_RGBA_5551</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xbgr_8888_to_argb_1555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XBGR_8888_TO_ARGB_1555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xbgr_8888_to_abgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XBGR_8888_TO_ABGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xbgr_8888_to_bgr_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_XBGR_8888_TO_BGR_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xbgr_8888_to_bgr_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XBGR_8888_TO_BGR_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xbgr_8888_to_bgr_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XBGR_8888_TO_BGR_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xbgr_8888_to_rgbx_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XBGR_8888_TO_RGBX_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xbgr_8888_to_xrgb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XBGR_8888_TO_XRGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xbgr_8888_to_abgr_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XBGR_8888_TO_ABGR_F32</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xbgr_8888_to_abgr_8888_le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XBGR_8888_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xbgr_8888_to_rgba_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XBGR_8888_TO_RGBA_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xbgr_8888_to_single_channel_8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XBGR_8888_TO_SINGLE_CHANNEL_8</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_888_to_argb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_888_TO_ARGB_8888</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_888_to_rgba_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_888_TO_RGBA_8888</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_888_to_argb_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_888_TO_ARGB_4444</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_888_to_rgb_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_BGR_888_TO_RGB_888</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_888_to_rgb_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_888_TO_RGB_565</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_888_to_rgb_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_888_TO_RGB_555</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_888_to_rgba_5551</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_888_TO_RGBA_5551</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_888_to_argb_1555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_888_TO_ARGB_1555</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_888_to_abgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_888_TO_ABGR_8888</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_888_to_xbgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_888_TO_XBGR_8888</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_888_to_bgr_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_888_TO_BGR_565</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_888_to_bgr_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_888_TO_BGR_555</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_888_to_rgbx_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_888_TO_RGBX_8888</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_888_to_xrgb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_888_TO_XRGB_8888</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_888_to_abgr_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_888_TO_ABGR_F32</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_888_to_abgr_8888_le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_888_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_888_to_rgba_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_888_TO_RGBA_4444</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_888_to_single_channel_8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>src_pixel</name> <init>= <expr><name><name>src_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_888_TO_SINGLE_CHANNEL_8</name><argument_list>(<argument><expr><name>src_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_565_to_argb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_565_TO_ARGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_565_to_rgba_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_565_TO_RGBA_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_565_to_argb_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_565_TO_ARGB_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_565_to_rgb_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_BGR_565_TO_RGB_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_565_to_rgb_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_565_TO_RGB_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_565_to_rgb_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_565_TO_RGB_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_565_to_rgba_5551</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_565_TO_RGBA_5551</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_565_to_argb_1555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_565_TO_ARGB_1555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_565_to_abgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_565_TO_ABGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_565_to_xbgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_565_TO_XBGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_565_to_bgr_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_BGR_565_TO_BGR_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_565_to_bgr_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_565_TO_BGR_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_565_to_rgbx_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_565_TO_RGBX_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_565_to_xrgb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_565_TO_XRGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_565_to_abgr_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_565_TO_ABGR_F32</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_565_to_abgr_8888_le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_565_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_565_to_rgba_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_565_TO_RGBA_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_565_to_single_channel_8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_565_TO_SINGLE_CHANNEL_8</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_555_to_argb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_555_TO_ARGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_555_to_rgba_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_555_TO_RGBA_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_555_to_argb_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_555_TO_ARGB_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_555_to_rgb_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_BGR_555_TO_RGB_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_555_to_rgb_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_555_TO_RGB_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_555_to_rgb_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_555_TO_RGB_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_555_to_rgba_5551</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_555_TO_RGBA_5551</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_555_to_argb_1555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_555_TO_ARGB_1555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_555_to_abgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_555_TO_ABGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_555_to_xbgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_555_TO_XBGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_555_to_bgr_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_BGR_555_TO_BGR_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_555_to_bgr_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_555_TO_BGR_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_555_to_rgbx_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_555_TO_RGBX_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_555_to_xrgb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_555_TO_XRGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_555_to_abgr_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_555_TO_ABGR_F32</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_555_to_abgr_8888_le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_555_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_555_to_rgba_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_555_TO_RGBA_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr_555_to_single_channel_8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_BGR_555_TO_SINGLE_CHANNEL_8</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgbx_8888_to_argb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBX_8888_TO_ARGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgbx_8888_to_rgba_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBX_8888_TO_RGBA_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgbx_8888_to_argb_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBX_8888_TO_ARGB_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgbx_8888_to_rgb_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_RGBX_8888_TO_RGB_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgbx_8888_to_rgb_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBX_8888_TO_RGB_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgbx_8888_to_rgb_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBX_8888_TO_RGB_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgbx_8888_to_rgba_5551</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBX_8888_TO_RGBA_5551</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgbx_8888_to_argb_1555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBX_8888_TO_ARGB_1555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgbx_8888_to_abgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBX_8888_TO_ABGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgbx_8888_to_xbgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBX_8888_TO_XBGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgbx_8888_to_bgr_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_RGBX_8888_TO_BGR_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgbx_8888_to_bgr_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBX_8888_TO_BGR_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgbx_8888_to_bgr_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBX_8888_TO_BGR_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgbx_8888_to_xrgb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBX_8888_TO_XRGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgbx_8888_to_abgr_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBX_8888_TO_ABGR_F32</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgbx_8888_to_abgr_8888_le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBX_8888_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgbx_8888_to_rgba_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBX_8888_TO_RGBA_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgbx_8888_to_single_channel_8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBX_8888_TO_SINGLE_CHANNEL_8</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xrgb_8888_to_argb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XRGB_8888_TO_ARGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xrgb_8888_to_rgba_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XRGB_8888_TO_RGBA_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xrgb_8888_to_argb_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XRGB_8888_TO_ARGB_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xrgb_8888_to_rgb_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_XRGB_8888_TO_RGB_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xrgb_8888_to_rgb_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XRGB_8888_TO_RGB_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xrgb_8888_to_rgb_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XRGB_8888_TO_RGB_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xrgb_8888_to_rgba_5551</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XRGB_8888_TO_RGBA_5551</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xrgb_8888_to_argb_1555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XRGB_8888_TO_ARGB_1555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xrgb_8888_to_abgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XRGB_8888_TO_ABGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xrgb_8888_to_xbgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XRGB_8888_TO_XBGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xrgb_8888_to_bgr_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_XRGB_8888_TO_BGR_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xrgb_8888_to_bgr_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XRGB_8888_TO_BGR_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xrgb_8888_to_bgr_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XRGB_8888_TO_BGR_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xrgb_8888_to_rgbx_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XRGB_8888_TO_RGBX_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xrgb_8888_to_abgr_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XRGB_8888_TO_ABGR_F32</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xrgb_8888_to_abgr_8888_le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XRGB_8888_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xrgb_8888_to_rgba_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XRGB_8888_TO_RGBA_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xrgb_8888_to_single_channel_8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XRGB_8888_TO_SINGLE_CHANNEL_8</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_f32_to_argb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_F32_TO_ARGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_f32_to_rgba_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_F32_TO_RGBA_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_f32_to_argb_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_F32_TO_ARGB_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_f32_to_rgb_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_ABGR_F32_TO_RGB_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_f32_to_rgb_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_F32_TO_RGB_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_f32_to_rgb_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_F32_TO_RGB_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_f32_to_rgba_5551</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_F32_TO_RGBA_5551</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_f32_to_argb_1555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_F32_TO_ARGB_1555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_f32_to_abgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_F32_TO_ABGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_f32_to_xbgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_F32_TO_XBGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_f32_to_bgr_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_ABGR_F32_TO_BGR_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_f32_to_bgr_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_F32_TO_BGR_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_f32_to_bgr_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_F32_TO_BGR_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_f32_to_rgbx_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_F32_TO_RGBX_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_f32_to_xrgb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_F32_TO_XRGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_f32_to_abgr_8888_le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_F32_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_f32_to_rgba_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_F32_TO_RGBA_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_f32_to_single_channel_8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_F32_TO_SINGLE_CHANNEL_8</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_le_to_argb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_LE_TO_ARGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_le_to_rgba_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_LE_TO_RGBA_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_le_to_argb_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_LE_TO_ARGB_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_le_to_rgb_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_ABGR_8888_LE_TO_RGB_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_le_to_rgb_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_LE_TO_RGB_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_le_to_rgb_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_LE_TO_RGB_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_le_to_rgba_5551</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_LE_TO_RGBA_5551</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_le_to_argb_1555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_LE_TO_ARGB_1555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_le_to_abgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_LE_TO_ABGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_le_to_xbgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_LE_TO_XBGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_le_to_bgr_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_ABGR_8888_LE_TO_BGR_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_le_to_bgr_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_LE_TO_BGR_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_le_to_bgr_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_LE_TO_BGR_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_le_to_rgbx_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_LE_TO_RGBX_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_le_to_xrgb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_LE_TO_XRGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_le_to_abgr_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_LE_TO_ABGR_F32</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_le_to_rgba_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_LE_TO_RGBA_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abgr_8888_le_to_single_channel_8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ABGR_8888_LE_TO_SINGLE_CHANNEL_8</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_4444_to_argb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_4444_TO_ARGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_4444_to_rgba_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_4444_TO_RGBA_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_4444_to_argb_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_4444_TO_ARGB_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_4444_to_rgb_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_RGBA_4444_TO_RGB_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_4444_to_rgb_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_4444_TO_RGB_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_4444_to_rgb_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_4444_TO_RGB_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_4444_to_rgba_5551</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_4444_TO_RGBA_5551</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_4444_to_argb_1555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_4444_TO_ARGB_1555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_4444_to_abgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_4444_TO_ABGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_4444_to_xbgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_4444_TO_XBGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_4444_to_bgr_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_RGBA_4444_TO_BGR_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_4444_to_bgr_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_4444_TO_BGR_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_4444_to_bgr_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_4444_TO_BGR_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_4444_to_rgbx_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_4444_TO_RGBX_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_4444_to_xrgb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_4444_TO_XRGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_4444_to_abgr_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_4444_TO_ABGR_F32</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_4444_to_abgr_8888_le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_4444_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba_4444_to_single_channel_8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_4444_TO_SINGLE_CHANNEL_8</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>single_channel_8_to_argb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_SINGLE_CHANNEL_8_TO_ARGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>single_channel_8_to_rgba_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_SINGLE_CHANNEL_8_TO_RGBA_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>single_channel_8_to_argb_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_SINGLE_CHANNEL_8_TO_ARGB_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>single_channel_8_to_rgb_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_SINGLE_CHANNEL_8_TO_RGB_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>single_channel_8_to_rgb_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_SINGLE_CHANNEL_8_TO_RGB_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>single_channel_8_to_rgb_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_SINGLE_CHANNEL_8_TO_RGB_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>single_channel_8_to_rgba_5551</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_SINGLE_CHANNEL_8_TO_RGBA_5551</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>single_channel_8_to_argb_1555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_SINGLE_CHANNEL_8_TO_ARGB_1555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>single_channel_8_to_abgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_SINGLE_CHANNEL_8_TO_ABGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>single_channel_8_to_xbgr_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_SINGLE_CHANNEL_8_TO_XBGR_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>single_channel_8_to_bgr_888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pixel</name> <init>= <expr><call><name>ALLEGRO_CONVERT_SINGLE_CHANNEL_8_TO_BGR_888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>single_channel_8_to_bgr_565</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_SINGLE_CHANNEL_8_TO_BGR_565</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>single_channel_8_to_bgr_555</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_SINGLE_CHANNEL_8_TO_BGR_555</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>single_channel_8_to_rgbx_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_SINGLE_CHANNEL_8_TO_RGBX_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>single_channel_8_to_xrgb_8888</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_SINGLE_CHANNEL_8_TO_XRGB_8888</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>single_channel_8_to_abgr_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">16</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_SINGLE_CHANNEL_8_TO_ABGR_F32</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>single_channel_8_to_abgr_8888_le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_SINGLE_CHANNEL_8_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>single_channel_8_to_rgba_4444</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_gap</name> <init>= <expr><name>src_pitch</name> <operator>/</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_gap</name> <init>= <expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst_ptr</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_ptr</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_SINGLE_CHANNEL_8_TO_RGBA_4444</name><argument_list>(<argument><expr><operator>*</operator><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_gap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_gap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>_al_convert_funcs</name><index>[<expr><name>ALLEGRO_NUM_PIXEL_FORMATS</name></expr>]</index>
<index>[<expr><name>ALLEGRO_NUM_PIXEL_FORMATS</name></expr>]</index>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list> <init>= <expr><block>{
<expr><block>{<expr><name>NULL</name></expr>}</block></expr></block></expr></init><operator>,</operator>
<block>{<block_content><expr><name>NULL</name></expr></block_content>}</block></function_decl><operator>,</operator>
<block>{<block_content><expr><name>NULL</name></expr></block_content>}</block><operator>,</operator>
<block>{<block_content><expr><name>NULL</name></expr></block_content>}</block><operator>,</operator>
<block>{<block_content><expr><name>NULL</name></expr></block_content>}</block><operator>,</operator>
<block>{<block_content><expr><name>NULL</name></expr></block_content>}</block><operator>,</operator>
<block>{<block_content><expr><name>NULL</name></expr></block_content>}</block><operator>,</operator>
<block>{<block_content><expr><name>NULL</name></expr></block_content>}</block><operator>,</operator>
<block>{<block_content><expr><name>NULL</name></expr></block_content>}</block><operator>,</operator>
<block>{<block_content>
<expr_stmt><expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator>
<expr><name>argb_8888_to_rgba_8888</name></expr><operator>,</operator>
<expr><name>argb_8888_to_argb_4444</name></expr><operator>,</operator>
<expr><name>argb_8888_to_rgb_888</name></expr><operator>,</operator>
<expr><name>argb_8888_to_rgb_565</name></expr><operator>,</operator>
<expr><name>argb_8888_to_rgb_555</name></expr><operator>,</operator>
<expr><name>argb_8888_to_rgba_5551</name></expr><operator>,</operator>
<expr><name>argb_8888_to_argb_1555</name></expr><operator>,</operator>
<expr><name>argb_8888_to_abgr_8888</name></expr><operator>,</operator>
<expr><name>argb_8888_to_xbgr_8888</name></expr><operator>,</operator>
<expr><name>argb_8888_to_bgr_888</name></expr><operator>,</operator>
<expr><name>argb_8888_to_bgr_565</name></expr><operator>,</operator>
<expr><name>argb_8888_to_bgr_555</name></expr><operator>,</operator>
<expr><name>argb_8888_to_rgbx_8888</name></expr><operator>,</operator>
<expr><name>argb_8888_to_xrgb_8888</name></expr><operator>,</operator>
<expr><name>argb_8888_to_abgr_f32</name></expr><operator>,</operator>
<expr><name>argb_8888_to_abgr_8888_le</name></expr><operator>,</operator>
<expr><name>argb_8888_to_rgba_4444</name></expr><operator>,</operator>
<expr><name>argb_8888_to_single_channel_8</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block><operator>,</operator>
<block>{<block_content>
<expr_stmt><expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator>
<expr><name>rgba_8888_to_argb_8888</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator>
<expr><name>rgba_8888_to_argb_4444</name></expr><operator>,</operator>
<expr><name>rgba_8888_to_rgb_888</name></expr><operator>,</operator>
<expr><name>rgba_8888_to_rgb_565</name></expr><operator>,</operator>
<expr><name>rgba_8888_to_rgb_555</name></expr><operator>,</operator>
<expr><name>rgba_8888_to_rgba_5551</name></expr><operator>,</operator>
<expr><name>rgba_8888_to_argb_1555</name></expr><operator>,</operator>
<expr><name>rgba_8888_to_abgr_8888</name></expr><operator>,</operator>
<expr><name>rgba_8888_to_xbgr_8888</name></expr><operator>,</operator>
<expr><name>rgba_8888_to_bgr_888</name></expr><operator>,</operator>
<expr><name>rgba_8888_to_bgr_565</name></expr><operator>,</operator>
<expr><name>rgba_8888_to_bgr_555</name></expr><operator>,</operator>
<expr><name>rgba_8888_to_rgbx_8888</name></expr><operator>,</operator>
<expr><name>rgba_8888_to_xrgb_8888</name></expr><operator>,</operator>
<expr><name>rgba_8888_to_abgr_f32</name></expr><operator>,</operator>
<expr><name>rgba_8888_to_abgr_8888_le</name></expr><operator>,</operator>
<expr><name>rgba_8888_to_rgba_4444</name></expr><operator>,</operator>
<expr><name>rgba_8888_to_single_channel_8</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block><operator>,</operator>
<block>{<block_content>
<expr_stmt><expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator>
<expr><name>argb_4444_to_argb_8888</name></expr><operator>,</operator>
<expr><name>argb_4444_to_rgba_8888</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator>
<expr><name>argb_4444_to_rgb_888</name></expr><operator>,</operator>
<expr><name>argb_4444_to_rgb_565</name></expr><operator>,</operator>
<expr><name>argb_4444_to_rgb_555</name></expr><operator>,</operator>
<expr><name>argb_4444_to_rgba_5551</name></expr><operator>,</operator>
<expr><name>argb_4444_to_argb_1555</name></expr><operator>,</operator>
<expr><name>argb_4444_to_abgr_8888</name></expr><operator>,</operator>
<expr><name>argb_4444_to_xbgr_8888</name></expr><operator>,</operator>
<expr><name>argb_4444_to_bgr_888</name></expr><operator>,</operator>
<expr><name>argb_4444_to_bgr_565</name></expr><operator>,</operator>
<expr><name>argb_4444_to_bgr_555</name></expr><operator>,</operator>
<expr><name>argb_4444_to_rgbx_8888</name></expr><operator>,</operator>
<expr><name>argb_4444_to_xrgb_8888</name></expr><operator>,</operator>
<expr><name>argb_4444_to_abgr_f32</name></expr><operator>,</operator>
<expr><name>argb_4444_to_abgr_8888_le</name></expr><operator>,</operator>
<expr><name>argb_4444_to_rgba_4444</name></expr><operator>,</operator>
<expr><name>argb_4444_to_single_channel_8</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block><operator>,</operator>
<block>{<block_content>
<expr_stmt><expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator>
<expr><name>rgb_888_to_argb_8888</name></expr><operator>,</operator>
<expr><name>rgb_888_to_rgba_8888</name></expr><operator>,</operator>
<expr><name>rgb_888_to_argb_4444</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator>
<expr><name>rgb_888_to_rgb_565</name></expr><operator>,</operator>
<expr><name>rgb_888_to_rgb_555</name></expr><operator>,</operator>
<expr><name>rgb_888_to_rgba_5551</name></expr><operator>,</operator>
<expr><name>rgb_888_to_argb_1555</name></expr><operator>,</operator>
<expr><name>rgb_888_to_abgr_8888</name></expr><operator>,</operator>
<expr><name>rgb_888_to_xbgr_8888</name></expr><operator>,</operator>
<expr><name>rgb_888_to_bgr_888</name></expr><operator>,</operator>
<expr><name>rgb_888_to_bgr_565</name></expr><operator>,</operator>
<expr><name>rgb_888_to_bgr_555</name></expr><operator>,</operator>
<expr><name>rgb_888_to_rgbx_8888</name></expr><operator>,</operator>
<expr><name>rgb_888_to_xrgb_8888</name></expr><operator>,</operator>
<expr><name>rgb_888_to_abgr_f32</name></expr><operator>,</operator>
<expr><name>rgb_888_to_abgr_8888_le</name></expr><operator>,</operator>
<expr><name>rgb_888_to_rgba_4444</name></expr><operator>,</operator>
<expr><name>rgb_888_to_single_channel_8</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block><operator>,</operator>
<block>{<block_content>
<expr_stmt><expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator>
<expr><name>rgb_565_to_argb_8888</name></expr><operator>,</operator>
<expr><name>rgb_565_to_rgba_8888</name></expr><operator>,</operator>
<expr><name>rgb_565_to_argb_4444</name></expr><operator>,</operator>
<expr><name>rgb_565_to_rgb_888</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator>
<expr><name>rgb_565_to_rgb_555</name></expr><operator>,</operator>
<expr><name>rgb_565_to_rgba_5551</name></expr><operator>,</operator>
<expr><name>rgb_565_to_argb_1555</name></expr><operator>,</operator>
<expr><name>rgb_565_to_abgr_8888</name></expr><operator>,</operator>
<expr><name>rgb_565_to_xbgr_8888</name></expr><operator>,</operator>
<expr><name>rgb_565_to_bgr_888</name></expr><operator>,</operator>
<expr><name>rgb_565_to_bgr_565</name></expr><operator>,</operator>
<expr><name>rgb_565_to_bgr_555</name></expr><operator>,</operator>
<expr><name>rgb_565_to_rgbx_8888</name></expr><operator>,</operator>
<expr><name>rgb_565_to_xrgb_8888</name></expr><operator>,</operator>
<expr><name>rgb_565_to_abgr_f32</name></expr><operator>,</operator>
<expr><name>rgb_565_to_abgr_8888_le</name></expr><operator>,</operator>
<expr><name>rgb_565_to_rgba_4444</name></expr><operator>,</operator>
<expr><name>rgb_565_to_single_channel_8</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block><operator>,</operator>
<block>{<block_content>
<expr_stmt><expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator>
<expr><name>rgb_555_to_argb_8888</name></expr><operator>,</operator>
<expr><name>rgb_555_to_rgba_8888</name></expr><operator>,</operator>
<expr><name>rgb_555_to_argb_4444</name></expr><operator>,</operator>
<expr><name>rgb_555_to_rgb_888</name></expr><operator>,</operator>
<expr><name>rgb_555_to_rgb_565</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator>
<expr><name>rgb_555_to_rgba_5551</name></expr><operator>,</operator>
<expr><name>rgb_555_to_argb_1555</name></expr><operator>,</operator>
<expr><name>rgb_555_to_abgr_8888</name></expr><operator>,</operator>
<expr><name>rgb_555_to_xbgr_8888</name></expr><operator>,</operator>
<expr><name>rgb_555_to_bgr_888</name></expr><operator>,</operator>
<expr><name>rgb_555_to_bgr_565</name></expr><operator>,</operator>
<expr><name>rgb_555_to_bgr_555</name></expr><operator>,</operator>
<expr><name>rgb_555_to_rgbx_8888</name></expr><operator>,</operator>
<expr><name>rgb_555_to_xrgb_8888</name></expr><operator>,</operator>
<expr><name>rgb_555_to_abgr_f32</name></expr><operator>,</operator>
<expr><name>rgb_555_to_abgr_8888_le</name></expr><operator>,</operator>
<expr><name>rgb_555_to_rgba_4444</name></expr><operator>,</operator>
<expr><name>rgb_555_to_single_channel_8</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block><operator>,</operator>
<block>{<block_content>
<expr_stmt><expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator>
<expr><name>rgba_5551_to_argb_8888</name></expr><operator>,</operator>
<expr><name>rgba_5551_to_rgba_8888</name></expr><operator>,</operator>
<expr><name>rgba_5551_to_argb_4444</name></expr><operator>,</operator>
<expr><name>rgba_5551_to_rgb_888</name></expr><operator>,</operator>
<expr><name>rgba_5551_to_rgb_565</name></expr><operator>,</operator>
<expr><name>rgba_5551_to_rgb_555</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator>
<expr><name>rgba_5551_to_argb_1555</name></expr><operator>,</operator>
<expr><name>rgba_5551_to_abgr_8888</name></expr><operator>,</operator>
<expr><name>rgba_5551_to_xbgr_8888</name></expr><operator>,</operator>
<expr><name>rgba_5551_to_bgr_888</name></expr><operator>,</operator>
<expr><name>rgba_5551_to_bgr_565</name></expr><operator>,</operator>
<expr><name>rgba_5551_to_bgr_555</name></expr><operator>,</operator>
<expr><name>rgba_5551_to_rgbx_8888</name></expr><operator>,</operator>
<expr><name>rgba_5551_to_xrgb_8888</name></expr><operator>,</operator>
<expr><name>rgba_5551_to_abgr_f32</name></expr><operator>,</operator>
<expr><name>rgba_5551_to_abgr_8888_le</name></expr><operator>,</operator>
<expr><name>rgba_5551_to_rgba_4444</name></expr><operator>,</operator>
<expr><name>rgba_5551_to_single_channel_8</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block><operator>,</operator>
<block>{<block_content>
<expr_stmt><expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator>
<expr><name>argb_1555_to_argb_8888</name></expr><operator>,</operator>
<expr><name>argb_1555_to_rgba_8888</name></expr><operator>,</operator>
<expr><name>argb_1555_to_argb_4444</name></expr><operator>,</operator>
<expr><name>argb_1555_to_rgb_888</name></expr><operator>,</operator>
<expr><name>argb_1555_to_rgb_565</name></expr><operator>,</operator>
<expr><name>argb_1555_to_rgb_555</name></expr><operator>,</operator>
<expr><name>argb_1555_to_rgba_5551</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator>
<expr><name>argb_1555_to_abgr_8888</name></expr><operator>,</operator>
<expr><name>argb_1555_to_xbgr_8888</name></expr><operator>,</operator>
<expr><name>argb_1555_to_bgr_888</name></expr><operator>,</operator>
<expr><name>argb_1555_to_bgr_565</name></expr><operator>,</operator>
<expr><name>argb_1555_to_bgr_555</name></expr><operator>,</operator>
<expr><name>argb_1555_to_rgbx_8888</name></expr><operator>,</operator>
<expr><name>argb_1555_to_xrgb_8888</name></expr><operator>,</operator>
<expr><name>argb_1555_to_abgr_f32</name></expr><operator>,</operator>
<expr><name>argb_1555_to_abgr_8888_le</name></expr><operator>,</operator>
<expr><name>argb_1555_to_rgba_4444</name></expr><operator>,</operator>
<expr><name>argb_1555_to_single_channel_8</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block><operator>,</operator>
<block>{<block_content>
<expr_stmt><expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator>
<expr><name>abgr_8888_to_argb_8888</name></expr><operator>,</operator>
<expr><name>abgr_8888_to_rgba_8888</name></expr><operator>,</operator>
<expr><name>abgr_8888_to_argb_4444</name></expr><operator>,</operator>
<expr><name>abgr_8888_to_rgb_888</name></expr><operator>,</operator>
<expr><name>abgr_8888_to_rgb_565</name></expr><operator>,</operator>
<expr><name>abgr_8888_to_rgb_555</name></expr><operator>,</operator>
<expr><name>abgr_8888_to_rgba_5551</name></expr><operator>,</operator>
<expr><name>abgr_8888_to_argb_1555</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator>
<expr><name>abgr_8888_to_xbgr_8888</name></expr><operator>,</operator>
<expr><name>abgr_8888_to_bgr_888</name></expr><operator>,</operator>
<expr><name>abgr_8888_to_bgr_565</name></expr><operator>,</operator>
<expr><name>abgr_8888_to_bgr_555</name></expr><operator>,</operator>
<expr><name>abgr_8888_to_rgbx_8888</name></expr><operator>,</operator>
<expr><name>abgr_8888_to_xrgb_8888</name></expr><operator>,</operator>
<expr><name>abgr_8888_to_abgr_f32</name></expr><operator>,</operator>
<expr><name>abgr_8888_to_abgr_8888_le</name></expr><operator>,</operator>
<expr><name>abgr_8888_to_rgba_4444</name></expr><operator>,</operator>
<expr><name>abgr_8888_to_single_channel_8</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block><operator>,</operator>
<block>{<block_content>
<expr_stmt><expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator>
<expr><name>xbgr_8888_to_argb_8888</name></expr><operator>,</operator>
<expr><name>xbgr_8888_to_rgba_8888</name></expr><operator>,</operator>
<expr><name>xbgr_8888_to_argb_4444</name></expr><operator>,</operator>
<expr><name>xbgr_8888_to_rgb_888</name></expr><operator>,</operator>
<expr><name>xbgr_8888_to_rgb_565</name></expr><operator>,</operator>
<expr><name>xbgr_8888_to_rgb_555</name></expr><operator>,</operator>
<expr><name>xbgr_8888_to_rgba_5551</name></expr><operator>,</operator>
<expr><name>xbgr_8888_to_argb_1555</name></expr><operator>,</operator>
<expr><name>xbgr_8888_to_abgr_8888</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator>
<expr><name>xbgr_8888_to_bgr_888</name></expr><operator>,</operator>
<expr><name>xbgr_8888_to_bgr_565</name></expr><operator>,</operator>
<expr><name>xbgr_8888_to_bgr_555</name></expr><operator>,</operator>
<expr><name>xbgr_8888_to_rgbx_8888</name></expr><operator>,</operator>
<expr><name>xbgr_8888_to_xrgb_8888</name></expr><operator>,</operator>
<expr><name>xbgr_8888_to_abgr_f32</name></expr><operator>,</operator>
<expr><name>xbgr_8888_to_abgr_8888_le</name></expr><operator>,</operator>
<expr><name>xbgr_8888_to_rgba_4444</name></expr><operator>,</operator>
<expr><name>xbgr_8888_to_single_channel_8</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block><operator>,</operator>
<block>{<block_content>
<expr_stmt><expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator>
<expr><name>bgr_888_to_argb_8888</name></expr><operator>,</operator>
<expr><name>bgr_888_to_rgba_8888</name></expr><operator>,</operator>
<expr><name>bgr_888_to_argb_4444</name></expr><operator>,</operator>
<expr><name>bgr_888_to_rgb_888</name></expr><operator>,</operator>
<expr><name>bgr_888_to_rgb_565</name></expr><operator>,</operator>
<expr><name>bgr_888_to_rgb_555</name></expr><operator>,</operator>
<expr><name>bgr_888_to_rgba_5551</name></expr><operator>,</operator>
<expr><name>bgr_888_to_argb_1555</name></expr><operator>,</operator>
<expr><name>bgr_888_to_abgr_8888</name></expr><operator>,</operator>
<expr><name>bgr_888_to_xbgr_8888</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator>
<expr><name>bgr_888_to_bgr_565</name></expr><operator>,</operator>
<expr><name>bgr_888_to_bgr_555</name></expr><operator>,</operator>
<expr><name>bgr_888_to_rgbx_8888</name></expr><operator>,</operator>
<expr><name>bgr_888_to_xrgb_8888</name></expr><operator>,</operator>
<expr><name>bgr_888_to_abgr_f32</name></expr><operator>,</operator>
<expr><name>bgr_888_to_abgr_8888_le</name></expr><operator>,</operator>
<expr><name>bgr_888_to_rgba_4444</name></expr><operator>,</operator>
<expr><name>bgr_888_to_single_channel_8</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block><operator>,</operator>
<block>{<block_content>
<expr_stmt><expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator>
<expr><name>bgr_565_to_argb_8888</name></expr><operator>,</operator>
<expr><name>bgr_565_to_rgba_8888</name></expr><operator>,</operator>
<expr><name>bgr_565_to_argb_4444</name></expr><operator>,</operator>
<expr><name>bgr_565_to_rgb_888</name></expr><operator>,</operator>
<expr><name>bgr_565_to_rgb_565</name></expr><operator>,</operator>
<expr><name>bgr_565_to_rgb_555</name></expr><operator>,</operator>
<expr><name>bgr_565_to_rgba_5551</name></expr><operator>,</operator>
<expr><name>bgr_565_to_argb_1555</name></expr><operator>,</operator>
<expr><name>bgr_565_to_abgr_8888</name></expr><operator>,</operator>
<expr><name>bgr_565_to_xbgr_8888</name></expr><operator>,</operator>
<expr><name>bgr_565_to_bgr_888</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator>
<expr><name>bgr_565_to_bgr_555</name></expr><operator>,</operator>
<expr><name>bgr_565_to_rgbx_8888</name></expr><operator>,</operator>
<expr><name>bgr_565_to_xrgb_8888</name></expr><operator>,</operator>
<expr><name>bgr_565_to_abgr_f32</name></expr><operator>,</operator>
<expr><name>bgr_565_to_abgr_8888_le</name></expr><operator>,</operator>
<expr><name>bgr_565_to_rgba_4444</name></expr><operator>,</operator>
<expr><name>bgr_565_to_single_channel_8</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block><operator>,</operator>
<block>{<block_content>
<expr_stmt><expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator>
<expr><name>bgr_555_to_argb_8888</name></expr><operator>,</operator>
<expr><name>bgr_555_to_rgba_8888</name></expr><operator>,</operator>
<expr><name>bgr_555_to_argb_4444</name></expr><operator>,</operator>
<expr><name>bgr_555_to_rgb_888</name></expr><operator>,</operator>
<expr><name>bgr_555_to_rgb_565</name></expr><operator>,</operator>
<expr><name>bgr_555_to_rgb_555</name></expr><operator>,</operator>
<expr><name>bgr_555_to_rgba_5551</name></expr><operator>,</operator>
<expr><name>bgr_555_to_argb_1555</name></expr><operator>,</operator>
<expr><name>bgr_555_to_abgr_8888</name></expr><operator>,</operator>
<expr><name>bgr_555_to_xbgr_8888</name></expr><operator>,</operator>
<expr><name>bgr_555_to_bgr_888</name></expr><operator>,</operator>
<expr><name>bgr_555_to_bgr_565</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator>
<expr><name>bgr_555_to_rgbx_8888</name></expr><operator>,</operator>
<expr><name>bgr_555_to_xrgb_8888</name></expr><operator>,</operator>
<expr><name>bgr_555_to_abgr_f32</name></expr><operator>,</operator>
<expr><name>bgr_555_to_abgr_8888_le</name></expr><operator>,</operator>
<expr><name>bgr_555_to_rgba_4444</name></expr><operator>,</operator>
<expr><name>bgr_555_to_single_channel_8</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block><operator>,</operator>
<block>{<block_content>
<expr_stmt><expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator>
<expr><name>rgbx_8888_to_argb_8888</name></expr><operator>,</operator>
<expr><name>rgbx_8888_to_rgba_8888</name></expr><operator>,</operator>
<expr><name>rgbx_8888_to_argb_4444</name></expr><operator>,</operator>
<expr><name>rgbx_8888_to_rgb_888</name></expr><operator>,</operator>
<expr><name>rgbx_8888_to_rgb_565</name></expr><operator>,</operator>
<expr><name>rgbx_8888_to_rgb_555</name></expr><operator>,</operator>
<expr><name>rgbx_8888_to_rgba_5551</name></expr><operator>,</operator>
<expr><name>rgbx_8888_to_argb_1555</name></expr><operator>,</operator>
<expr><name>rgbx_8888_to_abgr_8888</name></expr><operator>,</operator>
<expr><name>rgbx_8888_to_xbgr_8888</name></expr><operator>,</operator>
<expr><name>rgbx_8888_to_bgr_888</name></expr><operator>,</operator>
<expr><name>rgbx_8888_to_bgr_565</name></expr><operator>,</operator>
<expr><name>rgbx_8888_to_bgr_555</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator>
<expr><name>rgbx_8888_to_xrgb_8888</name></expr><operator>,</operator>
<expr><name>rgbx_8888_to_abgr_f32</name></expr><operator>,</operator>
<expr><name>rgbx_8888_to_abgr_8888_le</name></expr><operator>,</operator>
<expr><name>rgbx_8888_to_rgba_4444</name></expr><operator>,</operator>
<expr><name>rgbx_8888_to_single_channel_8</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block><operator>,</operator>
<block>{<block_content>
<expr_stmt><expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator>
<expr><name>xrgb_8888_to_argb_8888</name></expr><operator>,</operator>
<expr><name>xrgb_8888_to_rgba_8888</name></expr><operator>,</operator>
<expr><name>xrgb_8888_to_argb_4444</name></expr><operator>,</operator>
<expr><name>xrgb_8888_to_rgb_888</name></expr><operator>,</operator>
<expr><name>xrgb_8888_to_rgb_565</name></expr><operator>,</operator>
<expr><name>xrgb_8888_to_rgb_555</name></expr><operator>,</operator>
<expr><name>xrgb_8888_to_rgba_5551</name></expr><operator>,</operator>
<expr><name>xrgb_8888_to_argb_1555</name></expr><operator>,</operator>
<expr><name>xrgb_8888_to_abgr_8888</name></expr><operator>,</operator>
<expr><name>xrgb_8888_to_xbgr_8888</name></expr><operator>,</operator>
<expr><name>xrgb_8888_to_bgr_888</name></expr><operator>,</operator>
<expr><name>xrgb_8888_to_bgr_565</name></expr><operator>,</operator>
<expr><name>xrgb_8888_to_bgr_555</name></expr><operator>,</operator>
<expr><name>xrgb_8888_to_rgbx_8888</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator>
<expr><name>xrgb_8888_to_abgr_f32</name></expr><operator>,</operator>
<expr><name>xrgb_8888_to_abgr_8888_le</name></expr><operator>,</operator>
<expr><name>xrgb_8888_to_rgba_4444</name></expr><operator>,</operator>
<expr><name>xrgb_8888_to_single_channel_8</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block><operator>,</operator>
<block>{<block_content>
<expr_stmt><expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator>
<expr><name>abgr_f32_to_argb_8888</name></expr><operator>,</operator>
<expr><name>abgr_f32_to_rgba_8888</name></expr><operator>,</operator>
<expr><name>abgr_f32_to_argb_4444</name></expr><operator>,</operator>
<expr><name>abgr_f32_to_rgb_888</name></expr><operator>,</operator>
<expr><name>abgr_f32_to_rgb_565</name></expr><operator>,</operator>
<expr><name>abgr_f32_to_rgb_555</name></expr><operator>,</operator>
<expr><name>abgr_f32_to_rgba_5551</name></expr><operator>,</operator>
<expr><name>abgr_f32_to_argb_1555</name></expr><operator>,</operator>
<expr><name>abgr_f32_to_abgr_8888</name></expr><operator>,</operator>
<expr><name>abgr_f32_to_xbgr_8888</name></expr><operator>,</operator>
<expr><name>abgr_f32_to_bgr_888</name></expr><operator>,</operator>
<expr><name>abgr_f32_to_bgr_565</name></expr><operator>,</operator>
<expr><name>abgr_f32_to_bgr_555</name></expr><operator>,</operator>
<expr><name>abgr_f32_to_rgbx_8888</name></expr><operator>,</operator>
<expr><name>abgr_f32_to_xrgb_8888</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator>
<expr><name>abgr_f32_to_abgr_8888_le</name></expr><operator>,</operator>
<expr><name>abgr_f32_to_rgba_4444</name></expr><operator>,</operator>
<expr><name>abgr_f32_to_single_channel_8</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block><operator>,</operator>
<block>{<block_content>
<expr_stmt><expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator>
<expr><name>abgr_8888_le_to_argb_8888</name></expr><operator>,</operator>
<expr><name>abgr_8888_le_to_rgba_8888</name></expr><operator>,</operator>
<expr><name>abgr_8888_le_to_argb_4444</name></expr><operator>,</operator>
<expr><name>abgr_8888_le_to_rgb_888</name></expr><operator>,</operator>
<expr><name>abgr_8888_le_to_rgb_565</name></expr><operator>,</operator>
<expr><name>abgr_8888_le_to_rgb_555</name></expr><operator>,</operator>
<expr><name>abgr_8888_le_to_rgba_5551</name></expr><operator>,</operator>
<expr><name>abgr_8888_le_to_argb_1555</name></expr><operator>,</operator>
<expr><name>abgr_8888_le_to_abgr_8888</name></expr><operator>,</operator>
<expr><name>abgr_8888_le_to_xbgr_8888</name></expr><operator>,</operator>
<expr><name>abgr_8888_le_to_bgr_888</name></expr><operator>,</operator>
<expr><name>abgr_8888_le_to_bgr_565</name></expr><operator>,</operator>
<expr><name>abgr_8888_le_to_bgr_555</name></expr><operator>,</operator>
<expr><name>abgr_8888_le_to_rgbx_8888</name></expr><operator>,</operator>
<expr><name>abgr_8888_le_to_xrgb_8888</name></expr><operator>,</operator>
<expr><name>abgr_8888_le_to_abgr_f32</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator>
<expr><name>abgr_8888_le_to_rgba_4444</name></expr><operator>,</operator>
<expr><name>abgr_8888_le_to_single_channel_8</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block><operator>,</operator>
<block>{<block_content>
<expr_stmt><expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator>
<expr><name>rgba_4444_to_argb_8888</name></expr><operator>,</operator>
<expr><name>rgba_4444_to_rgba_8888</name></expr><operator>,</operator>
<expr><name>rgba_4444_to_argb_4444</name></expr><operator>,</operator>
<expr><name>rgba_4444_to_rgb_888</name></expr><operator>,</operator>
<expr><name>rgba_4444_to_rgb_565</name></expr><operator>,</operator>
<expr><name>rgba_4444_to_rgb_555</name></expr><operator>,</operator>
<expr><name>rgba_4444_to_rgba_5551</name></expr><operator>,</operator>
<expr><name>rgba_4444_to_argb_1555</name></expr><operator>,</operator>
<expr><name>rgba_4444_to_abgr_8888</name></expr><operator>,</operator>
<expr><name>rgba_4444_to_xbgr_8888</name></expr><operator>,</operator>
<expr><name>rgba_4444_to_bgr_888</name></expr><operator>,</operator>
<expr><name>rgba_4444_to_bgr_565</name></expr><operator>,</operator>
<expr><name>rgba_4444_to_bgr_555</name></expr><operator>,</operator>
<expr><name>rgba_4444_to_rgbx_8888</name></expr><operator>,</operator>
<expr><name>rgba_4444_to_xrgb_8888</name></expr><operator>,</operator>
<expr><name>rgba_4444_to_abgr_f32</name></expr><operator>,</operator>
<expr><name>rgba_4444_to_abgr_8888_le</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator>
<expr><name>rgba_4444_to_single_channel_8</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block><operator>,</operator>
<block>{<block_content>
<expr_stmt><expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator>
<expr><name>single_channel_8_to_argb_8888</name></expr><operator>,</operator>
<expr><name>single_channel_8_to_rgba_8888</name></expr><operator>,</operator>
<expr><name>single_channel_8_to_argb_4444</name></expr><operator>,</operator>
<expr><name>single_channel_8_to_rgb_888</name></expr><operator>,</operator>
<expr><name>single_channel_8_to_rgb_565</name></expr><operator>,</operator>
<expr><name>single_channel_8_to_rgb_555</name></expr><operator>,</operator>
<expr><name>single_channel_8_to_rgba_5551</name></expr><operator>,</operator>
<expr><name>single_channel_8_to_argb_1555</name></expr><operator>,</operator>
<expr><name>single_channel_8_to_abgr_8888</name></expr><operator>,</operator>
<expr><name>single_channel_8_to_xbgr_8888</name></expr><operator>,</operator>
<expr><name>single_channel_8_to_bgr_888</name></expr><operator>,</operator>
<expr><name>single_channel_8_to_bgr_565</name></expr><operator>,</operator>
<expr><name>single_channel_8_to_bgr_555</name></expr><operator>,</operator>
<expr><name>single_channel_8_to_rgbx_8888</name></expr><operator>,</operator>
<expr><name>single_channel_8_to_xrgb_8888</name></expr><operator>,</operator>
<expr><name>single_channel_8_to_abgr_f32</name></expr><operator>,</operator>
<expr><name>single_channel_8_to_abgr_8888_le</name></expr><operator>,</operator>
<expr><name>single_channel_8_to_rgba_4444</name></expr><operator>,</operator>
<expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block><operator>,</operator>
<block>{<block_content><expr><name>NULL</name></expr></block_content>}</block><operator>,</operator>
<block>{<block_content><expr><name>NULL</name></expr></block_content>}</block><operator>,</operator>
<block>{<block_content><expr><name>NULL</name></expr></block_content>}</block><operator>,</operator>
};


</unit>
