<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\file_slice.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>SLICE_DATA</name></name></type> <name>SLICE_DATA</name>;</typedef>

<enum>enum <block>{
<decl><name>SLICE_READ</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>SLICE_WRITE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>SLICE_EXPANDABLE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block>;</enum>

<struct>struct <name>SLICE_DATA</name>
<block>{
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>anchor</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>slice_fclose</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SLICE_DATA</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><call><name>al_get_file_userdata</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>al_fseek</name><argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>anchor</name></name> <operator>+</operator> <name><name>slice</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>ALLEGRO_SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>slice_fread</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SLICE_DATA</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><call><name>al_get_file_userdata</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>slice</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>SLICE_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>slice</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>SLICE_EXPANDABLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>slice</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name><name>slice</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>slice</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>b</name> <init>= <expr><call><name>al_fread</name><argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slice</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <name><name>slice</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>slice_fwrite</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SLICE_DATA</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><call><name>al_get_file_userdata</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>slice</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>SLICE_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>slice</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>SLICE_EXPANDABLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>slice</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name><name>slice</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>slice</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>b</name> <init>= <expr><call><name>al_fwrite</name><argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slice</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <name><name>slice</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>slice_fflush</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SLICE_DATA</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><call><name>al_get_file_userdata</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>al_fflush</name><argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>slice_ftell</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SLICE_DATA</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><call><name>al_get_file_userdata</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>slice</name><operator>-&gt;</operator><name>pos</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>slice_fseek</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SLICE_DATA</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><call><name>al_get_file_userdata</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>whence</name> <operator>==</operator> <name>ALLEGRO_SEEK_SET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>anchor</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>whence</name> <operator>==</operator> <name>ALLEGRO_SEEK_CUR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>anchor</name></name> <operator>+</operator> <name><name>slice</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>whence</name> <operator>==</operator> <name>ALLEGRO_SEEK_END</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>anchor</name></name> <operator>+</operator> <name><name>slice</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>offset</name> <operator>&lt;</operator> <name><name>slice</name><operator>-&gt;</operator><name>anchor</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>anchor</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>offset</name> <operator>&gt;</operator> <name><name>slice</name><operator>-&gt;</operator><name>anchor</name></name> <operator>+</operator> <name><name>slice</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>slice</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>SLICE_EXPANDABLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>anchor</name></name> <operator>+</operator> <name><name>slice</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_fseek</name><argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>ALLEGRO_SEEK_SET</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>offset</name> <operator>-</operator> <name><name>slice</name><operator>-&gt;</operator><name>anchor</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slice</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <name><name>slice</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>slice_feof</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SLICE_DATA</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><call><name>al_get_file_userdata</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>slice</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;=</operator> <name><name>slice</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>slice_ferror</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SLICE_DATA</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><call><name>al_get_file_userdata</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>al_ferror</name><argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>slice_ferrmsg</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SLICE_DATA</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><call><name>al_get_file_userdata</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>al_ferrmsg</name><argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>slice_fclearerr</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SLICE_DATA</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><call><name>al_get_file_userdata</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_fclearerr</name><argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>off_t</name></type> <name>slice_fsize</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SLICE_DATA</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><call><name>al_get_file_userdata</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>slice</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ALLEGRO_FILE_INTERFACE</name></type> <name>fi</name> <init>=
<expr><block>{
<expr><name>NULL</name></expr>,
<expr><name>slice_fclose</name></expr>,
<expr><name>slice_fread</name></expr>,
<expr><name>slice_fwrite</name></expr>,
<expr><name>slice_fflush</name></expr>,
<expr><name>slice_ftell</name></expr>,
<expr><name>slice_fseek</name></expr>,
<expr><name>slice_feof</name></expr>,
<expr><name>slice_ferror</name></expr>,
<expr><name>slice_ferrmsg</name></expr>,
<expr><name>slice_fclearerr</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>slice_fsize</name></expr>
}</block></expr></init></decl>;</decl_stmt>



<function><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>al_fopen_slice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>initial_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SLICE_DATA</name> <modifier>*</modifier></type><name>userdata</name> <init>= <expr><call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>userdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>userdata</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"R"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>userdata</name><operator>-&gt;</operator><name>mode</name></name> <operator>|=</operator> <name>SLICE_READ</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"W"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>userdata</name><operator>-&gt;</operator><name>mode</name></name> <operator>|=</operator> <name>SLICE_WRITE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"e"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"E"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>userdata</name><operator>-&gt;</operator><name>mode</name></name> <operator>|=</operator> <name>SLICE_EXPANDABLE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>userdata</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>userdata</name><operator>-&gt;</operator><name>anchor</name></name> <operator>=</operator> <call><name>al_ftell</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>userdata</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>initial_size</name></expr>;</expr_stmt>

<return>return <expr><call><name>al_create_file_handle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fi</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

</unit>
