<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\threads.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>



<typedef>typedef <type><enum>enum <name>THREAD_STATE</name> <block>{
<decl><name>THREAD_STATE_CREATED</name></decl>, 
<decl><name>THREAD_STATE_STARTING</name></decl>, 
<decl><name>THREAD_STATE_STARTED</name></decl>, 
<decl><name>THREAD_STATE_JOINING</name></decl>, 
<decl><name>THREAD_STATE_JOINED</name></decl>, 
<decl><name>THREAD_STATE_DESTROYED</name></decl>,
<decl><name>THREAD_STATE_DETACHED</name></decl>
}</block></enum></type> <name>THREAD_STATE</name>;</typedef>


<struct>struct <name>ALLEGRO_THREAD</name> <block>{
<decl_stmt><decl><type><name>_AL_THREAD</name></type> <name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_MUTEX</name></type> <name>mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_COND</name></type> <name>cond</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>THREAD_STATE</name></type> <name>thread_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>proc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>retval</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>ALLEGRO_MUTEX</name> <block>{
<decl_stmt><decl><type><name>_AL_MUTEX</name></type> <name>mutex</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>ALLEGRO_COND</name> <block>{
<decl_stmt><decl><type><name>_AL_COND</name></type> <name>cond</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_func_trampoline</name><parameter_list>(<parameter><decl><type><name>_AL_THREAD</name> <modifier>*</modifier></type><name>inner</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_outer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>outer</name> <init>= <expr><operator>(</operator><name>ALLEGRO_THREAD</name> <operator>*</operator><operator>)</operator> <name>_outer</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>inner</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>system</name> <operator>&amp;&amp;</operator> <name><name>system</name><operator>-&gt;</operator><name>vt</name></name> <operator>&amp;&amp;</operator> <name><name>system</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>thread_init</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>system</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>thread_init</name></name><argument_list>(<argument><expr><name>outer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outer</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>outer</name><operator>-&gt;</operator><name>thread_state</name></name> <operator>==</operator> <name>THREAD_STATE_CREATED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outer</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>outer</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outer</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>outer</name><operator>-&gt;</operator><name>thread_state</name></name> <operator>==</operator> <name>THREAD_STATE_STARTING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>outer</name><operator>-&gt;</operator><name>thread_state</name></name> <operator>=</operator> <name>THREAD_STATE_STARTED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outer</name><operator>-&gt;</operator><name>retval</name></name> <operator>=</operator>
<operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>ALLEGRO_THREAD</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name><name>outer</name><operator>-&gt;</operator><name>proc</name></name><operator>)</operator><operator>(</operator><name>outer</name><operator>,</operator> <name><name>outer</name><operator>-&gt;</operator><name>arg</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>system</name> <operator>&amp;&amp;</operator> <name><name>system</name><operator>-&gt;</operator><name>vt</name></name> <operator>&amp;&amp;</operator> <name><name>system</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>thread_exit</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>system</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>thread_exit</name></name><argument_list>(<argument><expr><name>outer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>detached_thread_func_trampoline</name><parameter_list>(<parameter><decl><type><name>_AL_THREAD</name> <modifier>*</modifier></type><name>inner</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_outer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>outer</name> <init>= <expr><operator>(</operator><name>ALLEGRO_THREAD</name> <operator>*</operator><operator>)</operator> <name>_outer</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>inner</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name><name>outer</name><operator>-&gt;</operator><name>proc</name></name><operator>)</operator><operator>(</operator><name><name>outer</name><operator>-&gt;</operator><name>arg</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>outer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>create_thread</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>outer</name></decl>;</decl_stmt>

<expr_stmt><expr><name>outer</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>outer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outer</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>_AL_MARK_MUTEX_UNINITED</name><argument_list>(<argument><expr><name><name>outer</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>outer</name><operator>-&gt;</operator><name>retval</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>outer</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>al_create_thread</name><parameter_list>(
<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>proc</name>)<parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>outer</name> <init>= <expr><call><name>create_thread</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>outer</name><operator>-&gt;</operator><name>thread_state</name></name> <operator>=</operator> <name>THREAD_STATE_CREATED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outer</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outer</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outer</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outer</name><operator>-&gt;</operator><name>proc</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_thread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outer</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>thread_func_trampoline</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>outer</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>al_create_thread_with_stacksize</name><parameter_list>(
<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>proc</name>)<parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>stacksize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>outer</name> <init>= <expr><call><name>create_thread</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>outer</name><operator>-&gt;</operator><name>thread_state</name></name> <operator>=</operator> <name>THREAD_STATE_CREATED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outer</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outer</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outer</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outer</name><operator>-&gt;</operator><name>proc</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_thread_create_with_stacksize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outer</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>thread_func_trampoline</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>, <argument><expr><name>stacksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>outer</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_run_detached_thread</name><parameter_list>(<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>proc</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>outer</name> <init>= <expr><call><name>create_thread</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>outer</name><operator>-&gt;</operator><name>thread_state</name></name> <operator>=</operator> <name>THREAD_STATE_DETACHED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outer</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outer</name><operator>-&gt;</operator><name>proc</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_thread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outer</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>detached_thread_func_trampoline</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_thread_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outer</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_start_thread</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>thread</name><operator>-&gt;</operator><name>thread_state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>THREAD_STATE_CREATED</name></expr>:</case>
<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>thread_state</name></name> <operator>=</operator> <name>THREAD_STATE_STARTING</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>THREAD_STATE_STARTING</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>THREAD_STATE_STARTED</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>THREAD_STATE_JOINING</name></expr>:</case>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>thread_state</name></name> <operator>!=</operator> <name>THREAD_STATE_JOINING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>THREAD_STATE_JOINED</name></expr>:</case>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>thread_state</name></name> <operator>!=</operator> <name>THREAD_STATE_JOINED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>THREAD_STATE_DESTROYED</name></expr>:</case>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>thread_state</name></name> <operator>!=</operator> <name>THREAD_STATE_DESTROYED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>THREAD_STATE_DETACHED</name></expr>:</case>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>thread_state</name></name> <operator>!=</operator> <name>THREAD_STATE_DETACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_join_thread</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<while>while <condition>(<expr><name><name>thread</name><operator>-&gt;</operator><name>thread_state</name></name> <operator>==</operator> <name>THREAD_STATE_STARTING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<switch>switch <condition>(<expr><name><name>thread</name><operator>-&gt;</operator><name>thread_state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>THREAD_STATE_CREATED</name></expr>:</case> 
<case>case <expr><name>THREAD_STATE_STARTED</name></expr>:</case>
<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>thread_state</name></name> <operator>=</operator> <name>THREAD_STATE_JOINING</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_thread_join</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>thread_state</name></name> <operator>=</operator> <name>THREAD_STATE_JOINED</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>THREAD_STATE_STARTING</name></expr>:</case>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>thread_state</name></name> <operator>!=</operator> <name>THREAD_STATE_STARTING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>THREAD_STATE_JOINING</name></expr>:</case>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>thread_state</name></name> <operator>!=</operator> <name>THREAD_STATE_JOINING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>THREAD_STATE_JOINED</name></expr>:</case>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>thread_state</name></name> <operator>!=</operator> <name>THREAD_STATE_JOINED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>THREAD_STATE_DESTROYED</name></expr>:</case>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>thread_state</name></name> <operator>!=</operator> <name>THREAD_STATE_DESTROYED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>THREAD_STATE_DETACHED</name></expr>:</case>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>thread_state</name></name> <operator>!=</operator> <name>THREAD_STATE_DETACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret_value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ret_value</name> <operator>=</operator> <name><name>thread</name><operator>-&gt;</operator><name>retval</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_set_thread_should_stop</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_thread_set_should_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_get_thread_should_stop</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>_al_get_thread_should_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_destroy_thread</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>thread</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<switch>switch <condition>(<expr><name><name>thread</name><operator>-&gt;</operator><name>thread_state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>THREAD_STATE_CREATED</name></expr>:</case> 
<case>case <expr><name>THREAD_STATE_STARTING</name></expr>:</case> 
<case>case <expr><name>THREAD_STATE_STARTED</name></expr>:</case>
<expr_stmt><expr><call><name>al_join_thread</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>THREAD_STATE_JOINING</name></expr>:</case>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>thread_state</name></name> <operator>!=</operator> <name>THREAD_STATE_JOINING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>THREAD_STATE_JOINED</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>THREAD_STATE_DESTROYED</name></expr>:</case>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>thread_state</name></name> <operator>!=</operator> <name>THREAD_STATE_DESTROYED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>THREAD_STATE_DETACHED</name></expr>:</case>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>thread_state</name></name> <operator>!=</operator> <name>THREAD_STATE_DETACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>thread_state</name></name> <operator>=</operator> <name>THREAD_STATE_DESTROYED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>al_create_mutex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>mutex</name> <init>= <expr><call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mutex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mutex</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_AL_MARK_MUTEX_UNINITED</name><argument_list>(<argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>mutex</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>al_create_mutex_recursive</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>mutex</name> <init>= <expr><call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mutex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mutex</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_AL_MARK_MUTEX_UNINITED</name><argument_list>(<argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_mutex_init_recursive</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>mutex</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_lock_mutex</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_unlock_mutex</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_destroy_mutex</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mutex</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>ALLEGRO_COND</name> <modifier>*</modifier></type><name>al_create_cond</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COND</name> <modifier>*</modifier></type><name>cond</name> <init>= <expr><call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cond</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cond</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>cond</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_destroy_cond</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_COND</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cond</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_wait_cond</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_COND</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_wait_cond_until</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_COND</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_TIMEOUT</name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>_al_cond_timedwait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_broadcast_cond</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_COND</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_signal_cond</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_COND</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



</unit>
