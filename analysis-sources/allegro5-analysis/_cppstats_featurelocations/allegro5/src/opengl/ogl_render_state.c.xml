<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\opengl\ogl_render_state.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_opengl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_display.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_opengl.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"opengl"</literal></argument>)</argument_list></macro>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>_gl_funcs</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>GL_NEVER</name></expr>,
<expr><name>GL_ALWAYS</name></expr>,
<expr><name>GL_LESS</name></expr>,
<expr><name>GL_EQUAL</name></expr>,
<expr><name>GL_LEQUAL</name></expr>,
<expr><name>GL_GREATER</name></expr>,
<expr><name>GL_NOTEQUAL</name></expr>,
<expr><name>GL_GEQUAL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>_al_ogl_update_render_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_ALLEGRO_RENDER_STATE</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>render_state</name></name></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_SHADER_GLSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GLint</name></type> <name>atloc</name> <init>= <expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>alpha_test_loc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLint</name></type> <name>floc</name> <init>= <expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>alpha_func_loc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLint</name></type> <name>tvloc</name> <init>= <expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>alpha_test_val_loc</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>program_object</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>floc</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>tvloc</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glUniform1i</name><argument_list>(<argument><expr><name>atloc</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>alpha_test</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glUniform1i</name><argument_list>(<argument><expr><name>floc</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>alpha_function</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glUniform1f</name><argument_list>(<argument><expr><name>tvloc</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>alpha_test_value</name></name> <operator>/</operator> <literal type="number">255.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_FIXED_FUNCTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>alpha_test</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glDisable</name><argument_list>(<argument><expr><name>GL_ALPHA_TEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_ALPHA_TEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>glAlphaFunc</name><argument_list>(<argument><expr><name><name>_gl_funcs</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>alpha_function</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>alpha_test_value</name></name> <operator>/</operator> <literal type="number">255.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>depth_test</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glDisable</name><argument_list>(<argument><expr><name>GL_DEPTH_TEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_DEPTH_TEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>glDepthFunc</name><argument_list>(<argument><expr><name><name>_gl_funcs</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>depth_function</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDepthMask</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>write_mask</name></name> <operator>&amp;</operator> <name>ALLEGRO_MASK_DEPTH</name><operator>)</operator></expr> ?</condition><then> <expr><name>GL_TRUE</name></expr> </then><else>: <expr><name>GL_FALSE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glColorMask</name><argument_list>(
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>write_mask</name></name> <operator>&amp;</operator> <name>ALLEGRO_MASK_RED</name><operator>)</operator></expr> ?</condition><then> <expr><name>GL_TRUE</name></expr> </then><else>: <expr><name>GL_FALSE</name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>write_mask</name></name> <operator>&amp;</operator> <name>ALLEGRO_MASK_GREEN</name><operator>)</operator></expr> ?</condition><then> <expr><name>GL_TRUE</name></expr> </then><else>: <expr><name>GL_FALSE</name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>write_mask</name></name> <operator>&amp;</operator> <name>ALLEGRO_MASK_BLUE</name><operator>)</operator></expr> ?</condition><then> <expr><name>GL_TRUE</name></expr> </then><else>: <expr><name>GL_FALSE</name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>write_mask</name></name> <operator>&amp;</operator> <name>ALLEGRO_MASK_ALPHA</name><operator>)</operator></expr> ?</condition><then> <expr><name>GL_TRUE</name></expr> </then><else>: <expr><name>GL_FALSE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
