<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\opengl\ogl_lock_es.c">














<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_opengl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_opengl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_pixels.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_ANDROID</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_android.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ogl_helpers.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"opengl"</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_glformat</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_al_ogl_get_glformat((f), (c))</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <name>int</name></type> <name>ogl_pixel_alignment</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pixel_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<switch>switch <condition>(<expr><name>pixel_size</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<return>return <expr><name>pixel_size</name></expr>;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="number">16</literal></expr>:</case> 
<return>return <expr><literal type="number">4</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ogl_pitch</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pixel_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pitch</name> <init>= <expr><name>w</name> <operator>*</operator> <name>pixel_size</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>pitch</name></expr>;</return>
</block_content>}</block></function>







<function_decl><type><specifier>static</specifier> <name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>ogl_lock_region_bb_readonly</name><parameter_list>(
<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>real_format</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>ogl_lock_region_bb_proxy</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>real_format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>ogl_lock_region_nonbb</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>real_format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ogl_lock_region_nonbb_writeonly</name><parameter_list>(
<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>real_format</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ogl_lock_region_nonbb_readwrite</name><parameter_list>(
<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>real_format</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>restore_fbo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ogl_lock_region_nonbb_readwrite_fbo</name><parameter_list>(
<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>real_format</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>_al_ogl_lock_region_gles</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ogl_bitmap</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>disp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>real_format</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>ALLEGRO_PIXEL_FORMAT_ANY</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>bitmap_format</name> <init>= <expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_al_pixel_format_is_compressed</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>bitmap_format</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>real_format</name> <operator>=</operator> <call><name>_al_get_real_pixel_format</name><argument_list>(<argument><expr><name>disp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>is_backbuffer</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_LOCK_READONLY</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ogl_lock_region_bb_readonly</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>real_format</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>ogl_lock_region_bb_proxy</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>real_format</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>ogl_lock_region_nonbb</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>real_format</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>ogl_lock_region_bb_readonly</name><parameter_list>(
<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>real_format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ogl_bitmap</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pixel_size</name> <init>= <expr><call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>real_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pitch</name> <init>= <expr><call><name>ogl_pitch</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>pixel_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>gl_y</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>y</name> <operator>-</operator> <name>h</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>pitch</name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>glReadPixels</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,
<argument><expr><name>GL_RGBA</name></expr></argument>, <argument><expr><name>GL_UNSIGNED_BYTE</name></expr></argument>,
<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glReadPixels for format %s failed (%s).\n"</literal></expr></argument>,
<argument><expr><call><name>_al_pixel_format_name</name><argument_list>(<argument><expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Converting from format %d -&gt; %d\n"</literal></expr></argument>,
<argument><expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name></expr></argument>, <argument><expr><name>real_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>_al_convert_bitmap_data</name><argument_list>(<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>,
<argument><expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name></expr></argument>,
<argument><expr><call><name>ogl_pitch</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>,
<argument><expr><name>real_format</name></expr></argument>,
<argument><expr><name>pitch</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>+</operator> <name>pitch</name> <operator>*</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>real_format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pitch</name></name> <operator>=</operator> <operator>-</operator><name>pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pixel_size</name></name> <operator>=</operator> <name>pixel_size</name></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>ogl_lock_region_bb_proxy</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>real_format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ogl_bitmap</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>proxy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pixel_size</name> <init>= <expr><call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>real_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pitch</name> <init>= <expr><call><name>ogl_pitch</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>pixel_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Creating backbuffer proxy bitmap\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>proxy</name> <operator>=</operator> <call><name>_al_create_bitmap_params</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>real_format</name></expr></argument>, <argument><expr><name>ALLEGRO_VIDEO_BITMAP</name><operator>|</operator><name>ALLEGRO_NO_PRESERVE_TEXTURE</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proxy</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Locking backbuffer proxy bitmap\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>lock_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>lock_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>lock_w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>lock_h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>lock_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lr</name> <operator>=</operator> <call><name>ogl_lock_region_nonbb</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>real_format</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_LOCK_WRITEONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_proxy</name> <init>= <expr><name><name>proxy</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>gl_y</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>y</name> <operator>-</operator> <name>h</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>e</name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>glReadPixels</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,
<argument><expr><name>GL_RGBA</name></expr></argument>, <argument><expr><name>GL_UNSIGNED_BYTE</name></expr></argument>,
<argument><expr><name><name>ogl_proxy</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glReadPixels for format %s failed (%s).\n"</literal></expr></argument>,
<argument><expr><call><name>_al_pixel_format_name</name><argument_list>(<argument><expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Converting from format %d -&gt; %d\n"</literal></expr></argument>,
<argument><expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name></expr></argument>, <argument><expr><name>real_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>_al_convert_bitmap_data</name><argument_list>(<argument><expr><name><name>ogl_proxy</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>,
<argument><expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name></expr></argument>,
<argument><expr><call><name>ogl_pitch</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ogl_proxy</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>,
<argument><expr><name>real_format</name></expr></argument>,
<argument><expr><name>pitch</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>locked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name></name> <operator>=</operator> <name><name>proxy</name><operator>-&gt;</operator><name>locked_region</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_proxy</name></name> <operator>=</operator> <name>proxy</name></expr>;</expr_stmt>
<return>return <expr><name>lr</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>ogl_lock_region_nonbb</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>real_format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ogl_bitmap</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>gl_y</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>y</name> <operator>-</operator> <name>h</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>disp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>old_disp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>old_target</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>restore_fbo</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>disp</name> <operator>||</operator>
<operator>(</operator><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>ogl_extras</name><operator>-&gt;</operator><name>is_shared</name></name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator>
<call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>disp</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>old_disp</name> <operator>=</operator> <name>disp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_set_current_display_only</name><argument_list>(<argument><expr><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>






<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pixel_size</name> <init>= <expr><call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>real_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pixel_alignment</name> <init>= <expr><call><name>ogl_pixel_alignment</name><argument_list>(<argument><expr><name>pixel_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>e</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glPixelStorei</name><argument_list>(<argument><expr><name>GL_PACK_ALIGNMENT</name></expr></argument>, <argument><expr><name>pixel_alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glPixelStorei(GL_PACK_ALIGNMENT, %d) failed (%s).\n"</literal></expr></argument>,
<argument><expr><name>pixel_alignment</name></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_LOCK_WRITEONLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Locking non-backbuffer WRITEONLY\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>ogl_lock_region_nonbb_writeonly</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ogl_bitmap</name></expr></argument>,
<argument><expr><name>x</name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>real_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Locking non-backbuffer %s\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_LOCK_READONLY</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"READONLY"</literal></expr> </then><else>: <expr><literal type="string">"READWRITE"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>ogl_lock_region_nonbb_readwrite</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ogl_bitmap</name></expr></argument>,
<argument><expr><name>x</name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>real_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>restore_fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>restore_fbo</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>old_target</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_set_current_display_only</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>old_target</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>old_target</name> <operator>!=</operator> <name>bitmap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_ogl_setup_fbo</name><argument_list>(<argument><expr><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>old_target</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>old_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call> <operator>==</operator> <name>old_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_disp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_current_display_only</name><argument_list>(<argument><expr><name>old_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to lock region\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>ogl_lock_region_nonbb_writeonly</name><parameter_list>(
<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>real_format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pixel_size</name> <init>= <expr><call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>real_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pitch</name> <init>= <expr><call><name>ogl_pitch</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>pixel_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>gl_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>pitch</name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>+</operator> <name>pitch</name> <operator>*</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>real_format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pitch</name></name> <operator>=</operator> <operator>-</operator><name>pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pixel_size</name></name> <operator>=</operator> <name>pixel_size</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>IS_RASPBERRYPI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glFlush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>ogl_lock_region_nonbb_readwrite</name><parameter_list>(
<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>real_format</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>restore_fbo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ok</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked</name></name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>restore_fbo</name> <operator>=</operator>
<call><name>_al_ogl_setup_fbo_non_backbuffer</name><argument_list>(<argument><expr><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>restore_fbo</name> <operator>&amp;&amp;</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>fbo_info</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>ogl_lock_region_nonbb_readwrite_fbo</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ogl_bitmap</name></expr></argument>,
<argument><expr><name>x</name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>real_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"no fbo\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>ogl_lock_region_nonbb_readwrite_fbo</name><parameter_list>(
<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>real_format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pixel_size</name> <init>= <expr><call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>real_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pitch</name> <init>= <expr><call><name>ogl_pitch</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>pixel_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>start_h</name> <init>= <expr><name>h</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLint</name></type> <name>old_fbo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ok</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>fbo_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_fbo</name> <operator>=</operator> <call><name>_al_ogl_bind_framebuffer</name><argument_list>(<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>fbo_info</name><operator>-&gt;</operator><name>fbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glBindFramebufferEXT failed (%s).\n"</literal></expr></argument>,
<argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>_ALLEGRO_MAX</name><argument_list>(<argument><expr><name>pitch</name> <operator>*</operator> <name>h</name></expr></argument>, <argument><expr><call><name>ogl_pitch</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>glReadPixels</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,
<argument><expr><name>GL_RGBA</name></expr></argument>, <argument><expr><name>GL_UNSIGNED_BYTE</name></expr></argument>,
<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glReadPixels for format %s failed (%s).\n"</literal></expr></argument>,
<argument><expr><call><name>_al_pixel_format_name</name><argument_list>(<argument><expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Converting from format %d -&gt; %d\n"</literal></expr></argument>,
<argument><expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name></expr></argument>, <argument><expr><name>real_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>_al_convert_bitmap_data</name><argument_list>(<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>,
<argument><expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name></expr></argument>,
<argument><expr><call><name>ogl_pitch</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>,
<argument><expr><name>real_format</name></expr></argument>,
<argument><expr><name>pitch</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>+</operator> <name>pitch</name> <operator>*</operator> <operator>(</operator><name>start_h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>real_format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pitch</name></name> <operator>=</operator> <operator>-</operator><name>pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pixel_size</name></name> <operator>=</operator> <name>pixel_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_ogl_bind_framebuffer</name><argument_list>(<argument><expr><name>old_fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>







<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ogl_unlock_region_bb_proxy</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ogl_unlock_region_nonbb</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ogl_unlock_region_nonbb_2</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>orig_format</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ogl_unlock_region_nonbb_nonfbo_conv</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>orig_format</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ogl_unlock_region_nonbb_nonfbo_noconv</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>orig_format</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>void</name></type> <name>_al_ogl_unlock_region_gles</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_LOCK_READONLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Unlocking READONLY\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_proxy</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_proxy</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ogl_unlock_region_bb_proxy</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ogl_bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ogl_unlock_region_nonbb</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ogl_bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>ogl_unlock_region_bb_proxy</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>proxy</name> <init>= <expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_proxy</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Unlocking backbuffer proxy bitmap\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_ogl_unlock_region_gles</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>locked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Drawing proxy to backbuffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>disp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_STATE</name></type> <name>state0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>held</name></decl>;</decl_stmt>

<expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>held</name> <operator>=</operator> <call><name>al_is_bitmap_drawing_held</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>held</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_hold_bitmap_drawing</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>al_store_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state0</name></expr></argument>, <argument><expr><name>ALLEGRO_STATE_TARGET_BITMAP</name> <operator>|</operator>
<name>ALLEGRO_STATE_TRANSFORM</name> <operator>|</operator> <name>ALLEGRO_STATE_BLENDER</name> <operator>|</operator>
<name>ALLEGRO_STATE_PROJECTION_TRANSFORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_orthographic_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>disp</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>disp</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_use_projection_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_x</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>al_restore_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_hold_bitmap_drawing</name><argument_list>(<argument><expr><name>held</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Destroying backbuffer proxy bitmap\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_proxy</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>ogl_unlock_region_nonbb</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>gl_y</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>lock_y</name></name> <operator>-</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>old_disp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>disp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>orig_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>orig_format</name> <operator>=</operator> <call><name>_al_get_real_pixel_format</name><argument_list>(<argument><expr><name>disp</name></expr></argument>, <argument><expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>disp</name> <operator>||</operator>
<operator>(</operator><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>ogl_extras</name><operator>-&gt;</operator><name>is_shared</name></name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator>
<call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>disp</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>old_disp</name> <operator>=</operator> <name>disp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_set_current_display_only</name><argument_list>(<argument><expr><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>ogl_unlock_region_nonbb_2</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ogl_bitmap</name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>, <argument><expr><name>orig_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_MIPMAP</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>al_get_opengl_extension_list</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ALLEGRO_GL_OES_framebuffer_object</name> <operator>||</operator>
<name>IS_OPENGLES</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glGenerateMipmapEXT</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glGenerateMipmapEXT for texture %d failed (%s).\n"</literal></expr></argument>,
<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_disp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_current_display_only</name><argument_list>(<argument><expr><name>old_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>ogl_unlock_region_nonbb_2</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>orig_format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GLint</name></type> <name>fbo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>e</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>fbo</name> <operator>=</operator> <call><name>_al_android_get_curr_fbo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>glGetIntegerv</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER_BINDING_EXT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>glBindFramebufferEXT</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER_EXT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_al_android_set_curr_fbo</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glBindTexture failed (%s).\n"</literal></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Unlocking non-backbuffer (non-FBO)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <name>orig_format</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(
<argument><expr><literal type="string">"Unlocking non-backbuffer non-FBO with conversion (%d -&gt; %d)\n"</literal></expr></argument>,
<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name></expr></argument>, <argument><expr><name>orig_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ogl_unlock_region_nonbb_nonfbo_conv</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ogl_bitmap</name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>,
<argument><expr><name>orig_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Unlocking non-backbuffer non-FBO without conversion\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ogl_unlock_region_nonbb_nonfbo_noconv</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ogl_bitmap</name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>,
<argument><expr><name>orig_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>glBindFramebufferEXT</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER_EXT</name></expr></argument>, <argument><expr><name>fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_al_android_set_curr_fbo</name><argument_list>(<argument><expr><name>fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>ogl_unlock_region_nonbb_nonfbo_conv</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>orig_format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lock_format</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>orig_pixel_size</name> <init>= <expr><call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>orig_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_pitch</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_w</name></name> <operator>*</operator> <name>orig_pixel_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>tmpbuf</name> <init>= <expr><call><name>al_malloc</name><argument_list>(<argument><expr><name>dst_pitch</name> <operator>*</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_convert_bitmap_data</name><argument_list>(
<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>,
<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name></expr></argument>,
<argument><expr><operator>-</operator><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pitch</name></name></expr></argument>,
<argument><expr><name>tmpbuf</name></expr></argument>,
<argument><expr><name>orig_format</name></expr></argument>,
<argument><expr><name>dst_pitch</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_w</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glPixelStorei</name><argument_list>(<argument><expr><name>GL_UNPACK_ALIGNMENT</name></expr></argument>, <argument><expr><call><name>ogl_pixel_alignment</name><argument_list>(<argument><expr><name>orig_pixel_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glTexSubImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_x</name></name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>,
<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_w</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name></expr></argument>,
<argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>orig_format</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>orig_format</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glTexSubImage2D for format %d failed (%s).\n"</literal></expr></argument>,
<argument><expr><name>lock_format</name></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>ogl_unlock_region_nonbb_nonfbo_noconv</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>orig_format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lock_format</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>orig_pixel_size</name> <init>= <expr><call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>orig_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glPixelStorei</name><argument_list>(<argument><expr><name>GL_UNPACK_ALIGNMENT</name></expr></argument>, <argument><expr><call><name>ogl_pixel_alignment</name><argument_list>(<argument><expr><name>orig_pixel_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glPixelStorei for format %s failed (%s).\n"</literal></expr></argument>,
<argument><expr><call><name>_al_pixel_format_name</name><argument_list>(<argument><expr><name>lock_format</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glTexSubImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_x</name></name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>,
<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_w</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name></expr></argument>,
<argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>lock_format</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>lock_format</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glTexSubImage2D for format %s failed (%s).\n"</literal></expr></argument>,
<argument><expr><call><name>_al_pixel_format_name</name><argument_list>(<argument><expr><name>lock_format</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


</unit>
