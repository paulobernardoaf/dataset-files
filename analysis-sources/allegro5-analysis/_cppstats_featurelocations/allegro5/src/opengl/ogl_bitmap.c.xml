<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\opengl\ogl_bitmap.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_opengl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_display.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_memblit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_opengl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_pixels.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_transform.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_ANDROID</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_android.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ogl_helpers.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"opengl"</literal></argument>)</argument_list></macro>

















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_glformat</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_al_ogl_get_glformat((f), (c))</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>_al_ogl_get_glformat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>component</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>ALLEGRO_CFG_OPENGLES</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>glformats</name><index>[<expr><name>ALLEGRO_NUM_PIXEL_FORMATS</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GL_RGBA8</name></expr>, <expr><name>GL_UNSIGNED_INT_8_8_8_8_REV</name></expr>, <expr><name>GL_BGRA</name></expr>}</block></expr>, 
<expr><block>{<expr><name>GL_RGBA8</name></expr>, <expr><name>GL_UNSIGNED_INT_8_8_8_8</name></expr>, <expr><name>GL_RGBA</name></expr>}</block></expr>, 
<expr><block>{<expr><name>GL_RGBA4</name></expr>, <expr><name>GL_UNSIGNED_SHORT_4_4_4_4_REV</name></expr>, <expr><name>GL_BGRA</name></expr>}</block></expr>, 
<expr><block>{<expr><name>GL_RGB8</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr>, <expr><name>GL_BGR</name></expr>}</block></expr>, 
<expr><block>{<expr><name>GL_RGB</name></expr>, <expr><name>GL_UNSIGNED_SHORT_5_6_5</name></expr>, <expr><name>GL_RGB</name></expr>}</block></expr>, 
<expr><block>{<expr><name>GL_RGB5</name></expr>, <expr><name>GL_UNSIGNED_SHORT_1_5_5_5_REV</name></expr>, <expr><name>GL_BGRA</name></expr>}</block></expr>, 
<expr><block>{<expr><name>GL_RGB5_A1</name></expr>, <expr><name>GL_UNSIGNED_SHORT_5_5_5_1</name></expr>, <expr><name>GL_RGBA</name></expr>}</block></expr>, 
<expr><block>{<expr><name>GL_RGB5_A1</name></expr>, <expr><name>GL_UNSIGNED_SHORT_1_5_5_5_REV</name></expr>, <expr><name>GL_BGRA</name></expr>}</block></expr>, 
<expr><block>{<expr><name>GL_RGBA8</name></expr>, <expr><name>GL_UNSIGNED_INT_8_8_8_8_REV</name></expr>, <expr><name>GL_RGBA</name></expr>}</block></expr>, 
<expr><block>{<expr><name>GL_RGBA8</name></expr>, <expr><name>GL_UNSIGNED_INT_8_8_8_8_REV</name></expr>, <expr><name>GL_RGBA</name></expr>}</block></expr>, 
<expr><block>{<expr><name>GL_RGB8</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr>, <expr><name>GL_RGB</name></expr>}</block></expr>, 
<expr><block>{<expr><name>GL_RGB</name></expr>, <expr><name>GL_UNSIGNED_SHORT_5_6_5_REV</name></expr>, <expr><name>GL_RGB</name></expr>}</block></expr>, 
<expr><block>{<expr><name>GL_RGB5</name></expr>, <expr><name>GL_UNSIGNED_SHORT_1_5_5_5_REV</name></expr>, <expr><name>GL_RGBA</name></expr>}</block></expr>, 
<expr><block>{<expr><name>GL_RGBA8</name></expr>, <expr><name>GL_UNSIGNED_INT_8_8_8_8</name></expr>, <expr><name>GL_RGBA</name></expr>}</block></expr>, 
<expr><block>{<expr><name>GL_RGBA8</name></expr>, <expr><name>GL_UNSIGNED_INT_8_8_8_8_REV</name></expr>, <expr><name>GL_BGRA</name></expr>}</block></expr>, 
<expr><block>{<expr><name>GL_RGBA32F_ARB</name></expr>, <expr><name>GL_FLOAT</name></expr>, <expr><name>GL_RGBA</name></expr>}</block></expr>, 
<expr><block>{<expr><name>GL_RGBA</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr>, <expr><name>GL_RGBA</name></expr>}</block></expr>, 
<expr><block>{<expr><name>GL_RGBA4</name></expr>, <expr><name>GL_UNSIGNED_SHORT_4_4_4_4</name></expr>, <expr><name>GL_RGBA</name></expr>}</block></expr>, 
<expr><block>{<expr><name>GL_LUMINANCE</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr>, <expr><name>GL_LUMINANCE</name></expr>}</block></expr>, 
<expr><block>{<expr><name>GL_COMPRESSED_RGBA_S3TC_DXT1_EXT</name></expr>, <expr><name>GL_UNSIGNED_INT_8_8_8_8</name></expr>, <expr><name>GL_RGBA</name></expr>}</block></expr>, 
<expr><block>{<expr><name>GL_COMPRESSED_RGBA_S3TC_DXT3_EXT</name></expr>, <expr><name>GL_UNSIGNED_INT_8_8_8_8</name></expr>, <expr><name>GL_RGBA</name></expr>}</block></expr>, 
<expr><block>{<expr><name>GL_COMPRESSED_RGBA_S3TC_DXT5_EXT</name></expr>, <expr><name>GL_UNSIGNED_INT_8_8_8_8</name></expr>, <expr><name>GL_RGBA</name></expr>}</block></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_opengl_version</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>_ALLEGRO_OPENGL_VERSION_3_0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>glformats</name><index>[<expr><name>ALLEGRO_PIXEL_FORMAT_SINGLE_CHANNEL_8</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>GL_RED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glformats</name><index>[<expr><name>ALLEGRO_PIXEL_FORMAT_SINGLE_CHANNEL_8</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>GL_RED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>glformats</name><index>[<expr><name>ALLEGRO_NUM_PIXEL_FORMATS</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>GL_RGB</name></expr>, <expr><name>GL_UNSIGNED_SHORT_5_6_5</name></expr>, <expr><name>GL_RGB</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>GL_RGBA</name></expr>, <expr><name>GL_UNSIGNED_SHORT_5_5_5_1</name></expr>, <expr><name>GL_RGBA</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>GL_RGBA</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr>, <expr><name>GL_RGBA</name></expr>}</block></expr>, 
<expr><block>{<expr><name>GL_RGBA</name></expr>, <expr><name>GL_UNSIGNED_SHORT_4_4_4_4</name></expr>, <expr><name>GL_RGBA</name></expr>}</block></expr>, 
<expr><block>{<expr><name>GL_LUMINANCE</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr>, <expr><name>GL_LUMINANCE</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name><name>glformats</name><index>[<expr><name>format</name></expr>]</index><index>[<expr><name>component</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_BITMAP_INTERFACE</name></type> <name>glbmp_vt</name></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAP</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{type temp = x; x = y; y = temp;}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case e: return #e;</cpp:value></cpp:define>
<function><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>_al_gl_error_string</name><parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<macro><name>ERR</name><argument_list>(<argument>GL_NO_ERROR</argument>)</argument_list></macro>
<macro><name>ERR</name><argument_list>(<argument>GL_INVALID_ENUM</argument>)</argument_list></macro>
<macro><name>ERR</name><argument_list>(<argument>GL_INVALID_VALUE</argument>)</argument_list></macro>
<macro><name>ERR</name><argument_list>(<argument>GL_INVALID_OPERATION</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_FIXED_FUNCTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>ERR</name><argument_list>(<argument>GL_STACK_OVERFLOW</argument>)</argument_list></macro>
<macro><name>ERR</name><argument_list>(<argument>GL_STACK_UNDERFLOW</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>ERR</name><argument_list>(<argument>GL_OUT_OF_MEMORY</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_PROGRAMMABLE_PIPELINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>ERR</name><argument_list>(<argument>GL_INVALID_FRAMEBUFFER_OPERATION</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
<return>return <expr><literal type="string">"UNKNOWN"</literal></expr>;</return>
</block_content>}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ERR</name></cpp:undef>

<function><type><specifier>static</specifier> <name>INLINE</name> <name>void</name></type> <name>transform_vertex</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>al_transform_coordinates_3d</name><argument_list>(<argument><expr><call><name>al_get_current_transform</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_quad</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>tint</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>sw</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>sh</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>tex_l</name></decl>, <decl><type ref="prev"/><name>tex_t</name></decl>, <decl><type ref="prev"/><name>tex_r</name></decl>, <decl><type ref="prev"/><name>tex_b</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>true_w</name></decl>, <decl><type ref="prev"/><name>true_h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dw</name> <init>= <expr><name>sw</name></expr></init></decl>, <decl><type ref="prev"/><name>dh</name> <init>= <expr><name>sh</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_OGL_BITMAP_VERTEX</name> <modifier>*</modifier></type><name>verts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>disp</name> <init>= <expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>num_cache_vertices</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name> <operator>!=</operator> <name><name>disp</name><operator>-&gt;</operator><name>cache_texture</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>disp</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>flush_vertex_cache</name></name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>cache_texture</name></name> <operator>=</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>verts</name> <operator>=</operator> <call><name><name>disp</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>prepare_vertex_cache</name></name><argument_list>(<argument><expr><name>disp</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tex_l</name> <operator>=</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tex_r</name> <operator>=</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tex_t</name> <operator>=</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>top</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tex_b</name> <operator>=</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>bottom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>true_w</name> <operator>=</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>true_h</name> <operator>=</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tex_l</name> <operator>+=</operator> <name>sx</name> <operator>/</operator> <name>true_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tex_t</name> <operator>-=</operator> <name>sy</name> <operator>/</operator> <name>true_h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tex_r</name> <operator>-=</operator> <operator>(</operator><name>w</name> <operator>-</operator> <name>sx</name> <operator>-</operator> <name>sw</name><operator>)</operator> <operator>/</operator> <name>true_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tex_b</name> <operator>+=</operator> <operator>(</operator><name>h</name> <operator>-</operator> <name>sy</name> <operator>-</operator> <name>sh</name><operator>)</operator> <operator>/</operator> <name>true_h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>dh</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tx</name> <operator>=</operator> <name>tex_l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ty</name> <operator>=</operator> <name>tex_b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <name><name>tint</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <name><name>tint</name><operator>.</operator><name>g</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <name><name>tint</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <name><name>tint</name><operator>.</operator><name>a</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tx</name> <operator>=</operator> <name>tex_l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ty</name> <operator>=</operator> <name>tex_t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <name><name>tint</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <name><name>tint</name><operator>.</operator><name>g</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <name><name>tint</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <name><name>tint</name><operator>.</operator><name>a</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>dw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>dh</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>tx</name> <operator>=</operator> <name>tex_r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>ty</name> <operator>=</operator> <name>tex_b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <name><name>tint</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <name><name>tint</name><operator>.</operator><name>g</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <name><name>tint</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <name><name>tint</name><operator>.</operator><name>a</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>dw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>tx</name> <operator>=</operator> <name>tex_r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>ty</name> <operator>=</operator> <name>tex_t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <name><name>tint</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <name><name>tint</name><operator>.</operator><name>g</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <name><name>tint</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <name><name>tint</name><operator>.</operator><name>a</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>cache_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>transform_vertex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>verts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>verts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>verts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transform_vertex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>verts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>verts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>verts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transform_vertex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>verts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>verts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>verts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transform_vertex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>verts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>verts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>verts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>verts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>verts</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>verts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>disp</name><operator>-&gt;</operator><name>cache_enabled</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>disp</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>flush_vertex_cache</name></name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SWAP</name></cpp:undef>


<function><type><specifier>static</specifier> <name>void</name></type> <name>ogl_draw_bitmap_region</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>tint</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>sy</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>sw</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>sh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>disp</name> <init>= <expr><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ogl_target</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>extra</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>bitmap</name><operator>-&gt;</operator><name>locked</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>target</name><operator>-&gt;</operator><name>locked</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_source</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ogl_source</name><operator>-&gt;</operator><name>is_backbuffer</name></name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>float</name></type> <name>xtrans</name></decl>, <decl><type ref="prev"/><name>ytrans</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>ogl_target</name><operator>-&gt;</operator><name>is_backbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>_al_transform_is_translation</name><argument_list>(<argument><expr><call><name>al_get_current_transform</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>xtrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ytrans</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>ogl_target</name><operator>-&gt;</operator><name>fbo_info</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_al_ogl_set_target_bitmap</name><argument_list>(<argument><expr><name>disp</name></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>xtrans</name> <operator>&lt;</operator> <name><name>target</name><operator>-&gt;</operator><name>cl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sx</name> <operator>-=</operator> <name>xtrans</name> <operator>-</operator> <name><name>target</name><operator>-&gt;</operator><name>cl</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sw</name> <operator>+=</operator> <name>xtrans</name> <operator>-</operator> <name><name>target</name><operator>-&gt;</operator><name>cl</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xtrans</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>cl</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ytrans</name> <operator>&lt;</operator> <name><name>target</name><operator>-&gt;</operator><name>ct</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sy</name> <operator>-=</operator> <name>ytrans</name> <operator>-</operator> <name><name>target</name><operator>-&gt;</operator><name>ct</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sh</name> <operator>+=</operator> <name>ytrans</name> <operator>-</operator> <name><name>target</name><operator>-&gt;</operator><name>ct</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ytrans</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>ct</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>xtrans</name> <operator>+</operator> <name>sw</name> <operator>&gt;</operator> <name><name>target</name><operator>-&gt;</operator><name>cr_excl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sw</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>cr_excl</name></name> <operator>-</operator> <name>xtrans</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ytrans</name> <operator>+</operator> <name>sh</name> <operator>&gt;</operator> <name><name>target</name><operator>-&gt;</operator><name>cb_excl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sh</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>cb_excl</name></name> <operator>-</operator> <name>ytrans</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>ogl_target</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glCopyTexSubImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>xtrans</name></expr></argument>, <argument><expr><name><name>target</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>ytrans</name> <operator>-</operator> <name>sh</name></expr></argument>,
<argument><expr><name>sx</name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>sy</name> <operator>-</operator> <name>sh</name></expr></argument>,
<argument><expr><name>sw</name></expr></argument>, <argument><expr><name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogl_target</name><operator>-&gt;</operator><name>fbo_info</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_al_ogl_set_target_bitmap</name><argument_list>(<argument><expr><name>disp</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>opengl_target</name></name> <operator>==</operator> <name>target</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>draw_quad</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>, <argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>, <argument><expr><name>sh</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>_al_draw_bitmap_region_memory</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>, <argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>, <argument><expr><name>sh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>pot</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>y</name> <operator>&lt;</operator> <name>x</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>y</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>y</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>bool</name></type> <name>ogl_upload_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>w</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitmap_format</name> <init>= <expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitmap_flags</name> <init>= <expr><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>post_generate_mipmap</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>gl_filters</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>GL_NEAREST</name></expr>, <expr><name>GL_LINEAR</name></expr>,
<expr><name>GL_NEAREST_MIPMAP_LINEAR</name></expr>, <expr><name>GL_LINEAR_MIPMAP_LINEAR</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glGenTextures</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glGenTextures failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Created new OpenGL texture %d (%dx%d, format %s)\n"</literal></expr></argument>,
<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>,
<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_w</name></name></expr></argument>, <argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_h</name></name></expr></argument>,
<argument><expr><call><name>_al_pixel_format_name</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glBindTexture for texture %d failed (%s).\n"</literal></expr></argument>,
<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_S</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_T</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_MIPMAP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_MIN_LINEAR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MIN_FILTER</name></expr></argument>, <argument><expr><name><name>gl_filters</name><index>[<expr><name>filter</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_MAG_LINEAR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MAG_FILTER</name></expr></argument>, <argument><expr><name><name>gl_filters</name><index>[<expr><name>filter</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
if (al_get_opengl_extension_list()-&gt;ALLEGRO_GL_EXT_texture_filter_anisotropic) {
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAX_ANISOTROPY_EXT, anisotropy);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_MIPMAP</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>al_get_opengl_extension_list</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ALLEGRO_GL_EXT_framebuffer_object</name> <operator>||</operator>
<call><name>al_get_opengl_extension_list</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ALLEGRO_GL_OES_framebuffer_object</name> <operator>||</operator>
<name>IS_OPENGLES</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>post_generate_mipmap</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_FIXED_FUNCTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_GENERATE_MIPMAP</name></expr></argument>, <argument><expr><name>GL_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glTexParameteri for texture %d failed (%s).\n"</literal></expr></argument>,
<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IS_OPENGLES</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_w</name></name> <operator>!=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>w</name></name> <operator>||</operator>
<name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_h</name></name> <operator>!=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name> <operator>||</operator>
<name>bitmap_format</name> <operator>==</operator> <name>ALLEGRO_PIXEL_FORMAT_ABGR_F32</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_h</name></name></expr></argument>, <argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glPixelStorei</name><argument_list>(<argument><expr><name>GL_UNPACK_ALIGNMENT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_w</name></name></expr></argument>, <argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_h</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>GL_ALPHA</name></expr></argument>, <argument><expr><name>GL_UNSIGNED_BYTE</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>glTexImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_w</name></name></expr></argument>, <argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_h</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pix_size</name> <init>= <expr><call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><name>pix_size</name></expr></argument>,
<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_h</name></name> <operator>*</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glPixelStorei</name><argument_list>(<argument><expr><name>GL_UNPACK_ALIGNMENT</name></expr></argument>, <argument><expr><name>pix_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_w</name></name></expr></argument>, <argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_h</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glTexImage2D for format %s, size %dx%d failed (%s)\n"</literal></expr></argument>,
<argument><expr><call><name>_al_pixel_format_name</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_w</name></name></expr></argument>, <argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_h</name></name></expr></argument>,
<argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glDeleteTextures</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>post_generate_mipmap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glGenerateMipmapEXT</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glGenerateMipmapEXT for texture %d failed (%s).\n"</literal></expr></argument>,
<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>w</name> <operator>/</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>h</name> <operator>/</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>bottom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>ogl_update_clipping_rectangle</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>ogl_disp</name> <init>= <expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target_bitmap</name> <init>= <expr><name>bitmap</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>target_bitmap</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogl_disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>opengl_target</name></name> <operator>==</operator> <name>target_bitmap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_ogl_setup_bitmap_clipping</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>ogl_destroy_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>disp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>bmp_disp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>old_disp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>al_is_sub_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bmp_disp</name> <operator>=</operator> <call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bmp_disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>is_shared</name></name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator>
<name>bmp_disp</name> <operator>!=</operator> <name>disp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>old_disp</name> <operator>=</operator> <name>disp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_set_current_display_only</name><argument_list>(<argument><expr><name>bmp_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bmp_disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>opengl_target</name></name> <operator>==</operator> <name>bitmap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bmp_disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>opengl_target</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_remove_opengl_fbo</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glDeleteTextures</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_disp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_current_display_only</name><argument_list>(<argument><expr><name>old_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>ogl_bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>ogl_bitmap_pointer_changed</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>old</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>extra</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>extra</name> <operator>&amp;&amp;</operator> <name><name>extra</name><operator>-&gt;</operator><name>fbo_info</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>extra</name><operator>-&gt;</operator><name>fbo_info</name><operator>-&gt;</operator><name>owner</name></name> <operator>==</operator> <name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>fbo_info</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>bitmap</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>can_flip_blocks</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PIXEL_FORMAT</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT1</name></expr>:</case>
<case>case <expr><name>ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT3</name></expr>:</case>
<case>case <expr><name>ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT5</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>ogl_flip_blocks</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { unsigned char t = x; x = y; y = t; } while (0)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><name><name>lr</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>can_flip_blocks</name><argument_list>(<argument><expr><name><name>lr</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>lr</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT1</name></expr>:</case> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>hc</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>row</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>wc</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>row</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>row</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT3</name></expr>:</case> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>hc</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>row</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>wc</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>row</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>row</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>row</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT5</name></expr>:</case> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>hc</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>row</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>wc</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>bit_row0</name></decl>, <decl><type ref="prev"/><name>bit_row1</name></decl>, <decl><type ref="prev"/><name>bit_row2</name></decl>, <decl><type ref="prev"/><name>bit_row3</name></decl>;</decl_stmt>


<expr_stmt><expr><name>row</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bit_row0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bit_row1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bit_row2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>row</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>row</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bit_row3</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>row</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>row</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>bit_row3</name> <operator>&amp;</operator> <literal type="number">0x00ff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>bit_row2</name> <operator>&amp;</operator> <literal type="number">0x00ff</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>bit_row3</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>bit_row2</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>bit_row1</name> <operator>&amp;</operator> <literal type="number">0x00ff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>bit_row0</name> <operator>&amp;</operator> <literal type="number">0x00ff</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>bit_row1</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>bit_row0</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>row</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>row</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>row</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block>
<default>default:</default>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>wc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>hc</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SWAP</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>ogl_lock_compressed_region</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>ALLEGRO_CFG_OPENGLES</name></expr></cpp:if>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ogl_bitmap</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>disp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>old_disp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitmap_format</name> <init>= <expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_width</name> <init>= <expr><call><name>al_get_pixel_block_width</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_height</name> <init>= <expr><call><name>al_get_pixel_block_height</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_size</name> <init>= <expr><call><name>al_get_pixel_block_size</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xc</name> <init>= <expr><name>x</name> <operator>/</operator> <name>block_width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yc</name> <init>= <expr><name>y</name> <operator>/</operator> <name>block_width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wc</name> <init>= <expr><name>w</name> <operator>/</operator> <name>block_width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hc</name> <init>= <expr><name>h</name> <operator>/</operator> <name>block_width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>true_wc</name> <init>= <expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_w</name></name> <operator>/</operator> <name>block_width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>true_hc</name> <init>= <expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_h</name></name> <operator>/</operator> <name>block_height</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gl_yc</name> <init>= <expr><call><name>_al_get_least_multiple</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>block_height</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>block_height</name> <operator>-</operator> <name>yc</name> <operator>-</operator> <name>hc</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>can_flip_blocks</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_LOCK_WRITEONLY</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pitch</name> <init>= <expr><name>wc</name> <operator>*</operator> <name>block_size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>pitch</name> <operator>*</operator> <name>hc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>+</operator> <name>pitch</name> <operator>*</operator> <operator>(</operator><name>hc</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>bitmap_format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pitch</name></name> <operator>=</operator> <operator>-</operator><name>pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pixel_size</name></name> <operator>=</operator> <name>block_size</name></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>disp</name> <operator>||</operator>
<operator>(</operator><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>ogl_extras</name><operator>-&gt;</operator><name>is_shared</name></name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator>
<call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>disp</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>old_disp</name> <operator>=</operator> <name>disp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_set_current_display_only</name><argument_list>(<argument><expr><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_CLIENT_PIXEL_STORE_BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glPushClientAttrib</name><argument_list>(<argument><expr><name>GL_CLIENT_PIXEL_STORE_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><call><name>glPixelStorei</name><argument_list>(<argument><expr><name>GL_PACK_ALIGNMENT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glPixelStorei(GL_PACK_ALIGNMENT, %d) failed (%s).\n"</literal></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>true_wc</name> <operator>*</operator> <name>true_hc</name> <operator>*</operator> <name>block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glGetCompressedTexImage</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glGetCompressedTexImage for format %s failed (%s).\n"</literal></expr></argument>,
<argument><expr><call><name>_al_pixel_format_name</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <name>ALLEGRO_LOCK_READWRITE</name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_pitch</name> <init>= <expr><name>true_wc</name> <operator>*</operator> <name>block_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dest_pitch</name> <init>= <expr><name>wc</name> <operator>*</operator> <name>block_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>dest_ptr</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>src_ptr</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>+</operator>
<name>src_pitch</name> <operator>*</operator> <name>gl_yc</name> <operator>+</operator> <name>block_size</name> <operator>*</operator> <name>xc</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>hc</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>dest_ptr</name></expr></argument>, <argument><expr><name>src_ptr</name></expr></argument>, <argument><expr><name>dest_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_ptr</name> <operator>+=</operator> <name>dest_pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>+</operator>
<name>dest_pitch</name> <operator>*</operator> <operator>(</operator><name>hc</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pitch</name></name> <operator>=</operator> <operator>-</operator><name>dest_pitch</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pitch</name> <init>= <expr><name>true_wc</name> <operator>*</operator> <name>block_size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>+</operator>
<name>pitch</name> <operator>*</operator> <operator>(</operator><name>gl_yc</name> <operator>+</operator> <name>hc</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>block_size</name> <operator>*</operator> <name>xc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pitch</name></name> <operator>=</operator> <operator>-</operator><name>pitch</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>bitmap_format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pixel_size</name></name> <operator>=</operator> <name>block_size</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_CLIENT_PIXEL_STORE_BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glPopClientAttrib</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>old_disp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_current_display_only</name><argument_list>(<argument><expr><name>old_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ogl_flip_blocks</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name></name></expr></argument>, <argument><expr><name>wc</name></expr></argument>, <argument><expr><name>hc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to lock region\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>bitmap</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>ogl_unlock_compressed_region</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>ALLEGRO_CFG_OPENGLES</name></expr></cpp:if>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lock_format</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>old_disp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>disp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_size</name> <init>= <expr><call><name>al_get_pixel_block_size</name><argument_list>(<argument><expr><name>lock_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_width</name> <init>= <expr><call><name>al_get_pixel_block_width</name><argument_list>(<argument><expr><name>lock_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_height</name> <init>= <expr><call><name>al_get_pixel_block_height</name><argument_list>(<argument><expr><name>lock_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>data_size</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name> <operator>*</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>lock_w</name></name> <operator>/</operator>
<operator>(</operator><name>block_width</name> <operator>*</operator> <name>block_height</name><operator>)</operator> <operator>*</operator> <name>block_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gl_y</name> <init>= <expr><call><name>_al_get_least_multiple</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>block_height</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>lock_y</name></name> <operator>-</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>can_flip_blocks</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bitmap</name><operator>-&gt;</operator><name>lock_flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_LOCK_READONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>EXIT</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ogl_flip_blocks</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_w</name></name> <operator>/</operator> <name>block_width</name></expr></argument>,
<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name> <operator>/</operator> <name>block_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>disp</name> <operator>||</operator>
<operator>(</operator><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>ogl_extras</name><operator>-&gt;</operator><name>is_shared</name></name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator>
<call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>disp</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>old_disp</name> <operator>=</operator> <name>disp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_set_current_display_only</name><argument_list>(<argument><expr><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_CLIENT_PIXEL_STORE_BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glPushClientAttrib</name><argument_list>(<argument><expr><name>GL_CLIENT_PIXEL_STORE_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><call><name>glPixelStorei</name><argument_list>(<argument><expr><name>GL_UNPACK_ALIGNMENT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glPixelStorei(GL_UNPACK_ALIGNMENT, %d) failed (%s).\n"</literal></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glCompressedTexSubImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_x</name></name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>,
<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_w</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name></expr></argument>,
<argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>lock_format</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>data_size</name></expr></argument>,
<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glCompressedTexSubImage2D for format %s failed (%s).\n"</literal></expr></argument>,
<argument><expr><call><name>_al_pixel_format_name</name><argument_list>(<argument><expr><name>lock_format</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_CLIENT_PIXEL_STORE_BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glPopClientAttrib</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>old_disp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_current_display_only</name><argument_list>(<argument><expr><name>old_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>EXIT</name>:</label>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>bitmap</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ogl_backup_dirty_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitmap_flags</name> <init>= <expr><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_NO_PRESERVE_TEXTURE</name><operator>)</operator> <operator>||</operator>
<operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>dirty</name></name> <operator>||</operator>
<name><name>ogl_bitmap</name><operator>-&gt;</operator><name>is_backbuffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Backing up dirty bitmap %p\n"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lr</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(
<argument><expr><name>b</name></expr></argument>,
<argument><expr><call><name>_al_get_bitmap_memory_format</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>line_size</name> <init>= <expr><call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name><name>lr</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>w</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>lr</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>+</operator> <name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>memory</name></name><operator>)</operator> <operator>+</operator> <name>line_size</name> <operator>*</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>h</name></name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>y</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Failed to lock dirty bitmap %p\n"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_BITMAP_INTERFACE</name> <modifier>*</modifier></type><name>ogl_bitmap_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>glbmp_vt</name><operator>.</operator><name>draw_bitmap_region</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>glbmp_vt</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>glbmp_vt</name><operator>.</operator><name>draw_bitmap_region</name></name> <operator>=</operator> <name>ogl_draw_bitmap_region</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glbmp_vt</name><operator>.</operator><name>upload_bitmap</name></name> <operator>=</operator> <name>ogl_upload_bitmap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glbmp_vt</name><operator>.</operator><name>update_clipping_rectangle</name></name> <operator>=</operator> <name>ogl_update_clipping_rectangle</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glbmp_vt</name><operator>.</operator><name>destroy_bitmap</name></name> <operator>=</operator> <name>ogl_destroy_bitmap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glbmp_vt</name><operator>.</operator><name>bitmap_pointer_changed</name></name> <operator>=</operator> <name>ogl_bitmap_pointer_changed</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>glbmp_vt</name><operator>.</operator><name>lock_region</name></name> <operator>=</operator> <name>_al_ogl_lock_region_gles</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glbmp_vt</name><operator>.</operator><name>unlock_region</name></name> <operator>=</operator> <name>_al_ogl_unlock_region_gles</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>glbmp_vt</name><operator>.</operator><name>lock_region</name></name> <operator>=</operator> <name>_al_ogl_lock_region_new</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glbmp_vt</name><operator>.</operator><name>unlock_region</name></name> <operator>=</operator> <name>_al_ogl_unlock_region_new</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>glbmp_vt</name><operator>.</operator><name>lock_compressed_region</name></name> <operator>=</operator> <name>ogl_lock_compressed_region</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glbmp_vt</name><operator>.</operator><name>unlock_compressed_region</name></name> <operator>=</operator> <name>ogl_unlock_compressed_region</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glbmp_vt</name><operator>.</operator><name>backup_dirty_bitmap</name></name> <operator>=</operator> <name>ogl_backup_dirty_bitmap</name></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name>glbmp_vt</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>_al_ogl_create_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>extra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>true_w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>true_h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_height</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name>format</name> <operator>=</operator> <call><name>_al_get_real_pixel_format</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>_al_pixel_format_is_real</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block_width</name> <operator>=</operator> <call><name>al_get_pixel_block_width</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>block_height</name> <operator>=</operator> <call><name>al_get_pixel_block_width</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>true_w</name> <operator>=</operator> <call><name>_al_get_least_multiple</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>block_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>true_h</name> <operator>=</operator> <call><name>_al_get_least_multiple</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>block_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_pixel_format_is_compressed</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_get_opengl_extension_list</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ALLEGRO_GL_EXT_texture_compression_s3tc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Device does not support S3TC compressed textures.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_SUPPORT_NPOT_BITMAP</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>true_w</name> <operator>=</operator> <call><name>pot</name><argument_list>(<argument><expr><name>true_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>true_h</name> <operator>=</operator> <call><name>pot</name><argument_list>(<argument><expr><name>true_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name>true_w</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>true_w</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>true_h</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>true_h</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>IS_ANDROID</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mod</name> <init>= <expr><name>true_w</name> <operator>%</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mod</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>true_w</name> <operator>+=</operator> <literal type="number">32</literal> <operator>-</operator> <name>mod</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>true_w</name> <operator>%</operator> <name>block_width</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>true_h</name> <operator>%</operator> <name>block_height</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extra</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>vt</name></name> <operator>=</operator> <call><name>ogl_bitmap_driver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>_memory_format</name></name> <operator>=</operator>
<ternary><condition><expr><call><name>_al_pixel_format_is_compressed</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name></expr> </then><else>: <expr><name>format</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>pitch</name></name> <operator>=</operator> <name>true_w</name> <operator>*</operator> <call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>_memory_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>_format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>_flags</name></name> <operator>=</operator> <name>flags</name> <operator>|</operator> <name>_ALLEGRO_INTERNAL_OPENGL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>true_w</name></name> <operator>=</operator> <name>true_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>true_h</name></name> <operator>=</operator> <name>true_h</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_NO_PRESERVE_TEXTURE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>memory</name></name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>_memory_format</name></name></expr></argument>)</argument_list></call><operator>*</operator><name>w</name><operator>*</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>bitmap</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>_al_ogl_upload_bitmap_memory</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>w</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pixsize</name> <init>= <expr><call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>_al_create_bitmap_params</name><argument_list>(<argument><expr><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>format</name></expr></argument>,
<argument><expr><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lr</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_WRITEONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>lr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>lr</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>ptr</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>pixsize</name> <operator>*</operator> <name>w</name> <operator>*</operator> <operator>(</operator><name>h</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>pixsize</name> <operator>*</operator> <name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>pixsize</name> <operator>*</operator> <name>w</name></expr>;</expr_stmt> 
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <operator>*</operator><operator>)</operator><name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name><operator>)</operator><operator>-&gt;</operator><name>texture</name> <operator>=</operator>
<operator>(</operator><operator>(</operator><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <operator>*</operator><operator>)</operator><name><name>tmp</name><operator>-&gt;</operator><name>extra</name></name><operator>)</operator><operator>-&gt;</operator><name>texture</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <operator>*</operator><operator>)</operator><name><name>tmp</name><operator>-&gt;</operator><name>extra</name></name><operator>)</operator><operator>-&gt;</operator><name>texture</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>GLuint</name></type> <name>al_get_opengl_texture</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>extra</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>_ALLEGRO_INTERNAL_OPENGL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>extra</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>extra</name><operator>-&gt;</operator><name>texture</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_remove_opengl_fbo</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>_ALLEGRO_INTERNAL_OPENGL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ogl_bitmap</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>fbo_info</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>fbo_info</name><operator>-&gt;</operator><name>fbo_state</name></name> <operator>&gt;</operator> <name>FBO_INFO_UNUSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>fbo_info</name><operator>-&gt;</operator><name>fbo</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FBO_INFO</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>fbo_info</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_ogl_del_fbo</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>fbo_state</name></name> <operator>==</operator> <name>FBO_INFO_PERSISTENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>_al_ogl_reset_fbo_info</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>GLuint</name></type> <name>al_get_opengl_fbo</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>_ALLEGRO_INTERNAL_OPENGL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ogl_bitmap</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>fbo_info</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_ogl_create_persistent_fbo</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>fbo_info</name><operator>-&gt;</operator><name>fbo_state</name></name> <operator>==</operator> <name>FBO_INFO_TRANSIENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>fbo_info</name></name> <operator>=</operator> <call><name>_al_ogl_persist_fbo</name><argument_list>(<argument><expr><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>fbo_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>fbo_info</name><operator>-&gt;</operator><name>fbo</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>al_get_opengl_texture_size</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>_ALLEGRO_INTERNAL_OPENGL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ogl_bitmap</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_h</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_get_opengl_texture_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>u</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>xofs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>yofs</name></name></expr>;</expr_stmt>
</block_content>}</block></function>


</unit>
