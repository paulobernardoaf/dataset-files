<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\opengl\ogl_draw.c">














<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_opengl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_display.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_memdraw.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_opengl.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_android.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ogl_helpers.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"opengl"</literal></argument>)</argument_list></macro>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i686__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_ANDROID_HACK_X86_64</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>try_const_color</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>ogl_disp</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>ogl_disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>ogl_info</name><operator>.</operator><name>version</name></name> <operator>&lt;</operator> <name>_ALLEGRO_OPENGL_VERSION_2_0</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ogl_disp</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>glBlendColor</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_opengl_set_blender</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>ogl_disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>, <decl><type ref="prev"/><name>src_color</name></decl>, <decl><type ref="prev"/><name>dst_color</name></decl>, <decl><type ref="prev"/><name>op_alpha</name></decl>, <decl><type ref="prev"/><name>src_alpha</name></decl>, <decl><type ref="prev"/><name>dst_alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>const_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>blend_modes</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>GL_ZERO</name></expr>, <expr><name>GL_ONE</name></expr>, <expr><name>GL_SRC_ALPHA</name></expr>, <expr><name>GL_ONE_MINUS_SRC_ALPHA</name></expr>,
<expr><name>GL_SRC_COLOR</name></expr>, <expr><name>GL_DST_COLOR</name></expr>, <expr><name>GL_ONE_MINUS_SRC_COLOR</name></expr>,
<expr><name>GL_ONE_MINUS_DST_COLOR</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES2</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>GL_CONSTANT_COLOR</name></expr>, <expr><name>GL_ONE_MINUS_CONSTANT_COLOR</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>GL_ONE</name></expr>, <expr><name>GL_ONE</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>blend_equations</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>GL_FUNC_ADD</name></expr>, <expr><name>GL_FUNC_SUBTRACT</name></expr>, <expr><name>GL_FUNC_REVERSE_SUBTRACT</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ogl_disp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_get_separate_bitmap_blender</name><argument_list>(<argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_color</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_color</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>op_alpha</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_alpha</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>const_color</name> <operator>=</operator> <call><name>al_get_bitmap_blend_color</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>ALLEGRO_CFG_OPENGLES</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ogl_disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>ogl_info</name><operator>.</operator><name>version</name></name> <operator>&gt;=</operator> <name>_ALLEGRO_OPENGL_VERSION_1_4</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_ANDROID</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>defined</name> <name>ALLEGRO_CFG_OPENGLES3</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>false</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name><name>ogl_disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>ogl_info</name><operator>.</operator><name>version</name></name> <operator>&gt;=</operator> <name>_ALLEGRO_OPENGL_VERSION_2_0</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_BLEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>try_const_color</name><argument_list>(<argument><expr><name>ogl_disp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>const_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBlendFuncSeparate</name><argument_list>(<argument><expr><name><name>blend_modes</name><index>[<expr><name>src_color</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>blend_modes</name><index>[<expr><name>dst_color</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>blend_modes</name><index>[<expr><name>src_alpha</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>blend_modes</name><index>[<expr><name>dst_alpha</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ogl_disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>ogl_info</name><operator>.</operator><name>version</name></name> <operator>&gt;=</operator> <name>_ALLEGRO_OPENGL_VERSION_2_0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glBlendEquationSeparate</name><argument_list>(
<argument><expr><name><name>blend_equations</name><index>[<expr><name>op</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>blend_equations</name><index>[<expr><name>op_alpha</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>glBlendEquation</name><argument_list>(<argument><expr><name><name>blend_equations</name><index>[<expr><name>op</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>src_color</name> <operator>==</operator> <name>src_alpha</name> <operator>&amp;&amp;</operator> <name>dst_color</name> <operator>==</operator> <name>dst_alpha</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_BLEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>try_const_color</name><argument_list>(<argument><expr><name>ogl_disp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>const_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBlendFunc</name><argument_list>(<argument><expr><name><name>blend_modes</name><index>[<expr><name>src_color</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>blend_modes</name><index>[<expr><name>dst_color</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Blender unsupported with this OpenGL version (%d %d %d %d %d %d)\n"</literal></expr></argument>,
<argument><expr><name>op</name></expr></argument>, <argument><expr><name>src_color</name></expr></argument>, <argument><expr><name>dst_color</name></expr></argument>, <argument><expr><name>op_alpha</name></expr></argument>, <argument><expr><name>src_alpha</name></expr></argument>, <argument><expr><name>dst_alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_ptr_on</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_PROGRAMMABLE_PIPELINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>pos_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>pos_loc</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>pos_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_FIXED_FUNCTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glEnableClientState</name><argument_list>(<argument><expr><name>GL_VERTEX_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexPointer</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_ptr_off</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_PROGRAMMABLE_PIPELINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>pos_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glDisableVertexAttribArray</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>pos_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_FIXED_FUNCTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glDisableClientState</name><argument_list>(<argument><expr><name>GL_VERTEX_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>color_ptr_on</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_PROGRAMMABLE_PIPELINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>color_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>color_loc</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>color_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_FIXED_FUNCTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glEnableClientState</name><argument_list>(<argument><expr><name>GL_COLOR_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glColorPointer</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>color_ptr_off</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_PROGRAMMABLE_PIPELINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>color_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glDisableVertexAttribArray</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>color_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_FIXED_FUNCTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glDisableClientState</name><argument_list>(<argument><expr><name>GL_COLOR_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tex_ptr_on</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_PROGRAMMABLE_PIPELINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>texcoord_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>texcoord_loc</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>texcoord_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_FIXED_FUNCTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glEnableClientState</name><argument_list>(<argument><expr><name>GL_TEXTURE_COORD_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexCoordPointer</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tex_ptr_off</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_PROGRAMMABLE_PIPELINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>texcoord_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glDisableVertexAttribArray</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>texcoord_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_FIXED_FUNCTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glDisableClientState</name><argument_list>(<argument><expr><name>GL_TEXTURE_COORD_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ogl_clear</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>ogl_disp</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ogl_target</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>extra</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>ogl_target</name><operator>-&gt;</operator><name>is_backbuffer</name></name> <operator>&amp;&amp;</operator>
<name><name>ogl_disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>opengl_target</name></name> <operator>!=</operator> <name>target</name><operator>)</operator>
<operator>||</operator> <name><name>target</name><operator>-&gt;</operator><name>locked</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_al_clear_bitmap_by_locking</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_unmap_rgba_f</name><argument_list>(<argument><expr><operator>*</operator><name>color</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glClearColor</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glClear</name><argument_list>(<argument><expr><name>GL_COLOR_BUFFER_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>ogl_draw_pixel</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLfloat</name></type> <name><name>vert</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLfloat</name></type> <name><name>color_array</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ogl_target</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>extra</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>ogl_target</name><operator>-&gt;</operator><name>is_backbuffer</name></name> <operator>&amp;&amp;</operator>
<name><name>d</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>opengl_target</name></name> <operator>!=</operator> <name>target</name><operator>)</operator> <operator>||</operator>
<name><name>target</name><operator>-&gt;</operator><name>locked</name></name> <operator>||</operator> <operator>!</operator><call><name>_al_opengl_set_blender</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_draw_pixel_memory</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vert</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vert</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>color</name><operator>-&gt;</operator><name>r</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_array</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>color</name><operator>-&gt;</operator><name>g</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_array</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>color</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_array</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>color</name><operator>-&gt;</operator><name>a</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vert_ptr_on</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>vert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>color_ptr_on</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>color_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_opengl_set_blender</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glDrawArrays</name><argument_list>(<argument><expr><name>GL_POINTS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vert_ptr_off</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>color_ptr_off</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>ogl_prepare_vertex_cache</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name><modifier>*</modifier></type> <name>disp</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>num_new_vertices</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>num_cache_vertices</name></name> <operator>+=</operator> <name>num_new_vertices</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>disp</name><operator>-&gt;</operator><name>vertex_cache</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>vertex_cache</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>num_new_vertices</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_OGL_BITMAP_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>vertex_cache_size</name></name> <operator>=</operator> <name>num_new_vertices</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>num_cache_vertices</name></name> <operator>&gt;</operator> <name><name>disp</name><operator>-&gt;</operator><name>vertex_cache_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>vertex_cache</name></name> <operator>=</operator> <call><name>al_realloc</name><argument_list>(<argument><expr><name><name>disp</name><operator>-&gt;</operator><name>vertex_cache</name></name></expr></argument>, 
<argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>disp</name><operator>-&gt;</operator><name>num_cache_vertices</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_OGL_BITMAP_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>vertex_cache_size</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>disp</name><operator>-&gt;</operator><name>num_cache_vertices</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ALLEGRO_OGL_BITMAP_VERTEX</name><operator>*</operator><operator>)</operator><name><name>disp</name><operator>-&gt;</operator><name>vertex_cache</name></name> <operator>+</operator> 
<operator>(</operator><name><name>disp</name><operator>-&gt;</operator><name>num_cache_vertices</name></name> <operator>-</operator> <name>num_new_vertices</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ogl_flush_vertex_cache</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GLuint</name></type> <name>current_texture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_OGL_EXTRAS</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>disp</name><operator>-&gt;</operator><name>ogl_extras</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>o</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>disp</name><operator>-&gt;</operator><name>vertex_cache</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>num_cache_vertices</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_opengl_set_blender</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>num_cache_vertices</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_PROGRAMMABLE_PIPELINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>use_tex_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glUniform1i</name><argument_list>(<argument><expr><name><name>disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>use_tex_loc</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>use_tex_matrix_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glUniform1i</name><argument_list>(<argument><expr><name><name>disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>use_tex_matrix_loc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>glGetIntegerv</name><argument_list>(<argument><expr><name>GL_TEXTURE_BINDING_2D</name></expr></argument>, <argument><expr><operator>(</operator><name>GLint</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>current_texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>current_texture</name> <operator>!=</operator> <name><name>disp</name><operator>-&gt;</operator><name>cache_texture</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_PROGRAMMABLE_PIPELINE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>glActiveTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>tex_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glUniform1i</name><argument_list>(<argument><expr><name><name>disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>tex_loc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>disp</name><operator>-&gt;</operator><name>cache_texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_OGL_BITMAP_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bytes</name> <init>= <expr><name><name>disp</name><operator>-&gt;</operator><name>num_cache_vertices</name></name> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>vao</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glGenVertexArrays</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>vao</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"new VAO: %u\n"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>vao</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>glBindVertexArray</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>vao</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>vbo</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glGenBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>vbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"new VBO: %u\n"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>vbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>vbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name><name>disp</name><operator>-&gt;</operator><name>vertex_cache</name></name></expr></argument>, <argument><expr><name>GL_STREAM_DRAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>pos_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>pos_loc</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>offsetof</name><argument_list>(<argument><expr><name>ALLEGRO_OGL_BITMAP_VERTEX</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>pos_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>texcoord_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>texcoord_loc</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>offsetof</name><argument_list>(<argument><expr><name>ALLEGRO_OGL_BITMAP_VERTEX</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>texcoord_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>color_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>color_loc</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>offsetof</name><argument_list>(<argument><expr><name>ALLEGRO_OGL_BITMAP_VERTEX</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>color_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><call><name>vert_ptr_on</name><argument_list>(<argument><expr><name>disp</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_OGL_BITMAP_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>disp</name><operator>-&gt;</operator><name>vertex_cache</name></name><operator>)</operator> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>ALLEGRO_OGL_BITMAP_VERTEX</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tex_ptr_on</name><argument_list>(<argument><expr><name>disp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_OGL_BITMAP_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>disp</name><operator>-&gt;</operator><name>vertex_cache</name></name><operator>)</operator> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>ALLEGRO_OGL_BITMAP_VERTEX</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>color_ptr_on</name><argument_list>(<argument><expr><name>disp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_OGL_BITMAP_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>disp</name><operator>-&gt;</operator><name>vertex_cache</name></name><operator>)</operator> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>ALLEGRO_OGL_BITMAP_VERTEX</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_FIXED_FUNCTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>disp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glDisableClientState</name><argument_list>(<argument><expr><name>GL_NORMAL_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>glDrawArrays</name><argument_list>(<argument><expr><name>GL_TRIANGLES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>disp</name><operator>-&gt;</operator><name>num_cache_vertices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGMODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>glGetError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"glDrawArrays failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>ALLEGRO_CFG_OPENGLES</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>defined</name> <name>ALLEGRO_MACOSX</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>pos_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glDisableVertexAttribArray</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>pos_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>texcoord_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glDisableVertexAttribArray</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>texcoord_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>color_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glDisableVertexAttribArray</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>color_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindVertexArray</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><call><name>vert_ptr_off</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tex_ptr_off</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>color_ptr_off</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>num_cache_vertices</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_PROGRAMMABLE_PIPELINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>use_tex_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glUniform1i</name><argument_list>(<argument><expr><name><name>disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>use_tex_loc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>glDisable</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ogl_update_transformation</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name><modifier>*</modifier></type> <name>disp</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_SHADER_GLSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GLint</name></type> <name>loc</name> <init>= <expr><name><name>disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>projview_matrix_loc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>projview</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_copy_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>projview</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>target</name><operator>-&gt;</operator><name>transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_compose_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>projview</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>target</name><operator>-&gt;</operator><name>proj_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_copy_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>projview_transform</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>projview</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>program_object</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>loc</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_glsl_set_projview_matrix</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>projview_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_FIXED_FUNCTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glMatrixMode</name><argument_list>(<argument><expr><name>GL_PROJECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glLoadMatrixf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>target</name><operator>-&gt;</operator><name>proj_transform</name><operator>.</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glMatrixMode</name><argument_list>(<argument><expr><name>GL_MODELVIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glLoadMatrixf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>target</name><operator>-&gt;</operator><name>transform</name><operator>.</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_extra</name> <init>= <expr><name><name>target</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glViewport</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>xofs</name></name></expr></argument>, <argument><expr><name><name>ogl_extra</name><operator>-&gt;</operator><name>true_h</name></name> <operator>-</operator> <operator>(</operator><name><name>target</name><operator>-&gt;</operator><name>yofs</name></name> <operator>+</operator> <name><name>target</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>target</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>target</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>glViewport</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>target</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>target</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ogl_clear_depth_buffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>display</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glClearDepthf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>glClearDepth</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<expr_stmt><expr><call><name>glClear</name><argument_list>(<argument><expr><name>GL_DEPTH_BUFFER_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_ogl_add_drawing_functions</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_INTERFACE</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>clear</name></name> <operator>=</operator> <name>ogl_clear</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>draw_pixel</name></name> <operator>=</operator> <name>ogl_draw_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>clear_depth_buffer</name></name> <operator>=</operator> <name>ogl_clear_depth_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>flush_vertex_cache</name></name> <operator>=</operator> <name>ogl_flush_vertex_cache</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>prepare_vertex_cache</name></name> <operator>=</operator> <name>ogl_prepare_vertex_cache</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>update_transformation</name></name> <operator>=</operator> <name>ogl_update_transformation</name></expr>;</expr_stmt>
</block_content>}</block></function></block_content></block></if></if_stmt></block_content></block></function>


</unit>
