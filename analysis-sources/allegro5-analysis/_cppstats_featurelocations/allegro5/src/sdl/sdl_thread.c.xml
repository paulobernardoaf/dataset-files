<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\sdl\sdl_thread.c">













<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/allegro_internal_sdl.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"thread"</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>thread_trampoline</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_AL_THREAD</name> <modifier>*</modifier></type><name>thread</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>thread</name><operator>-&gt;</operator><name>proc</name></name>)<argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name><name>thread</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_thread_create</name><parameter_list>(<parameter><decl><type><name>_AL_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>proc</name>)<parameter_list>(<parameter><decl><type><name>_AL_THREAD</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>should_stop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>proc</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <call><name>SDL_CreateThread</name><argument_list>(<argument><expr><name>thread_trampoline</name></expr></argument>, <argument><expr><literal type="string">"allegro"</literal></expr></argument>, <argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_thread_create_with_stacksize</name><parameter_list>(<parameter><decl><type><name>_AL_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>proc</name>)<parameter_list>(<parameter><decl><type><name>_AL_THREAD</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>stacksize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>should_stop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>proc</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SDL_VERSION_ATLEAST</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <call><name>SDL_CreateThreadWithStackSize</name><argument_list>(<argument><expr><name>thread_trampoline</name></expr></argument>, <argument><expr><literal type="string">"allegro"</literal></expr></argument>, <argument><expr><name>stacksize</name></expr></argument>, <argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stacksize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Creating a thread with a custom thread size is not supported "</literal>
<literal type="string">"on this version of SDL, it is too old.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <call><name>SDL_CreateThread</name><argument_list>(<argument><expr><name>thread_trampoline</name></expr></argument>, <argument><expr><literal type="string">"allegro"</literal></expr></argument>, <argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_thread_set_should_stop</name><parameter_list>(<parameter><decl><type><name>_AL_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>should_stop</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_thread_join</name><parameter_list>(<parameter><decl><type><name>_AL_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_thread_set_should_stop</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SDL_WaitThread</name><argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_thread_detach</name><parameter_list>(<parameter><decl><type><name>_AL_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_DetachThread</name><argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_al_mutex_init</name><parameter_list>(<parameter><decl><type><name>_AL_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mutex</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <call><name>SDL_CreateMutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_mutex_init_recursive</name><parameter_list>(<parameter><decl><type><name>_AL_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_al_mutex_init</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_mutex_destroy</name><parameter_list>(<parameter><decl><type><name>_AL_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mutex</name><operator>-&gt;</operator><name>mutex</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SDL_DestroyMutex</name><argument_list>(<argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mutex</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>_al_cond_timedwait</name><parameter_list>(<parameter><decl><type><name>_AL_COND</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>_AL_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_TIMEOUT</name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TIMEOUT_SDL</name> <modifier>*</modifier></type><name>timeout_sdl</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>timeout</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>SDL_CondWaitTimeout</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name><name>timeout_sdl</name><operator>-&gt;</operator><name>ms</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>r</name> <operator>==</operator> <name>SDL_MUTEX_TIMEDOUT</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
