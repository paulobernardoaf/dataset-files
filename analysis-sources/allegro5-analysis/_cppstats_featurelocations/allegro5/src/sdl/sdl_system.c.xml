<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\sdl\sdl_system.c">













<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/allegro_internal_sdl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_timer.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"SDL"</literal></argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_SYSTEM_INTERFACE</name> <modifier>*</modifier></type><name>vt</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGMODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_E</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (type == x) return #x;</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>event_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>_E</name><argument_list>(<argument>SDL_FIRSTEVENT</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_QUIT</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_APP_TERMINATING</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_APP_LOWMEMORY</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_APP_WILLENTERBACKGROUND</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_APP_DIDENTERBACKGROUND</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_APP_WILLENTERFOREGROUND</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_APP_DIDENTERFOREGROUND</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_WINDOWEVENT</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_SYSWMEVENT</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_KEYDOWN</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_KEYUP</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_TEXTEDITING</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_TEXTINPUT</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_MOUSEMOTION</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_MOUSEBUTTONDOWN</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_MOUSEBUTTONUP</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_MOUSEWHEEL</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_JOYAXISMOTION</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_JOYBALLMOTION</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_JOYHATMOTION</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_JOYBUTTONDOWN</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_JOYBUTTONUP</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_JOYDEVICEADDED</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_JOYDEVICEREMOVED</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_CONTROLLERAXISMOTION</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_CONTROLLERBUTTONDOWN</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_CONTROLLERBUTTONUP</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_CONTROLLERDEVICEADDED</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_CONTROLLERDEVICEREMOVED</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_CONTROLLERDEVICEREMAPPED</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_FINGERDOWN</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_FINGERUP</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_FINGERMOTION</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_DOLLARGESTURE</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_DOLLARRECORD</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_MULTIGESTURE</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_CLIPBOARDUPDATE</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_DROPFILE</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_RENDER_TARGETS_RESET</argument>)</argument_list></macro>
<macro><name>_E</name><argument_list>(<argument>SDL_USEREVENT</argument>)</argument_list></macro>
<return>return <expr><literal type="string">"(unknown)"</literal></expr>;</return>
</block_content>}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_E</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdl_heartbeat</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_SDL</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>SDL_Event</name></type> <name>event</name></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>SDL_PollEvent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SDL_KEYDOWN</name></expr>:</case>
<case>case <expr><name>SDL_KEYUP</name></expr>:</case>
<case>case <expr><name>SDL_TEXTINPUT</name></expr>:</case>
<expr_stmt><expr><call><name>_al_sdl_keyboard_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SDL_MOUSEMOTION</name></expr>:</case>
<case>case <expr><name>SDL_MOUSEBUTTONDOWN</name></expr>:</case>
<case>case <expr><name>SDL_MOUSEBUTTONUP</name></expr>:</case>
<case>case <expr><name>SDL_MOUSEWHEEL</name></expr>:</case>
<expr_stmt><expr><call><name>_al_sdl_mouse_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SDL_FINGERDOWN</name></expr>:</case>
<case>case <expr><name>SDL_FINGERMOTION</name></expr>:</case>
<case>case <expr><name>SDL_FINGERUP</name></expr>:</case>
<expr_stmt><expr><call><name>_al_sdl_touch_input_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SDL_JOYAXISMOTION</name></expr>:</case>
<case>case <expr><name>SDL_JOYBUTTONDOWN</name></expr>:</case>
<case>case <expr><name>SDL_JOYBUTTONUP</name></expr>:</case>
<case>case <expr><name>SDL_JOYDEVICEADDED</name></expr>:</case>
<case>case <expr><name>SDL_JOYDEVICEREMOVED</name></expr>:</case>
<expr_stmt><expr><call><name>_al_sdl_joystick_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SDL_QUIT</name></expr>:</case>
<expr_stmt><expr><call><name>_al_sdl_display_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SDL_WINDOWEVENT</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>window</name><operator>.</operator><name>event</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SDL_WINDOWEVENT_ENTER</name></expr>:</case>
<case>case <expr><name>SDL_WINDOWEVENT_LEAVE</name></expr>:</case>
<expr_stmt><expr><call><name>_al_sdl_mouse_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SDL_WINDOWEVENT_FOCUS_GAINED</name></expr>:</case>
<case>case <expr><name>SDL_WINDOWEVENT_FOCUS_LOST</name></expr>:</case>
<expr_stmt><expr><call><name>_al_sdl_display_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_sdl_keyboard_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SDL_WINDOWEVENT_CLOSE</name></expr>:</case>
<case>case <expr><name>SDL_WINDOWEVENT_RESIZED</name></expr>:</case>
<expr_stmt><expr><call><name>_al_sdl_display_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></switch>
</block_content>}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__EMSCRIPTEN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>double</name></type> <name>t</name> <init>= <expr><call><name>al_get_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>interval</name> <init>= <expr><name>t</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>timer_time</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_timer_thread_handle_tick</name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>timer_time</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>sdl_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_SDL</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>vt</name></name> <operator>=</operator> <name>vt</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SDL_Init</name><argument_list>(<argument><expr><name>SDL_INIT_EVERYTHING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ALLEGRO_DISPLAY_SDL</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>system</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdl_heartbeat_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_SDL</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>






<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <call><name>al_create_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__EMSCRIPTEN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>timer_time</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdl_shutdown_system</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_SDL</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier><modifier>*</modifier></type><name>dptr</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>*</operator><name>dptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_destroy_display</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_Quit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>sdl_get_path</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>dir</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_TEMP_PATH</name></expr>:</case>
<case>case <expr><name>ALLEGRO_USER_DOCUMENTS_PATH</name></expr>:</case>
<case>case <expr><name>ALLEGRO_USER_DATA_PATH</name></expr>:</case>
<case>case <expr><name>ALLEGRO_USER_SETTINGS_PATH</name></expr>:</case>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>SDL_GetPrefPath</name><argument_list>(<argument><expr><call><name>al_get_org_name</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>al_get_app_name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>al_create_path_for_directory</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>ALLEGRO_TEMP_PATH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_append_path_component</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"tmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SDL_free</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_RESOURCES_PATH</name></expr>:</case>
<case>case <expr><name>ALLEGRO_EXENAME_PATH</name></expr>:</case>
<case>case <expr><name>ALLEGRO_USER_HOME_PATH</name></expr>:</case>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>SDL_GetBasePath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>al_create_path_for_directory</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>ALLEGRO_EXENAME_PATH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_path_filename</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>al_get_app_name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SDL_free</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_DISPLAY_INTERFACE</name> <modifier>*</modifier></type><name>sdl_get_display_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_sdl_display_driver</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_KEYBOARD_DRIVER</name> <modifier>*</modifier></type><name>sdl_get_keyboard_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_sdl_keyboard_driver</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_MOUSE_DRIVER</name> <modifier>*</modifier></type><name>sdl_get_mouse_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_sdl_mouse_driver</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_TOUCH_INPUT_DRIVER</name> <modifier>*</modifier></type><name>sdl_get_touch_input_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_sdl_touch_input_driver</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_JOYSTICK_DRIVER</name> <modifier>*</modifier></type><name>sdl_get_joystick_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_sdl_joystick_driver</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD</name><parameter_list>(<parameter><type><name>allegro</name></type></parameter>, <parameter><type><name>sdl</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (sdl_format == SDL_PIXELFORMAT_##sdl) return ALLEGRO_PIXEL_FORMAT_##allegro;</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>_al_sdl_get_allegro_pixel_format</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sdl_format</name></decl></parameter>)</parameter_list> <block>{<block_content>
<macro><name>ADD</name><argument_list>(<argument>ARGB_8888</argument>, <argument>ARGB8888</argument>)</argument_list></macro>
<macro><name>ADD</name><argument_list>(<argument>RGBA_8888</argument>, <argument>RGBA8888</argument>)</argument_list></macro>
<macro><name>ADD</name><argument_list>(<argument>ABGR_8888</argument>, <argument>ABGR8888</argument>)</argument_list></macro>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ADD</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD</name><parameter_list>(<parameter><type><name>allegro</name></type></parameter>, <parameter><type><name>sdl</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (allegro_format == ALLEGRO_PIXEL_FORMAT_##allegro) return SDL_PIXELFORMAT_##sdl;</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>_al_sdl_get_sdl_pixel_format</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>allegro_format</name></decl></parameter>)</parameter_list> <block>{<block_content>
<macro><name>ADD</name><argument_list>(<argument>ANY</argument>, <argument>ABGR8888</argument>)</argument_list></macro>
<macro><name>ADD</name><argument_list>(<argument>ANY_NO_ALPHA</argument>, <argument>ABGR8888</argument>)</argument_list></macro>
<macro><name>ADD</name><argument_list>(<argument>ANY_WITH_ALPHA</argument>, <argument>ABGR8888</argument>)</argument_list></macro>
<macro><name>ADD</name><argument_list>(<argument>ANY_32_NO_ALPHA</argument>, <argument>ABGR8888</argument>)</argument_list></macro>
<macro><name>ADD</name><argument_list>(<argument>ANY_32_WITH_ALPHA</argument>, <argument>ABGR8888</argument>)</argument_list></macro>
<macro><name>ADD</name><argument_list>(<argument>ARGB_8888</argument>, <argument>ARGB8888</argument>)</argument_list></macro>
<macro><name>ADD</name><argument_list>(<argument>RGBA_8888</argument>, <argument>RGBA8888</argument>)</argument_list></macro>
<macro><name>ADD</name><argument_list>(<argument>ABGR_8888</argument>, <argument>ABGR8888</argument>)</argument_list></macro>
<macro><name>ADD</name><argument_list>(<argument>ABGR_8888_LE</argument>, <argument>ABGR8888</argument>)</argument_list></macro>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ADD</name></cpp:undef>


<function><type><specifier>static</specifier> <name>int</name></type> <name>sdl_get_num_video_adapters</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>SDL_GetNumVideoDisplays</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sdl_get_monitor_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>adapter</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_MONITOR_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SDL_Rect</name></type> <name>rect</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SDL_GetDisplayBounds</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>x1</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>y1</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>x2</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rect</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>y2</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rect</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sdl_get_num_display_modes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>al_get_new_display_adapter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>SDL_GetNumDisplayModes</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_DISPLAY_MODE</name> <modifier>*</modifier></type><name>sdl_get_display_mode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_MODE</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SDL_DisplayMode</name></type> <name>sdl_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>al_get_new_display_adapter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SDL_GetDisplayMode</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sdl_mode</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>sdl_mode</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>sdl_mode</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <call><name>_al_sdl_get_allegro_pixel_format</name><argument_list>(<argument><expr><name><name>sdl_mode</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>refresh_rate</name></name> <operator>=</operator> <name><name>sdl_mode</name><operator>.</operator><name>refresh_rate</name></name></expr>;</expr_stmt>
<return>return <expr><name>mode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sdl_inhibit_screensaver</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>inhibit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>inhibit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SDL_DisableScreenSaver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>SDL_EnableScreenSaver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>SDL_IsScreenSaverEnabled</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>inhibit</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>ALLEGRO_SYSTEM_INTERFACE</name> <modifier>*</modifier></type><name>_al_sdl_system_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vt</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>vt</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vt</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>ALLEGRO_SYSTEM_ID_SDL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>initialize</name></name> <operator>=</operator> <name>sdl_initialize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_display_driver</name></name> <operator>=</operator> <name>sdl_get_display_driver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_keyboard_driver</name></name> <operator>=</operator> <name>sdl_get_keyboard_driver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_mouse_driver</name></name> <operator>=</operator> <name>sdl_get_mouse_driver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_touch_input_driver</name></name> <operator>=</operator> <name>sdl_get_touch_input_driver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_joystick_driver</name></name> <operator>=</operator> <name>sdl_get_joystick_driver</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_num_display_modes</name></name> <operator>=</operator> <name>sdl_get_num_display_modes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_display_mode</name></name> <operator>=</operator> <name>sdl_get_display_mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>shutdown_system</name></name> <operator>=</operator> <name>sdl_shutdown_system</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_num_video_adapters</name></name> <operator>=</operator> <name>sdl_get_num_video_adapters</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_monitor_info</name></name> <operator>=</operator> <name>sdl_get_monitor_info</name></expr>;</expr_stmt>





<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_path</name></name> <operator>=</operator> <name>sdl_get_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>inhibit_screensaver</name></name> <operator>=</operator> <name>sdl_inhibit_screensaver</name></expr>;</expr_stmt>





<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>heartbeat</name></name> <operator>=</operator> <name>sdl_heartbeat</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>heartbeat_init</name></name> <operator>=</operator> <name>sdl_heartbeat_init</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_time</name></name> <operator>=</operator> <name>_al_sdl_get_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>rest</name></name> <operator>=</operator> <name>_al_sdl_rest</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>init_timeout</name></name> <operator>=</operator> <name>_al_sdl_init_timeout</name></expr>;</expr_stmt>

<return>return <expr><name>vt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_register_system_interfaces</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_INTERFACE</name> <modifier>*</modifier><modifier>*</modifier></type><name>add</name></decl>;</decl_stmt>
<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_al_system_interfaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>add</name> <operator>=</operator> <call><name>_al_sdl_system_driver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
