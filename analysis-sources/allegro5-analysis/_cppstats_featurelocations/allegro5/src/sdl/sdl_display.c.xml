<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\sdl\sdl_display.c">













<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_opengl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/system.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_opengl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_vector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_pixels.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_shader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/allegro_internal_sdl.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"display"</literal></argument>)</argument_list></macro>

<function_decl><type><name>int</name></type> <name>_al_win_determine_adapter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_DISPLAY_INTERFACE</name> <modifier>*</modifier></type><name>vt</name></decl>;</decl_stmt>

<function><type><name>float</name></type> <name>_al_sdl_get_display_pixel_ratio</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_SDL</name> <modifier>*</modifier></type><name>sdl</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>window_width</name></decl>, <decl><type ref="prev"/><name>drawable_width</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SDL_GetWindowSize</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>window_width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_GL_GetDrawableSize</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>drawable_width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>drawable_width</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>window_width</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>_al_sdl_find_display</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>window_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>v</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_SDL</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>*</operator><name>v</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SDL_GetWindowID</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>window_id</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>display</name></name></expr>;</return>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_sdl_display_event</name><parameter_list>(<parameter><decl><type><name>SDL_Event</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SDL_WINDOWEVENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>_al_sdl_find_display</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>windowID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>event</name></name> <operator>==</operator> <name>SDL_WINDOWEVENT_FOCUS_GAINED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_DISPLAY_SWITCH_IN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>event</name></name> <operator>==</operator> <name>SDL_WINDOWEVENT_FOCUS_LOST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_DISPLAY_SWITCH_OUT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>event</name></name> <operator>==</operator> <name>SDL_WINDOWEVENT_CLOSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>event</name></name> <operator>==</operator> <name>SDL_WINDOWEVENT_RESIZED</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>ratio</name> <init>= <expr><call><name>_al_sdl_get_display_pixel_ratio</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_DISPLAY_RESIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>data1</name></name> <operator>*</operator> <name>ratio</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>data2</name></name> <operator>*</operator> <name>ratio</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SDL_QUIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>v</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>*</operator><name>v</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>d</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>es</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GLoption</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>allegro</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sdl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>al_get_new_display_option</name><argument_list>(<argument><expr><name>allegro</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>ALLEGRO_DONTCARE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SDL_GL_SetAttribute</name><argument_list>(<argument><expr><name>sdl</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>sdl_create_display_locked</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_SDL</name> <modifier>*</modifier></type><name>sdl</name> <init>= <expr><call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>sdl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>sdl</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>al_get_new_display_flags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ALLEGRO_OPENGL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ALLEGRO_OPENGL_ES_PROFILE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>SDL_WINDOW_OPENGL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SDL_WINDOW_FULLSCREEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SDL_WINDOW_FULLSCREEN_DESKTOP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FRAMELESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SDL_WINDOW_BORDERLESS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_RESIZABLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SDL_WINDOW_RESIZABLE</name> <operator>|</operator> <name>SDL_WINDOW_ALLOW_HIGHDPI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_OPENGL_ES_PROFILE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SDL_GL_SetAttribute</name><argument_list>(<argument><expr><name>SDL_GL_CONTEXT_PROFILE_MASK</name></expr></argument>, <argument><expr><name>SDL_GL_CONTEXT_PROFILE_ES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SDL_GL_SetAttribute</name><argument_list>(<argument><expr><name>SDL_GL_CONTEXT_MAJOR_VERSION</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SDL_GL_SetAttribute</name><argument_list>(<argument><expr><name>SDL_GL_CONTEXT_MAJOR_VERSION</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SDL_GL_SetAttribute</name><argument_list>(<argument><expr><name>SDL_GL_CONTEXT_MINOR_VERSION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GLoption</name><argument_list>(<argument><expr><name>ALLEGRO_COLOR_SIZE</name></expr></argument>, <argument><expr><name>SDL_GL_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GLoption</name><argument_list>(<argument><expr><name>ALLEGRO_RED_SIZE</name></expr></argument>, <argument><expr><name>SDL_GL_RED_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GLoption</name><argument_list>(<argument><expr><name>ALLEGRO_GREEN_SIZE</name></expr></argument>, <argument><expr><name>SDL_GL_GREEN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GLoption</name><argument_list>(<argument><expr><name>ALLEGRO_BLUE_SIZE</name></expr></argument>, <argument><expr><name>SDL_GL_BLUE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GLoption</name><argument_list>(<argument><expr><name>ALLEGRO_ALPHA_SIZE</name></expr></argument>, <argument><expr><name>SDL_GL_ALPHA_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GLoption</name><argument_list>(<argument><expr><name>ALLEGRO_ACC_RED_SIZE</name></expr></argument>, <argument><expr><name>SDL_GL_ACCUM_RED_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GLoption</name><argument_list>(<argument><expr><name>ALLEGRO_ACC_GREEN_SIZE</name></expr></argument>, <argument><expr><name>SDL_GL_ACCUM_GREEN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GLoption</name><argument_list>(<argument><expr><name>ALLEGRO_ACC_BLUE_SIZE</name></expr></argument>, <argument><expr><name>SDL_GL_ACCUM_BLUE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GLoption</name><argument_list>(<argument><expr><name>ALLEGRO_ACC_ALPHA_SIZE</name></expr></argument>, <argument><expr><name>SDL_GL_ACCUM_ALPHA_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GLoption</name><argument_list>(<argument><expr><name>ALLEGRO_STEREO</name></expr></argument>, <argument><expr><name>SDL_GL_STEREO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GLoption</name><argument_list>(<argument><expr><name>ALLEGRO_DEPTH_SIZE</name></expr></argument>, <argument><expr><name>SDL_GL_DEPTH_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GLoption</name><argument_list>(<argument><expr><name>ALLEGRO_STENCIL_SIZE</name></expr></argument>, <argument><expr><name>SDL_GL_STENCIL_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GLoption</name><argument_list>(<argument><expr><name>ALLEGRO_SAMPLE_BUFFERS</name></expr></argument>, <argument><expr><name>SDL_GL_MULTISAMPLEBUFFERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GLoption</name><argument_list>(<argument><expr><name>ALLEGRO_SAMPLES</name></expr></argument>, <argument><expr><name>SDL_GL_MULTISAMPLESAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GLoption</name><argument_list>(<argument><expr><name>ALLEGRO_OPENGL_MAJOR_VERSION</name></expr></argument>, <argument><expr><name>SDL_GL_CONTEXT_MAJOR_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GLoption</name><argument_list>(<argument><expr><name>ALLEGRO_OPENGL_MINOR_VERSION</name></expr></argument>, <argument><expr><name>SDL_GL_CONTEXT_MINOR_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SDL_SetHint</name><argument_list>(<argument><expr><name>SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <call><name>SDL_CreateWindow</name><argument_list>(<argument><expr><call><name>al_get_new_window_title</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>y</name></name></expr></argument>,
<argument><expr><name><name>d</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"SDL_CreateWindow failed: %s"</literal></expr></argument>, <argument><expr><call><name>SDL_GetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sdl</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>SDL_GL_CreateContext</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SDL_GL_GetDrawableSize</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_RESIZABLE</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name> <operator>||</operator> <name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>window_width</name></decl>, <decl><type ref="prev"/><name>window_height</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SDL_GetWindowSize</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>window_width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>window_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>ratio</name> <init>= <expr><call><name>_al_sdl_get_display_pixel_ratio</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"resizing the display to %dx%d to match the scaling factor %f\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>window_width</name> <operator>/</operator> <name>ratio</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>window_height</name> <operator>/</operator> <name>ratio</name><operator>)</operator></expr></argument>, <argument><expr><name>ratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SDL_SetWindowSize</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>window_width</name> <operator>/</operator> <name>ratio</name></expr></argument>, <argument><expr><name>window_height</name> <operator>/</operator> <name>ratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SDL_GL_GetDrawableSize</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier><modifier>*</modifier></type><name>add</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>add</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vt</name></name> <operator>=</operator> <name>vt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_COMPATIBLE_DISPLAY</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ogl_extras</name></name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name><name>d</name><operator>-&gt;</operator><name>ogl_extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_ogl_manage_extensions</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_ogl_set_extensions</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>extension_api</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_ogl_setup_gl</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>ogl_info</name><operator>.</operator><name>version</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_OPENGL_MAJOR_VERSION</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_OPENGL_MINOR_VERSION</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<return>return <expr><name>d</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>sdl_create_display</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_SDL</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>sdl_create_display_locked</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>d</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>convert_display_bitmaps_to_memory_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"converting display bitmaps to memory bitmaps.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>bitmaps</name><operator>.</operator><name>_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>bptr</name> <init>= <expr><call><name>_al_vector_ref_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>*</operator><name>bptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_convert_to_memory_bitmap</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>transfer_display_bitmaps_to_any_other_display</name><parameter_list>(
<parameter><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>living</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>displays</name><operator>.</operator><name>_size</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>displays</name><operator>.</operator><name>_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>living</name> <operator>=</operator> <operator>*</operator><name>slot</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>living</name> <operator>!=</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"transferring display bitmaps to other display.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>bitmaps</name><operator>.</operator><name>_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>add</name> <init>= <expr><call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>living</name><operator>-&gt;</operator><name>bitmaps</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>ref</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>add</name> <operator>=</operator> <operator>*</operator><name>ref</name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>add</name><operator>)</operator><operator>-&gt;</operator><name>_display</name></name> <operator>=</operator> <name>living</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdl_destroy_display_locked</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_SDL</name> <modifier>*</modifier></type><name>sdl</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_OGL_EXTRAS</name> <modifier>*</modifier></type><name>ogl</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>ogl_extras</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_last</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"destroying display.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>is_last</name> <operator>=</operator> <operator>(</operator><name><name>system</name><operator>-&gt;</operator><name>displays</name><operator>.</operator><name>_size</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_last</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>convert_display_bitmaps_to_memory_bitmap</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>transfer_display_bitmaps_to_any_other_display</name><argument_list>(<argument><expr><name>system</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>_al_ogl_unmanage_extensions</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"unmanaged extensions.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogl</name><operator>-&gt;</operator><name>backbuffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_ogl_destroy_backbuffer</name><argument_list>(<argument><expr><name><name>ogl</name><operator>-&gt;</operator><name>backbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ogl</name><operator>-&gt;</operator><name>backbuffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"destroy backbuffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ogl_extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>vertex_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_vector_find_and_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SDL_GL_DeleteContext</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_DestroyWindow</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>sdl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdl_destroy_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_SDL</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdl_destroy_display_locked</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sdl_set_current_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_SDL</name> <modifier>*</modifier></type><name>sdl</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SDL_GL_MakeCurrent</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdl_unset_current_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>d</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdl_flip_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_SDL</name> <modifier>*</modifier></type><name>sdl</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SDL_GL_SwapWindow</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>al_backup_dirty_bitmaps</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdl_update_display_region</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_SDL</name> <modifier>*</modifier></type><name>sdl</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_GL_SwapWindow</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sdl_is_compatible_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>display</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>bitmap</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sdl_set_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_MOUSE_CURSOR</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>display</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>cursor</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sdl_set_system_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_SYSTEM_MOUSE_CURSOR</name></type> <name>cursor_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>display</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>cursor_id</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sdl_show_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>display</name></expr>;</expr_stmt>
<return>return <expr><call><name>SDL_ShowCursor</name><argument_list>(<argument><expr><name>SDL_ENABLE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SDL_ENABLE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sdl_hide_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>display</name></expr>;</expr_stmt>
<return>return <expr><call><name>SDL_ShowCursor</name><argument_list>(<argument><expr><name>SDL_DISABLE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SDL_DISABLE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdl_set_window_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_SDL</name> <modifier>*</modifier></type><name>sdl</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SDL_SetWindowPosition</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdl_get_window_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_SDL</name> <modifier>*</modifier></type><name>sdl</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SDL_GetWindowPosition</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>recreate_textures</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>bptr</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><operator>*</operator><name>bptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitmap_flags</name> <init>= <expr><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_NO_PRESERVE_TEXTURE</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>_al_ogl_upload_bitmap_memory</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><call><name>_al_get_bitmap_memory_format</name><argument_list>(
<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sdl_acknowledge_resize</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_SDL</name> <modifier>*</modifier></type><name>sdl</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SDL_GL_GetDrawableSize</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_ogl_setup_gl</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>default_shader</name></name> <operator>=</operator> <call><name>_al_create_default_shader</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_use_shader</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>default_shader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>recreate_textures</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_glsl_unuse_shaders</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdl_set_window_title</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_SDL</name> <modifier>*</modifier></type><name>sdl</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SDL_SetWindowTitle</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sdl_resize_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_SDL</name> <modifier>*</modifier></type><name>sdl</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>window_width</name></decl>, <decl><type ref="prev"/><name>drawable_width</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SDL_GetWindowSize</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>window_width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_GL_GetDrawableSize</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>drawable_width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>ratio</name> <init>= <expr><name>drawable_width</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>window_width</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SDL_SetWindowSize</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>width</name> <operator>/</operator> <name>ratio</name></expr></argument>, <argument><expr><name>height</name> <operator>/</operator> <name>ratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdl_acknowledge_resize</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sdl_set_display_flag</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>flag_onoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_SDL</name> <modifier>*</modifier></type><name>sdl</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_FRAMELESS</name></expr>:</case>

<expr_stmt><expr><call><name>SDL_SetWindowBordered</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>!</operator><name>flag_onoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>ALLEGRO_FULLSCREEN_WINDOW</name></expr>:</case>
<expr_stmt><expr><call><name>SDL_SetWindowFullscreen</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>flag_onoff</name></expr> ?</condition><then> <expr><name>SDL_WINDOW_FULLSCREEN_DESKTOP</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>ALLEGRO_MAXIMIZED</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>flag_onoff</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SDL_MaximizeWindow</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>SDL_RestoreWindow</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdl_set_icons</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_icons</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name><name>bitmaps</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_SDL</name> <modifier>*</modifier></type><name>sdl</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>data_size</name> <init>= <expr><name>w</name> <operator>*</operator> <name>h</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>num_icons</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>al_malloc</name><argument_list>(<argument><expr><name>data_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Uint32</name></type> <name>rmask</name></decl>, <decl><type ref="prev"/><name>gmask</name></decl>, <decl><type ref="prev"/><name>bmask</name></decl>, <decl><type ref="prev"/><name>amask</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SDL_BYTEORDER</name> <operator>==</operator> <name>SDL_BIG_ENDIAN</name></expr></cpp:if>
<expr_stmt><expr><name>rmask</name> <operator>=</operator> <literal type="number">0xff000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gmask</name> <operator>=</operator> <literal type="number">0x00ff0000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bmask</name> <operator>=</operator> <literal type="number">0x0000ff00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>amask</name> <operator>=</operator> <literal type="number">0x000000ff</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<expr_stmt><expr><name>rmask</name> <operator>=</operator> <literal type="number">0x000000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gmask</name> <operator>=</operator> <literal type="number">0x0000ff00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bmask</name> <operator>=</operator> <literal type="number">0x00ff0000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>amask</name> <operator>=</operator> <literal type="number">0xff000000</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lock</name> <init>= <expr><call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>c</name> <init>= <expr><call><name>al_get_pixel</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_unmap_rgba</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>data</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>data</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>data</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SDL_Surface</name> <modifier>*</modifier></type><name>icon</name> <init>= <expr><call><name>SDL_CreateRGBSurfaceFrom</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>w</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>rmask</name></expr></argument>, <argument><expr><name>gmask</name></expr></argument>, <argument><expr><name>bmask</name></expr></argument>, <argument><expr><name>amask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SDL_SetWindowIcon</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_FreeSurface</name><argument_list>(<argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ALLEGRO_DISPLAY_INTERFACE</name> <modifier>*</modifier></type><name>_al_sdl_display_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vt</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>vt</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vt</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>AL_ID</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>create_display</name></name> <operator>=</operator> <name>sdl_create_display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>destroy_display</name></name> <operator>=</operator> <name>sdl_destroy_display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_current_display</name></name> <operator>=</operator> <name>sdl_set_current_display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>unset_current_display</name></name> <operator>=</operator> <name>sdl_unset_current_display</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>flip_display</name></name> <operator>=</operator> <name>sdl_flip_display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>update_display_region</name></name> <operator>=</operator> <name>sdl_update_display_region</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>acknowledge_resize</name></name> <operator>=</operator> <name>sdl_acknowledge_resize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>resize_display</name></name> <operator>=</operator> <name>sdl_resize_display</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>create_bitmap</name></name> <operator>=</operator> <name>_al_ogl_create_bitmap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_target_bitmap</name></name> <operator>=</operator> <name>_al_ogl_set_target_bitmap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_backbuffer</name></name> <operator>=</operator> <name>_al_ogl_get_backbuffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>is_compatible_bitmap</name></name> <operator>=</operator> <name>sdl_is_compatible_bitmap</name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_mouse_cursor</name></name> <operator>=</operator> <name>sdl_set_mouse_cursor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_system_mouse_cursor</name></name> <operator>=</operator> <name>sdl_set_system_mouse_cursor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>show_mouse_cursor</name></name> <operator>=</operator> <name>sdl_show_mouse_cursor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>hide_mouse_cursor</name></name> <operator>=</operator> <name>sdl_hide_mouse_cursor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_icons</name></name> <operator>=</operator> <name>sdl_set_icons</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_window_position</name></name> <operator>=</operator> <name>sdl_set_window_position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_window_position</name></name> <operator>=</operator> <name>sdl_get_window_position</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_display_flag</name></name> <operator>=</operator> <name>sdl_set_display_flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_window_title</name></name> <operator>=</operator> <name>sdl_set_window_title</name></expr>;</expr_stmt>









<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>update_render_state</name></name> <operator>=</operator> <name>_al_ogl_update_render_state</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_ogl_add_drawing_functions</name><argument_list>(<argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>vt</name></expr>;</return>
</block_content>}</block></function>
</unit>
