<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\file.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_file.h"</cpp:file></cpp:include>




<function><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>al_fopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>al_fopen_interface</name><argument_list>(<argument><expr><call><name>al_get_new_file_interface</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>al_fopen_interface</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FILE_INTERFACE</name> <modifier>*</modifier></type><name>drv</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>drv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>drv</name><operator>-&gt;</operator><name>fi_fopen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <name>drv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>userdata</name></name> <operator>=</operator> <call><name><name>drv</name><operator>-&gt;</operator><name>fi_fopen</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>ungetc_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>userdata</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>al_create_file_handle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FILE_INTERFACE</name> <modifier>*</modifier></type><name>drv</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>drv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <name>drv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>userdata</name></name> <operator>=</operator> <name>userdata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>ungetc_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_fclose</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fi_fclose</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>size_t</name></type> <name>al_fread</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>||</operator> <name>size</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>ungetc_len</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bytes_ungetc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cptr</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>ungetc_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cptr</name><operator>++</operator> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>ungetc</name><index>[<expr><operator>--</operator><name><name>f</name><operator>-&gt;</operator><name>ungetc_len</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>bytes_ungetc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>size</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>bytes_ungetc</name> <operator>+</operator> <call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fi_fread</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>cptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fi_fread</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>size_t</name></type> <name>al_fwrite</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>||</operator> <name>size</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>ungetc_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fi_fwrite</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_fflush</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fi_fflush</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int64_t</name></type> <name>al_ftell</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fi_ftell</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>ungetc_len</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_fseek</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(
<argument><expr><name>whence</name> <operator>==</operator> <name>ALLEGRO_SEEK_SET</name> <operator>||</operator>
<name>whence</name> <operator>==</operator> <name>ALLEGRO_SEEK_CUR</name> <operator>||</operator>
<name>whence</name> <operator>==</operator> <name>ALLEGRO_SEEK_END</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>ungetc_len</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>whence</name> <operator>==</operator> <name>ALLEGRO_SEEK_CUR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>-=</operator> <name><name>f</name><operator>-&gt;</operator><name>ungetc_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>ungetc_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fi_fseek</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_feof</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>f</name><operator>-&gt;</operator><name>ungetc_len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fi_feof</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_ferror</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fi_ferror</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>al_ferrmsg</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fi_ferrmsg</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>msg</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_fclearerr</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fi_fclearerr</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_fgetc</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_fputc</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_fwrite</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int16_t</name></type> <name>al_fread16le</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int16_t</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>EOF</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int32_t</name></type> <name>al_fread32le</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>EOF</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>size_t</name></type> <name>al_fwrite16le</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b1</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>&amp;</operator> <literal type="number">0xFF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b2</name> <operator>=</operator> <name>w</name> <operator>&amp;</operator> <literal type="number">0x00FF</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_fputc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>b2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>al_fputc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>b1</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>size_t</name></type> <name>al_fwrite32le</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>, <decl><type ref="prev"/><name>b3</name></decl>, <decl><type ref="prev"/><name>b4</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>l</name> <operator>&amp;</operator> <literal type="number">0xFF000000L</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>l</name> <operator>&amp;</operator> <literal type="number">0x00FF0000L</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b3</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>l</name> <operator>&amp;</operator> <literal type="number">0x0000FF00L</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b4</name> <operator>=</operator> <name>l</name> <operator>&amp;</operator> <literal type="number">0x00FF</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_fputc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>b4</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>b4</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>al_fputc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>b3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>al_fputc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>b2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>al_fputc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>b1</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int16_t</name></type> <name>al_fread16be</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int16_t</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>EOF</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int32_t</name></type> <name>al_fread32be</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>EOF</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>size_t</name></type> <name>al_fwrite16be</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b1</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>&amp;</operator> <literal type="number">0xFF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b2</name> <operator>=</operator> <name>w</name> <operator>&amp;</operator> <literal type="number">0x00FF</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_fputc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>b1</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>al_fputc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>b2</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>size_t</name></type> <name>al_fwrite32be</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>, <decl><type ref="prev"/><name>b3</name></decl>, <decl><type ref="prev"/><name>b4</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>l</name> <operator>&amp;</operator> <literal type="number">0xFF000000L</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>l</name> <operator>&amp;</operator> <literal type="number">0x00FF0000L</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b3</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>l</name> <operator>&amp;</operator> <literal type="number">0x0000FF00L</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b4</name> <operator>=</operator> <name>l</name> <operator>&amp;</operator> <literal type="number">0x00FF</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_fputc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>b1</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>al_fputc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>b2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>al_fputc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>b3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>al_fputc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>b4</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>b4</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>char</name> <modifier>*</modifier></type><name>al_fgets</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>max</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>max</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>al_fgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>max</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>max</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>al_fgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>c</name> <operator>!=</operator> <name>EOF</name></expr>)</condition>;</do>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <call><name>al_ferror</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>max</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>al_fget_ustr</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_fgets</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><call><name>al_ustr_append_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>al_ustr_has_suffix_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><call><name>al_fgets</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<return>return <expr><name>us</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_fputs</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>al_fwrite</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_fungetc</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fi_fungetc</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fi_fungetc</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>ungetc_len</name></name> <operator>==</operator> <name>ALLEGRO_UNGETC_SIZE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>ungetc</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>ungetc_len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>c</name></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>int64_t</name></type> <name>al_fsize</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fi_fsize</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name> <modifier>*</modifier></type><name>al_get_file_userdata</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>f</name><operator>-&gt;</operator><name>userdata</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_vfprintf</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>pfile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>ustr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pfile</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>format</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ustr</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ustr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>al_ustr_vappendf</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>al_fwrite</name><argument_list>(<argument><expr><name>pfile</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><call><name>al_cstr</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_fprintf</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>pfile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pfile</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>format</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>al_vfprintf</name><argument_list>(<argument><expr><name>pfile</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>



</unit>
