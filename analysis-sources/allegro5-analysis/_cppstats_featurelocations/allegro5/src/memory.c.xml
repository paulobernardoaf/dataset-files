<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\memory.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>



<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_MEMORY_INTERFACE</name> <modifier>*</modifier></type><name>mem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>





<function><type><name>void</name></type> <name>al_set_memory_interface</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MEMORY_INTERFACE</name> <modifier>*</modifier></type><name>memory_interface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>mem</name> <operator>=</operator> <name>memory_interface</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name> <modifier>*</modifier></type><name>al_malloc_with_context</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mem</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>mem</name><operator>-&gt;</operator><name>mi_malloc</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>malloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_free_with_context</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mem</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>mem</name><operator>-&gt;</operator><name>mi_free</name></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name> <modifier>*</modifier></type><name>al_realloc_with_context</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mem</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>mem</name><operator>-&gt;</operator><name>mi_realloc</name></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name> <modifier>*</modifier></type><name>al_calloc_with_context</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mem</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>mem</name><operator>-&gt;</operator><name>mi_calloc</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>calloc</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>



</unit>
