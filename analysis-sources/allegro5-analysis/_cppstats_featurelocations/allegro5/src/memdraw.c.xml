<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\memdraw.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_blend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_memdraw.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_pixels.h"</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bmp_write16</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*((uint16_t *)(addr)) = (c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bmp_write32</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*((uint32_t *)(addr)) = (c))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bmp_read16</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*((uint16_t *)(addr)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bmp_read32</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*((uint32_t *)(addr)))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>float</name></type> <name><name>x</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>float4</name>;</typedef>


<function><type><name>void</name></type> <name>_al_draw_pixel_memory</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ix</name></decl>, <decl><type ref="prev"/><name>iy</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>al_transform_coordinates</name><argument_list>(<argument><expr><call><name>al_get_current_transform</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ix</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>iy</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_blend_memory</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ix</name></expr></argument>, <argument><expr><name>iy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_put_pixel</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ix</name></expr></argument>, <argument><expr><name>iy</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_clear_bitmap_by_locking</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>line_ptr</name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>ALLEGRO_MEMORY_BITMAP</name> <operator>|</operator> <name>_ALLEGRO_INTERNAL_OPENGL</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<call><name>_al_pixel_format_is_compressed</name><argument_list>(<argument><expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>cl</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y1</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>ct</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>cr_excl</name></name> <operator>-</operator> <name>x1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>cb_excl</name></name> <operator>-</operator> <name>y1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>h</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>lr</name> <operator>=</operator> <call><name>al_lock_bitmap_region</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_ANY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>_al_put_pixel</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><operator>*</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>line_ptr</name> <operator>=</operator> <name><name>lr</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>lr</name><operator>-&gt;</operator><name>pixel_size</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pixel_value</name> <init>= <expr><call><name>bmp_read16</name><argument_list>(<argument><expr><name>line_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>y1</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>y1</name> <operator>+</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pixel_value</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>line_ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>line_ptr</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>bmp_write16</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pixel_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>line_ptr</name> <operator>+=</operator> <name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="number">3</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pixel_value</name> <init>= <expr><call><name>_AL_READ3BYTES</name><argument_list>(<argument><expr><name>line_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>y1</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>y1</name> <operator>+</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>line_ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pixel_value</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>_AL_WRITE3BYTES</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pixel_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>line_ptr</name> <operator>+=</operator> <name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="number">4</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pixel_value</name> <init>= <expr><call><name>bmp_read32</name><argument_list>(<argument><expr><name>line_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>y1</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>y1</name> <operator>+</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>line_ptr</name></expr></init></decl>;</decl_stmt>



<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>bmp_write32</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pixel_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>line_ptr</name> <operator>+=</operator> <name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block>

<case>case <expr><sizeof>sizeof<argument_list>(<argument><expr><name>float4</name></expr></argument>)</argument_list></sizeof></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>float4</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>float4</name> <operator>*</operator><operator>)</operator><name>line_ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float4</name></type> <name>pixel_value</name> <init>= <expr><operator>*</operator><name>data</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>y1</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>y1</name> <operator>+</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>float4</name> <operator>*</operator><operator>)</operator><name>line_ptr</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name>pixel_value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>line_ptr</name> <operator>+=</operator> <name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block>

<default>default:</default>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


</unit>
