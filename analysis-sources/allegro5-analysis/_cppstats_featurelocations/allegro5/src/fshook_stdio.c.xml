<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\fshook_stdio.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNICODE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_UNICODE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_wunicode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> ALLEGRO_INTERNAL_HEADER</cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"fshook"</literal></argument>)</argument_list></macro>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_HAVE_FTELLO</name> <operator>&amp;&amp;</operator> <name>defined</name> <name>ALLEGRO_HAVE_FSEEKO</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LARGEFILE_SOURCE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LARGEFILE_SOURCE64</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_FILE_OFFSET_BITS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_</name></cpp:undef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_fshook.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_HAVE_SYS_STAT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_HAVE_DIRENT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAMLEN</name><parameter_list>(<parameter><type><name>dirent</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(strlen((dirent)-&gt;d_name))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dirent</name></cpp:macro> <cpp:value>direct</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAMLEN</name><parameter_list>(<parameter><type><name>dirent</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dirent)-&gt;d_namlen)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_HAVE_SYS_NDIR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ndir.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_HAVE_SYS_DIR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/dir.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_HAVE_NDIR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ndir.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_IRGRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IRGRP</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_IWGRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IWGRP</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_IXGRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IXGRP</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_HAVE_SYS_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_HAVE_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tchar.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fshook_win.inc"</cpp:file></cpp:include>

<typedef>typedef <type><name>wchar_t</name></type> <name>WRAP_CHAR</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_stat</name></name></type> <name>WRAP_STAT_TYPE</name>;</typedef>
<typedef>typedef <type><name>_WDIR</name></type> <name>WRAP_DIR_TYPE</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_wdirent</name></name></type> <name>WRAP_DIRENT_TYPE</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP_LIT</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXT(s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP_STRLEN</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(wcslen(s))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP_STRCMP</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(wcscmp((s1), (s2)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP_STAT</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_wstat((p), (b)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP_MKDIR</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_wmkdir(p))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP_RMDIR</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_wrmdir(p))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP_UNLINK</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_wunlink(p))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP_OPENDIR</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_wopendir(p))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP_CLOSEDIR</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_wclosedir(d))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP_READDIR</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_wreaddir(d))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>char</name></type> <name>WRAP_CHAR</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>stat</name></name></type> <name>WRAP_STAT_TYPE</name>;</typedef>
<typedef>typedef <type><name>DIR</name></type> <name>WRAP_DIR_TYPE</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>dirent</name></name></type> <name>WRAP_DIRENT_TYPE</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP_LIT</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP_STRLEN</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(strlen(s))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP_STRCMP</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(strcmp((s1), (s2)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP_STAT</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(stat((p), (b)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP_STAT_UNSLASH</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(stat((p), (b)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP_MKDIR</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(mkdir(p, 0755))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP_RMDIR</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rmdir(p))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP_UNLINK</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(unlink(p))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP_OPENDIR</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(opendir(p))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP_CLOSEDIR</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(closedir(d))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP_READDIR</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(readdir(d))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_MAX</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_FS_ENTRY_STDIO</name></name></type> <name>ALLEGRO_FS_ENTRY_STDIO</name>;</typedef>

<struct>struct <name>ALLEGRO_FS_ENTRY_STDIO</name>
<block>{
<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY</name></type> <name>fs_entry</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>WRAP_CHAR</name> <modifier>*</modifier></type><name>abs_path</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>abs_path_utf8</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABS_PATH_UTF8</name></cpp:macro> <cpp:value>abs_path_utf8</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABS_PATH_UTF8</name></cpp:macro> <cpp:value>abs_path</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>stat_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WRAP_STAT_TYPE</name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WRAP_DIR_TYPE</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fs_update_stat_mode</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY_STDIO</name> <modifier>*</modifier></type><name>fp_stdio</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>fs_stdio_update_entry</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>;</function_decl>





<function><type><specifier>static</specifier> <name>WRAP_CHAR</name> <modifier>*</modifier></type><name>make_absolute_path_inner</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WRAP_CHAR</name> <modifier>*</modifier></type><name>tail</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>abs_path</name> <init>= <expr><call><name>_wfullpath</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>abs_path</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>abs_len</name> <init>= <expr><call><name>WRAP_STRLEN</name><argument_list>(<argument><expr><name>abs_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>abs_len</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>abs_path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name><name>abs_path</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>abs_len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>abs_path</name><index>[<expr><name>abs_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>abs_path</name><index>[<expr><name>abs_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>abs_path</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name></type> <name><name>cwd</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>cwdpath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>tailpath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getcwd</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Unable to get current working directory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cwdpath</name> <operator>=</operator> <call><name>al_create_path_for_directory</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cwdpath</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>Error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tailpath</name> <operator>=</operator> <call><name>al_create_path</name><argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tailpath</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>Error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_rebase_path</name><argument_list>(<argument><expr><name>cwdpath</name></expr></argument>, <argument><expr><name>tailpath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_make_path_canonical</name><argument_list>(<argument><expr><name>tailpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>tailpath</name></expr></argument>, <argument><expr><name>ALLEGRO_NATIVE_PATH_SEP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>Error</name>:</label>

<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>cwdpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>tailpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>WRAP_CHAR</name> <modifier>*</modifier></type><name>make_absolute_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tail</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WRAP_CHAR</name> <modifier>*</modifier></type><name>abs_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wtail</name> <init>= <expr><call><name>_al_win_utf8_to_utf16</name><argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>wtail</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>abs_path</name> <operator>=</operator> <call><name>make_absolute_path_inner</name><argument_list>(<argument><expr><name>wtail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>wtail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>abs_path</name> <operator>=</operator> <call><name>make_absolute_path_inner</name><argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>abs_path</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>create_abs_path_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WRAP_CHAR</name> <modifier>*</modifier></type><name>abs_path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_STDIO</name> <modifier>*</modifier></type><name>fh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fh</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fh</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fh</name><operator>-&gt;</operator><name>fs_entry</name><operator>.</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>_al_fs_interface_stdio</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>WRAP_STRLEN</name><argument_list>(<argument><expr><name>abs_path</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>fh</name><operator>-&gt;</operator><name>abs_path</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WRAP_CHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fh</name><operator>-&gt;</operator><name>abs_path</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>fh</name><operator>-&gt;</operator><name>abs_path</name></name></expr></argument>, <argument><expr><name>abs_path</name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WRAP_CHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>fh</name><operator>-&gt;</operator><name>abs_path_utf8</name></name> <operator>=</operator> <call><name>_al_win_utf16_to_utf8</name><argument_list>(<argument><expr><name><name>fh</name><operator>-&gt;</operator><name>abs_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fh</name><operator>-&gt;</operator><name>abs_path_utf8</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>fh</name><operator>-&gt;</operator><name>abs_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Creating entry for %s\n"</literal></expr></argument>, <argument><expr><name><name>fh</name><operator>-&gt;</operator><name>ABS_PATH_UTF8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fs_stdio_update_entry</name><argument_list>(<argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><operator>)</operator> <name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><operator>)</operator> <name>fh</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fs_stdio_create_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>orig_path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WRAP_CHAR</name> <modifier>*</modifier></type><name>abs_path</name></decl>;</decl_stmt>

<expr_stmt><expr><name>abs_path</name> <operator>=</operator> <call><name>make_absolute_path</name><argument_list>(<argument><expr><name>orig_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>abs_path</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>create_abs_path_entry</name><argument_list>(<argument><expr><name>abs_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>abs_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>unix_hidden_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>ALLEGRO_NATIVE_PATH_SEP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>void</name></type> <name>fs_update_stat_mode</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY_STDIO</name> <modifier>*</modifier></type><name>fp_stdio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>stat_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>stat_mode</name></name> <operator>|=</operator> <name>ALLEGRO_FILEMODE_ISDIR</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>stat_mode</name></name> <operator>|=</operator> <name>ALLEGRO_FILEMODE_ISFILE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <operator>(</operator><name>S_IRUSR</name> <operator>|</operator> <name>S_IRGRP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>stat_mode</name></name> <operator>|=</operator> <name>ALLEGRO_FILEMODE_READ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <operator>(</operator><name>S_IWUSR</name> <operator>|</operator> <name>S_IWGRP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>stat_mode</name></name> <operator>|=</operator> <name>ALLEGRO_FILEMODE_WRITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <operator>(</operator><name>S_IXUSR</name> <operator>|</operator> <name>S_IXGRP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>stat_mode</name></name> <operator>|=</operator> <name>ALLEGRO_FILEMODE_EXECUTE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>attrib</name> <init>= <expr><call><name>GetFileAttributes</name><argument_list>(<argument><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>abs_path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attrib</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_HIDDEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>stat_mode</name></name> <operator>|=</operator> <name>ALLEGRO_FILEMODE_HIDDEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_MACOSX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UF_HIDDEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_flags</name></name> <operator>&amp;</operator> <name>UF_HIDDEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>stat_mode</name></name> <operator>|=</operator> <name>ALLEGRO_FILEMODE_HIDDEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <operator>(</operator><name><name>fp_stdio</name><operator>-&gt;</operator><name>stat_mode</name></name> <operator>&amp;</operator> <name>ALLEGRO_FILEMODE_HIDDEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unix_hidden_file</name><argument_list>(<argument><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>abs_path</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>stat_mode</name></name> <operator>|=</operator> <name>ALLEGRO_FILEMODE_HIDDEN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>fs_stdio_update_entry</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_STDIO</name> <modifier>*</modifier></type><name>fp_stdio</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY_STDIO</name> <operator>*</operator><operator>)</operator> <name>fp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WRAP_STAT</name><argument_list>(<argument><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>abs_path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>fp_stdio</name><operator>-&gt;</operator><name>st</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fs_update_stat_mode</name><argument_list>(<argument><expr><name>fp_stdio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>fs_stdio_open_directory</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_STDIO</name> <modifier>*</modifier></type><name>fp_stdio</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY_STDIO</name> <operator>*</operator><operator>)</operator> <name>fp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fp_stdio</name><operator>-&gt;</operator><name>stat_mode</name></name> <operator>&amp;</operator> <name>ALLEGRO_FILEMODE_ISDIR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <call><name>WRAP_OPENDIR</name><argument_list>(<argument><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>abs_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fp_stdio</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>fs_stdio_close_directory</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_STDIO</name> <modifier>*</modifier></type><name>fp_stdio</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY_STDIO</name> <operator>*</operator><operator>)</operator> <name>fp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fp_stdio</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>ENOTDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>WRAP_CLOSEDIR</name><argument_list>(<argument><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fs_stdio_read_directory</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_STDIO</name> <modifier>*</modifier></type><name>fp_stdio</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY_STDIO</name> <operator>*</operator><operator>)</operator> <name>fp</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>WRAP_DIRENT_TYPE</name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>WRAP_READDIR</name><argument_list>(<argument><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>WRAP_STRCMP</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><call><name>WRAP_LIT</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>WRAP_STRCMP</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><call><name>WRAP_LIT</name><argument_list>(<argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>buf</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buflen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <call><name>_snwprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>, <argument><expr><literal type="string">L"%s\\%s"</literal></expr></argument>,
<argument><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>abs_path</name></name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>&gt;=</operator> <name>MAX_PATH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>create_abs_path_entry</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>abs_path_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>abs_path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ent_name_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>al_malloc</name><argument_list>(<argument><expr><name>abs_path_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>ent_name_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>abs_path</name></name></expr></argument>, <argument><expr><name>abs_path_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>abs_path_len</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>buf</name><index>[<expr><name>abs_path_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>ALLEGRO_NATIVE_PATH_SEP</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>abs_path_len</name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><name>ent_name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>abs_path_len</name> <operator>+</operator> <name>ent_name_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>abs_path_len</name></expr>]</index></name> <operator>=</operator> <name>ALLEGRO_NATIVE_PATH_SEP</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>abs_path_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><name>ent_name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>abs_path_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>ent_name_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>create_abs_path_entry</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>fs_stdio_destroy_entry</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fh_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_STDIO</name> <modifier>*</modifier></type><name>fh</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY_STDIO</name> <operator>*</operator><operator>)</operator> <name>fh_</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>fh</name><operator>-&gt;</operator><name>abs_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>fh</name><operator>-&gt;</operator><name>abs_path_utf8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>fh</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fs_stdio_close_directory</name><argument_list>(<argument><expr><name>fh_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>off_t</name></type> <name>fs_stdio_entry_size</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_STDIO</name> <modifier>*</modifier></type><name>ent</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY_STDIO</name> <operator>*</operator><operator>)</operator> <name>fp</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ent</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_size</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>fs_stdio_entry_mode</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_STDIO</name> <modifier>*</modifier></type><name>ent</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY_STDIO</name> <operator>*</operator><operator>)</operator> <name>fp</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ent</name><operator>-&gt;</operator><name>stat_mode</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>time_t</name></type> <name>fs_stdio_entry_atime</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_STDIO</name> <modifier>*</modifier></type><name>ent</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY_STDIO</name> <operator>*</operator><operator>)</operator> <name>fp</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ent</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_atime</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>time_t</name></type> <name>fs_stdio_entry_mtime</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_STDIO</name> <modifier>*</modifier></type><name>ent</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY_STDIO</name> <operator>*</operator><operator>)</operator> <name>fp</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ent</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_mtime</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>time_t</name></type> <name>fs_stdio_entry_ctime</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_STDIO</name> <modifier>*</modifier></type><name>ent</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY_STDIO</name> <operator>*</operator><operator>)</operator> <name>fp</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ent</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_ctime</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>fs_stdio_get_current_directory</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wcwd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cwd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wcwd</name> <operator>=</operator> <call><name>_wgetcwd</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wcwd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cwd</name> <operator>=</operator> <call><name>_al_win_utf16_to_utf8</name><argument_list>(<argument><expr><name>wcwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wcwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cwd</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmpdir</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cwd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getcwd</name><argument_list>(<argument><expr><name>tmpdir</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cwd</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tmpdir</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cwd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>strcpy</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>, <argument><expr><name>tmpdir</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>fs_stdio_change_directory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wpath</name> <init>= <expr><call><name>_al_win_utf8_to_utf16</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>wpath</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_wchdir</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>chdir</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>mkdir_exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WRAP_CHAR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WRAP_STAT_TYPE</name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WRAP_STAT</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>WRAP_MKDIR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>do_make_directory</name><parameter_list>(<parameter><decl><type><name>WRAP_CHAR</name> <modifier>*</modifier></type><name>abs_path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>WRAP_CHAR</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>end</name> <init>= <expr><name>abs_path</name> <operator>+</operator> <call><name>WRAP_STRLEN</name><argument_list>(<argument><expr><name>abs_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WRAP_CHAR</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>abs_path</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>abs_path</name> <operator>&gt;=</operator> <literal type="number">3</literal>
<operator>&amp;&amp;</operator> <name><name>abs_path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>abs_path</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <name><name>abs_path</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>abs_path</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>( <init>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>WRAP_CHAR</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>ALLEGRO_NATIVE_PATH_SEP</name> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkdir_exists</name><argument_list>(<argument><expr><name>abs_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><call><name>mkdir_exists</name><argument_list>(<argument><expr><name>abs_path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>fs_stdio_make_directory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tail</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WRAP_CHAR</name> <modifier>*</modifier></type><name>abs_path</name> <init>= <expr><call><name>make_absolute_path</name><argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>abs_path</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>do_make_directory</name><argument_list>(<argument><expr><name>abs_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>abs_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>fs_stdio_entry_exists</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_STDIO</name> <modifier>*</modifier></type><name>fp_stdio</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY_STDIO</name> <operator>*</operator><operator>)</operator> <name>fp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WRAP_STAT_TYPE</name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WRAP_STAT</name><argument_list>(<argument><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>abs_path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>fs_stdio_filename_exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WRAP_STAT_TYPE</name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>



<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>abs_path</name> <init>= <expr><call><name>make_absolute_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>abs_path</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>WRAP_STAT</name><argument_list>(<argument><expr><name>abs_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>abs_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>WRAP_STAT</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>fs_stdio_remove_entry</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_STDIO</name> <modifier>*</modifier></type><name>fp_stdio</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY_STDIO</name> <operator>*</operator><operator>)</operator> <name>fp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fs_stdio_entry_mode</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_FILEMODE_ISDIR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>WRAP_RMDIR</name><argument_list>(<argument><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>abs_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>fs_stdio_entry_mode</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_FILEMODE_ISFILE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>WRAP_UNLINK</name><argument_list>(<argument><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>abs_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>fs_stdio_remove_filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fs_stdio_create_entry</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Cannot remove %s."</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fs_stdio_remove_entry</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fs_stdio_destroy_entry</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fs_stdio_name</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_STDIO</name> <modifier>*</modifier></type><name>fp_stdio</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY_STDIO</name> <operator>*</operator><operator>)</operator> <name>fp</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>ABS_PATH_UTF8</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fs_stdio_open_file</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_STDIO</name> <modifier>*</modifier></type><name>fp_stdio</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY_STDIO</name> <operator>*</operator><operator>)</operator> <name>fp</name></expr></init></decl>;</decl_stmt>




<return>return <expr><call><name>al_fopen_interface</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_al_file_interface_stdio</name></expr></argument>,
<argument><expr><name><name>fp_stdio</name><operator>-&gt;</operator><name>ABS_PATH_UTF8</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><name><name>struct</name> <name>ALLEGRO_FS_INTERFACE</name></name></type> <name>_al_fs_interface_stdio</name> <init>= <expr><block>{
<expr><name>fs_stdio_create_entry</name></expr>,
<expr><name>fs_stdio_destroy_entry</name></expr>,
<expr><name>fs_stdio_name</name></expr>,
<expr><name>fs_stdio_update_entry</name></expr>,
<expr><name>fs_stdio_entry_mode</name></expr>,
<expr><name>fs_stdio_entry_atime</name></expr>,
<expr><name>fs_stdio_entry_mtime</name></expr>,
<expr><name>fs_stdio_entry_ctime</name></expr>,
<expr><name>fs_stdio_entry_size</name></expr>,
<expr><name>fs_stdio_entry_exists</name></expr>,
<expr><name>fs_stdio_remove_entry</name></expr>,

<expr><name>fs_stdio_open_directory</name></expr>,
<expr><name>fs_stdio_read_directory</name></expr>,
<expr><name>fs_stdio_close_directory</name></expr>,

<expr><name>fs_stdio_filename_exists</name></expr>,
<expr><name>fs_stdio_remove_filename</name></expr>,
<expr><name>fs_stdio_get_current_directory</name></expr>,
<expr><name>fs_stdio_change_directory</name></expr>,
<expr><name>fs_stdio_make_directory</name></expr>,

<expr><name>fs_stdio_open_file</name></expr>
}</block></expr></init></decl>;</decl_stmt>


</unit>
