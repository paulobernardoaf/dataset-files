<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\raspberrypi\pisystem.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintraspberrypi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_raspberrypi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintunix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintlnx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_x.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xevents.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xmouse.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bcm_host.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"system"</literal></argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_SYSTEM_INTERFACE</name> <modifier>*</modifier></type><name>pi_vt</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>pi_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_RASPBERRYPI</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bcm_host_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ALLEGRO_DISPLAY_RASPBERRYPI</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_unix_init_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"DISPLAY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_mutex_init_recursive</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name> <operator>=</operator> <call><name>XOpenDisplay</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_thread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>_al_xwin_background_thread</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"events thread spawned.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>AllegroAtom</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><literal type="string">"AllegroAtom"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inhibit_screensaver</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>vt</name></name> <operator>=</operator> <name>pi_vt</name></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>system</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pi_shutdown_system</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_RASPBERRYPI</name> <modifier>*</modifier></type><name>spi</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"shutting down.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier><modifier>*</modifier></type><name>dptr</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>*</operator><name>dptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_destroy_display</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"DISPLAY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_thread_join</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spi</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XCloseDisplay</name><argument_list>(<argument><expr><name><name>spi</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bcm_host_deinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>raise</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>spi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_KEYBOARD_DRIVER</name> <modifier>*</modifier></type><name>pi_get_keyboard_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"DISPLAY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>_al_xwin_keyboard_driver</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>_al_linux_keyboard_driver_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>driver</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_MOUSE_DRIVER</name> <modifier>*</modifier></type><name>pi_get_mouse_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"DISPLAY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>_al_xwin_mouse_driver</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>_al_linux_mouse_driver_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>driver</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_JOYSTICK_DRIVER</name> <modifier>*</modifier></type><name>pi_get_joystick_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>_al_joystick_driver_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>driver</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pi_get_num_video_adapters</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>pi_get_monitor_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>adapter</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_MONITOR_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>adapter</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dx</name></decl>, <decl><type ref="prev"/><name>dy</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_raspberrypi_get_screen_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>x1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>y1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>x2</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>y2</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>pi_get_cursor_position</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret_x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret_y</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ret_x</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ret_y</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>pi_inhibit_screensaver</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>inhibit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_RASPBERRYPI</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>system</name><operator>-&gt;</operator><name>inhibit_screensaver</name></name> <operator>=</operator> <name>inhibit</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pi_get_num_display_modes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_DISPLAY_MODE</name> <modifier>*</modifier></type><name>pi_get_display_mode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_MODE</name> <modifier>*</modifier></type><name>dm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mode</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dx</name></decl>, <decl><type ref="prev"/><name>dy</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_raspberrypi_get_screen_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>refresh_rate</name></name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<return>return <expr><name>dm</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_MOUSE_CURSOR</name> <modifier>*</modifier></type><name>pi_create_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>focus_x_ignored</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>focus_y_ignored</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>focus_x_ignored</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>focus_y_ignored</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_STATE</name></type> <name>state</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_store_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>ALLEGRO_STATE_NEW_BITMAP_PARAMETERS</name> <operator>|</operator> <name>ALLEGRO_STATE_TARGET_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_new_bitmap_format</name><argument_list>(<argument><expr><name>ALLEGRO_PIXEL_FORMAT_ARGB_8888</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name>ALLEGRO_MEMORY_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>cursor_bmp</name> <init>= <expr><call><name>al_clone_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_MOUSE_CURSOR_RASPBERRYPI</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_MOUSE_CURSOR_RASPBERRYPI</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>=</operator> <name>cursor_bmp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_restore_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ALLEGRO_MOUSE_CURSOR</name> <operator>*</operator><operator>)</operator><name>cursor</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pi_destroy_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MOUSE_CURSOR</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_MOUSE_CURSOR_RASPBERRYPI</name> <modifier>*</modifier></type><name>pi_cursor</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>cursor</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name><name>pi_cursor</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>pi_cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>ALLEGRO_SYSTEM_INTERFACE</name> <modifier>*</modifier></type><name>_al_system_raspberrypi_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pi_vt</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>pi_vt</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pi_vt</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>pi_vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pi_vt</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>ALLEGRO_SYSTEM_ID_RASPBERRYPI</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_vt</name><operator>-&gt;</operator><name>initialize</name></name> <operator>=</operator> <name>pi_initialize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_vt</name><operator>-&gt;</operator><name>get_display_driver</name></name> <operator>=</operator> <name>_al_get_raspberrypi_display_interface</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_vt</name><operator>-&gt;</operator><name>get_keyboard_driver</name></name> <operator>=</operator> <name>pi_get_keyboard_driver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_vt</name><operator>-&gt;</operator><name>get_mouse_driver</name></name> <operator>=</operator> <name>pi_get_mouse_driver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_vt</name><operator>-&gt;</operator><name>get_joystick_driver</name></name> <operator>=</operator> <name>pi_get_joystick_driver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_vt</name><operator>-&gt;</operator><name>get_num_display_modes</name></name> <operator>=</operator> <name>pi_get_num_display_modes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_vt</name><operator>-&gt;</operator><name>get_display_mode</name></name> <operator>=</operator> <name>pi_get_display_mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_vt</name><operator>-&gt;</operator><name>shutdown_system</name></name> <operator>=</operator> <name>pi_shutdown_system</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_vt</name><operator>-&gt;</operator><name>get_num_video_adapters</name></name> <operator>=</operator> <name>pi_get_num_video_adapters</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_vt</name><operator>-&gt;</operator><name>get_monitor_info</name></name> <operator>=</operator> <name>pi_get_monitor_info</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_vt</name><operator>-&gt;</operator><name>create_mouse_cursor</name></name> <operator>=</operator> <name>pi_create_mouse_cursor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_vt</name><operator>-&gt;</operator><name>destroy_mouse_cursor</name></name> <operator>=</operator> <name>pi_destroy_mouse_cursor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_vt</name><operator>-&gt;</operator><name>get_cursor_position</name></name> <operator>=</operator> <name>pi_get_cursor_position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_vt</name><operator>-&gt;</operator><name>get_path</name></name> <operator>=</operator> <name>_al_unix_get_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_vt</name><operator>-&gt;</operator><name>inhibit_screensaver</name></name> <operator>=</operator> <name>pi_inhibit_screensaver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_vt</name><operator>-&gt;</operator><name>get_time</name></name> <operator>=</operator> <name>_al_unix_get_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_vt</name><operator>-&gt;</operator><name>rest</name></name> <operator>=</operator> <name>_al_unix_rest</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_vt</name><operator>-&gt;</operator><name>init_timeout</name></name> <operator>=</operator> <name>_al_unix_init_timeout</name></expr>;</expr_stmt>

<return>return <expr><name>pi_vt</name></expr>;</return>
</block_content>}</block></function>



</unit>
