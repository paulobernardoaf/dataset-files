<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\android\android_image.c">














<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_android.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_android.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"android"</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>copy_bitmap_data</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_PIXEL_FORMAT</name></type> <name>src_format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bitmap_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bitmap_h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lr</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_ANY</name></expr></argument>,
<argument><expr><name>ALLEGRO_LOCK_WRITEONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>lr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_convert_bitmap_data</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_format</name></expr></argument>, <argument><expr><name>src_pitch</name></expr></argument>,
<argument><expr><name><name>lr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>lr</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bitmap_w</name></expr></argument>, <argument><expr><name>bitmap_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>copy_bitmap_data_multiply_alpha</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bitmap_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bitmap_h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lr</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888</name></expr></argument>,
<argument><expr><name>ALLEGRO_LOCK_WRITEONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>lr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>bitmap_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>lr</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>bitmap_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>src</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>copy_bitmap_data_demultiply_alpha</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>src_format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bitmap_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bitmap_h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lr</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888</name></expr></argument>,
<argument><expr><name>ALLEGRO_LOCK_WRITEONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>lr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_convert_bitmap_data</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_format</name></expr></argument>, <argument><expr><name>src_pitch</name></expr></argument>,
<argument><expr><name><name>lr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>lr</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bitmap_w</name></expr></argument>, <argument><expr><name>bitmap_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>bitmap_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>lr</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>bitmap_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>a</name> <init>= <expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>g</name> <init>= <expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>alpha_mul</name> <init>= <expr><literal type="number">255.0f</literal> <operator>/</operator> <operator>(</operator><name>a</name><operator>+</operator><literal type="number">0.001f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>*=</operator> <name>alpha_mul</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>*=</operator> <name>alpha_mul</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>*=</operator> <name>alpha_mul</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>a</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>r</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>_al_android_load_image_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>jnienv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jclass</name></type> <name>image_loader_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>input_stream_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>input_stream_ctor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>input_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buffer_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>byte_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>jbitmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitmap_w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitmap_h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pitch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_KEEP_INDEX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"ALLEGRO_KEEP_INDEX not yet supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>jnienv</name> <operator>=</operator> <operator>(</operator><name>JNIEnv</name> <operator>*</operator><operator>)</operator><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>image_loader_class</name> <operator>=</operator> <call><name>_al_android_image_loader_class</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>input_stream_class</name> <operator>=</operator> <call><name>_al_android_input_stream_class</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>input_stream_ctor</name> <operator>=</operator> <call><name>_jni_call</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>jclass</name></expr></argument>, <argument><expr><name>GetMethodID</name></expr></argument>,
<argument><expr><name>input_stream_class</name></expr></argument>, <argument><expr><literal type="string">"&lt;init&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"(J)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>input_stream</name> <operator>=</operator> <call><name>_jni_call</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>jobject</name></expr></argument>, <argument><expr><name>NewObject</name></expr></argument>, <argument><expr><name>input_stream_class</name></expr></argument>,
<argument><expr><name>input_stream_ctor</name></expr></argument>, <argument><expr><operator>(</operator><name>jlong</name><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input_stream</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"failed to create new AllegroInputStream object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>jbitmap</name> <operator>=</operator> <call><name>_jni_callStaticObjectMethodV</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>image_loader_class</name></expr></argument>,
<argument><expr><literal type="string">"decodeBitmapStream"</literal></expr></argument>,
<argument><expr><literal type="string">"(Ljava/io/InputStream;)Landroid/graphics/Bitmap;"</literal></expr></argument>,
<argument><expr><name>input_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_jni_callv</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>DeleteLocalRef</name></expr></argument>, <argument><expr><name>input_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>jbitmap</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bitmap_w</name> <operator>=</operator> <call><name>_jni_callIntMethod</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>jbitmap</name></expr></argument>, <argument><expr><literal type="string">"getWidth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bitmap_h</name> <operator>=</operator> <call><name>_jni_callIntMethod</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>jbitmap</name></expr></argument>, <argument><expr><literal type="string">"getHeight"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pitch</name> <operator>=</operator> <call><name>_jni_callIntMethod</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>jbitmap</name></expr></argument>, <argument><expr><literal type="string">"getRowBytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer_len</name> <operator>=</operator> <name>pitch</name> <operator>*</operator> <name>bitmap_h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_jni_callv</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>DeleteLocalRef</name></expr></argument>, <argument><expr><name>jbitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>src_format</name> <init>= <expr><call><name>_jni_callStaticIntMethodV</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>image_loader_class</name></expr></argument>,
<argument><expr><literal type="string">"getBitmapFormat"</literal></expr></argument>, <argument><expr><literal type="string">"(Landroid/graphics/Bitmap;)I"</literal></expr></argument>, <argument><expr><name>jbitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><name>byte_buffer</name> <operator>=</operator> <call><name>_jni_call</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>jobject</name></expr></argument>, <argument><expr><name>NewDirectByteBuffer</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>,
<argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_jni_callVoidMethodV</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>jbitmap</name></expr></argument>,
<argument><expr><literal type="string">"copyPixelsToBuffer"</literal></expr></argument>, <argument><expr><literal type="string">"(Ljava/nio/Buffer;)V"</literal></expr></argument>, <argument><expr><name>byte_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>_jni_callv</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>DeleteLocalRef</name></expr></argument>, <argument><expr><name>byte_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>_jni_callv</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>DeleteLocalRef</name></expr></argument>, <argument><expr><name>jbitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><name>bitmap_w</name></expr></argument>, <argument><expr><name>bitmap_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bitmap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_NO_PREMULTIPLIED_ALPHA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>copy_bitmap_data_demultiply_alpha</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>,
<argument><expr><name>src_format</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>, <argument><expr><name>bitmap_w</name></expr></argument>, <argument><expr><name>bitmap_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>copy_bitmap_data</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><name>src_format</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>,
<argument><expr><name>bitmap_w</name></expr></argument>, <argument><expr><name>bitmap_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bitmap</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>android_load_image_asset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>jnienv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jclass</name></type> <name>image_loader_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>activity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>jbitmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitmap_w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitmap_h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jintArray</name></type> <name>ia</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jint</name> <modifier>*</modifier></type><name>arr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_KEEP_INDEX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"ALLEGRO_KEEP_INDEX not yet supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>jnienv</name> <operator>=</operator> <call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>image_loader_class</name> <operator>=</operator> <call><name>_al_android_image_loader_class</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>activity</name> <operator>=</operator> <call><name>_al_android_activity_object</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>jnienv</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jbitmap</name> <operator>=</operator> <call><name>_jni_callStaticObjectMethodV</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>image_loader_class</name></expr></argument>,
<argument><expr><literal type="string">"decodeBitmapAsset"</literal></expr></argument>,
<argument><expr><literal type="string">"(Landroid/app/Activity;Ljava/lang/String;)Landroid/graphics/Bitmap;"</literal></expr></argument>,
<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>jnienv</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>jbitmap</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bitmap_w</name> <operator>=</operator> <call><name>_jni_callIntMethod</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>jbitmap</name></expr></argument>, <argument><expr><literal type="string">"getWidth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bitmap_h</name> <operator>=</operator> <call><name>_jni_callIntMethod</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>jbitmap</name></expr></argument>, <argument><expr><literal type="string">"getHeight"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"bitmap dimensions: %d, %d"</literal></expr></argument>, <argument><expr><name>bitmap_w</name></expr></argument>, <argument><expr><name>bitmap_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><name>bitmap_w</name></expr></argument>, <argument><expr><name>bitmap_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bitmap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_jni_callv</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>DeleteLocalRef</name></expr></argument>, <argument><expr><name>jbitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ia</name> <operator>=</operator> <call><name>_jni_callStaticObjectMethodV</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>image_loader_class</name></expr></argument>,
<argument><expr><literal type="string">"getPixels"</literal></expr></argument>, <argument><expr><literal type="string">"(Landroid/graphics/Bitmap;)[I"</literal></expr></argument>, <argument><expr><name>jbitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arr</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>jnienv</name><operator>)</operator><operator>-&gt;</operator><name>GetIntArrayElements</name></name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>ia</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_NO_PREMULTIPLIED_ALPHA</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>src_format</name> <init>= <expr><name>ALLEGRO_PIXEL_FORMAT_ARGB_8888</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_pitch</name> <init>= <expr><name>bitmap_w</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_bitmap_data</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>arr</name></expr></argument>,
<argument><expr><name>src_format</name></expr></argument>, <argument><expr><name>src_pitch</name></expr></argument>, <argument><expr><name>bitmap_w</name></expr></argument>, <argument><expr><name>bitmap_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>copy_bitmap_data_multiply_alpha</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>arr</name></expr></argument>,
<argument><expr><name>bitmap_w</name></expr></argument>, <argument><expr><name>bitmap_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>jnienv</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseIntArrayElements</name></name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>ia</name></expr></argument>, <argument><expr><name>arr</name></expr></argument>, <argument><expr><name>JNI_ABORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_jni_callv</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>DeleteLocalRef</name></expr></argument>, <argument><expr><name>ia</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_jni_callv</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>DeleteLocalRef</name></expr></argument>, <argument><expr><name>jbitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bitmap</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>_al_android_load_image</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><call><name>al_get_new_file_interface</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>_al_get_apk_file_vtable</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>android_load_image_asset</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name>_al_android_load_image_f</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bmp</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


</unit>
