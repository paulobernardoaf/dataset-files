<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\android\android_display.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_opengl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_android.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_display.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_events.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_opengl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_shader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_pixels.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"EGL/egl.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"display"</literal></argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_DISPLAY_INTERFACE</name> <modifier>*</modifier></type><name>vt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name></type> <name>main_thread_display_settings</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>select_best_visual_and_update</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>android_set_display_option</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>o</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_al_android_resize_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>_al_android_init_display</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_android_clear_current</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_android_make_current</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>JNI_FUNC</name><argument_list>(<argument>void</argument>, <argument>AllegroSurface</argument>, <argument>nativeOnCreate</argument>, <argument>(JNIEnv *env, jobject obj)</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"nativeOnCreate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>env</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>obj</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>system</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"AllegroSurface_nativeOnCreate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier><modifier>*</modifier></type><name>dptr</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>*</operator><name>dptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>recreate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>JNI_FUNC</name><argument_list>(<argument>bool</argument>, <argument>AllegroSurface</argument>, <argument>nativeOnDestroy</argument>, <argument>(JNIEnv *env, jobject obj)</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>sys</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier><modifier>*</modifier></type><name>dptr</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><operator>*</operator><name>dptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>display</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"AllegroSurface_nativeOnDestroy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>env</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>display</name><operator>-&gt;</operator><name>created</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Display creation failed, not sending HALT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>created</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>is_destroy_display</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"locking display event source: %p %p"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_DISPLAY_HALT_DRAWING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_current_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"unlocking display event source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_wait_cond</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"AllegroSurface_nativeOnDestroy end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block>



<macro><name>JNI_FUNC</name><argument_list>(<argument>void</argument>, <argument>AllegroSurface</argument>, <argument>nativeOnChange</argument>, <argument>(JNIEnv *env, jobject obj,
jint format, jint width, jint height)</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>system</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier><modifier>*</modifier></type><name>dptr</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>*</operator><name>dptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY</name><operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>display</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"on change %dx%d!"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>format</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>first_run</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>recreate</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_android_resize_display</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>first_run</name></name> <operator>||</operator> <name><name>d</name><operator>-&gt;</operator><name>recreate</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>surface_object</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>_al_android_init_display</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>first_run</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_broadcast_cond</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_android_clear_current</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>created</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>recreate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>resumed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>first_run</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"locking display event source: %p"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"check generate event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_DISPLAY_RESUME_DRAWING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_current_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"unlocking display event source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>first_run</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_broadcast_cond</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>first_run</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Waiting for al_acknowledge_drawing_resume"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>resumed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_wait_cond</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Got al_acknowledge_drawing_resume"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>first_run</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_android_resize_display</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<macro><name>JNI_FUNC</name><argument_list>(<argument>void</argument>, <argument>AllegroSurface</argument>, <argument>nativeOnJoystickAxis</argument>, <argument>(JNIEnv *env, jobject obj,
jint index, jint stick, jint axis, jfloat value)</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>env</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_android_generate_joystick_axis_event</name><argument_list>(<argument><expr><name>index</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>stick</name></expr></argument>, <argument><expr><name>axis</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>JNI_FUNC</name><argument_list>(<argument>void</argument>, <argument>AllegroSurface</argument>, <argument>nativeOnJoystickButton</argument>, <argument>(JNIEnv *env, jobject obj,
jint index, jint button, jboolean down)</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>env</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_android_generate_joystick_button_event</name><argument_list>(<argument><expr><name>index</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>button</name></expr></argument>, <argument><expr><name>down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><name>void</name></type> <name>_al_android_create_surface</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>post</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>post</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_jni_callVoidMethod</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>_al_android_activity_object</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"postCreateSurface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>_jni_callVoidMethod</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>_al_android_activity_object</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"createSurface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_android_destroy_surface</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>post</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>surface</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>post</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_jni_callVoidMethodV</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>_al_android_activity_object</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"postDestroySurface"</literal></expr></argument>, <argument><expr><literal type="string">"()V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>_jni_callVoidMethodV</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>_al_android_activity_object</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"destroySurface"</literal></expr></argument>, <argument><expr><literal type="string">"()V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_android_make_current</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_jni_callVoidMethodV</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>surface_object</name></name></expr></argument>, <argument><expr><literal type="string">"egl_makeCurrent"</literal></expr></argument>, <argument><expr><literal type="string">"()V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_android_clear_current</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_jni_callVoidMethodV</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>surface_object</name></name></expr></argument>, <argument><expr><literal type="string">"egl_clearCurrent"</literal></expr></argument>, <argument><expr><literal type="string">"()V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_al_android_init_display</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_ANDROID</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>config_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>programmable_pipeline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>system</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>display</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"calling egl_Init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_jni_callBooleanMethodV</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>surface_object</name></name></expr></argument>,
<argument><expr><literal type="string">"egl_Init"</literal></expr></argument>, <argument><expr><literal type="string">"()Z"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"failed to initialize EGL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>config_index</name> <operator>=</operator> <call><name>select_best_visual_and_update</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>config_index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to choose config.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>programmable_pipeline</name> <operator>=</operator> <operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"calling egl_createContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_jni_callIntMethodV</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>surface_object</name></name></expr></argument>,
<argument><expr><literal type="string">"egl_createContext"</literal></expr></argument>, <argument><expr><literal type="string">"(IZ)I"</literal></expr></argument>, <argument><expr><name>config_index</name></expr></argument>, <argument><expr><name>programmable_pipeline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"failed to create egl context!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"calling egl_createSurface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_jni_callBooleanMethodV</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>surface_object</name></name></expr></argument>,
<argument><expr><literal type="string">"egl_createSurface"</literal></expr></argument>, <argument><expr><literal type="string">"()Z"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"failed to create egl surface!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"initialize ogl extensions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_ogl_manage_extensions</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_ogl_set_extensions</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>extension_api</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_ogl_setup_gl</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>_al_android_resize_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>d</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>emitted_event</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"display resize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>resize_acknowledge</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>resize_acknowledge2</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"locking mutex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"done locking mutex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"locking display event source: %p"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"check generate event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_DISPLAY_RESIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_current_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <call><name>_al_android_get_display_orientation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>emitted_event</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"unlocking display event source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>emitted_event</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"waiting for display resize acknowledge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>resize_acknowledge</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"calling al_wait_cond"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_wait_cond</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"done waiting for display resize acknowledge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"resize backbuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_ogl_setup_gl</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>emitted_event</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>resize_acknowledge2</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_broadcast_cond</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>call_initRequiredAttribs</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_jni_callVoidMethodV</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>surface_object</name></name></expr></argument>,
<argument><expr><literal type="string">"egl_initRequiredAttribs"</literal></expr></argument>, <argument><expr><literal type="string">"()V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>call_setRequiredAttrib</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>d</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_jni_callVoidMethodV</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>surface_object</name></name></expr></argument>,
<argument><expr><literal type="string">"egl_setRequiredAttrib"</literal></expr></argument>, <argument><expr><literal type="string">"(II)V"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>call_chooseConfig</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>pp</name> <init>= <expr><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>_jni_callIntMethodV</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>surface_object</name></name></expr></argument>,
<argument><expr><literal type="string">"egl_chooseConfig"</literal></expr></argument>, <argument><expr><literal type="string">"(Z)I"</literal></expr></argument>, <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>call_getConfigAttribs</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>d</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>configIndex</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier></type><name>eds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>jintArray</name></type> <name>jArray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jint</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>jArray</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewIntArray</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ALLEGRO_DISPLAY_OPTIONS_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>jArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"NewIntArray failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_jni_callVoidMethodV</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>surface_object</name></name></expr></argument>,
<argument><expr><literal type="string">"egl_getConfigAttribs"</literal></expr></argument>, <argument><expr><literal type="string">"(I[I)V"</literal></expr></argument>, <argument><expr><name>configIndex</name></expr></argument>, <argument><expr><name>jArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetIntArrayElements</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ALLEGRO_DISPLAY_OPTIONS_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseIntArrayElements</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jArray</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_required_attribs</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>d</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAYBE_SET</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { bool required = (ref-&gt;required &amp; ((int64_t)1 &lt;&lt; (v))); if (required) { call_setRequiredAttrib(env, d, (v), ref-&gt;settings[(v)]); } } while (0)</cpp:value></cpp:define>







<expr_stmt><expr><call><name>MAYBE_SET</name><argument_list>(<argument><expr><name>ALLEGRO_RED_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAYBE_SET</name><argument_list>(<argument><expr><name>ALLEGRO_GREEN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAYBE_SET</name><argument_list>(<argument><expr><name>ALLEGRO_BLUE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAYBE_SET</name><argument_list>(<argument><expr><name>ALLEGRO_ALPHA_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAYBE_SET</name><argument_list>(<argument><expr><name>ALLEGRO_COLOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAYBE_SET</name><argument_list>(<argument><expr><name>ALLEGRO_DEPTH_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAYBE_SET</name><argument_list>(<argument><expr><name>ALLEGRO_STENCIL_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAYBE_SET</name><argument_list>(<argument><expr><name>ALLEGRO_SAMPLE_BUFFERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAYBE_SET</name><argument_list>(<argument><expr><name>ALLEGRO_SAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAYBE_SET</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>select_best_visual_and_update</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><operator>&amp;</operator><name>main_thread_display_settings</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier><modifier>*</modifier></type><name>eds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_configs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chosen_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Setting required display settings.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_initRequiredAttribs</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_required_attribs</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Calling eglChooseConfig.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num_configs</name> <operator>=</operator> <call><name>call_chooseConfig</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num_configs</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>eds</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><name>num_configs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>eds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_configs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>eds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>eds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_getConfigAttribs</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>eds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>settings</name><index>[<expr><name>ALLEGRO_RENDER_METHOD</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>settings</name><index>[<expr><name>ALLEGRO_COMPATIBLE_DISPLAY</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>settings</name><index>[<expr><name>ALLEGRO_SWAP_METHOD</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>settings</name><index>[<expr><name>ALLEGRO_VSYNC</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>score</name> <operator>=</operator> <call><name>_al_score_display_settings</name><argument_list>(<argument><expr><name><name>eds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Sorting configs.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>eds</name></expr></argument>, <argument><expr><name>num_configs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>eds</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>_al_display_settings_sorter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chosen_index</name> <operator>=</operator> <name><name>eds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Chose config %i\n"</literal></expr></argument>, <argument><expr><name>chosen_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>extra_settings</name></name> <operator>=</operator> <operator>*</operator><name><name>eds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_configs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>eds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>eds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>chosen_index</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>android_set_display_flag</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>onoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dpy</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flag</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>onoff</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>==</operator> <name>ALLEGRO_FRAMELESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_jni_callVoidMethodV</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>_al_android_activity_object</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"setAllegroFrameless"</literal></expr></argument>, <argument><expr><literal type="string">"(Z)V"</literal></expr></argument>, <argument><expr><name>onoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>android_create_display</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>al_get_new_display_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_PROGRAMMABLE_PIPELINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Programmable pipeline support not built.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_OGL_EXTRAS</name> <modifier>*</modifier></type><name>ogl</name> <init>= <expr><call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>ogl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ogl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>ogl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name></name> <operator>=</operator> <name>ogl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>vt</name></name> <operator>=</operator> <call><name>_al_get_android_display_driver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ALLEGRO_OPENGL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ALLEGRO_OPENGL_ES_PROFILE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>_al_event_source_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>main_thread_display_settings</name> <operator>=</operator> <operator>*</operator><call><name>_al_get_new_display_settings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <call><name>al_create_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <call><name>al_create_cond</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>recreate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>first_run</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>failed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>system</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier><modifier>*</modifier></type><name>add</name></decl>;</decl_stmt>
<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>add</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>_al_android_create_surface</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"waiting for surface onChange"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>created</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>failed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_wait_cond</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"done waiting for surface onChange"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>failed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Display creation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_vector_find_and_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>ogl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"display: %p %ix%i"</literal></expr></argument>, <argument><expr><name>display</name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_android_clear_current</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_android_make_current</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>android_set_display_option</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>ALLEGRO_SUPPORTED_ORIENTATIONS</name></expr></argument>,
<argument><expr><call><name>al_get_new_display_option</name><argument_list>(<argument><expr><name>ALLEGRO_SUPPORTED_ORIENTATIONS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>ogl_extras</name><operator>-&gt;</operator><name>ogl_info</name><operator>.</operator><name>version</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_OPENGL_MAJOR_VERSION</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_OPENGL_MINOR_VERSION</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_FRAMELESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>android_set_display_flag</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>ALLEGRO_FRAMELESS</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>display</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>android_destroy_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_ANDROID</name><operator>*</operator><operator>)</operator><name>dpy</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"clear current"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>created</name></name></expr>)</condition> <block>{<block_content>



<goto>goto <name>already_deleted</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_android_clear_current</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>is_destroy_display</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_android_destroy_surface</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<while>while <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>created</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>_al_event_source_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpy</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>already_deleted</name>:</label>




<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"destroy mutex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"destroy cond"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_cond</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"free ogl_extras"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>dpy</name><operator>-&gt;</operator><name>ogl_extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"remove display from system list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_vector_find_and_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpy</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>dpy</name><operator>-&gt;</operator><name>vertex_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"free display"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>android_set_current_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"make current %p"</literal></expr></argument>, <argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>_al_android_clear_current</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>ALLEGRO_DISPLAY_ANDROID</name> <operator>*</operator><operator>)</operator><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dpy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_android_make_current</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>ALLEGRO_DISPLAY_ANDROID</name> <operator>*</operator><operator>)</operator><name>dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_ogl_update_render_state</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>android_unset_current_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"unset current %p"</literal></expr></argument>, <argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_android_clear_current</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>ALLEGRO_DISPLAY_ANDROID</name> <operator>*</operator><operator>)</operator><name>dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>android_flip_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>old_target</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_set_target_backbuffer</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_jni_callVoidMethod</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>ALLEGRO_DISPLAY_ANDROID</name> <operator>*</operator><operator>)</operator><name>dpy</name><operator>)</operator><operator>-&gt;</operator><name>surface_object</name></expr></argument>, <argument><expr><literal type="string">"egl_SwapBuffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>old_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>al_backup_dirty_bitmaps</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>android_update_display_region</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>android_flip_display</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>android_acknowledge_resize</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_ANDROID</name> <operator>*</operator><operator>)</operator><name>dpy</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"clear current context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_android_clear_current</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"locking mutex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>resize_acknowledge</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_broadcast_cond</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"broadcasted condvar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"waiting for display resize acknowledge 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>resize_acknowledge2</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"calling al_wait_cond"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_wait_cond</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"done waiting for display resize acknowledge 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"acquire context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_android_make_current</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>android_get_orientation</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dpy</name></expr>;</expr_stmt>
<return>return <expr><call><name>_al_android_get_display_orientation</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>android_is_compatible_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dpy</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>bmp</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>android_resize_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dpy</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>h</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>android_set_icons</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_icons</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name><name>bmps</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dpy</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>num_icons</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>bmps</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>android_set_window_title</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dpy</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>title</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>android_set_window_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dpy</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>y</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>android_get_window_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dpy</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <operator>*</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>android_wait_for_vsync</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dpy</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>android_set_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_MOUSE_CURSOR</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dpy</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>cursor</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>android_set_system_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_SYSTEM_MOUSE_CURSOR</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dpy</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>id</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>android_show_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dpy</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>android_hide_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dpy</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>android_acknowledge_drawing_halt</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"android_acknowledge_drawing_halt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>dpy</name><operator>-&gt;</operator><name>bitmaps</name><operator>.</operator><name>_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>bptr</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpy</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name> <init>= <expr><operator>*</operator><name>bptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitmap_flags</name> <init>= <expr><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bmp</name><operator>-&gt;</operator><name>parent</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_NO_PRESERVE_TEXTURE</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>extra</name> <init>= <expr><name><name>bmp</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_remove_opengl_fbo</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glDeleteTextures</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>extra</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>texture</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_ANDROID</name> <operator>*</operator><operator>)</operator><name>dpy</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_android_clear_current</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>al_broadcast_cond</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"acknowledged drawing halt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>android_broadcast_resume</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Broadcasting resume"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>resumed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_broadcast_cond</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"done broadcasting resume"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>android_acknowledge_drawing_resume</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_ANDROID</name> <operator>*</operator><operator>)</operator><name>dpy</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_android_clear_current</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_android_make_current</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"made current"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dpy</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dpy</name><operator>-&gt;</operator><name>default_shader</name></name> <operator>=</operator> <call><name>_al_create_default_shader</name><argument_list>(<argument><expr><name><name>dpy</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>_al_glsl_unuse_shaders</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name><name>dpy</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>update_transformation</name></name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpy</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>bptr</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpy</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name> <init>= <expr><operator>*</operator><name>bptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitmap_flags</name> <init>= <expr><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bmp</name><operator>-&gt;</operator><name>parent</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_NO_PRESERVE_TEXTURE</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>format</name> <init>= <expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>format</name> <operator>=</operator> <ternary><condition><expr><call><name>_al_pixel_format_is_compressed</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name></expr> </then><else>: <expr><name>format</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_ogl_upload_bitmap_memory</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name><name>bmp</name><operator>-&gt;</operator><name>memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bmp</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>android_broadcast_resume</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"acknowledge_drawing_resume end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>android_set_display_option</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>o</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>d</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <name>ALLEGRO_SUPPORTED_ORIENTATIONS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_jni_callVoidMethodV</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>_al_android_activity_object</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"setAllegroOrientation"</literal></expr></argument>, <argument><expr><literal type="string">"(I)V"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>ALLEGRO_DISPLAY_INTERFACE</name> <modifier>*</modifier></type><name>_al_get_android_display_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vt</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>vt</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vt</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>create_display</name></name> <operator>=</operator> <name>android_create_display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>destroy_display</name></name> <operator>=</operator> <name>android_destroy_display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_current_display</name></name> <operator>=</operator> <name>android_set_current_display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>unset_current_display</name></name> <operator>=</operator> <name>android_unset_current_display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>flip_display</name></name> <operator>=</operator> <name>android_flip_display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>update_display_region</name></name> <operator>=</operator> <name>android_update_display_region</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>acknowledge_resize</name></name> <operator>=</operator> <name>android_acknowledge_resize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>create_bitmap</name></name> <operator>=</operator> <name>_al_ogl_create_bitmap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_backbuffer</name></name> <operator>=</operator> <name>_al_ogl_get_backbuffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_target_bitmap</name></name> <operator>=</operator> <name>_al_ogl_set_target_bitmap</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_orientation</name></name> <operator>=</operator> <name>android_get_orientation</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>is_compatible_bitmap</name></name> <operator>=</operator> <name>android_is_compatible_bitmap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>resize_display</name></name> <operator>=</operator> <name>android_resize_display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_icons</name></name> <operator>=</operator> <name>android_set_icons</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_window_title</name></name> <operator>=</operator> <name>android_set_window_title</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_window_position</name></name> <operator>=</operator> <name>android_set_window_position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_window_position</name></name> <operator>=</operator> <name>android_get_window_position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_display_flag</name></name> <operator>=</operator> <name>android_set_display_flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>wait_for_vsync</name></name> <operator>=</operator> <name>android_wait_for_vsync</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_mouse_cursor</name></name> <operator>=</operator> <name>android_set_mouse_cursor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_system_mouse_cursor</name></name> <operator>=</operator> <name>android_set_system_mouse_cursor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>show_mouse_cursor</name></name> <operator>=</operator> <name>android_show_mouse_cursor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>hide_mouse_cursor</name></name> <operator>=</operator> <name>android_hide_mouse_cursor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>acknowledge_drawing_halt</name></name> <operator>=</operator> <name>android_acknowledge_drawing_halt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>acknowledge_drawing_resume</name></name> <operator>=</operator> <name>android_acknowledge_drawing_resume</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_display_option</name></name> <operator>=</operator> <name>android_set_display_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>update_render_state</name></name> <operator>=</operator> <name>_al_ogl_update_render_state</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_ogl_add_drawing_functions</name><argument_list>(<argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_android_add_clipboard_functions</name><argument_list>(<argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>vt</name></expr>;</return>
</block_content>}</block></function>


</unit>
