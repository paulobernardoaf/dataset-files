<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\android\android_system.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_android.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintunix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_android.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_tls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintandroid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/alandroid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/threads.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_opengl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_opengl.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"android"</literal></argument>)</argument_list></macro>

<struct>struct <name>system_data_t</name> <block>{
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>activity_object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jclass</name></type> <name>input_stream_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jclass</name></type> <name>illegal_argument_exception_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jclass</name></type> <name>apk_stream_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jclass</name></type> <name>image_loader_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jclass</name></type> <name>clipboard_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jclass</name></type> <name>apk_fs_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_ANDROID</name> <modifier>*</modifier></type><name>system</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COND</name> <modifier>*</modifier></type><name>cond</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>trampoline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>trampoline_running</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>user_lib_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>resources_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>data_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>apk_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>model</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>manufacturer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user_lib</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>user_main</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>orientation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>paused</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>system_data_t</name></name></type> <name>system_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>JavaVM</name><modifier>*</modifier></type> <name>javavm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>JNIEnv</name> <modifier>*</modifier></type><name>main_env</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_real_al_android_get_os_version</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>bool</name></type> <name>_al_android_is_paused</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>system_data</name><operator>.</operator><name>paused</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_al_android_get_display_orientation</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>system_data</name><operator>.</operator><name>orientation</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>jclass</name></type> <name>_al_android_input_stream_class</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>system_data</name><operator>.</operator><name>input_stream_class</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>jclass</name></type> <name>_al_android_apk_stream_class</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>system_data</name><operator>.</operator><name>apk_stream_class</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>jclass</name></type> <name>_al_android_image_loader_class</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>system_data</name><operator>.</operator><name>image_loader_class</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>jclass</name></type> <name>_al_android_clipboard_class</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>system_data</name><operator>.</operator><name>clipboard_class</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>jobject</name></type> <name>_al_android_activity_object</name><parameter_list>()</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>system_data</name><operator>.</operator><name>activity_object</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>jclass</name></type> <name>_al_android_apk_fs_class</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>system_data</name><operator>.</operator><name>apk_fs_class</name></name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>finish_activity</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>already_cleaned_up</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>android_cleanup</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>uninstall_system</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>already_cleaned_up</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>already_cleaned_up</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>uninstall_system</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>al_uninstall_system</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>finish_activity</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>javavm</name><operator>)</operator><operator>-&gt;</operator><name>DetachCurrentThread</name></name><argument_list>(<argument><expr><name>javavm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>android_app_trampoline</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><name><name>system_data</name><operator>.</operator><name>user_lib</name></name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>thr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"signaling running"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>system_data</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>system_data</name><operator>.</operator><name>trampoline_running</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_broadcast_cond</name><argument_list>(<argument><expr><name><name>system_data</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>system_data</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"entering main function %p"</literal></expr></argument>, <argument><expr><name><name>system_data</name><operator>.</operator><name>user_main</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name><name>system_data</name><operator>.</operator><name>user_main</name></name><operator>)</operator><operator>(</operator><name>argc</name><operator>,</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>argv</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"returned from main function, exit code = %d"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>android_cleanup</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>jint</name></type> <name>JNI_OnLoad</name><parameter_list>(<parameter><decl><type><name>JavaVM</name><modifier>*</modifier></type> <name>vm</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reserved</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>reserved</name></expr>;</expr_stmt>
<expr_stmt><expr><name>javavm</name> <operator>=</operator> <name>vm</name></expr>;</expr_stmt>
<return>return <expr><name>JNI_VERSION_1_4</name></expr>;</return>
</block_content>}</block></function>

<macro><name>JNI_FUNC</name><argument_list>(<argument>bool</argument>, <argument>AllegroActivity</argument>, <argument>nativeOnCreate</argument>, <argument>(JNIEnv *env, jobject obj)</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_ANDROID</name> <modifier>*</modifier></type><name>na_sys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jclass</name></type> <name>iae</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jclass</name></type> <name>aisc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jclass</name></type> <name>asc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"entered nativeOnCreate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>system_data</name><operator>.</operator><name>system</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>self</name> <init>= <expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"pthread_self:%p"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"nativeOnCreate begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>system_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>system_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"grab activity global refs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>system_data</name><operator>.</operator><name>env</name></name> <operator>=</operator> <name>env</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>system_data</name><operator>.</operator><name>activity_object</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>iae</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">"java/lang/IllegalArgumentException"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>system_data</name><operator>.</operator><name>illegal_argument_exception_class</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>iae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>aisc</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ALLEGRO_ANDROID_PACKAGE_NAME_SLASH</name> <literal type="string">"/AllegroInputStream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>system_data</name><operator>.</operator><name>input_stream_class</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>aisc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>asc</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ALLEGRO_ANDROID_PACKAGE_NAME_SLASH</name> <literal type="string">"/AllegroAPKStream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>system_data</name><operator>.</operator><name>apk_stream_class</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>asc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>asc</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ALLEGRO_ANDROID_PACKAGE_NAME_SLASH</name> <literal type="string">"/ImageLoader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>system_data</name><operator>.</operator><name>image_loader_class</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>asc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>asc</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ALLEGRO_ANDROID_PACKAGE_NAME_SLASH</name> <literal type="string">"/Clipboard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>system_data</name><operator>.</operator><name>clipboard_class</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>asc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>asc</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ALLEGRO_ANDROID_PACKAGE_NAME_SLASH</name> <literal type="string">"/AllegroAPKList"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>system_data</name><operator>.</operator><name>apk_fs_class</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>asc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"create mutex and cond objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>system_data</name><operator>.</operator><name>mutex</name></name> <operator>=</operator> <call><name>al_create_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>system_data</name><operator>.</operator><name>cond</name></name> <operator>=</operator> <call><name>al_create_cond</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"get directories"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>system_data</name><operator>.</operator><name>user_lib_name</name></name> <operator>=</operator> <call><name>_jni_callStringMethod</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>system_data</name><operator>.</operator><name>activity_object</name></name></expr></argument>, <argument><expr><literal type="string">"getUserLibName"</literal></expr></argument>, <argument><expr><literal type="string">"()Ljava/lang/String;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>system_data</name><operator>.</operator><name>resources_dir</name></name> <operator>=</operator> <call><name>_jni_callStringMethod</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>system_data</name><operator>.</operator><name>activity_object</name></name></expr></argument>, <argument><expr><literal type="string">"getResourcesDir"</literal></expr></argument>, <argument><expr><literal type="string">"()Ljava/lang/String;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>system_data</name><operator>.</operator><name>data_dir</name></name> <operator>=</operator> <call><name>_jni_callStringMethod</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>system_data</name><operator>.</operator><name>activity_object</name></name></expr></argument>, <argument><expr><literal type="string">"getPubDataDir"</literal></expr></argument>, <argument><expr><literal type="string">"()Ljava/lang/String;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>system_data</name><operator>.</operator><name>apk_path</name></name> <operator>=</operator> <call><name>_jni_callStringMethod</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>system_data</name><operator>.</operator><name>activity_object</name></name></expr></argument>, <argument><expr><literal type="string">"getApkPath"</literal></expr></argument>, <argument><expr><literal type="string">"()Ljava/lang/String;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>system_data</name><operator>.</operator><name>model</name></name> <operator>=</operator> <call><name>_jni_callStringMethod</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>system_data</name><operator>.</operator><name>activity_object</name></name></expr></argument>, <argument><expr><literal type="string">"getModel"</literal></expr></argument>, <argument><expr><literal type="string">"()Ljava/lang/String;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>system_data</name><operator>.</operator><name>manufacturer</name></name> <operator>=</operator> <call><name>_jni_callStringMethod</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>system_data</name><operator>.</operator><name>activity_object</name></name></expr></argument>, <argument><expr><literal type="string">"getManufacturer"</literal></expr></argument>, <argument><expr><literal type="string">"()Ljava/lang/String;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"resources_dir: %s"</literal></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>system_data</name><operator>.</operator><name>resources_dir</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"data_dir: %s"</literal></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>system_data</name><operator>.</operator><name>data_dir</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"apk_path: %s"</literal></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>system_data</name><operator>.</operator><name>apk_path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"model: %s"</literal></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>system_data</name><operator>.</operator><name>model</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"manufacturer: %s"</literal></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>system_data</name><operator>.</operator><name>manufacturer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"creating ALLEGRO_SYSTEM_ANDROID struct"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>na_sys</name> <operator>=</operator> <name><name>system_data</name><operator>.</operator><name>system</name></name> <operator>=</operator> <operator>(</operator><name>ALLEGRO_SYSTEM_ANDROID</name><operator>*</operator><operator>)</operator><call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>na_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>na_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>na_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"get system pointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><operator>&amp;</operator><name><name>na_sys</name><operator>-&gt;</operator><name>system</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"get system interface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vt</name></name> <operator>=</operator> <call><name>_al_system_android_interface</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"init display vector"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_DISPLAY_ANDROID</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"init time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_unix_init_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user_lib_name</name> <init>= <expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>system_data</name><operator>.</operator><name>user_lib_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"load user lib: %s"</literal></expr></argument>, <argument><expr><name>user_lib_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>system_data</name><operator>.</operator><name>user_lib</name></name> <operator>=</operator> <call><name>dlopen</name><argument_list>(<argument><expr><name>user_lib_name</name></expr></argument>, <argument><expr><name>RTLD_LAZY</name><operator>|</operator><name>RTLD_GLOBAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>system_data</name><operator>.</operator><name>user_lib</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"failed to load user lib: %s"</literal></expr></argument>, <argument><expr><name>user_lib_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>dlerror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>system_data</name><operator>.</operator><name>user_main</name></name> <operator>=</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name><name>system_data</name><operator>.</operator><name>user_lib</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>system_data</name><operator>.</operator><name>user_main</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"failed to locate symbol main: %s"</literal></expr></argument>, <argument><expr><call><name>dlerror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name><name>system_data</name><operator>.</operator><name>user_lib</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"main function address: %p\n"</literal></expr></argument>, <argument><expr><name><name>system_data</name><operator>.</operator><name>user_main</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"creating trampoline for app thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>system_data</name><operator>.</operator><name>trampoline</name></name> <operator>=</operator> <call><name>al_create_thread</name><argument_list>(<argument><expr><name>android_app_trampoline</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_start_thread</name><argument_list>(<argument><expr><name><name>system_data</name><operator>.</operator><name>trampoline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"waiting for app trampoline to signal running"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>system_data</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>!</operator><name><name>system_data</name><operator>.</operator><name>trampoline_running</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_wait_cond</name><argument_list>(<argument><expr><name><name>system_data</name><operator>.</operator><name>cond</name></name></expr></argument>, <argument><expr><name><name>system_data</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>system_data</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"setup done. returning to dalvik."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block>


<macro><name>JNI_FUNC</name><argument_list>(<argument>void</argument>, <argument>AllegroActivity</argument>, <argument>nativeOnPause</argument>, <argument>(JNIEnv *env, jobject obj)</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>env</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>obj</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"pause activity\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>system_data</name><operator>.</operator><name>paused</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>system_data</name><operator>.</operator><name>system</name></name> <operator>||</operator> <operator>!</operator><name>sys</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"no system driver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"no display, not sending SWITCH_OUT event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ALLEGRO_DISPLAY</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_DISPLAY_SWITCH_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_current_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<macro><name>JNI_FUNC</name><argument_list>(<argument>void</argument>, <argument>AllegroActivity</argument>, <argument>nativeOnResume</argument>, <argument>(JNIEnv *env, jobject obj)</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><operator>&amp;</operator><name><name>system_data</name><operator>.</operator><name>system</name><operator>-&gt;</operator><name>system</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>obj</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>system_data</name><operator>.</operator><name>paused</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"resume activity"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>system_data</name><operator>.</operator><name>system</name></name> <operator>||</operator> <operator>!</operator><name>sys</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"no system driver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"no display, not sending SWITCH_IN event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ALLEGRO_DISPLAY</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"got display: %p"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>ALLEGRO_DISPLAY_ANDROID</name><operator>*</operator><operator>)</operator><name>d</name><operator>)</operator><operator>-&gt;</operator><name>created</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_android_create_surface</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ALLEGRO_DISPLAY</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_DISPLAY_SWITCH_IN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_current_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>


<macro><name>JNI_FUNC</name><argument_list>(<argument>void</argument>, <argument>AllegroActivity</argument>, <argument>nativeOnDestroy</argument>, <argument>(JNIEnv *env, jobject obj)</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>obj</name></expr>;</expr_stmt>










<decl_stmt><decl><type><name>bool</name></type> <name>main_returned</name> <init>= <expr><call><name>_jni_callBooleanMethodV</name><argument_list>(
<argument><expr><name>env</name></expr></argument>,
<argument><expr><name><name>system_data</name><operator>.</operator><name>activity_object</name></name></expr></argument>,
<argument><expr><literal type="string">"getMainReturned"</literal></expr></argument>,
<argument><expr><literal type="string">"()Z"</literal></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>main_returned</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>system_data</name><operator>.</operator><name>user_lib</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>system_data</name><operator>.</operator><name>user_main</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>dlclose</name><argument_list>(<argument><expr><name><name>system_data</name><operator>.</operator><name>user_lib</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>system_data</name><operator>.</operator><name>activity_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>system_data</name><operator>.</operator><name>illegal_argument_exception_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>system_data</name><operator>.</operator><name>input_stream_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>system_data</name><operator>.</operator><name>system</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>system_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>system_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>JNI_FUNC</name><argument_list>(<argument>void</argument>, <argument>AllegroActivity</argument>, <argument>nativeOnOrientationChange</argument>, <argument>(JNIEnv *env, jobject obj, int orientation, bool init)</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><operator>&amp;</operator><name><name>system_data</name><operator>.</operator><name>system</name><operator>-&gt;</operator><name>system</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>env</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>obj</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"got orientation change!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>system_data</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>orientation</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"no display, not sending orientation change event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ALLEGRO_DISPLAY</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"locking display event source: %p %p"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"emit event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_DISPLAY_ORIENTATION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_current_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>orientation</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"unlocking display event source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block>

<macro><name>JNI_FUNC</name><argument_list>(<argument>void</argument>, <argument>AllegroActivity</argument>, <argument>nativeSendJoystickConfigurationEvent</argument>, <argument>(JNIEnv *env, jobject obj)</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>env</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>obj</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_is_joystick_installed</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><call><name>al_get_joystick_event_source</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_JOYSTICK_CONFIGURATION</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<function><type><specifier>static</specifier> <name>void</name></type> <name>finish_activity</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_jni_callVoidMethod</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>system_data</name><operator>.</operator><name>activity_object</name></name></expr></argument>, <argument><expr><literal type="string">"postFinish"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>android_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"android_initialize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>_al_android_set_jnienv</name><argument_list>(<argument><expr><name>main_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>system_data</name><operator>.</operator><name>system</name><operator>-&gt;</operator><name>system</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_JOYSTICK_DRIVER</name> <modifier>*</modifier></type><name>android_get_joystick_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>_al_android_joystick_driver</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>android_get_num_video_adapters</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>android_get_monitor_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>adapter</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_MONITOR_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>adapter</name> <operator>&gt;=</operator> <call><name>android_get_num_video_adapters</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type> <name>env</name> <init>= <expr><operator>(</operator><name>JNIEnv</name> <operator>*</operator><operator>)</operator><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>rect</name> <init>= <expr><call><name>_jni_callObjectMethod</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>_al_android_activity_object</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"getDisplaySize"</literal></expr></argument>, <argument><expr><literal type="string">"()Landroid/graphics/Rect;"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>x1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>y1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>x2</name></name> <operator>=</operator> <call><name>_jni_callIntMethod</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><literal type="string">"width"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>y2</name></name> <operator>=</operator> <call><name>_jni_callIntMethod</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><literal type="string">"height"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Monitor Info: %d:%d"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>x2</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>y2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>android_shutdown_system</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier><modifier>*</modifier></type><name>dptr</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>*</operator><name>dptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_destroy_display</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>android_inhibit_screensaver</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>inhibit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_jni_callBooleanMethodV</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>system_data</name><operator>.</operator><name>activity_object</name></name></expr></argument>, <argument><expr><literal type="string">"inhibitScreenLock"</literal></expr></argument>, <argument><expr><literal type="string">"(Z)Z"</literal></expr></argument>, <argument><expr><name>inhibit</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_SYSTEM_INTERFACE</name> <modifier>*</modifier></type><name>android_vt</name></decl>;</decl_stmt>

<function><type><name>ALLEGRO_SYSTEM_INTERFACE</name> <modifier>*</modifier></type><name>_al_system_android_interface</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>android_vt</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>android_vt</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>android_vt</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>android_vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>android_vt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>android_vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>android_vt</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>ALLEGRO_SYSTEM_ID_ANDROID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_vt</name><operator>-&gt;</operator><name>initialize</name></name> <operator>=</operator> <name>android_initialize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_vt</name><operator>-&gt;</operator><name>get_display_driver</name></name> <operator>=</operator> <name>_al_get_android_display_driver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_vt</name><operator>-&gt;</operator><name>get_keyboard_driver</name></name> <operator>=</operator> <name>_al_get_android_keyboard_driver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_vt</name><operator>-&gt;</operator><name>get_mouse_driver</name></name> <operator>=</operator> <name>_al_get_android_mouse_driver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_vt</name><operator>-&gt;</operator><name>get_touch_input_driver</name></name> <operator>=</operator> <name>_al_get_android_touch_input_driver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_vt</name><operator>-&gt;</operator><name>get_joystick_driver</name></name> <operator>=</operator> <name>android_get_joystick_driver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_vt</name><operator>-&gt;</operator><name>get_num_video_adapters</name></name> <operator>=</operator> <name>android_get_num_video_adapters</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_vt</name><operator>-&gt;</operator><name>get_monitor_info</name></name> <operator>=</operator> <name>android_get_monitor_info</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_vt</name><operator>-&gt;</operator><name>get_path</name></name> <operator>=</operator> <name>_al_android_get_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_vt</name><operator>-&gt;</operator><name>shutdown_system</name></name> <operator>=</operator> <name>android_shutdown_system</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_vt</name><operator>-&gt;</operator><name>inhibit_screensaver</name></name> <operator>=</operator> <name>android_inhibit_screensaver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_vt</name><operator>-&gt;</operator><name>get_time</name></name> <operator>=</operator> <name>_al_unix_get_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_vt</name><operator>-&gt;</operator><name>rest</name></name> <operator>=</operator> <name>_al_unix_rest</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_vt</name><operator>-&gt;</operator><name>init_timeout</name></name> <operator>=</operator> <name>_al_unix_init_timeout</name></expr>;</expr_stmt>

<return>return <expr><name>android_vt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>_al_android_get_path</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_RESOURCES_PATH</name></expr>:</case>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>al_create_path_for_directory</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>system_data</name><operator>.</operator><name>resources_dir</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_TEMP_PATH</name></expr>:</case>
<case>case <expr><name>ALLEGRO_USER_DATA_PATH</name></expr>:</case>
<case>case <expr><name>ALLEGRO_USER_HOME_PATH</name></expr>:</case>
<case>case <expr><name>ALLEGRO_USER_SETTINGS_PATH</name></expr>:</case>
<case>case <expr><name>ALLEGRO_USER_DOCUMENTS_PATH</name></expr>:</case>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>al_create_path_for_directory</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>system_data</name><operator>.</operator><name>data_dir</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EXENAME_PATH</name></expr>:</case>


<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>al_create_path</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>system_data</name><operator>.</operator><name>apk_path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>al_create_path_for_directory</name><argument_list>(<argument><expr><literal type="string">"/DANGER/WILL/ROBINSON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>path</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_real_al_android_get_os_version</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>_jni_callStringMethod</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>system_data</name><operator>.</operator><name>activity_object</name></name></expr></argument>, <argument><expr><literal type="string">"getOsVersion"</literal></expr></argument>, <argument><expr><literal type="string">"()Ljava/lang/String;"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buffer</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>al_android_get_os_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_real_al_android_get_os_version</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_android_thread_created</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JavaVMAttachArgs</name></type> <name>attach_args</name> <init>= <expr><block>{ <expr><name>JNI_VERSION_1_4</name></expr>, <expr><literal type="string">"trampoline"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>javavm</name><operator>)</operator><operator>-&gt;</operator><name>AttachCurrentThread</name></name><argument_list>(<argument><expr><name>javavm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attach_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>installed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_android_set_jnienv</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>main_env</name> <operator>=</operator> <name>env</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_android_thread_ended</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>javavm</name><operator>)</operator><operator>-&gt;</operator><name>DetachCurrentThread</name></name><argument_list>(<argument><expr><name>javavm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_android_set_capture_volume_keys</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>onoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_ANDROID</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_ANDROID</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_jni_callVoidMethodV</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>surface_object</name></name></expr></argument>, <argument><expr><literal type="string">"setCaptureVolumeKeys"</literal></expr></argument>, <argument><expr><literal type="string">"(Z)V"</literal></expr></argument>, <argument><expr><name>onoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_al_register_system_interfaces</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_INTERFACE</name> <modifier>*</modifier><modifier>*</modifier></type><name>add</name></decl>;</decl_stmt>


<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_al_system_interfaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>add</name> <operator>=</operator> <call><name>_al_system_android_interface</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></function>



<function><type><name>JNIEnv</name> <modifier>*</modifier></type><name>al_android_get_jni_env</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>jobject</name></type> <name>al_android_get_activity</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_android_activity_object</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>


</unit>
