<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\unix\utime.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/altime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintunix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintuthr.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ALLEGRO_STATIC_ASSERT</name><argument_list>(<argument><expr><name>utime</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_TIMEOUT_UNIX</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_TIMEOUT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>_al_unix_initial_time</name></decl>;</decl_stmt>






<function><type><name>void</name></type> <name>_al_unix_init_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_al_unix_initial_time</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>double</name></type> <name>_al_unix_get_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>time</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>time</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>_al_unix_initial_time</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator>
<operator>+</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name><name>now</name><operator>.</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>_al_unix_initial_time</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1.0e-6</literal></expr>;</expr_stmt>
<return>return <expr><name>time</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_al_unix_rest</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>seconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>fsecs</name> <init>= <expr><call><name>floor</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <name>fsecs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name>suseconds_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>seconds</name> <operator>-</operator> <name>fsecs</name><operator>)</operator> <operator>*</operator> <literal type="number">1e9</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nanosleep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_al_unix_init_timeout</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TIMEOUT</name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>seconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TIMEOUT_UNIX</name> <modifier>*</modifier></type><name>ut</name> <init>= <expr><operator>(</operator><name>ALLEGRO_TIMEOUT_UNIX</name> <operator>*</operator><operator>)</operator> <name>timeout</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>integral</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>frac</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>seconds</name> <operator>&lt;=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ut</name><operator>-&gt;</operator><name>abstime</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>now</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ut</name><operator>-&gt;</operator><name>abstime</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name><name>now</name><operator>.</operator><name>tv_usec</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>frac</name> <operator>=</operator> <call><name>modf</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>integral</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ut</name><operator>-&gt;</operator><name>abstime</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator> <name>integral</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ut</name><operator>-&gt;</operator><name>abstime</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name><name>now</name><operator>.</operator><name>tv_usec</name></name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>frac</name> <operator>*</operator> <literal type="number">1000000000L</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ut</name><operator>-&gt;</operator><name>abstime</name><operator>.</operator><name>tv_sec</name></name> <operator>+=</operator> <name><name>ut</name><operator>-&gt;</operator><name>abstime</name><operator>.</operator><name>tv_nsec</name></name> <operator>/</operator> <literal type="number">1000000000L</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ut</name><operator>-&gt;</operator><name>abstime</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name><name>ut</name><operator>-&gt;</operator><name>abstime</name><operator>.</operator><name>tv_nsec</name></name> <operator>%</operator> <literal type="number">1000000000L</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


</unit>
