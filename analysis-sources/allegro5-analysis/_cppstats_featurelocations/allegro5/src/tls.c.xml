<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\tls.c">




































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_display.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_fshook.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_shader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_tls.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_android.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_MINGW32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_DLL_TLS</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__GNUC__</name> <operator>&lt;</operator> <literal type="number">4</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_CFG_DLL_TLS</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__GNUC__</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR__</name> <operator>&lt;</operator> <literal type="number">2</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_CFG_DLL_TLS</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__GNUC__</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR__</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>__GNUC_PATCHLEVEL__</name> <operator>&lt;</operator> <literal type="number">1</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_CFG_DLL_TLS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <type><struct>struct <name>thread_local_state</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>new_display_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_display_refresh_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_display_adapter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_window_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_window_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_bitmap_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_bitmap_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name></type> <name>new_display_settings</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>current_display</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target_bitmap</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ALLEGRO_BLENDER</name></type> <name>current_blender</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>new_bitmap_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_bitmap_flags</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_FILE_INTERFACE</name> <modifier>*</modifier></type><name>new_file_interface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_FS_INTERFACE</name> <modifier>*</modifier></type><name>fs_interface</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>allegro_errno</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>char</name></type> <name><name>new_window_title</name><index>[<expr><name>ALLEGRO_NEW_WINDOW_TITLE_MAX_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>jnienv</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>int</name></type> <name>dtor_owner_count</name></decl>;</decl_stmt>
}</block></struct></type> <name>thread_local_state</name>;</typedef>


<typedef>typedef <type><struct>struct <name>INTERNAL_STATE</name> <block>{
<decl_stmt><decl><type><name>thread_local_state</name></type> <name>tls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BLENDER</name></type> <name>stored_blender</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>stored_transform</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>stored_projection_transform</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
}</block></struct></type> <name>INTERNAL_STATE</name>;</typedef>

<expr_stmt><expr><call><name>ALLEGRO_STATIC_ASSERT</name><argument_list>(<argument><expr><name>tls</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_STATE</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTERNAL_STATE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>initialize_blender</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BLENDER</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>blend_op</name></name> <operator>=</operator> <name>ALLEGRO_ADD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>blend_source</name></name> <operator>=</operator> <name>ALLEGRO_ONE</name></expr><operator>,</operator>
<expr><name><name>b</name><operator>-&gt;</operator><name>blend_dest</name></name> <operator>=</operator> <name>ALLEGRO_INVERSE_ALPHA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>blend_alpha_op</name></name> <operator>=</operator> <name>ALLEGRO_ADD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>blend_alpha_source</name></name> <operator>=</operator> <name>ALLEGRO_ONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>blend_alpha_dest</name></name> <operator>=</operator> <name>ALLEGRO_INVERSE_ALPHA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>blend_color</name></name> <operator>=</operator> <call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>initialize_tls_values</name><parameter_list>(<parameter><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>new_display_adapter</name></name> <operator>=</operator> <name>ALLEGRO_DEFAULT_DISPLAY_ADAPTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>new_window_x</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>new_window_y</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>initialize_blender</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls</name><operator>-&gt;</operator><name>current_blender</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>new_bitmap_flags</name></name> <operator>=</operator> <name>ALLEGRO_CONVERT_BITMAP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>new_bitmap_format</name></name> <operator>=</operator> <name>ALLEGRO_PIXEL_FORMAT_ANY_WITH_ALPHA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>new_file_interface</name></name> <operator>=</operator> <operator>&amp;</operator><name>_al_file_interface_stdio</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>fs_interface</name></name> <operator>=</operator> <operator>&amp;</operator><name>_al_fs_interface_stdio</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>tls</name><operator>-&gt;</operator><name>new_window_title</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ALLEGRO_NEW_WINDOW_TITLE_MAX_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_fill_display_settings</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls</name><operator>-&gt;</operator><name>new_display_settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_STATICLINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ALLEGRO_CFG_DLL_TLS</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_DLL_TLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls_dll.inc"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_MACOSX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_IPHONE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_RASPBERRYPI</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls_pthread.inc"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls_native.inc"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><name>void</name></type> <name>_al_reinitialize_tls_values</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>initialize_tls_values</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_al_set_new_display_settings</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls</name><operator>-&gt;</operator><name>new_display_settings</name></name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier></type><name>_al_get_new_display_settings</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>&amp;</operator><name><name>tls</name><operator>-&gt;</operator><name>new_display_settings</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_set_new_window_title</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>ALLEGRO_NEW_WINDOW_TITLE_MAX_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>ALLEGRO_NEW_WINDOW_TITLE_MAX_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_sane_strncpy</name><argument_list>(<argument><expr><name><name>tls</name><operator>-&gt;</operator><name>new_window_title</name></name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>al_get_new_window_title</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>al_get_app_name</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tls</name><operator>-&gt;</operator><name>new_window_title</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>al_get_app_name</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>tls</name><operator>-&gt;</operator><name>new_window_title</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>al_set_new_display_flags</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>new_display_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>al_get_new_display_flags</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>tls</name><operator>-&gt;</operator><name>new_display_flags</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_set_new_display_refresh_rate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>refresh_rate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>new_display_refresh_rate</name></name> <operator>=</operator> <name>refresh_rate</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>al_get_new_display_refresh_rate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>tls</name><operator>-&gt;</operator><name>new_display_refresh_rate</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_set_new_display_adapter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>adapter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>adapter</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>new_display_adapter</name></name> <operator>=</operator> <name>ALLEGRO_DEFAULT_DISPLAY_ADAPTER</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>new_display_adapter</name></name> <operator>=</operator> <name>adapter</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>al_get_new_display_adapter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ALLEGRO_DEFAULT_DISPLAY_ADAPTER</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>tls</name><operator>-&gt;</operator><name>new_display_adapter</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_set_new_window_position</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>new_window_x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>new_window_y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_get_new_window_position</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_window_x</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_window_y</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_window_x</name> <operator>=</operator> <name><name>tls</name><operator>-&gt;</operator><name>new_window_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_window_y</name> <operator>=</operator> <name><name>tls</name><operator>-&gt;</operator><name>new_window_y</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>new_window_x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>new_window_y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>_al_set_current_display_only</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tls</name><operator>-&gt;</operator><name>current_display</name></name> <operator>&amp;&amp;</operator>
<name><name>tls</name><operator>-&gt;</operator><name>current_display</name><operator>-&gt;</operator><name>vt</name></name> <operator>&amp;&amp;</operator>
<name><name>tls</name><operator>-&gt;</operator><name>current_display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>unset_current_display</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>tls</name><operator>-&gt;</operator><name>current_display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>unset_current_display</name></name><argument_list>(<argument><expr><name><name>tls</name><operator>-&gt;</operator><name>current_display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>current_display</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name> <operator>&amp;&amp;</operator>
<name><name>display</name><operator>-&gt;</operator><name>vt</name></name> <operator>&amp;&amp;</operator>
<name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>set_current_display</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>set_current_display</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>current_display</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>al_get_current_display</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>tls</name><operator>-&gt;</operator><name>current_display</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_set_target_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>old_display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>new_display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SHADER</name> <modifier>*</modifier></type><name>old_shader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SHADER</name> <modifier>*</modifier></type><name>new_shader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>same_shader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitmap_flags</name> <init>= <expr><ternary><condition><expr><name>bitmap</name></expr> ?</condition><then> <expr><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>al_is_bitmap_drawing_held</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bitmap</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old_display</name> <operator>=</operator> <name><name>tls</name><operator>-&gt;</operator><name>current_display</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tls</name><operator>-&gt;</operator><name>target_bitmap</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>old_shader</name> <operator>=</operator> <name><name>tls</name><operator>-&gt;</operator><name>target_bitmap</name><operator>-&gt;</operator><name>shader</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>old_shader</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bitmap</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_display</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_shader</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_display</name> <operator>=</operator> <name>old_display</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_shader</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>new_display</name> <operator>=</operator> <call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_shader</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>shader</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>same_shader</name> <operator>=</operator> <operator>(</operator><name>old_shader</name> <operator>==</operator> <name>new_shader</name> <operator>&amp;&amp;</operator> <name>old_display</name> <operator>==</operator> <name>new_display</name><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>old_shader</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>same_shader</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>old_shader</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>unuse_shader</name></name><argument_list>(<argument><expr><name>old_shader</name></expr></argument>, <argument><expr><name>old_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>old_display</name> <operator>!=</operator> <name>new_display</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>old_display</name> <operator>&amp;&amp;</operator>
<name><name>old_display</name><operator>-&gt;</operator><name>vt</name></name> <operator>&amp;&amp;</operator>
<name><name>old_display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>unset_current_display</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>old_display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>unset_current_display</name></name><argument_list>(<argument><expr><name>old_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>current_display</name></name> <operator>=</operator> <name>new_display</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_display</name> <operator>&amp;&amp;</operator>
<name><name>new_display</name><operator>-&gt;</operator><name>vt</name></name> <operator>&amp;&amp;</operator>
<name><name>new_display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>set_current_display</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>new_display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>set_current_display</name></name><argument_list>(<argument><expr><name>new_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>target_bitmap</name></name> <operator>=</operator> <name>bitmap</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bitmap</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name>new_display</name> <operator>&amp;&amp;</operator>
<name><name>new_display</name><operator>-&gt;</operator><name>vt</name></name> <operator>&amp;&amp;</operator>
<name><name>new_display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>set_target_bitmap</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>new_display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>set_target_bitmap</name></name><argument_list>(<argument><expr><name>new_display</name></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name>same_shader</name> <operator>||</operator> <operator>!</operator><name>new_shader</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_use_shader</name><argument_list>(<argument><expr><name>new_shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>new_display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>update_transformation</name></name><argument_list>(<argument><expr><name>new_display</name></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_set_target_backbuffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><call><name>al_get_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>al_get_target_bitmap</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>tls</name><operator>-&gt;</operator><name>target_bitmap</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_set_blender</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>al_set_separate_blender</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_set_blend_color</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>current_blender</name><operator>.</operator><name>blend_color</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_set_separate_blender</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>alpha_op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BLENDER</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>op</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>op</name> <operator>&lt;</operator> <name>ALLEGRO_NUM_BLEND_OPERATIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>src</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>src</name> <operator>&lt;</operator> <name>ALLEGRO_NUM_BLEND_MODES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>dst</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>src</name> <operator>&lt;</operator> <name>ALLEGRO_NUM_BLEND_MODES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>alpha_op</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>alpha_op</name> <operator>&lt;</operator> <name>ALLEGRO_NUM_BLEND_OPERATIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>alpha_src</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>alpha_src</name> <operator>&lt;</operator> <name>ALLEGRO_NUM_BLEND_MODES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>alpha_dst</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>alpha_dst</name> <operator>&lt;</operator> <name>ALLEGRO_NUM_BLEND_MODES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>&amp;</operator><name><name>tls</name><operator>-&gt;</operator><name>current_blender</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>blend_op</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>blend_source</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>blend_dest</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>blend_alpha_op</name></name> <operator>=</operator> <name>alpha_op</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>blend_alpha_source</name></name> <operator>=</operator> <name>alpha_src</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>blend_alpha_dest</name></name> <operator>=</operator> <name>alpha_dst</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_get_blender</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>al_get_separate_blender</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>ALLEGRO_COLOR</name></type> <name>al_get_blend_color</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>al_map_rgba</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>tls</name><operator>-&gt;</operator><name>current_blender</name><operator>.</operator><name>blend_color</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_get_separate_blender</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>alpha_op</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>alpha_src</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>alpha_dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BLENDER</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>&amp;</operator><name><name>tls</name><operator>-&gt;</operator><name>current_blender</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>blend_op</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>src</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>src</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>blend_source</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dst</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>blend_dest</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha_op</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>alpha_op</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>blend_alpha_op</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha_src</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>alpha_src</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>blend_alpha_source</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha_dst</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>alpha_dst</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>blend_alpha_dest</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_set_new_bitmap_format</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>new_bitmap_format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_set_new_bitmap_flags</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>new_bitmap_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_add_new_bitmap_flag</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>new_bitmap_flags</name></name> <operator>|=</operator> <name>flag</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>al_get_new_bitmap_format</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>tls</name><operator>-&gt;</operator><name>new_bitmap_format</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>al_get_new_bitmap_flags</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>tls</name><operator>-&gt;</operator><name>new_bitmap_flags</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_store_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTERNAL_STATE</name> <modifier>*</modifier></type><name>stored</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>stored</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>state</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stored</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_STORE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(stored-&gt;tls.x = tls-&gt;x)</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_STATE_NEW_DISPLAY_PARAMETERS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_STORE</name><argument_list>(<argument><expr><name>new_display_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_STORE</name><argument_list>(<argument><expr><name>new_display_refresh_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_STORE</name><argument_list>(<argument><expr><name>new_display_adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_STORE</name><argument_list>(<argument><expr><name>new_window_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_STORE</name><argument_list>(<argument><expr><name>new_window_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_STORE</name><argument_list>(<argument><expr><name>new_display_settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_sane_strncpy</name><argument_list>(<argument><expr><name><name>stored</name><operator>-&gt;</operator><name>tls</name><operator>.</operator><name>new_window_title</name></name></expr></argument>, <argument><expr><name><name>tls</name><operator>-&gt;</operator><name>new_window_title</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tls</name><operator>-&gt;</operator><name>new_window_title</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_STATE_NEW_BITMAP_PARAMETERS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_STORE</name><argument_list>(<argument><expr><name>new_bitmap_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_STORE</name><argument_list>(<argument><expr><name>new_bitmap_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_STATE_DISPLAY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_STORE</name><argument_list>(<argument><expr><name>current_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_STATE_TARGET_BITMAP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_STORE</name><argument_list>(<argument><expr><name>target_bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_STATE_BLENDER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stored</name><operator>-&gt;</operator><name>stored_blender</name></name> <operator>=</operator> <name><name>tls</name><operator>-&gt;</operator><name>current_blender</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_STATE_NEW_FILE_INTERFACE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_STORE</name><argument_list>(<argument><expr><name>new_file_interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_STORE</name><argument_list>(<argument><expr><name>fs_interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_STATE_TRANSFORM</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>target</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stored</name><operator>-&gt;</operator><name>stored_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>stored</name><operator>-&gt;</operator><name>stored_transform</name></name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>transform</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_STATE_PROJECTION_TRANSFORM</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>target</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stored</name><operator>-&gt;</operator><name>stored_projection_transform</name></name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>proj_transform</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_STORE</name></cpp:undef>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_restore_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_STATE</name> <specifier>const</specifier> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTERNAL_STATE</name> <modifier>*</modifier></type><name>stored</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>stored</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>state</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>stored</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_RESTORE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(tls-&gt;x = stored-&gt;tls.x)</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_STATE_NEW_DISPLAY_PARAMETERS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_RESTORE</name><argument_list>(<argument><expr><name>new_display_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_RESTORE</name><argument_list>(<argument><expr><name>new_display_refresh_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_RESTORE</name><argument_list>(<argument><expr><name>new_display_adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_RESTORE</name><argument_list>(<argument><expr><name>new_window_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_RESTORE</name><argument_list>(<argument><expr><name>new_window_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_RESTORE</name><argument_list>(<argument><expr><name>new_display_settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_sane_strncpy</name><argument_list>(<argument><expr><name><name>tls</name><operator>-&gt;</operator><name>new_window_title</name></name></expr></argument>, <argument><expr><name><name>stored</name><operator>-&gt;</operator><name>tls</name><operator>.</operator><name>new_window_title</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tls</name><operator>-&gt;</operator><name>new_window_title</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_STATE_NEW_BITMAP_PARAMETERS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_RESTORE</name><argument_list>(<argument><expr><name>new_bitmap_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_RESTORE</name><argument_list>(<argument><expr><name>new_bitmap_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_STATE_DISPLAY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tls</name><operator>-&gt;</operator><name>current_display</name></name> <operator>!=</operator> <name><name>stored</name><operator>-&gt;</operator><name>tls</name><operator>.</operator><name>current_display</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_current_display_only</name><argument_list>(<argument><expr><name><name>stored</name><operator>-&gt;</operator><name>tls</name><operator>.</operator><name>current_display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>tls</name><operator>-&gt;</operator><name>current_display</name></name> <operator>==</operator> <name><name>stored</name><operator>-&gt;</operator><name>tls</name><operator>.</operator><name>current_display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_STATE_TARGET_BITMAP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tls</name><operator>-&gt;</operator><name>target_bitmap</name></name> <operator>!=</operator> <name><name>stored</name><operator>-&gt;</operator><name>tls</name><operator>.</operator><name>target_bitmap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name><name>stored</name><operator>-&gt;</operator><name>tls</name><operator>.</operator><name>target_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>tls</name><operator>-&gt;</operator><name>target_bitmap</name></name> <operator>==</operator> <name><name>stored</name><operator>-&gt;</operator><name>tls</name><operator>.</operator><name>target_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_STATE_BLENDER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>current_blender</name></name> <operator>=</operator> <name><name>stored</name><operator>-&gt;</operator><name>stored_blender</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_STATE_NEW_FILE_INTERFACE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_RESTORE</name><argument_list>(<argument><expr><name>new_file_interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_RESTORE</name><argument_list>(<argument><expr><name>fs_interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_STATE_TRANSFORM</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bitmap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stored</name><operator>-&gt;</operator><name>stored_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_STATE_PROJECTION_TRANSFORM</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bitmap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_use_projection_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stored</name><operator>-&gt;</operator><name>stored_projection_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_RESTORE</name></cpp:undef>
</block_content>}</block></function>









<function><type><specifier>const</specifier> <name>ALLEGRO_FILE_INTERFACE</name> <modifier>*</modifier></type><name>al_get_new_file_interface</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name>_al_file_interface_stdio</name></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>tls</name><operator>-&gt;</operator><name>new_file_interface</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>tls</name><operator>-&gt;</operator><name>new_file_interface</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name>_al_file_interface_stdio</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_set_new_file_interface</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FILE_INTERFACE</name> <modifier>*</modifier></type><name>file_interface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>new_file_interface</name></name> <operator>=</operator> <name>file_interface</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>const</specifier> <name>ALLEGRO_FS_INTERFACE</name> <modifier>*</modifier></type><name>al_get_fs_interface</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name>_al_fs_interface_stdio</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tls</name><operator>-&gt;</operator><name>fs_interface</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>tls</name><operator>-&gt;</operator><name>fs_interface</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name>_al_fs_interface_stdio</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_set_fs_interface</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FS_INTERFACE</name> <modifier>*</modifier></type><name>fs_interface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>fs_interface</name></name> <operator>=</operator> <name>fs_interface</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_set_standard_fs_interface</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>al_set_fs_interface</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_al_fs_interface_stdio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTER</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ thread_local_state *tls; if ((tls = tls_get()) == NULL) return; tls-&gt;name = value; }</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETTER</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ thread_local_state *tls; if ((tls = tls_get()) == NULL) return value; return tls-&gt;name; }</cpp:value></cpp:define>









<decl_stmt><decl><type><name>int</name></type> <name>al_get_errno</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<name>GETTER</name><argument_list>(<argument><expr><name>allegro_errno</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list>



<name>void</name> <name>al_set_errno</name><argument_list>(<argument><expr><name>int</name> <name>errnum</name></expr></argument>)</argument_list>
<name>SETTER</name><argument_list>(<argument><expr><name>allegro_errno</name></expr></argument>, <argument><expr><name>errnum</name></expr></argument>)</argument_list>



<name>int</name> <name>al_get_new_bitmap_depth</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<name>GETTER</name><argument_list>(<argument><expr><name>new_bitmap_depth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list>



<name>void</name> <name>al_set_new_bitmap_depth</name><argument_list>(<argument><expr><name>int</name> <name>depth</name></expr></argument>)</argument_list>
<name>SETTER</name><argument_list>(<argument><expr><name>new_bitmap_depth</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list>



<name>int</name> <name>al_get_new_bitmap_samples</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<name>GETTER</name><argument_list>(<argument><expr><name>new_bitmap_samples</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list>



<name>void</name> <name>al_set_new_bitmap_samples</name><argument_list>(<argument><expr><name>int</name> <name>samples</name></expr></argument>)</argument_list>
<name>SETTER</name><argument_list>(<argument><expr><name>new_bitmap_samples</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>JNIEnv</name> <modifier>*</modifier><name>_al_android_get_jnienv</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<name>GETTER</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list>

<name>void</name> <name>_al_android_set_jnienv</name><argument_list>(<argument><expr><name>JNIEnv</name> <operator>*</operator><name>jnienv</name></expr></argument>)</argument_list>
<name>SETTER</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>jnienv</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<name>int</name> <modifier>*</modifier><name>_al_tls_get_dtor_owner_count</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_local_state</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tls</name> <operator>=</operator> <call><name>tls_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>tls</name><operator>-&gt;</operator><name>dtor_owner_count</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



</unit>
