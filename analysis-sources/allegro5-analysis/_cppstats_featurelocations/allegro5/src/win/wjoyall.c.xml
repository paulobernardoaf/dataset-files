<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\win\wjoyall.c">









































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_NO_COMPATIBILITY</name></cpp:macro></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_WINNT</name></cpp:macro> <cpp:value>0x0501</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintwin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_events.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_joystick.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_XINPUT</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> something is wrong with the makefile</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_MINGW32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAKEFOURCC</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"wjoyall"</literal></argument>)</argument_list></macro>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/joystick.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_joystick.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_wjoyall.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>joyall_init_joystick</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>joyall_exit_joystick</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>joyall_reconfigure_joysticks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>joyall_get_num_joysticks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joyall_get_joystick</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>joyall_release_joystick</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>joyall_get_joystick_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_JOYSTICK_STATE</name> <modifier>*</modifier></type><name>ret_state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>joyall_get_name</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>joyall_get_active</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_DRIVER</name></type> <name>_al_joydrv_windows_all</name> <init>=
<expr><block>{
<expr><name>AL_JOY_TYPE_WINDOWS_ALL</name></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"Windows Joystick"</literal></expr>,
<expr><name>joyall_init_joystick</name></expr>,
<expr><name>joyall_exit_joystick</name></expr>,
<expr><name>joyall_reconfigure_joysticks</name></expr>,
<expr><name>joyall_get_num_joysticks</name></expr>,
<expr><name>joyall_get_joystick</name></expr>,
<expr><name>joyall_release_joystick</name></expr>,
<expr><name>joyall_get_joystick_state</name></expr>,
<expr><name>joyall_get_name</name></expr>,
<expr><name>joyall_get_active</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>joyall_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>ok_xi</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>ok_di</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>joyall_setup_joysticks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_xinput</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_dinput</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ok_di</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_dinput</name> <operator>=</operator> <call><name><name>_al_joydrv_directx</name><operator>.</operator><name>num_joysticks</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ok_xi</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_xinput</name> <operator>=</operator> <call><name><name>_al_joydrv_xinput</name><operator>.</operator><name>num_joysticks</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>num_xinput</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joystick</name> <init>= <expr><call><name><name>_al_joydrv_xinput</name><operator>.</operator><name>get_joystick</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>joystick</name><operator>-&gt;</operator><name>driver</name></name> <operator>=</operator> <operator>&amp;</operator><name>_al_joydrv_xinput</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>num_dinput</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joystick</name> <init>= <expr><call><name><name>_al_joydrv_directx</name><operator>.</operator><name>get_joystick</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>joystick</name><operator>-&gt;</operator><name>driver</name></name> <operator>=</operator> <operator>&amp;</operator><name>_al_joydrv_directx</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>joyall_init_joystick</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>joyall_mutex</name> <operator>=</operator> <call><name>al_create_mutex_recursive</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>joyall_mutex</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>joyall_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ok_xi</name> <operator>=</operator> <call><name><name>_al_joydrv_xinput</name><operator>.</operator><name>init_joystick</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ok_di</name> <operator>=</operator> <call><name><name>_al_joydrv_directx</name><operator>.</operator><name>init_joystick</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>joyall_setup_joysticks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>joyall_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ok_xi</name> <operator>||</operator> <name>ok_di</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>joyall_exit_joystick</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>joyall_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>_al_joydrv_xinput</name><operator>.</operator><name>exit_joystick</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>_al_joydrv_directx</name><operator>.</operator><name>exit_joystick</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>joyall_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name>joyall_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>joyall_reconfigure_joysticks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>joyall_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ok_xi</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>_al_joydrv_xinput</name><operator>.</operator><name>reconfigure_joysticks</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ok_di</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>_al_joydrv_directx</name><operator>.</operator><name>reconfigure_joysticks</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>joyall_setup_joysticks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>joyall_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>joyall_get_num_joysticks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ok_xi</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name><name>_al_joydrv_xinput</name><operator>.</operator><name>num_joysticks</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ok_di</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name><name>_al_joydrv_directx</name><operator>.</operator><name>num_joysticks</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joyall_get_joystick</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num_xinput</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_dinput</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ok_di</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_dinput</name> <operator>=</operator> <call><name><name>_al_joydrv_directx</name><operator>.</operator><name>num_joysticks</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ok_xi</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_xinput</name> <operator>=</operator> <call><name><name>_al_joydrv_xinput</name><operator>.</operator><name>num_joysticks</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <name>num_xinput</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>_al_joydrv_xinput</name><operator>.</operator><name>get_joystick</name></name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>num</name> <operator>&lt;</operator> <operator>(</operator><name>num_xinput</name> <operator>+</operator> <name>num_dinput</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>_al_joydrv_directx</name><operator>.</operator><name>get_joystick</name></name><argument_list>(<argument><expr><name>num</name> <operator>-</operator> <name>num_xinput</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>joyall_release_joystick</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>joy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>joy</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>release_joystick</name></name><argument_list>(<argument><expr><name>joy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>joyall_get_joystick_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_JOYSTICK_STATE</name> <modifier>*</modifier></type><name>ret_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>joy</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>get_joystick_state</name></name><argument_list>(<argument><expr><name>joy</name></expr></argument>, <argument><expr><name>ret_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>joyall_get_name</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>joy</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>get_name</name></name><argument_list>(<argument><expr><name>joy</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>joyall_get_active</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>joy</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>get_active</name></name><argument_list>(<argument><expr><name>joy</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
