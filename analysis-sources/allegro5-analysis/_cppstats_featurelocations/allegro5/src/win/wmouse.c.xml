<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\win\wmouse.c">
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_WINNT</name></cpp:macro> <cpp:value>0x0501</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WINVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINVER</name></cpp:macro> <cpp:value>0x0600</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SM_MOUSEHORIZONTALWHEELPRESENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SM_MOUSEHORIZONTALWHEELPRESENT</name></cpp:macro> <cpp:value>91</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_driver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_mouse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintwin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_display.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_MOUSE_STATE</name></type> <name>mouse_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_MOUSE</name></type> <name>the_mouse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>installed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>raw_mouse_z</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>raw_mouse_w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>init_mouse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>installed</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>display</name> <operator>=</operator> <name><name>mouse_state</name><operator>.</operator><name>display</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mouse_state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mouse_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mouse_state</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
if (al_get_new_display_flags() &amp; ALLEGRO_FULLSCREEN) {
RAWINPUTDEVICE rid[1];
rid[0].usUsagePage = 0x01; 
rid[0].usUsage = 0x02; 
rid[0].dwFlags = RIDEV_NOLEGACY;
rid[0].hwndTarget = 0;
if (RegisterRawInputDevices(rid, 1, sizeof(rid[0])) == FALSE) {
return false;
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>installed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>exit_mouse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>installed</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mouse_state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mouse_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>installed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>generate_mouse_event</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pressure</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dw</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>button</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>dx</name></name> <operator>=</operator> <name>dx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>dy</name></name> <operator>=</operator> <name>dy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>dz</name></name> <operator>=</operator> <name>dz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>dw</name></name> <operator>=</operator> <name>dw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>button</name></name> <operator>=</operator> <name>button</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>pressure</name></name> <operator>=</operator> <name>pressure</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_MOUSE</name><modifier>*</modifier></type> <name>get_mouse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>the_mouse</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>get_num_buttons</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CMOUSEBUTTONS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>get_num_axes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>x</name> <init>= <expr><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_MOUSEHORIZONTALWHEELPRESENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>z</name> <init>= <expr><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_MOUSEWHEELPRESENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;&amp;</operator> <name>z</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>||</operator> <name>z</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>set_mouse_xy</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>disp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dx</name></decl>, <decl><type ref="prev"/><name>dy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POINT</name></type> <name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>disp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>installed</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dx</name> <operator>=</operator> <name>x</name> <operator>-</operator> <name><name>mouse_state</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy</name> <operator>=</operator> <name>y</name> <operator>-</operator> <name><name>mouse_state</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dx</name> <operator>||</operator> <name>dy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mouse_state</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mouse_state</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>generate_mouse_event</name><argument_list>(
<argument><expr><name>ALLEGRO_EVENT_MOUSE_WARPED</name></expr></argument>,
<argument><expr><name><name>mouse_state</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>pressure</name></name></expr></argument>,
<argument><expr><name>dx</name></expr></argument>, <argument><expr><name>dy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>win_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pt</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClientToScreen</name><argument_list>(<argument><expr><name><name>win_disp</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetCursorPos</name><argument_list>(<argument><expr><name><name>pt</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>pt</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>set_mouse_axis</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>which</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dz</name> <init>= <expr><operator>(</operator><name>val</name> <operator>-</operator> <name><name>mouse_state</name><operator>.</operator><name>z</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>raw_mouse_z</name> <operator>=</operator> <name>WHEEL_DELTA</name> <operator>*</operator> <name>val</name> <operator>/</operator> <call><name>al_get_mouse_wheel_precision</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dz</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mouse_state</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>generate_mouse_event</name><argument_list>(
<argument><expr><name>ALLEGRO_EVENT_MOUSE_AXES</name></expr></argument>,
<argument><expr><name><name>mouse_state</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>pressure</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>which</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dw</name> <init>= <expr><operator>(</operator><name>val</name> <operator>-</operator> <name><name>mouse_state</name><operator>.</operator><name>w</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>raw_mouse_w</name> <operator>=</operator> <name>WHEEL_DELTA</name> <operator>*</operator> <name>val</name> <operator>/</operator> <call><name>al_get_mouse_wheel_precision</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dw</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mouse_state</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>generate_mouse_event</name><argument_list>(
<argument><expr><name>ALLEGRO_EVENT_MOUSE_AXES</name></expr></argument>,
<argument><expr><name><name>mouse_state</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>pressure</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dw</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>get_mouse_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MOUSE_STATE</name> <modifier>*</modifier></type><name>ret_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ret_state</name> <operator>=</operator> <name>mouse_state</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_WINAPI</name></cpp:macro> <cpp:value>AL_ID('W','A','P','I')</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_MOUSE_DRIVER</name></type> <name>mousedrv_winapi</name> <init>=
<expr><block>{
<expr><name>MOUSE_WINAPI</name></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"WinAPI mouse"</literal></expr>,
<expr><name>init_mouse</name></expr>,
<expr><name>exit_mouse</name></expr>,
<expr><name>get_mouse</name></expr>,
<expr><name>get_num_buttons</name></expr>,
<expr><name>get_num_axes</name></expr>,
<expr><name>set_mouse_xy</name></expr>,
<expr><name>set_mouse_axis</name></expr>,
<expr><name>get_mouse_state</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>_AL_DRIVER_INFO</name></type> <name><name>_al_mouse_driver_list</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><name>MOUSE_WINAPI</name></expr>, <expr><operator>&amp;</operator><name>mousedrv_winapi</name></expr>, <expr><name>true</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><name>void</name></type> <name>_al_win_mouse_handle_leave</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>mouse_state</name><operator>.</operator><name>display</name></name> <operator>==</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>win_disp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mouse_state</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>installed</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>generate_mouse_event</name><argument_list>(<argument><expr><name>ALLEGRO_EVENT_MOUSE_LEAVE_DISPLAY</name></expr></argument>,
<argument><expr><name><name>mouse_state</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>pressure</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>win_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_win_mouse_handle_enter</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<expr_stmt><expr><name><name>mouse_state</name><operator>.</operator><name>display</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>win_disp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>installed</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>generate_mouse_event</name><argument_list>(<argument><expr><name>ALLEGRO_EVENT_MOUSE_ENTER_DISPLAY</name></expr></argument>,
<argument><expr><name><name>mouse_state</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>pressure</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>win_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_win_mouse_handle_move</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>abs</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dx</name></decl>, <decl><type ref="prev"/><name>dy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oldx</name></decl>, <decl><type ref="prev"/><name>oldy</name></decl>;</decl_stmt>

<expr_stmt><expr><name>oldx</name> <operator>=</operator> <name><name>mouse_state</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>oldy</name> <operator>=</operator> <name><name>mouse_state</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>installed</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>abs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mouse_state</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mouse_state</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>dx</name> <operator>=</operator> <name>x</name> <operator>-</operator> <name><name>mouse_state</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy</name> <operator>=</operator> <name>y</name> <operator>-</operator> <name><name>mouse_state</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mouse_state</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mouse_state</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>oldx</name> <operator>!=</operator> <name><name>mouse_state</name><operator>.</operator><name>x</name></name> <operator>||</operator> <name>oldy</name> <operator>!=</operator> <name><name>mouse_state</name><operator>.</operator><name>y</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>generate_mouse_event</name><argument_list>(<argument><expr><name>ALLEGRO_EVENT_MOUSE_AXES</name></expr></argument>,
<argument><expr><name><name>mouse_state</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>pressure</name></name></expr></argument>,
<argument><expr><name>dx</name></expr></argument>, <argument><expr><name>dy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>win_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_win_mouse_handle_wheel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>raw_dz</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>abs</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_z</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>installed</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>abs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>raw_mouse_z</name> <operator>+=</operator> <name>raw_dz</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>raw_mouse_z</name> <operator>=</operator> <name>raw_dz</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>new_z</name> <operator>=</operator> <call><name>al_get_mouse_wheel_precision</name><argument_list>()</argument_list></call> <operator>*</operator> <name>raw_mouse_z</name> <operator>/</operator> <name>WHEEL_DELTA</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>new_z</name> <operator>-</operator> <name><name>mouse_state</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mouse_state</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>new_z</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>generate_mouse_event</name><argument_list>(<argument><expr><name>ALLEGRO_EVENT_MOUSE_AXES</name></expr></argument>,
<argument><expr><name><name>mouse_state</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>pressure</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>win_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_win_mouse_handle_hwheel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>raw_dw</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>abs</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_w</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>installed</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>abs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>raw_mouse_w</name> <operator>+=</operator> <name>raw_dw</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>raw_mouse_w</name> <operator>=</operator> <name>raw_dw</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>new_w</name> <operator>=</operator> <call><name>al_get_mouse_wheel_precision</name><argument_list>()</argument_list></call> <operator>*</operator> <name>raw_mouse_w</name> <operator>/</operator> <name>WHEEL_DELTA</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>new_w</name> <operator>-</operator> <name><name>mouse_state</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mouse_state</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name>new_w</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>generate_mouse_event</name><argument_list>(<argument><expr><name>ALLEGRO_EVENT_MOUSE_AXES</name></expr></argument>,
<argument><expr><name><name>mouse_state</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>pressure</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>win_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_al_win_mouse_handle_button</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>down</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>abs</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><ternary><condition><expr><name>down</name></expr> ?</condition><then> <expr><name>ALLEGRO_EVENT_MOUSE_BUTTON_DOWN</name></expr>
</then><else>: <expr><name>ALLEGRO_EVENT_MOUSE_BUTTON_UP</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>installed</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>abs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mouse_state</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mouse_state</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>mouse_state</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mouse_state</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>down</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mouse_state</name><operator>.</operator><name>buttons</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>button</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mouse_state</name><operator>.</operator><name>buttons</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>button</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>mouse_state</name><operator>.</operator><name>pressure</name></name> <operator>=</operator> <ternary><condition><expr><name><name>mouse_state</name><operator>.</operator><name>buttons</name></name></expr> ?</condition><then> <expr><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>generate_mouse_event</name><argument_list>(<argument><expr><name>type</name></expr></argument>,
<argument><expr><name><name>mouse_state</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>mouse_state</name><operator>.</operator><name>pressure</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>button</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>win_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


</unit>
