<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\win\wsystem.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintwin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_wunicode.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_CFG_OPENGL</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_opengl.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mmsystem.h&gt;</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"system"</literal></argument>)</argument_list></macro>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;psapi.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_WIN32_IE</name> <operator>&lt;</operator> <literal type="number">0x500</literal></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_WIN32_IE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_IE</name></cpp:macro> <cpp:value>0x500</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlobj.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlwapi.h&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><name>bool</name></type> <name>_al_win_disable_screensaver</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_SYSTEM_INTERFACE</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>using_higher_res_timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_SYSTEM_WIN</name> <modifier>*</modifier></type><name>_al_win_system</name></decl>;</decl_stmt>






<function><type><name>int</name></type> <name>_WinMain</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_main</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>hInst</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>hPrev</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>Cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nShow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mainfunc</name>) <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <init>= <expr><operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><operator>(</operator><name>int</name>, <name>char</name> <operator>*</operator><index>[]</index><operator>)</operator></call><operator>)</operator><name>_main</name></expr></init>;</function_decl>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>argbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>hInst</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>hPrev</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>Cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>nShow</name></expr>;</expr_stmt>


<expr_stmt><expr><name>argbuf</name> <operator>=</operator> <call><name>_twin_tchar_to_utf8</name><argument_list>(<argument><expr><call><name>GetCommandLine</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>argc_max</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>argc_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>argv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>argbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<while>while <condition>(<expr><name><name>argbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name><name>argbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>argbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>argbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>argbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>argbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>argbuf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>argbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>argbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <name>argc_max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>argc_max</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>al_realloc</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>argc_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>argv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>argbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name><name>argbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>q</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>argbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>q</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>argbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>argbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>argbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>mainfunc</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>argbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>set_dpi_awareness</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>dpi_awareness_set</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>HMODULE</name></type> <name>shcore_dll</name> <init>= <expr><call><name>_al_win_safe_load_library</name><argument_list>(<argument><expr><literal type="string">"shcore.dll"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>shcore_dll</name></expr>)</condition> <block>{<block_content>
<typedef>typedef <type><enum>enum <name>_AL_PROCESS_DPI_AWARENESS</name> <block>{
<decl><name>AL_PROCESS_DPI_UNAWARE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>AL_PROCESS_SYSTEM_DPI_AWARE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>AL_PROCESS_PER_MONITOR_DPI_AWARE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block></enum></type> <name>AL_PROCESS_DPI_AWARENESS</name>;</typedef>
<typedef>typedef <function_decl><type><name>HRESULT</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>SetProcessDpiAwarenessPROC</name>)<parameter_list>(<parameter><decl><type><name>AL_PROCESS_DPI_AWARENESS</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>SetProcessDpiAwarenessPROC</name></type> <name>imp_SetProcessDpiAwareness</name> <init>=
<expr><operator>(</operator><name>SetProcessDpiAwarenessPROC</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>shcore_dll</name></expr></argument>, <argument><expr><literal type="string">"SetProcessDpiAwareness"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>imp_SetProcessDpiAwareness</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>ret</name> <init>= <expr><call><name>imp_SetProcessDpiAwareness</name><argument_list>(<argument><expr><name>AL_PROCESS_PER_MONITOR_DPI_AWARE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>E_INVALIDARG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>imp_SetProcessDpiAwareness</name><argument_list>(<argument><expr><name>AL_PROCESS_SYSTEM_DPI_AWARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dpi_awareness_set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>shcore_dll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dpi_awareness_set</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>user32_dll</name> <init>= <expr><call><name>_al_win_safe_load_library</name><argument_list>(<argument><expr><literal type="string">"user32.dll"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>user32_dll</name></expr>)</condition> <block>{<block_content>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>SetProcessDPIAwarePROC</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>SetProcessDPIAwarePROC</name></type> <name>imp_SetProcessDPIAware</name> <init>=
<expr><operator>(</operator><name>SetProcessDPIAwarePROC</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>user32_dll</name></expr></argument>, <argument><expr><literal type="string">"SetProcessDPIAware"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>imp_SetProcessDPIAware</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>imp_SetProcessDPIAware</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>user32_dll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>win_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_dpi_awareness</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_al_win_system</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>_al_win_system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>timeBeginPeriod</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TIMERR_NOCANDO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>using_higher_res_timer</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>_al_win_init_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_win_init_window</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_al_win_system</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ALLEGRO_SYSTEM_WIN</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_al_win_system</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>vt</name></name> <operator>=</operator> <name>vt</name></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>_al_win_system</name><operator>-&gt;</operator><name>system</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>win_shutdown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier><modifier>*</modifier></type><name>dptr</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>*</operator><name>dptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_destroy_display</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_D3D</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_al_d3d_shutdown_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>_al_win_shutdown_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>using_higher_res_timer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>timeEndPeriod</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>_al_win_system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>_al_win_system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_DISPLAY_INTERFACE</name> <modifier>*</modifier></type><name>win_get_display_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name> <init>= <expr><call><name>al_get_new_display_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>sys_cfg</name> <init>= <expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_WIN</name> <modifier>*</modifier></type><name>syswin</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_WIN</name> <operator>*</operator><operator>)</operator><name>sys</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>syswin</name><operator>-&gt;</operator><name>toggle_mouse_grab_keycode</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>binding</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><name>sys_cfg</name></expr></argument>, <argument><expr><literal type="string">"keyboard"</literal></expr></argument>,
<argument><expr><literal type="string">"toggle_mouse_grab_key"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>binding</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>syswin</name><operator>-&gt;</operator><name>toggle_mouse_grab_keycode</name></name> <operator>=</operator> <call><name>_al_parse_key_binding</name><argument_list>(<argument><expr><name>binding</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>syswin</name><operator>-&gt;</operator><name>toggle_mouse_grab_modifiers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>syswin</name><operator>-&gt;</operator><name>toggle_mouse_grab_keycode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Toggle mouse grab key: '%s'\n"</literal></expr></argument>, <argument><expr><name>binding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Cannot parse key binding '%s'\n"</literal></expr></argument>, <argument><expr><name>binding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_D3D</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_DIRECT3D_INTERNAL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_INTERFACE</name><modifier>*</modifier></type> <name>iface</name> <init>= <expr><call><name>_al_display_d3d_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>iface</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Direct3D graphics driver not available.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>iface</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_OPENGL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>_al_display_wgl_driver</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><name>sys_cfg</name></expr></argument>, <argument><expr><literal type="string">"graphics"</literal></expr></argument>, <argument><expr><literal type="string">"driver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Configuration value graphics.driver = %s\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>_al_stricmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"DIRECT3D"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>_al_stricmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"D3D"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_D3D</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_INTERFACE</name><modifier>*</modifier></type> <name>iface</name> <init>= <expr><call><name>_al_display_d3d_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>iface</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_new_display_flags</name><argument_list>(<argument><expr><name>flags</name> <operator>|</operator> <name>ALLEGRO_DIRECT3D_INTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>iface</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>_al_stricmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"OPENGL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>al_set_new_display_flags</name><argument_list>(<argument><expr><name>flags</name> <operator>|</operator> <name>ALLEGRO_OPENGL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>_al_display_wgl_driver</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>_al_stricmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Graphics driver selection unrecognised: %s\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_D3D</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_INTERFACE</name><modifier>*</modifier></type> <name>iface</name> <init>= <expr><call><name>_al_display_d3d_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>iface</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_new_display_flags</name><argument_list>(<argument><expr><name>flags</name> <operator>|</operator> <name>ALLEGRO_DIRECT3D_INTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>iface</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<expr_stmt><expr><call><name>al_set_new_display_flags</name><argument_list>(<argument><expr><name>flags</name> <operator>|</operator> <name>ALLEGRO_OPENGL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>_al_display_wgl_driver</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"No graphics driver available.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_KEYBOARD_DRIVER</name> <modifier>*</modifier></type><name>win_get_keyboard_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>_al_keyboard_driver_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>driver</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>bool</name></type> <name>win_configured_joystick_driver_is</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>driver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type> <name>sysconf</name> <init>= <expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sysconf</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>driver</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><name>sysconf</name></expr></argument>, <argument><expr><literal type="string">"joystick"</literal></expr></argument>, <argument><expr><literal type="string">"driver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>driver</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Configuration value joystick.driver = %s\n"</literal></expr></argument>, <argument><expr><name>driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>_al_stricmp</name><argument_list>(<argument><expr><name>driver</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>bool</name></type> <name>win_use_xinput</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>win_configured_joystick_driver_is</name><argument_list>(<argument><expr><literal type="string">"XINPUT"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type> <name>win_use_directinput</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>win_configured_joystick_driver_is</name><argument_list>(<argument><expr><literal type="string">"DIRECTINPUT"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>ALLEGRO_JOYSTICK_DRIVER</name> <modifier>*</modifier></type><name>win_get_joystick_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>win_use_directinput</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Selected DirectInput joystick driver.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name>_al_joydrv_directx</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>win_use_xinput</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_XINPUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Selected XInput joystick driver.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name>_al_joydrv_xinput</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"XInput joystick driver not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_XINPUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Selected combined XInput/DirectInput joystick driver.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name>_al_joydrv_windows_all</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Combined XInput/DirectInput joystick driver not supported. Usign DirectInput in stead.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name>_al_joydrv_directx</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC_DRIVER</name> <modifier>*</modifier></type><name>win_get_haptic_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>win_use_directinput</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Selected DirectInput haptic driver.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name>_al_hapdrv_directx</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>win_use_xinput</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_XINPUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Selected XInput haptic driver.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name>_al_hapdrv_xinput</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"XInput haptic driver not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_XINPUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Selected combined XInput/DirectInput haptic driver.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name>_al_hapdrv_windows_all</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Combined XInput/DirectInput haptic driver not supported. Using DirectInput in stead.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name>_al_hapdrv_directx</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>win_get_num_display_modes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>format</name> <init>= <expr><call><name>_al_deduce_color_format</name><argument_list>(<argument><expr><call><name>_al_get_new_display_settings</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>refresh_rate</name> <init>= <expr><call><name>al_get_new_display_refresh_rate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>al_get_new_display_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_CFG_OPENGL</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_OPENGL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>_al_wgl_get_num_display_modes</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>refresh_rate</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_CFG_D3D</name></expr></cpp:if>
<return>return <expr><call><name>_al_d3d_get_num_display_modes</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>refresh_rate</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_DISPLAY_MODE</name> <modifier>*</modifier></type><name>win_get_display_mode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_DISPLAY_MODE</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>format</name> <init>= <expr><call><name>_al_deduce_color_format</name><argument_list>(<argument><expr><call><name>_al_get_new_display_settings</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>refresh_rate</name> <init>= <expr><call><name>al_get_new_display_refresh_rate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>al_get_new_display_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_CFG_OPENGL</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_OPENGL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>_al_wgl_get_display_mode</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>refresh_rate</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_CFG_D3D</name></expr></cpp:if>
<return>return <expr><call><name>_al_d3d_get_display_mode</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>refresh_rate</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>win_get_num_video_adapters</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DISPLAY_DEVICE</name></type> <name>dd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dd</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dd</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>EnumDisplayDevices</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dd</name><operator>.</operator><name>StateFlags</name></name> <operator>&amp;</operator> <name>DISPLAY_DEVICE_ATTACHED_TO_DESKTOP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>win_find_nth_adapter_with_desktop</name><parameter_list>(<parameter><decl><type><name>DISPLAY_DEVICE</name><modifier>*</modifier></type> <name>pdd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>adapter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>EnumDisplayDevices</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>pdd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pdd</name><operator>-&gt;</operator><name>StateFlags</name></name> <operator>&amp;</operator> <name>DISPLAY_DEVICE_ATTACHED_TO_DESKTOP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>adapter</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>win_get_monitor_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>adapter</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_MONITOR_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DISPLAY_DEVICE</name></type> <name>dd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DEVMODE</name></type> <name>dm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dd</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dd</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>win_find_nth_adapter_with_desktop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dd</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>.</operator><name>dmSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dm</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnumDisplaySettings</name><argument_list>(<argument><expr><name><name>dd</name><operator>.</operator><name>DeviceName</name></name></expr></argument>, <argument><expr><name>ENUM_CURRENT_SETTINGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>dm</name><operator>.</operator><name>dmFields</name></name> <operator>&amp;</operator> <name>DM_PELSHEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>dm</name><operator>.</operator><name>dmFields</name></name> <operator>&amp;</operator> <name>DM_PELSWIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>x1</name></name> <operator>=</operator> <name><name>dm</name><operator>.</operator><name>dmPosition</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>y1</name></name> <operator>=</operator> <name><name>dm</name><operator>.</operator><name>dmPosition</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>x2</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>x1</name></name> <operator>+</operator> <name><name>dm</name><operator>.</operator><name>dmPelsWidth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>y2</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <name><name>dm</name><operator>.</operator><name>dmPelsHeight</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BOOL</name> <name>CALLBACK</name></type> <name>monitor_enum_proc</name><parameter_list>(<parameter><decl><type><name>HMONITOR</name></type> <name>hMonitor</name></decl></parameter>, <parameter><decl><type><name>HDC</name></type> <name>hdcMonitor</name></decl></parameter>, <parameter><decl><type><name>LPRECT</name></type> <name>lprcMonitor</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>dwData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HMONITOR</name> <modifier>*</modifier></type><name>h_monitor</name> <init>= <expr><operator>(</operator><name>HMONITOR</name> <operator>*</operator><operator>)</operator> <name>dwData</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hMonitor</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>h_monitor</name> <operator>=</operator> <name>hMonitor</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HMONITOR</name></type> <name>win_get_monitor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MONITOR_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HMONITOR</name></type> <name>h_monitor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>x1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>y1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>x2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>y2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnumDisplayMonitors</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><name>monitor_enum_proc</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator> <operator>&amp;</operator><name>h_monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>h_monitor</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>win_get_monitor_dpi</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>adapter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_MONITOR_INFO</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>shcore_dll</name> <init>= <expr><call><name>_al_win_safe_load_library</name><argument_list>(<argument><expr><literal type="string">"shcore.dll"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dpi_hori</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dpi_vert</name></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <name>_AL_MONITOR_DPI_TYPE</name> <block>{
<decl><name>AL_MDT_EFFECTIVE_DPI</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>AL_MDT_ANGULAR_DPI</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>AL_MDT_RAW_DPI</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>AL_MDT_DEFAULT</name> <init>= <expr><name>AL_MDT_EFFECTIVE_DPI</name></expr></init></decl>
}</block></enum></type> <name>AL_MONITOR_DPI_TYPE</name>;</typedef>

<typedef>typedef <function_decl><type><name>HRESULT</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>GetDpiForMonitorPROC</name>)<parameter_list>(<parameter><decl><type><name>HMONITOR</name></type> <name>hmonitor</name></decl></parameter>, <parameter><decl><type><name>AL_MONITOR_DPI_TYPE</name></type> <name>dpiType</name></decl></parameter>, <parameter><decl><type><name>UINT</name> <modifier>*</modifier></type><name>dpiX</name></decl></parameter>, <parameter><decl><type><name>UINT</name> <modifier>*</modifier></type><name>dpiY</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GetDpiForMonitorPROC</name></type> <name>imp_GetDpiForMonitor</name> <init>=
<expr><operator>(</operator><name>GetDpiForMonitorPROC</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>shcore_dll</name></expr></argument>, <argument><expr><literal type="string">"GetDpiForMonitor"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shcore_dll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>shcore_dll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>win_get_monitor_info</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>shcore_dll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>imp_GetDpiForMonitor</name><argument_list>(<argument><expr><call><name>win_get_monitor</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dpi_hori</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dpi_vert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>shcore_dll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>dpi_hori</name> <operator>*</operator> <name>dpi_vert</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>win_get_cursor_position</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret_x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret_y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>POINT</name></type> <name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetCursorPos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ret_x</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ret_y</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>win_grab_mouse</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_WIN</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name><name>win_disp</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ClipCursor</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>system</name><operator>-&gt;</operator><name>mouse_grab_display</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>win_ungrab_mouse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_WIN</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ClipCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>system</name><operator>-&gt;</operator><name>mouse_grab_display</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_MOUSE_DRIVER</name> <modifier>*</modifier></type><name>win_get_mouse_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>_al_mouse_driver_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>driver</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_TOUCH_INPUT_DRIVER</name> <modifier>*</modifier></type><name>win_get_touch_input_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>_al_touch_input_driver_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>driver</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>_al_win_get_path</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>pathw</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>pathu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>csidl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>cisdl_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_TEMP_PATH</name></expr>:</case> <block>{<block_content>


<decl_stmt><decl><type><name>DWORD</name></type> <name>ret</name> <init>= <expr><call><name>GetTempPathW</name><argument_list>(<argument><expr><name>MAX_PATH</name></expr></argument>, <argument><expr><name>pathw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <name>MAX_PATH</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pathu</name> <operator>=</operator> <call><name>al_ustr_new_from_utf16</name><argument_list>(<argument><expr><name>pathw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_to_buffer</name><argument_list>(<argument><expr><name>pathu</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof <name>path</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>pathu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>al_create_path_for_directory</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>ALLEGRO_RESOURCES_PATH</name></expr>:</case> <block>{<block_content> 
<decl_stmt><decl><type><name>HANDLE</name></type> <name>process</name> <init>= <expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetModuleFileNameExW</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pathw</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pathu</name> <operator>=</operator> <call><name>al_ustr_new_from_utf16</name><argument_list>(<argument><expr><name>pathw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_to_buffer</name><argument_list>(<argument><expr><name>pathu</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof <name>path</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>pathu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content> 
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><call><name>al_create_path_for_directory</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block> <break>break;</break>

<case>case <expr><name>ALLEGRO_USER_DATA_PATH</name></expr>:</case> 
<case>case <expr><name>ALLEGRO_USER_SETTINGS_PATH</name></expr>:</case>
<expr_stmt><expr><name>csidl</name> <operator>=</operator> <name>CSIDL_APPDATA</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_USER_HOME_PATH</name></expr>:</case> 
<expr_stmt><expr><name>csidl</name> <operator>=</operator> <name>CSIDL_PROFILE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_USER_DOCUMENTS_PATH</name></expr>:</case> 
<expr_stmt><expr><name>csidl</name> <operator>=</operator> <name>CSIDL_PERSONAL</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EXENAME_PATH</name></expr>:</case> <block>{<block_content> 
<decl_stmt><decl><type><name>HANDLE</name></type> <name>process</name> <init>= <expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetModuleFileNameExW</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pathw</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pathu</name> <operator>=</operator> <call><name>al_ustr_new_from_utf16</name><argument_list>(<argument><expr><name>pathw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_to_buffer</name><argument_list>(<argument><expr><name>pathu</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof <name>path</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>pathu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>al_create_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block> <break>break;</break>

<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SHGetFolderPathW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>csidl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SHGFP_TYPE_CURRENT</name></expr></argument>, <argument><expr><name>pathw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pathu</name> <operator>=</operator> <call><name>al_ustr_new_from_utf16</name><argument_list>(<argument><expr><name>pathw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_to_buffer</name><argument_list>(<argument><expr><name>pathu</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof <name>path</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>pathu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cisdl_path</name> <operator>=</operator> <call><name>al_create_path_for_directory</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cisdl_path</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>csidl</name> <operator>==</operator> <name>CSIDL_APPDATA</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>org_name</name> <init>= <expr><call><name>al_get_org_name</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>app_name</name> <init>= <expr><call><name>al_get_app_name</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>app_name</name> <operator>||</operator> <operator>!</operator><name><name>app_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>cisdl_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>org_name</name> <operator>&amp;&amp;</operator> <name><name>org_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_append_path_component</name><argument_list>(<argument><expr><name>cisdl_path</name></expr></argument>, <argument><expr><name>org_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_append_path_component</name><argument_list>(<argument><expr><name>cisdl_path</name></expr></argument>, <argument><expr><name>app_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>cisdl_path</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>win_inhibit_screensaver</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>inhibit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>_al_win_disable_screensaver</name> <operator>=</operator> <name>inhibit</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HMODULE</name></type> <name>load_library_at_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>path_str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>lib</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>upath_str</name> <init>= <expr><call><name>_twin_tchar_to_utf8</name><argument_list>(<argument><expr><name>path_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Calling LoadLibrary %s\n"</literal></expr></argument>, <argument><expr><name>upath_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lib</name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>(<argument><expr><name>path_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lib</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Loaded %s\n"</literal></expr></argument>, <argument><expr><name>upath_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>error</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>HRESULT_FROM_WIN32</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>hr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Failed to load %s (error: %ld)\n"</literal></expr></argument>, <argument><expr><name>upath_str</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>upath_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>lib</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_build_config_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>s</name> <operator>&amp;&amp;</operator>
<operator>(</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Debug"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Release"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"RelWithDebInfo"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Profile"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>maybe_parent_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_build_config_name</name><argument_list>(<argument><expr><call><name>al_get_path_tail</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>path2</name> <operator>=</operator> <call><name>al_clone_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>path2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_drop_path_tail</name><argument_list>(<argument><expr><name>path2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_path_filename</name><argument_list>(<argument><expr><name>path2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Also searching %s\n"</literal></expr></argument>, <argument><expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>path2</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>path2</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>HMODULE</name></type> <name>_al_win_safe_load_library</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>buf</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name><name>other_dirs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>lib</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>msvc_only</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name><modifier>*</modifier></type> <name>tfilename</name></decl>;</decl_stmt>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_MSVC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>msvc_only</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<if_stmt><if>if <condition>(<expr><call><name>al_is_system_installed</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>path1</name> <operator>=</operator> <call><name>al_get_standard_path</name><argument_list>(<argument><expr><name>ALLEGRO_RESOURCES_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>GetModuleFileName</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>_twin_tchar_to_utf8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>path1</name> <operator>=</operator> <call><name>al_create_path</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>msvc_only</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>path2</name> <operator>=</operator> <call><name>maybe_parent_dir</name><argument_list>(<argument><expr><name>path1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>other_dirs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>path1</name></expr> ?</condition><then> <expr><call><name>_twin_ustr_to_tchar</name><argument_list>(<argument><expr><call><name>al_path_ustr</name><argument_list>(<argument><expr><name>path1</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>other_dirs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>path2</name></expr> ?</condition><then> <expr><call><name>_twin_ustr_to_tchar</name><argument_list>(<argument><expr><call><name>al_path_ustr</name><argument_list>(<argument><expr><name>path2</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>other_dirs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>tfilename</name> <operator>=</operator> <call><name>_twin_utf8_to_tchar</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_tcsncpy_s</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>, <argument><expr><name>tfilename</name></expr></argument>, <argument><expr><name>_TRUNCATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>tfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>PathFindOnPath</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>other_dirs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>_twin_tchar_to_utf8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"PathFindOnPath found: %s\n"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lib</name> <operator>=</operator> <call><name>load_library_at_path</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"PathFindOnPath failed to find %s\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>other_dirs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>other_dirs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>path1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>path2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>lib</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>win_open_library</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_win_safe_load_library</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>win_import_symbol</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>library</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>symbol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>library</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>library</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>win_close_library</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>library</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>library</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>library</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_SYSTEM_INTERFACE</name> <modifier>*</modifier></type><name>_al_system_win_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vt</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>vt</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vt</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>ALLEGRO_SYSTEM_ID_WINDOWS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>initialize</name></name> <operator>=</operator> <name>win_initialize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_display_driver</name></name> <operator>=</operator> <name>win_get_display_driver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_keyboard_driver</name></name> <operator>=</operator> <name>win_get_keyboard_driver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_mouse_driver</name></name> <operator>=</operator> <name>win_get_mouse_driver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_touch_input_driver</name></name> <operator>=</operator> <name>win_get_touch_input_driver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_haptic_driver</name></name> <operator>=</operator> <name>win_get_haptic_driver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_joystick_driver</name></name> <operator>=</operator> <name>win_get_joystick_driver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_num_display_modes</name></name> <operator>=</operator> <name>win_get_num_display_modes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_display_mode</name></name> <operator>=</operator> <name>win_get_display_mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>shutdown_system</name></name> <operator>=</operator> <name>win_shutdown</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_num_video_adapters</name></name> <operator>=</operator> <name>win_get_num_video_adapters</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>create_mouse_cursor</name></name> <operator>=</operator> <name>_al_win_create_mouse_cursor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>destroy_mouse_cursor</name></name> <operator>=</operator> <name>_al_win_destroy_mouse_cursor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_monitor_info</name></name> <operator>=</operator> <name>win_get_monitor_info</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_monitor_dpi</name></name> <operator>=</operator> <name>win_get_monitor_dpi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_cursor_position</name></name> <operator>=</operator> <name>win_get_cursor_position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>grab_mouse</name></name> <operator>=</operator> <name>win_grab_mouse</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>ungrab_mouse</name></name> <operator>=</operator> <name>win_ungrab_mouse</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_path</name></name> <operator>=</operator> <name>_al_win_get_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>inhibit_screensaver</name></name> <operator>=</operator> <name>win_inhibit_screensaver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>open_library</name></name> <operator>=</operator> <name>win_open_library</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>import_symbol</name></name> <operator>=</operator> <name>win_import_symbol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>close_library</name></name> <operator>=</operator> <name>win_close_library</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_time</name></name> <operator>=</operator> <name>_al_win_get_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>rest</name></name> <operator>=</operator> <name>_al_win_rest</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>init_timeout</name></name> <operator>=</operator> <name>_al_win_init_timeout</name></expr>;</expr_stmt>

<return>return <expr><name>vt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_register_system_interfaces</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_INTERFACE</name> <modifier>*</modifier><modifier>*</modifier></type><name>add</name></decl>;</decl_stmt>

<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_al_system_interfaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>add</name> <operator>=</operator> <call><name>_al_system_win_driver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_al_win_error</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LPTSTR</name></type> <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>FormatMessage</name><argument_list>(<argument><expr><name>FORMAT_MESSAGE_FROM_SYSTEM</name> <operator>|</operator> <name>FORMAT_MESSAGE_ALLOCATE_BUFFER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPTSTR</name><operator>)</operator><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_sane_strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"(Unable to decode the error code)"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>_tcscmp</name><argument_list>(<argument><expr><name>msg</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>msg</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>TCHAR</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>_twin_copy_tchar_to_utf8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_al_win_last_error</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_al_win_error</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

</unit>
