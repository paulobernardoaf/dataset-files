<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\win\wxthread.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mmsystem.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>





<function><type><specifier>static</specifier> <name>unsigned</name> <name>__stdcall</name></type> <name>thread_proc_trampoline</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_AL_THREAD</name> <modifier>*</modifier></type><name>thread</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>thread</name><operator>-&gt;</operator><name>proc</name></name>)<argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name><name>thread</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>_endthreadex</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_thread_create</name><parameter_list>(<parameter><decl><type><name>_AL_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>proc</name>)<parameter_list>(<parameter><decl><type><name>_AL_THREAD</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>should_stop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>proc</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>_beginthreadex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>thread_proc_trampoline</name></expr></argument>, <argument><expr><name>thread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_thread_create_with_stacksize</name><parameter_list>(<parameter><decl><type><name>_AL_THREAD</name><modifier>*</modifier></type> <name>thread</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>proc</name>)<parameter_list>(<parameter><decl><type><name>_AL_THREAD</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>stacksize</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>should_stop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>proc</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>_beginthreadex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>stacksize</name></expr></argument>, 
<argument><expr><name>thread_proc_trampoline</name></expr></argument>, <argument><expr><name>thread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_thread_set_should_stop</name><parameter_list>(<parameter><decl><type><name>_AL_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>should_stop</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_al_thread_join</name><parameter_list>(<parameter><decl><type><name>_AL_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_thread_set_should_stop</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_thread_detach</name><parameter_list>(<parameter><decl><type><name>_AL_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>_al_mutex_init</name><parameter_list>(<parameter><decl><type><name>_AL_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mutex</name><operator>-&gt;</operator><name>cs</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mutex</name><operator>-&gt;</operator><name>cs</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name><name>mutex</name><operator>-&gt;</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mutex</name><operator>-&gt;</operator><name>cs</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_mutex_init_recursive</name><parameter_list>(<parameter><decl><type><name>_AL_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>_al_mutex_init</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_mutex_destroy</name><parameter_list>(<parameter><decl><type><name>_AL_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mutex</name><operator>-&gt;</operator><name>cs</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DeleteCriticalSection</name><argument_list>(<argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mutex</name><operator>-&gt;</operator><name>cs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

























































































































<function><type><name>void</name></type> <name>_al_cond_init</name><parameter_list>(<parameter><decl><type><name>_AL_COND</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>nWaitersBlocked</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>nWaitersGone</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>nWaitersToUnblock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>semBlockQueue</name></name> <operator>=</operator> <call><name>CreateSemaphore</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>semBlockLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>mtxUnblockLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_cond_destroy</name><parameter_list>(<parameter><decl><type><name>_AL_COND</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DeleteCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>mtxUnblockLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>semBlockLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>semBlockQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>cond_wait</name><parameter_list>(<parameter><decl><type><name>_AL_COND</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>_AL_MUTEX</name> <modifier>*</modifier></type><name>mtxExternal</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nSignalsWasLeft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>bTimedOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwWaitResult</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>semBlockLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>cond</name><operator>-&gt;</operator><name>nWaitersBlocked</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>semBlockLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><name>mtxExternal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dwWaitResult</name> <operator>=</operator> <call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>semBlockQueue</name></name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dwWaitResult</name> <operator>==</operator> <name>WAIT_TIMEOUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bTimedOut</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>dwWaitResult</name> <operator>==</operator> <name>WAIT_OBJECT_0</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bTimedOut</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><name>mtxExternal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>mtxUnblockLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <operator>(</operator><name>nSignalsWasLeft</name> <operator>=</operator> <name><name>cond</name><operator>-&gt;</operator><name>nWaitersToUnblock</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><operator>(</operator><name><name>cond</name><operator>-&gt;</operator><name>nWaitersToUnblock</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>INT_MAX</name><operator>/</operator><literal type="number">2</literal> <operator>==</operator> <operator>++</operator><operator>(</operator><name><name>cond</name><operator>-&gt;</operator><name>nWaitersGone</name></name><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>semBlockLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>nWaitersBlocked</name></name> <operator>-=</operator> <name><name>cond</name><operator>-&gt;</operator><name>nWaitersGone</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>semBlockLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>nWaitersGone</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>mtxUnblockLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name>nSignalsWasLeft</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>semBlockLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><name>mtxExternal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>bTimedOut</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_cond_wait</name><parameter_list>(<parameter><decl><type><name>_AL_COND</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>_AL_MUTEX</name> <modifier>*</modifier></type><name>mtxExternal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mtxExternal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>cond_wait</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>mtxExternal</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>result</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>result</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>_al_cond_timedwait</name><parameter_list>(<parameter><decl><type><name>_AL_COND</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>_AL_MUTEX</name> <modifier>*</modifier></type><name>mtxExternal</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_TIMEOUT</name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TIMEOUT_WIN</name> <modifier>*</modifier></type><name>win_timeout</name> <init>= <expr><operator>(</operator><name>ALLEGRO_TIMEOUT_WIN</name> <operator>*</operator><operator>)</operator> <name>timeout</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>rel_msecs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mtxExternal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>timeGetTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rel_msecs</name> <operator>=</operator> <name><name>win_timeout</name><operator>-&gt;</operator><name>abstime</name></name> <operator>-</operator> <name>now</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rel_msecs</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rel_msecs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>cond_wait</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>mtxExternal</name></expr></argument>, <argument><expr><name>rel_msecs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>cond_signal</name><parameter_list>(<parameter><decl><type><name>_AL_COND</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>bAll</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nSignalsToIssue</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>mtxUnblockLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name><name>cond</name><operator>-&gt;</operator><name>nWaitersToUnblock</name></name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>cond</name><operator>-&gt;</operator><name>nWaitersBlocked</name></name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>mtxUnblockLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bAll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>nWaitersToUnblock</name></name> <operator>+=</operator> <operator>(</operator><name>nSignalsToIssue</name> <operator>=</operator> <name><name>cond</name><operator>-&gt;</operator><name>nWaitersBlocked</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>nWaitersBlocked</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>nSignalsToIssue</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>cond</name><operator>-&gt;</operator><name>nWaitersToUnblock</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>cond</name><operator>-&gt;</operator><name>nWaitersBlocked</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>cond</name><operator>-&gt;</operator><name>nWaitersBlocked</name></name> <operator>&gt;</operator> <name><name>cond</name><operator>-&gt;</operator><name>nWaitersGone</name></name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>semBlockLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name><name>cond</name><operator>-&gt;</operator><name>nWaitersGone</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>nWaitersBlocked</name></name> <operator>-=</operator> <name><name>cond</name><operator>-&gt;</operator><name>nWaitersGone</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>nWaitersGone</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bAll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nSignalsToIssue</name> <operator>=</operator> <operator>(</operator><name><name>cond</name><operator>-&gt;</operator><name>nWaitersToUnblock</name></name> <operator>=</operator> <name><name>cond</name><operator>-&gt;</operator><name>nWaitersBlocked</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>nWaitersBlocked</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>nSignalsToIssue</name> <operator>=</operator> <name><name>cond</name><operator>-&gt;</operator><name>nWaitersToUnblock</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>cond</name><operator>-&gt;</operator><name>nWaitersBlocked</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content> 
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>mtxUnblockLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>mtxUnblockLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseSemaphore</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>semBlockQueue</name></name></expr></argument>, <argument><expr><name>nSignalsToIssue</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_cond_broadcast</name><parameter_list>(<parameter><decl><type><name>_AL_COND</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cond_signal</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_cond_signal</name><parameter_list>(<parameter><decl><type><name>_AL_COND</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cond_signal</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



</unit>
