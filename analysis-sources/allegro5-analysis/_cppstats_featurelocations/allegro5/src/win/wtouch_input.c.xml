<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\win\wtouch_input.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_driver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_touch_input.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintwin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_display.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"touch"</literal></argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_TOUCH_INPUT_STATE</name></type> <name>touch_input_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_TOUCH_INPUT</name></type> <name>touch_input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>installed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>initiali_time_stamp</name> <init>= <expr><operator>~</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>touch_input_api_reference_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>user32_module</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CLOSETOUCHINPUTHANDLEPROC</name></type> <name>_al_win_close_touch_input_handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GETTOUCHINPUTINFOPROC</name></type> <name>_al_win_get_touch_input_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ISTOUCHWINDOWPROC</name></type> <name>_al_win_is_touch_window</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REGISTERTOUCHWINDOWPROC</name></type> <name>_al_win_register_touch_window</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UNREGISTERTOUCHWINDOWPROC</name></type> <name>_al_win_unregister_touch_window</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>_al_win_init_touch_input_api</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>touch_input_api_reference_counter</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>touch_input_api_reference_counter</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>touch_input_api_reference_counter</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>user32_module</name> <operator>=</operator> <call><name>_al_open_library</name><argument_list>(<argument><expr><literal type="string">"user32.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>user32_module</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>_al_win_close_touch_input_handle</name> <operator>=</operator> <operator>(</operator><name>CLOSETOUCHINPUTHANDLEPROC</name><operator>)</operator><call><name>_al_import_symbol</name><argument_list>(<argument><expr><name>user32_module</name></expr></argument>, <argument><expr><literal type="string">"CloseTouchInputHandle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_al_win_get_touch_input_info</name> <operator>=</operator> <operator>(</operator><name>GETTOUCHINPUTINFOPROC</name><operator>)</operator> <call><name>_al_import_symbol</name><argument_list>(<argument><expr><name>user32_module</name></expr></argument>, <argument><expr><literal type="string">"GetTouchInputInfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_al_win_is_touch_window</name> <operator>=</operator> <operator>(</operator><name>ISTOUCHWINDOWPROC</name><operator>)</operator> <call><name>_al_import_symbol</name><argument_list>(<argument><expr><name>user32_module</name></expr></argument>, <argument><expr><literal type="string">"IsTouchWindow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_al_win_register_touch_window</name> <operator>=</operator> <operator>(</operator><name>REGISTERTOUCHWINDOWPROC</name><operator>)</operator> <call><name>_al_import_symbol</name><argument_list>(<argument><expr><name>user32_module</name></expr></argument>, <argument><expr><literal type="string">"RegisterTouchWindow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_al_win_unregister_touch_window</name> <operator>=</operator> <operator>(</operator><name>UNREGISTERTOUCHWINDOWPROC</name><operator>)</operator><call><name>_al_import_symbol</name><argument_list>(<argument><expr><name>user32_module</name></expr></argument>, <argument><expr><literal type="string">"UnregisterTouchWindow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>_al_win_close_touch_input_handle</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>_al_win_get_touch_input_info</name> <operator>||</operator>
<name>NULL</name> <operator>==</operator> <name>_al_win_is_touch_window</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>_al_win_register_touch_window</name> <operator>||</operator>
<name>NULL</name> <operator>==</operator> <name>_al_win_unregister_touch_window</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_close_library</name><argument_list>(<argument><expr><name>user32_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_al_win_close_touch_input_handle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_al_win_get_touch_input_info</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_al_win_is_touch_window</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_al_win_register_touch_window</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_al_win_unregister_touch_window</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><name>touch_input_api_reference_counter</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"failed loading the touch input API\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>touch_input_api_reference_counter</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"touch input API installed successfully\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_win_exit_touch_input_api</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>touch_input_api_reference_counter</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>touch_input_api_reference_counter</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>touch_input_api_reference_counter</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_close_library</name><argument_list>(<argument><expr><name>user32_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_al_win_close_touch_input_handle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_al_win_get_touch_input_info</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_al_win_is_touch_window</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_al_win_register_touch_window</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_al_win_unregister_touch_window</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>touch_input_api_reference_counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>generate_touch_input_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>primary</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>want_touch_event</name> <init>= <expr><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>want_mouse_emulation_event</name> <init>= <expr><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>mouse_emulation_es</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>primary</name> <operator>&amp;&amp;</operator> <call><name>al_is_mouse_installed</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>touch_input</name><operator>.</operator><name>mouse_emulation_mode</name></name> <operator>==</operator> <name>ALLEGRO_MOUSE_EMULATION_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>want_mouse_emulation_event</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>touch_input</name><operator>.</operator><name>mouse_emulation_mode</name></name> <operator>==</operator> <name>ALLEGRO_MOUSE_EMULATION_INCLUSIVE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>want_touch_event</name> <operator>=</operator> <ternary><condition><expr><name>want_mouse_emulation_event</name></expr> ?</condition><then> <expr><operator>(</operator><name>want_touch_event</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>primary</name><operator>)</operator></expr> </then><else>: <expr><name>want_touch_event</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>touch_input</name><operator>.</operator><name>mouse_emulation_mode</name></name> <operator>==</operator> <name>ALLEGRO_MOUSE_EMULATION_EXCLUSIVE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>want_touch_event</name> <operator>=</operator> <ternary><condition><expr><name>want_mouse_emulation_event</name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>want_touch_event</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>want_touch_event</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>want_mouse_emulation_event</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>want_touch_event</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>touch</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>touch</name><operator>.</operator><name>display</name></name> <operator>=</operator> <operator>(</operator><name>ALLEGRO_DISPLAY</name><operator>*</operator><operator>)</operator><name>win_disp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>touch</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>touch</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>touch</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>touch</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>touch</name><operator>.</operator><name>dx</name></name> <operator>=</operator> <name>dx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>touch</name><operator>.</operator><name>dy</name></name> <operator>=</operator> <name>dy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>touch</name><operator>.</operator><name>primary</name></name> <operator>=</operator> <name>primary</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>want_mouse_emulation_event</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_MOUSE_STATE</name></type> <name>state</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_EVENT_TOUCH_BEGIN</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>ALLEGRO_EVENT_MOUSE_BUTTON_DOWN</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ALLEGRO_EVENT_TOUCH_CANCEL</name></expr>:</case>
<case>case <expr><name>ALLEGRO_EVENT_TOUCH_END</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>ALLEGRO_EVENT_MOUSE_BUTTON_UP</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ALLEGRO_EVENT_TOUCH_MOVE</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>ALLEGRO_EVENT_MOUSE_AXES</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>al_get_mouse_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>display</name></name> <operator>=</operator> <operator>(</operator><name>ALLEGRO_DISPLAY</name><operator>*</operator><operator>)</operator><name>win_disp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>dx</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>dx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>dy</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>dy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>dz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>dw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>button</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>pressure</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>pressure</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_mouse_xy</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>mouse_emulation_es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>mouse_emulation_es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>mouse_emulation_es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>init_touch_input</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name><modifier>*</modifier></type> <name>system</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>installed</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_win_init_touch_input_api</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>touch_input_state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>touch_input_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>mouse_emulation_es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>touch_input</name><operator>.</operator><name>mouse_emulation_mode</name></name> <operator>=</operator> <name>ALLEGRO_MOUSE_EMULATION_TRANSPARENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>installed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>system</name> <operator>=</operator> <call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_al_win_register_touch_window</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"registering touch window %p: %d\n"</literal></expr></argument>, <argument><expr><name>win_display</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"RegisterTouchWindow failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>_al_win_last_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>exit_touch_input</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>installed</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>touch_input_state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>touch_input_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>mouse_emulation_es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_win_exit_touch_input_api</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>installed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_TOUCH_INPUT</name><modifier>*</modifier></type> <name>get_touch_input</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>touch_input</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>get_touch_input_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TOUCH_INPUT_STATE</name> <modifier>*</modifier></type><name>ret_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ret_state</name> <operator>=</operator> <name>touch_input_state</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>set_mouse_emulation_mode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>touch_input</name><operator>.</operator><name>mouse_emulation_mode</name></name> <operator>!=</operator> <name>mode</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ALLEGRO_TOUCH_INPUT_MAX_TOUCH_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_TOUCH_STATE</name><modifier>*</modifier></type> <name>touch</name> <init>= <expr><name><name>touch_input_state</name><operator>.</operator><name>touches</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>touch</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_win_touch_input_handle_cancel</name><argument_list>(<argument><expr><name><name>touch</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>initiali_time_stamp</name></expr></argument>,
<argument><expr><name><name>touch</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>touch</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>touch</name><operator>-&gt;</operator><name>primary</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name><operator>*</operator><operator>)</operator><name><name>touch</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>touch_input</name><operator>.</operator><name>mouse_emulation_mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_TOUCH_STATE</name><modifier>*</modifier></type> <name>find_free_touch_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ALLEGRO_TOUCH_INPUT_MAX_TOUCH_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>touch_input_state</name><operator>.</operator><name>touches</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>touch_input_state</name><operator>.</operator><name>touches</name></name> <operator>+</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_TOUCH_STATE</name><modifier>*</modifier></type> <name>find_touch_state_with_id</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ALLEGRO_TOUCH_INPUT_MAX_TOUCH_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>touch_input_state</name><operator>.</operator><name>touches</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>touch_input_state</name><operator>.</operator><name>touches</name></name> <operator>+</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>double</name></type> <name>get_time_stamp</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>-</operator> <operator>(</operator><operator>(</operator><name>timestamp</name> <operator>-</operator> <name>initiali_time_stamp</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_win_touch_input_set_time_stamp</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>initiali_time_stamp</name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>~</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>initiali_time_stamp</name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_win_touch_input_handle_begin</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>primary</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TOUCH_STATE</name><modifier>*</modifier></type> <name>state</name> <init>= <expr><call><name>find_free_touch_state</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>state</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>dx</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>dy</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>primary</name></name> <operator>=</operator> <name>primary</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>generate_touch_input_event</name><argument_list>(<argument><expr><name>ALLEGRO_EVENT_TOUCH_BEGIN</name></expr></argument>, <argument><expr><call><name>get_time_stamp</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>dx</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>dy</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>primary</name></name></expr></argument>, <argument><expr><name>win_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_win_touch_input_handle_end</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>primary</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TOUCH_STATE</name><modifier>*</modifier></type> <name>state</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>primary</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>find_touch_state_with_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>state</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>dx</name></name> <operator>=</operator> <name>x</name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>dy</name></name> <operator>=</operator> <name>y</name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>generate_touch_input_event</name><argument_list>(<argument><expr><name>ALLEGRO_EVENT_TOUCH_END</name></expr></argument>, <argument><expr><call><name>get_time_stamp</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>dx</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>dy</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>primary</name></name></expr></argument>, <argument><expr><name>win_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_TOUCH_STATE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_win_touch_input_handle_move</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>primary</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TOUCH_STATE</name><modifier>*</modifier></type> <name>state</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>primary</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>find_touch_state_with_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>state</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>dx</name></name> <operator>=</operator> <name>x</name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>dy</name></name> <operator>=</operator> <name>y</name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>generate_touch_input_event</name><argument_list>(<argument><expr><name>ALLEGRO_EVENT_TOUCH_MOVE</name></expr></argument>, <argument><expr><call><name>get_time_stamp</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>dx</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>dy</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>primary</name></name></expr></argument>, <argument><expr><name>win_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_win_touch_input_handle_cancel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>primary</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TOUCH_STATE</name><modifier>*</modifier></type> <name>state</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>primary</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>find_touch_state_with_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>state</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>dx</name></name> <operator>=</operator> <name>x</name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>dy</name></name> <operator>=</operator> <name>y</name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>generate_touch_input_event</name><argument_list>(<argument><expr><name>ALLEGRO_EVENT_TOUCH_CANCEL</name></expr></argument>, <argument><expr><call><name>get_time_stamp</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>dx</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>dy</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>primary</name></name></expr></argument>, <argument><expr><name>win_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_TOUCH_STATE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>touch_input</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOUCH_INPUT_WINAPI</name></cpp:macro> <cpp:value>AL_ID('W','T','I','D')</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_TOUCH_INPUT_DRIVER</name></type> <name>touch_input_driver</name> <init>=
<expr><block>{
<expr><name>TOUCH_INPUT_WINAPI</name></expr>,
<expr><name>init_touch_input</name></expr>,
<expr><name>exit_touch_input</name></expr>,
<expr><name>get_touch_input</name></expr>,
<expr><name>get_touch_input_state</name></expr>,
<expr><name>set_mouse_emulation_mode</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_DRIVER_INFO</name></type> <name><name>_al_touch_input_driver_list</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><name>TOUCH_INPUT_WINAPI</name></expr>, <expr><operator>&amp;</operator><name>touch_input_driver</name></expr>, <expr><name>true</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
