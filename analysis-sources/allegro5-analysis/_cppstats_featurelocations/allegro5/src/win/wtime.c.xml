<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\win\wtime.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintwin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mmsystem.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ALLEGRO_STATIC_ASSERT</name><argument_list>(<argument><expr><name>wtime</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_TIMEOUT_WIN</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_TIMEOUT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LARGE_INTEGER_TO_INT64</name><parameter_list>(<parameter><type><name>li</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((int64_t)li.HighPart &lt;&lt; 32) | (int64_t)li.LowPart)</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>high_res_timer_freq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>_al_win_prev_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>_al_win_total_time</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>double</name></type> (<modifier>*</modifier><name>real_get_time_func</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>_AL_MUTEX</name></type> <name>time_mutex</name> <init>= <expr><name>_AL_MUTEX_UNINITED</name></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>double</name></type> <name>low_res_current_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cur_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>ellapsed_time</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_time</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <call><name>timeGetTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ellapsed_time</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name>cur_time</name> <operator>-</operator> <name>_al_win_prev_time</name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_time</name> <operator>&lt;</operator> <name>_al_win_prev_time</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ellapsed_time</name> <operator>+=</operator> <literal type="number">4294967.295</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>_al_win_total_time</name> <operator>+=</operator> <name>ellapsed_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_al_win_prev_time</name> <operator>=</operator> <name>cur_time</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>_al_win_total_time</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>double</name></type> <name>high_res_current_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cur_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>ellapsed_time</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>QueryPerformanceCounter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_time</name> <operator>=</operator> <call><name>LARGE_INTEGER_TO_INT64</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ellapsed_time</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>cur_time</name> <operator>-</operator> <name>_al_win_prev_time</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>high_res_timer_freq</name></expr>;</expr_stmt>

<expr_stmt><expr><name>_al_win_total_time</name> <operator>+=</operator> <name>ellapsed_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_al_win_prev_time</name> <operator>=</operator> <name>cur_time</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>_al_win_total_time</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>double</name></type> <name>_al_win_get_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call>(<modifier>*</modifier><name>real_get_time_func</name>)<argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_win_init_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>tmp_freq</name></decl>;</decl_stmt>
<expr_stmt><expr><name>_al_win_total_time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>QueryPerformanceFrequency</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_freq</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>real_get_time_func</name> <operator>=</operator> <name>low_res_current_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_al_win_prev_time</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <call><name>timeGetTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>count</name></decl>;</decl_stmt>
<expr_stmt><expr><name>high_res_timer_freq</name> <operator>=</operator> <call><name>LARGE_INTEGER_TO_INT64</name><argument_list>(<argument><expr><name>tmp_freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>real_get_time_func</name> <operator>=</operator> <name>high_res_current_time</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>QueryPerformanceCounter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_al_win_prev_time</name> <operator>=</operator> <call><name>LARGE_INTEGER_TO_INT64</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_al_win_shutdown_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_al_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_al_win_rest</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>seconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>seconds</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><operator>(</operator><name>seconds</name> <operator>*</operator> <literal type="number">1000.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_al_win_init_timeout</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TIMEOUT</name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>seconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TIMEOUT_WIN</name> <modifier>*</modifier></type><name>wt</name> <init>= <expr><operator>(</operator><name>ALLEGRO_TIMEOUT_WIN</name> <operator>*</operator><operator>)</operator> <name>timeout</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>wt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>seconds</name> <operator>&lt;=</operator> <name>INT_MAX</name><operator>/</operator><literal type="number">1000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>seconds</name> <operator>&lt;=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wt</name><operator>-&gt;</operator><name>abstime</name></name> <operator>=</operator> <call><name>timeGetTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>wt</name><operator>-&gt;</operator><name>abstime</name></name> <operator>=</operator> <call><name>timeGetTime</name><argument_list>()</argument_list></call> <operator>+</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><operator>(</operator><name>seconds</name> <operator>*</operator> <literal type="number">1000.0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


</unit>
