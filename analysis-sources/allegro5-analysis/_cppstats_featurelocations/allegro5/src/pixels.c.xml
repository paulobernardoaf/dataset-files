<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\pixels.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_pixels.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"pixels"</literal></argument>)</argument_list></macro>



<decl_stmt><decl><type><name>float</name></type> <name><name>_al_u8_to_float</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>_al_rgb_scale_1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>_al_rgb_scale_4</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>_al_rgb_scale_5</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>_al_rgb_scale_6</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>pixel_sizes</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">3</literal></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, 
<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">3</literal></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">3</literal></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">16</literal></expr>, 
<expr><literal type="number">4</literal></expr>, 
<expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>pixel_bits</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">15</literal></expr>,
<expr><literal type="number">16</literal></expr>,
<expr><literal type="number">16</literal></expr>,
<expr><literal type="number">24</literal></expr>,
<expr><literal type="number">32</literal></expr>,
<expr><literal type="number">32</literal></expr>,
<expr><literal type="number">32</literal></expr>, 
<expr><literal type="number">32</literal></expr>,
<expr><literal type="number">16</literal></expr>,
<expr><literal type="number">24</literal></expr>,
<expr><literal type="number">16</literal></expr>,
<expr><literal type="number">15</literal></expr>,
<expr><literal type="number">16</literal></expr>,
<expr><literal type="number">16</literal></expr>,
<expr><literal type="number">32</literal></expr>,
<expr><literal type="number">32</literal></expr>,
<expr><literal type="number">24</literal></expr>,
<expr><literal type="number">16</literal></expr>,
<expr><literal type="number">15</literal></expr>,
<expr><literal type="number">32</literal></expr>,
<expr><literal type="number">32</literal></expr>,
<expr><literal type="number">128</literal></expr>, 
<expr><literal type="number">32</literal></expr>, 
<expr><literal type="number">16</literal></expr>, 
<expr><literal type="number">8</literal></expr>, 
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>pixel_block_widths</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>pixel_block_heights</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>pixel_block_sizes</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">3</literal></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, 
<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">3</literal></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">3</literal></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">16</literal></expr>, 
<expr><literal type="number">4</literal></expr>, 
<expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">8</literal></expr>,
<expr><literal type="number">16</literal></expr>,
<expr><literal type="number">16</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name><name>format_alpha_table</name><index>[<expr><name>ALLEGRO_NUM_PIXEL_FORMATS</name></expr>]</index></name> <init>= <expr><block>{
<expr><name>false</name></expr>, 
<expr><name>false</name></expr>,
<expr><name>true</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>true</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>true</name></expr>,
<expr><name>true</name></expr>, 
<expr><name>true</name></expr>,
<expr><name>true</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>true</name></expr>,
<expr><name>true</name></expr>,
<expr><name>true</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>true</name></expr>, 
<expr><name>true</name></expr>, 
<expr><name>true</name></expr>, 
<expr><name>false</name></expr>, 
<expr><name>true</name></expr>,
<expr><name>true</name></expr>,
<expr><name>true</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name><name>pixel_format_names</name><index>[<expr><name>ALLEGRO_NUM_PIXEL_FORMATS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"ANY"</literal></expr>,
<expr><literal type="string">"ANY_NO_ALPHA"</literal></expr>,
<expr><literal type="string">"ANY_WITH_ALPHA"</literal></expr>,
<expr><literal type="string">"ANY_15_NO_ALPHA"</literal></expr>,
<expr><literal type="string">"ANY_16_NO_ALPHA"</literal></expr>,
<expr><literal type="string">"ANY_16_WITH_ALPHA"</literal></expr>,
<expr><literal type="string">"ANY_24_NO_ALPHA"</literal></expr>,
<expr><literal type="string">"ANY_32_NO_ALPHA"</literal></expr>,
<expr><literal type="string">"ANY_32_WITH_ALPHA"</literal></expr>,
<expr><literal type="string">"ARGB_8888"</literal></expr>,
<expr><literal type="string">"RGBA_8888"</literal></expr>,
<expr><literal type="string">"ARGB_4444"</literal></expr>,
<expr><literal type="string">"RGB_888"</literal></expr>,
<expr><literal type="string">"RGB_565"</literal></expr>,
<expr><literal type="string">"RGB_555"</literal></expr>,
<expr><literal type="string">"RGBA_5551"</literal></expr>,
<expr><literal type="string">"ARGB_1555"</literal></expr>,
<expr><literal type="string">"ABGR_8888"</literal></expr>,
<expr><literal type="string">"XBGR_8888"</literal></expr>,
<expr><literal type="string">"BGR_888"</literal></expr>,
<expr><literal type="string">"BGR_565"</literal></expr>,
<expr><literal type="string">"BGR_555"</literal></expr>,
<expr><literal type="string">"RGBX_8888"</literal></expr>,
<expr><literal type="string">"XRGB_8888"</literal></expr>,
<expr><literal type="string">"ABGR_F32"</literal></expr>,
<expr><literal type="string">"ABGR_8888_LE"</literal></expr>,
<expr><literal type="string">"RGBA_4444"</literal></expr>,
<expr><literal type="string">"SINGLE_CHANNEL_8"</literal></expr>,
<expr><literal type="string">"RGBA_DXT1"</literal></expr>,
<expr><literal type="string">"RGBA_DXT3"</literal></expr>,
<expr><literal type="string">"RGBA_DXT5"</literal></expr>,
<expr><literal type="string">"INVALID"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name><name>format_is_real</name><index>[<expr><name>ALLEGRO_NUM_PIXEL_FORMATS</name></expr>]</index></name> <init>=
<expr><block>{
<expr><name>false</name></expr>, 
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>true</name></expr>, 
<expr><name>true</name></expr>,
<expr><name>true</name></expr>,
<expr><name>true</name></expr>,
<expr><name>true</name></expr>,
<expr><name>true</name></expr>,
<expr><name>true</name></expr>,
<expr><name>true</name></expr>,
<expr><name>true</name></expr>,
<expr><name>true</name></expr>,
<expr><name>true</name></expr>,
<expr><name>true</name></expr>,
<expr><name>true</name></expr>,
<expr><name>true</name></expr>,
<expr><name>true</name></expr>,
<expr><name>true</name></expr>, 
<expr><name>true</name></expr>, 
<expr><name>true</name></expr>, 
<expr><name>true</name></expr>, 
<expr><name>true</name></expr>,
<expr><name>true</name></expr>,
<expr><name>true</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name><name>format_is_video_only</name><index>[<expr><name>ALLEGRO_NUM_PIXEL_FORMATS</name></expr>]</index></name> <init>=
<expr><block>{
<expr><name>false</name></expr>, 
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>, 
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>, 
<expr><name>false</name></expr>, 
<expr><name>false</name></expr>, 
<expr><name>false</name></expr>, 
<expr><name>true</name></expr>,
<expr><name>true</name></expr>,
<expr><name>true</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name><name>format_is_compressed</name><index>[<expr><name>ALLEGRO_NUM_PIXEL_FORMATS</name></expr>]</index></name> <init>=
<expr><block>{
<expr><name>false</name></expr>, 
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>, 
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>,
<expr><name>false</name></expr>, 
<expr><name>false</name></expr>, 
<expr><name>false</name></expr>, 
<expr><name>false</name></expr>, 
<expr><name>true</name></expr>,
<expr><name>true</name></expr>,
<expr><name>true</name></expr>,
}</block></expr></init></decl>;</decl_stmt>


<function><type><name>void</name></type> <name>_al_init_pixels</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>_al_u8_to_float</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>_al_rgb_scale_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>*</operator> <literal type="number">255</literal> <operator>/</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>_al_rgb_scale_4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>*</operator> <literal type="number">255</literal> <operator>/</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>_al_rgb_scale_5</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>*</operator> <literal type="number">255</literal> <operator>/</operator> <literal type="number">31</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>_al_rgb_scale_6</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>*</operator> <literal type="number">255</literal> <operator>/</operator> <literal type="number">63</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_get_pixel_block_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>pixel_block_sizes</name><index>[<expr><name>format</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_get_pixel_block_width</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>pixel_block_widths</name><index>[<expr><name>format</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_get_pixel_block_height</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>pixel_block_heights</name><index>[<expr><name>format</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_get_pixel_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>pixel_sizes</name><index>[<expr><name>format</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>al_get_pixel_format_bits</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>pixel_bits</name><index>[<expr><name>format</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>_al_pixel_format_has_alpha</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>format_alpha_table</name><index>[<expr><name>format</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>_al_pixel_format_is_real</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>format</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>format</name> <operator>&lt;</operator> <name>ALLEGRO_NUM_PIXEL_FORMATS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>format_is_real</name><index>[<expr><name>format</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_pixel_format_is_video_only</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>format</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>format</name> <operator>&lt;</operator> <name>ALLEGRO_NUM_PIXEL_FORMATS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>format_is_video_only</name><index>[<expr><name>format</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_pixel_format_is_compressed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>format</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>format</name> <operator>&lt;</operator> <name>ALLEGRO_NUM_PIXEL_FORMATS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>format_is_compressed</name><index>[<expr><name>format</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>bool</name></type> <name>try_display_format</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>best_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bytes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>best_format</name> <operator>=</operator> <call><name>al_get_display_format</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_pixel_format_is_real</name><argument_list>(<argument><expr><name>best_format</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>al_get_pixel_size</name><argument_list>(<argument><expr><operator>*</operator><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&amp;&amp;</operator> <name>bytes</name> <operator>!=</operator> <call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>best_format</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_pixel_format_has_alpha</name><argument_list>(<argument><expr><operator>*</operator><name>format</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>_al_pixel_format_has_alpha</name><argument_list>(<argument><expr><name>best_format</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>best_format</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_PIXEL_FORMAT_RGBX_8888</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>format</name> <operator>=</operator> <name>ALLEGRO_PIXEL_FORMAT_RGBA_8888</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>ALLEGRO_PIXEL_FORMAT_XRGB_8888</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>format</name> <operator>=</operator> <name>ALLEGRO_PIXEL_FORMAT_ARGB_8888</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>ALLEGRO_PIXEL_FORMAT_XBGR_8888</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>format</name> <operator>=</operator> <name>ALLEGRO_PIXEL_FORMAT_ABGR_8888</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_pixel_format_has_alpha</name><argument_list>(<argument><expr><operator>*</operator><name>format</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>_al_pixel_format_has_alpha</name><argument_list>(<argument><expr><name>best_format</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>best_format</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_PIXEL_FORMAT_RGBA_8888</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>format</name> <operator>=</operator> <name>ALLEGRO_PIXEL_FORMAT_RGBX_8888</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>ALLEGRO_PIXEL_FORMAT_ARGB_8888</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>format</name> <operator>=</operator> <name>ALLEGRO_PIXEL_FORMAT_XRGB_8888</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>format</name> <operator>=</operator> <name>ALLEGRO_PIXEL_FORMAT_XBGR_8888</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>format</name> <operator>=</operator> <name>best_format</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>_al_get_real_pixel_format</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<switch>switch <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_PIXEL_FORMAT_ANY_NO_ALPHA</name></expr>:</case>
<case>case <expr><name>ALLEGRO_PIXEL_FORMAT_ANY_32_NO_ALPHA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>try_display_format</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>ALLEGRO_PIXEL_FORMAT_XRGB_8888</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_PIXEL_FORMAT_ANY</name></expr>:</case>
<case>case <expr><name>ALLEGRO_PIXEL_FORMAT_ANY_WITH_ALPHA</name></expr>:</case>
<case>case <expr><name>ALLEGRO_PIXEL_FORMAT_ANY_32_WITH_ALPHA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>try_display_format</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_CFG_OPENGLES</name></expr></cpp:if> 
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>ALLEGRO_PIXEL_FORMAT_ARGB_8888</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>ALLEGRO_PIXEL_FORMAT_ANY_15_NO_ALPHA</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>ALLEGRO_PIXEL_FORMAT_RGB_555</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_PIXEL_FORMAT_ANY_16_NO_ALPHA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>try_display_format</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>ALLEGRO_PIXEL_FORMAT_RGB_565</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_PIXEL_FORMAT_ANY_16_WITH_ALPHA</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>ALLEGRO_PIXEL_FORMAT_RGBA_4444</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_PIXEL_FORMAT_ANY_24_NO_ALPHA</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>ALLEGRO_PIXEL_FORMAT_RGB_888</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>_al_pixel_format_is_real</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>format</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>_al_pixel_format_name</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PIXEL_FORMAT</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>&gt;=</operator> <name>ALLEGRO_NUM_PIXEL_FORMATS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>format</name> <operator>=</operator> <name>ALLEGRO_NUM_PIXEL_FORMATS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>pixel_format_names</name><index>[<expr><name>format</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>ALLEGRO_COLOR</name></type> <name>al_map_rgba</name><parameter_list>(
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_AL_MAP_RGBA</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>color</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_COLOR</name></type> <name>al_premul_rgba</name><parameter_list>(
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_AL_MAP_RGBA</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><name>r</name> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal></expr></argument>, <argument><expr><name>g</name> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal></expr></argument>, <argument><expr><name>b</name> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>color</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_COLOR</name></type> <name>al_map_rgb</name><parameter_list>(
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>al_map_rgba</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_COLOR</name></type> <name>al_map_rgba_f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>g</name></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>b</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>a</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<return>return <expr><name>color</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_COLOR</name></type> <name>al_premul_rgba_f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>g</name></name> <operator>=</operator> <name>g</name> <operator>*</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>b</name></name> <operator>=</operator> <name>b</name> <operator>*</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>a</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<return>return <expr><name>color</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_COLOR</name></type> <name>al_map_rgb_f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>al_unmap_rgba</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name><name>color</name><operator>.</operator><name>r</name></name> <operator>*</operator> <literal type="number">255.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>g</name> <operator>=</operator> <name><name>color</name><operator>.</operator><name>g</name></name> <operator>*</operator> <literal type="number">255.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name><name>color</name><operator>.</operator><name>b</name></name> <operator>*</operator> <literal type="number">255.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <name><name>color</name><operator>.</operator><name>a</name></name> <operator>*</operator> <literal type="number">255.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_unmap_rgb</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_unmap_rgba</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_unmap_rgba_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name><name>color</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>g</name> <operator>=</operator> <name><name>color</name><operator>.</operator><name>g</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name><name>color</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <name><name>color</name><operator>.</operator><name>a</name></name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_unmap_rgb_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_unmap_rgba_f</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



</unit>
