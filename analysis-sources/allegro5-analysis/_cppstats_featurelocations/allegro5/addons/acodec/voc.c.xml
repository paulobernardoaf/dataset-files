<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\acodec\voc.c">









































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"helper.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"voc"</literal></argument>)</argument_list></macro>

<typedef>typedef <type><name><name>struct</name> <name>AL_VOC_DATA</name></name></type> <name>AL_VOC_DATA</name>;</typedef>

<struct>struct <name>AL_VOC_DATA</name> <block>{
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>datapos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>samplerate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>bits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>short</name></type> <name>channels</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>sample_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>samples</name></decl>;</decl_stmt> 
}</block>;</struct>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READNBYTES</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>data</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>retv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (al_fread(f, &amp;data, n) != n) { ALLEGRO_WARN("voc_open: Bad Number of bytes read in last operation"); return retv; } } while(0)</cpp:value></cpp:define>








<function><type><specifier>static</specifier> <name>AL_VOC_DATA</name> <modifier>*</modifier></type><name>voc_open</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AL_VOC_DATA</name> <modifier>*</modifier></type><name>vocdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>hdrbuf</name><index>[<expr><literal type="number">0x16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>readcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>blocktype</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>timeconstant</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>format</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name>vocversion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>checkver</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>blocklength</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>vocdata</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AL_VOC_DATA</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vocdata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>vocdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hdrbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hdrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vocdata</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>


<expr_stmt><expr><name>readcount</name> <operator>=</operator> <call><name>al_fread</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>hdrbuf</name></expr></argument>, <argument><expr><literal type="number">0x16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>readcount</name> <operator>!=</operator> <literal type="number">0x16</literal> 
<operator>||</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>hdrbuf</name></expr></argument>, <argument><expr><literal type="string">"Creative Voice File\0x1A"</literal></expr></argument>, <argument><expr><literal type="number">0x14</literal></expr></argument>)</argument_list></call> 
<operator>||</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>hdrbuf</name><operator>+</operator><literal type="number">0x15</literal></expr></argument> , <argument><expr><literal type="string">"\0x00\0x1A"</literal></expr></argument>, <argument><expr><literal type="number">0x2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"voc_open: File does not appear to be a valid VOC file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_fread</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vocversion</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vocversion</name> <operator>!=</operator> <literal type="number">0x10A</literal> <operator>&amp;&amp;</operator> <name>vocversion</name> <operator>!=</operator> <literal type="number">0x114</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"voc_open: File is of unknown version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_fread</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>checkver</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>checkver</name> <operator>!=</operator> <operator>~</operator><name>vocversion</name> <operator>+</operator> <literal type="number">0x1234</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"voc_open: Bad VOC Version Identification Number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>READNBYTES</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>blocktype</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READNBYTES</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>blocklength</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READNBYTES</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blocklength</name> <operator>+=</operator> <name>x</name><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>blocktype</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>



<expr_stmt><expr><name>blocklength</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READNBYTES</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>timeconstant</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READNBYTES</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vocdata</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>vocdata</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>vocdata</name><operator>-&gt;</operator><name>samplerate</name></name> <operator>=</operator> <literal type="number">1000000</literal> <operator>/</operator> <operator>(</operator><literal type="number">256</literal> <operator>-</operator> <name>timeconstant</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vocdata</name><operator>-&gt;</operator><name>sample_size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 





<expr_stmt><expr><name><name>vocdata</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <name>blocklength</name> <operator>/</operator> <name><name>vocdata</name><operator>-&gt;</operator><name>sample_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vocdata</name><operator>-&gt;</operator><name>datapos</name></name> <operator>=</operator> <call><name>al_ftell</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>






<if_stmt><if>if <condition>(<expr><name>blocklength</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"voc_open: Got opening Blocktype 8 of wrong length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>READNBYTES</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>timeconstant</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READNBYTES</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READNBYTES</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>vocdata</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vocdata</name><operator>-&gt;</operator><name>channels</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>vocdata</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>vocdata</name><operator>-&gt;</operator><name>samplerate</name></name> <operator>=</operator> <literal type="number">1000000</literal> <operator>/</operator> <operator>(</operator><literal type="number">256</literal> <operator>-</operator> <name>timeconstant</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vocdata</name><operator>-&gt;</operator><name>samplerate</name></name> <operator>/=</operator> <name><name>vocdata</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vocdata</name><operator>-&gt;</operator><name>sample_size</name></name> <operator>=</operator> <name><name>vocdata</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>vocdata</name><operator>-&gt;</operator><name>bits</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>




<expr_stmt><expr><call><name>READNBYTES</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>blocktype</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>blocktype</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"voc_open: Blocktype following type 8 is not 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>READNBYTES</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>blocklength</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READNBYTES</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blocklength</name> <operator>+=</operator> <name>x</name><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>blocklength</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READNBYTES</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vocdata</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <name>blocklength</name> <operator>/</operator> <name><name>vocdata</name><operator>-&gt;</operator><name>sample_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vocdata</name><operator>-&gt;</operator><name>datapos</name></name> <operator>=</operator> <call><name>al_ftell</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case>






<expr_stmt><expr><name>blocklength</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READNBYTES</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>vocdata</name><operator>-&gt;</operator><name>samplerate</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>READNBYTES</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>vocdata</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>READNBYTES</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>vocdata</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>READNBYTES</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>vocdata</name><operator>-&gt;</operator><name>bits</name></name> <operator>!=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>vocdata</name><operator>-&gt;</operator><name>bits</name></name> <operator>!=</operator> <literal type="number">16</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>format</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>format</name> <operator>!=</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"voc_open: unsupported CODEC in voc data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>READNBYTES</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>vocdata</name><operator>-&gt;</operator><name>datapos</name></name> <operator>=</operator> <call><name>al_ftell</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> 
<case>case <expr><literal type="number">3</literal></expr>:</case> 
<case>case <expr><literal type="number">4</literal></expr>:</case> 
<case>case <expr><literal type="number">5</literal></expr>:</case> 
<case>case <expr><literal type="number">6</literal></expr>:</case> 
<case>case <expr><literal type="number">7</literal></expr>:</case> 
<default>default:</default>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"voc_open: opening Block is of unsupported type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>vocdata</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>voc_close</name><parameter_list>(<parameter><decl><type><name>AL_VOC_DATA</name> <modifier>*</modifier></type><name>vocdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>vocdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>vocdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>_al_load_voc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Loading VOC sample %s.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to open %s for reading.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>spl</name> <operator>=</operator> <call><name>_al_load_voc_f</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>spl</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>_al_load_voc_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AL_VOC_DATA</name> <modifier>*</modifier></type><name>vocdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>sample</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytestoread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>endofvoc</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vocdata</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AL_VOC_DATA</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vocdata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>vocdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>vocdata</name> <operator>=</operator> <call><name>voc_open</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vocdata</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"channels %d\n"</literal></expr></argument>, <argument><expr><name><name>vocdata</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"word_size %d\n"</literal></expr></argument>, <argument><expr><name><name>vocdata</name><operator>-&gt;</operator><name>sample_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"rate %d\n"</literal></expr></argument>, <argument><expr><name><name>vocdata</name><operator>-&gt;</operator><name>samplerate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"first_block_samples %d\n"</literal></expr></argument>, <argument><expr><name><name>vocdata</name><operator>-&gt;</operator><name>samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"first_block_size %d\n"</literal></expr></argument>, <argument><expr><name><name>vocdata</name><operator>-&gt;</operator><name>samples</name></name> <operator>*</operator> <name><name>vocdata</name><operator>-&gt;</operator><name>sample_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name><name>vocdata</name><operator>-&gt;</operator><name>samples</name></name> <operator>*</operator> <name><name>vocdata</name><operator>-&gt;</operator><name>sample_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>bytestoread</name> <operator>=</operator> <name><name>vocdata</name><operator>-&gt;</operator><name>samples</name></name> <operator>*</operator> <name><name>vocdata</name><operator>-&gt;</operator><name>sample_size</name></name></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>!</operator><name>endofvoc</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>al_feof</name><argument_list>(<argument><expr><name><name>vocdata</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>blocktype</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>read</name> <operator>=</operator> <call><name>al_fread</name><argument_list>(<argument><expr><name><name>vocdata</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bytestoread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>read</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READNBYTES</name><argument_list>(<argument><expr><name><name>vocdata</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>blocktype</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>al_feof</name><argument_list>(<argument><expr><name><name>vocdata</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>blocktype</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case><block>{<block_content> 
<expr_stmt><expr><name>endofvoc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="number">2</literal></expr>:</case><block>{<block_content> 
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bytestoread</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READNBYTES</name><argument_list>(<argument><expr><name><name>vocdata</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>bytestoread</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READNBYTES</name><argument_list>(<argument><expr><name><name>vocdata</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytestoread</name> <operator>+=</operator> <name>x</name><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>al_realloc</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>bytestoread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="number">1</literal></expr>:</case> 
<case>case <expr><literal type="number">8</literal></expr>:</case> 
<case>case <expr><literal type="number">9</literal></expr>:</case><block>{<block_content> 
<expr_stmt><expr><name>endofvoc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="number">3</literal></expr>:</case> 
<case>case <expr><literal type="number">4</literal></expr>:</case> 
<case>case <expr><literal type="number">5</literal></expr>:</case> 
<case>case <expr><literal type="number">6</literal></expr>:</case> 
<case>case <expr><literal type="number">7</literal></expr>:</case><block>{<block_content> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ii</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READNBYTES</name><argument_list>(<argument><expr><name><name>vocdata</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READNBYTES</name><argument_list>(<argument><expr><name><name>vocdata</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>x</name><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>len</name></expr> ;</condition> <incr><expr><operator>++</operator><name>ii</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>al_fgetc</name><argument_list>(<argument><expr><name><name>vocdata</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>bytestoread</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <call><name>al_create_sample</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name><name>vocdata</name><operator>-&gt;</operator><name>samplerate</name></name></expr></argument>,
<argument><expr><call><name>_al_word_size_to_depth_conf</name><argument_list>(<argument><expr><name><name>vocdata</name><operator>-&gt;</operator><name>sample_size</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_al_count_to_channel_conf</name><argument_list>(<argument><expr><name><name>vocdata</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sample</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>voc_close</name><argument_list>(<argument><expr><name>vocdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>sample</name></expr>;</return>
</block_content>}</block></function>






</unit>
