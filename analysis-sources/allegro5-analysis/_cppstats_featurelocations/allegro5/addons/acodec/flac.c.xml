<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\acodec\flac.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_acodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_exitfunc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"helper.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_ACODEC_FLAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> configuration problem, ALLEGRO_CFG_ACODEC_FLAC not set</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;FLAC/stream_decoder.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"acodec"</literal></argument>)</argument_list></macro>


<typedef>typedef <type><struct>struct <name>FLACFILE</name> <block>{
<decl_stmt><decl><type><name>FLAC__StreamDecoder</name> <modifier>*</modifier></type><name>decoder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sample_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>buffer_pos</name></decl>, <name>buffer_size</name>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>total_samples</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>decoded_samples</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>streamed_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>loop_start</name></decl>, <name>loop_end</name>;</decl_stmt> 
}</block></struct></type> <name>FLACFILE</name>;</typedef>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_ACODEC_FLAC_DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>flac_dll</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>flac_virgin</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct><specifier>static</specifier> struct
<block>{
<function_decl><type><name>FLAC__StreamDecoder</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>FLAC__stream_decoder_new</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>FLAC__stream_decoder_delete</name>)<parameter_list>(<parameter><decl><type><name>FLAC__StreamDecoder</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>FLAC__StreamDecoderInitStatus</name></type> (<modifier>*</modifier><name>FLAC__stream_decoder_init_stream</name>)<parameter_list>(
<parameter><decl><type><name>FLAC__StreamDecoder</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>,
<parameter><decl><type><name>FLAC__StreamDecoderReadCallback</name></type> <name>read_callback</name></decl></parameter>,
<parameter><decl><type><name>FLAC__StreamDecoderSeekCallback</name></type> <name>seek_callback</name></decl></parameter>,
<parameter><decl><type><name>FLAC__StreamDecoderTellCallback</name></type> <name>tell_callback</name></decl></parameter>,
<parameter><decl><type><name>FLAC__StreamDecoderLengthCallback</name></type> <name>length_callback</name></decl></parameter>,
<parameter><decl><type><name>FLAC__StreamDecoderEofCallback</name></type> <name>eof_callback</name></decl></parameter>,
<parameter><decl><type><name>FLAC__StreamDecoderWriteCallback</name></type> <name>write_callback</name></decl></parameter>,
<parameter><decl><type><name>FLAC__StreamDecoderMetadataCallback</name></type> <name>metadata_callback</name></decl></parameter>,
<parameter><decl><type><name>FLAC__StreamDecoderErrorCallback</name></type> <name>error_callback</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>client_data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>FLAC__bool</name></type> (<modifier>*</modifier><name>FLAC__stream_decoder_process_single</name>)<parameter_list>(<parameter><decl><type><name>FLAC__StreamDecoder</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>FLAC__bool</name></type> (<modifier>*</modifier><name>FLAC__stream_decoder_process_until_end_of_metadata</name>)<parameter_list>(<parameter><decl><type><name>FLAC__StreamDecoder</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>FLAC__bool</name></type> (<modifier>*</modifier><name>FLAC__stream_decoder_process_until_end_of_stream</name>)<parameter_list>(<parameter><decl><type><name>FLAC__StreamDecoder</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>FLAC__bool</name></type> (<modifier>*</modifier><name>FLAC__stream_decoder_seek_absolute</name>)<parameter_list>(<parameter><decl><type><name>FLAC__StreamDecoder</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>, <parameter><decl><type><name>FLAC__uint64</name></type> <name>sample</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>FLAC__bool</name></type> (<modifier>*</modifier><name>FLAC__stream_decoder_flush</name>)<parameter_list>(<parameter><decl><type><name>FLAC__StreamDecoder</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>FLAC__bool</name></type> (<modifier>*</modifier><name>FLAC__stream_decoder_finish</name>)<parameter_list>(<parameter><decl><type><name>FLAC__StreamDecoder</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name>lib</name></decl>;</struct>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_ACODEC_FLAC_DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>shutdown_dynlib</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flac_dll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_close_library</name><argument_list>(<argument><expr><name>flac_dll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flac_dll</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flac_virgin</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>init_dynlib</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_ACODEC_FLAC_DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>flac_dll</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flac_virgin</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flac_virgin</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flac_dll</name> <operator>=</operator> <call><name>_al_open_library</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_ACODEC_FLAC_DLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flac_dll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not load "</literal> <name>ALLEGRO_CFG_ACODEC_FLAC_DLL</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_add_exit_func</name><argument_list>(<argument><expr><name>shutdown_dynlib</name></expr></argument>, <argument><expr><literal type="string">"shutdown_dynlib"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITSYM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { lib.x = _al_import_symbol(flac_dll, #x); if (lib.x == 0) { ALLEGRO_ERROR("undefined symbol in lib structure: " #x "\n"); return false; } } while(0)</cpp:value></cpp:define>








<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITSYM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(lib.x = (x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lib</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>FLAC__stream_decoder_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>FLAC__stream_decoder_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>FLAC__stream_decoder_init_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>FLAC__stream_decoder_process_single</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>FLAC__stream_decoder_process_until_end_of_metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>FLAC__stream_decoder_process_until_end_of_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>FLAC__stream_decoder_seek_absolute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>FLAC__stream_decoder_flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>FLAC__stream_decoder_finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INITSYM</name></cpp:undef>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>FLAC__StreamDecoderReadStatus</name></type> <name>read_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FLAC__StreamDecoder</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>,
<parameter><decl><type><name>FLAC__byte</name></type> <name><name>buffer</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FLACFILE</name> <modifier>*</modifier></type><name>ff</name> <init>= <expr><operator>(</operator><name>FLACFILE</name> <operator>*</operator><operator>)</operator><name>dptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fh</name> <init>= <expr><name><name>ff</name><operator>-&gt;</operator><name>fh</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>decoder</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bytes</name> <operator>=</operator> <call><name>al_fread</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>*</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>al_ferror</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FLAC__STREAM_DECODER_READ_STATUS_ABORT</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>bytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>FLAC__STREAM_DECODER_READ_STATUS_CONTINUE</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>FLAC__STREAM_DECODER_READ_STATUS_ABORT</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>FLAC__StreamDecoderSeekStatus</name></type> <name>seek_callback</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>FLAC__StreamDecoder</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>,
<parameter><decl><type><name>FLAC__uint64</name></type> <name>absolute_byte_offset</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FLACFILE</name> <modifier>*</modifier></type><name>ff</name> <init>= <expr><operator>(</operator><name>FLACFILE</name> <operator>*</operator><operator>)</operator><name>dptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fh</name> <init>= <expr><name><name>ff</name><operator>-&gt;</operator><name>fh</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>decoder</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_fseek</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>absolute_byte_offset</name></expr></argument>, <argument><expr><name>ALLEGRO_SEEK_SET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FLAC__STREAM_DECODER_SEEK_STATUS_ERROR</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>FLAC__STREAM_DECODER_SEEK_STATUS_OK</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>FLAC__StreamDecoderTellStatus</name></type> <name>tell_callback</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>FLAC__StreamDecoder</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>,
<parameter><decl><type><name>FLAC__uint64</name> <modifier>*</modifier></type><name>absolute_byte_offset</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FLACFILE</name> <modifier>*</modifier></type><name>ff</name> <init>= <expr><operator>(</operator><name>FLACFILE</name> <operator>*</operator><operator>)</operator><name>dptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fh</name> <init>= <expr><name><name>ff</name><operator>-&gt;</operator><name>fh</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>decoder</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>al_ftell</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FLAC__STREAM_DECODER_TELL_STATUS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>absolute_byte_offset</name> <operator>=</operator> <operator>(</operator><name>FLAC__uint64</name><operator>)</operator><name>pos</name></expr>;</expr_stmt>
<return>return <expr><name>FLAC__STREAM_DECODER_TELL_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>FLAC__StreamDecoderLengthStatus</name></type> <name>length_callback</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>FLAC__StreamDecoder</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>,
<parameter><decl><type><name>FLAC__uint64</name> <modifier>*</modifier></type><name>stream_length</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FLACFILE</name> <modifier>*</modifier></type><name>ff</name> <init>= <expr><operator>(</operator><name>FLACFILE</name> <operator>*</operator><operator>)</operator><name>dptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fh</name> <init>= <expr><name><name>ff</name><operator>-&gt;</operator><name>fh</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>decoder</name></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>stream_length</name> <operator>=</operator> <operator>(</operator><name>FLAC__uint64</name><operator>)</operator><call><name>al_fsize</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FLAC__STREAM_DECODER_LENGTH_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>FLAC__bool</name></type> <name>eof_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FLAC__StreamDecoder</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FLACFILE</name> <modifier>*</modifier></type><name>ff</name> <init>= <expr><operator>(</operator><name>FLACFILE</name> <operator>*</operator><operator>)</operator><name>dptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fh</name> <init>= <expr><name><name>ff</name><operator>-&gt;</operator><name>fh</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>decoder</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_feof</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>metadata_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FLAC__StreamDecoder</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FLAC__StreamMetadata</name> <modifier>*</modifier></type><name>metadata</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>client_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FLACFILE</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>(</operator><name>FLACFILE</name> <operator>*</operator><operator>)</operator><name>client_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>decoder</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>metadata</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FLAC__METADATA_TYPE_STREAMINFO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>total_samples</name></name> <operator>=</operator> <name><name>metadata</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>stream_info</name><operator>.</operator><name>total_samples</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>metadata</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>stream_info</name><operator>.</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>metadata</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>stream_info</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>sample_size</name></name> <operator>=</operator> <name><name>metadata</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>stream_info</name><operator>.</operator><name>bits_per_sample</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>error_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FLAC__StreamDecoder</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>,
<parameter><decl><type><name>FLAC__StreamDecoderErrorStatus</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>client_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>decoder</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>client_data</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_ACODEC_FLAC_DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>status</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Got FLAC error callback\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Got FLAC error callback: %s\n"</literal></expr></argument>,
<argument><expr><name><name>FLAC__StreamDecoderErrorStatusString</name><index>[<expr><name>status</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>FLAC__StreamDecoderWriteStatus</name></type> <name>write_callback</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>FLAC__StreamDecoder</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FLAC__Frame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FLAC__int32</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>buffer</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>client_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FLACFILE</name> <modifier>*</modifier></type><name>ff</name> <init>= <expr><operator>(</operator><name>FLACFILE</name> <operator>*</operator><operator>)</operator> <name>client_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>blocksize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bytes</name> <init>= <expr><name>len</name> <operator>*</operator> <name><name>ff</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>ff</name><operator>-&gt;</operator><name>sample_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FLAC__uint8</name> <modifier>*</modifier></type><name>buf8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FLAC__int16</name> <modifier>*</modifier></type><name>buf16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>buf32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channel_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out_index</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ff</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>+</operator> <name>bytes</name> <operator>&gt;</operator> <name><name>ff</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ff</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>al_realloc</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>ff</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>+</operator> <name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name><name>ff</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>+</operator> <name>bytes</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>buf8</name> <operator>=</operator> <operator>(</operator><name>FLAC__uint8</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>ff</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>ff</name><operator>-&gt;</operator><name>buffer_pos</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>buf16</name> <operator>=</operator> <operator>(</operator><name>FLAC__int16</name> <operator>*</operator><operator>)</operator> <name>buf8</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf32</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <name>buf8</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>decoder</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>client_data</name></expr>;</expr_stmt>



<expr_stmt><expr><name>out_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>ff</name><operator>-&gt;</operator><name>sample_size</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<for>for <control>(<init><expr><name>sample_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sample_index</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>sample_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>channel_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
<condition><expr><name>channel_index</name> <operator>&lt;</operator> <name><name>ff</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition>
<incr><expr><name>channel_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buf8</name><index>[<expr><name>out_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<operator>(</operator><name>FLAC__uint8</name><operator>)</operator> <name><name>buffer</name><index>[<expr><name>channel_index</name></expr>]</index><index>[<expr><name>sample_index</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>
<for>for <control>(<init><expr><name>sample_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sample_index</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>sample_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>channel_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel_index</name> <operator>&lt;</operator> <name><name>ff</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition>
<incr><expr><name>channel_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buf16</name><index>[<expr><name>out_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<operator>(</operator><name>FLAC__int16</name><operator>)</operator> <name><name>buffer</name><index>[<expr><name>channel_index</name></expr>]</index><index>[<expr><name>sample_index</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>
<for>for <control>(<init><expr><name>sample_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sample_index</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>sample_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>channel_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel_index</name> <operator>&lt;</operator> <name><name>ff</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition>
<incr><expr><name>channel_index</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>




<expr_stmt><expr><name><name>buf8</name><index>[<expr><name>out_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>FLAC__uint8</name><operator>)</operator> <operator>(</operator><name><name>buffer</name><index>[<expr><name>channel_index</name></expr>]</index><index>[<expr><name>sample_index</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf8</name><index>[<expr><name>out_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>FLAC__uint8</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>buffer</name><index>[<expr><name>channel_index</name></expr>]</index><index>[<expr><name>sample_index</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf8</name><index>[<expr><name>out_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>FLAC__uint8</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>buffer</name><index>[<expr><name>channel_index</name></expr>]</index><index>[<expr><name>sample_index</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>
<for>for <control>(<init><expr><name>sample_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sample_index</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>sample_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>channel_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel_index</name> <operator>&lt;</operator> <name><name>ff</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition>
<incr><expr><name>channel_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buf32</name><index>[<expr><name>out_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<operator>(</operator><name>float</name><operator>)</operator> <name><name>buffer</name><index>[<expr><name>channel_index</name></expr>]</index><index>[<expr><name>sample_index</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<break>break;</break>

<default>default:</default>

<return>return <expr><name>FLAC__STREAM_DECODER_WRITE_STATUS_ABORT</name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>ff</name><operator>-&gt;</operator><name>decoded_samples</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
<return>return <expr><name>FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>flac_close</name><parameter_list>(<parameter><decl><type><name>FLACFILE</name> <modifier>*</modifier></type><name>ff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>lib</name><operator>.</operator><name>FLAC__stream_decoder_finish</name></name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>lib</name><operator>.</operator><name>FLAC__stream_decoder_delete</name></name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>double</name></type> <name>flac_stream_get_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FLACFILE</name> <modifier>*</modifier></type><name>ff</name> <init>= <expr><operator>(</operator><name>FLACFILE</name> <operator>*</operator><operator>)</operator><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ff</name><operator>-&gt;</operator><name>streamed_samples</name></name> <operator>/</operator> <name><name>ff</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>size_t</name></type> <name>flac_stream_update</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bytes_per_sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>wanted_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>read_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>written_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>read_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FLACFILE</name> <modifier>*</modifier></type><name>ff</name> <init>= <expr><operator>(</operator><name>FLACFILE</name> <operator>*</operator><operator>)</operator><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bytes_per_sample</name> <operator>=</operator> <name><name>ff</name><operator>-&gt;</operator><name>sample_size</name></name> <operator>*</operator> <name><name>ff</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wanted_samples</name> <operator>=</operator> <name>buf_size</name> <operator>/</operator> <name>bytes_per_sample</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ff</name><operator>-&gt;</operator><name>streamed_samples</name></name> <operator>+</operator> <name>wanted_samples</name> <operator>&gt;</operator> <name><name>ff</name><operator>-&gt;</operator><name>loop_end</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ff</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>&gt;</operator> <name><name>ff</name><operator>-&gt;</operator><name>streamed_samples</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wanted_samples</name> <operator>=</operator> <name><name>ff</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>-</operator> <name><name>ff</name><operator>-&gt;</operator><name>streamed_samples</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>wanted_samples</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>read_samples</name> <operator>=</operator> <name><name>ff</name><operator>-&gt;</operator><name>decoded_samples</name></name> <operator>-</operator> <name><name>ff</name><operator>-&gt;</operator><name>streamed_samples</name></name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>read_samples</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>lib</name><operator>.</operator><name>FLAC__stream_decoder_process_single</name></name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>read_samples</name> <operator>=</operator> <name><name>ff</name><operator>-&gt;</operator><name>decoded_samples</name></name> <operator>-</operator> <name><name>ff</name><operator>-&gt;</operator><name>streamed_samples</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>read_samples</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>read_samples</name> <operator>&gt;</operator> <name>wanted_samples</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>read_samples</name> <operator>=</operator> <name>wanted_samples</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ff</name><operator>-&gt;</operator><name>streamed_samples</name></name> <operator>+=</operator> <name>read_samples</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wanted_samples</name> <operator>-=</operator> <name>read_samples</name></expr>;</expr_stmt>
<expr_stmt><expr><name>read_bytes</name> <operator>=</operator> <name>read_samples</name> <operator>*</operator> <name>bytes_per_sample</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name>written_bytes</name></expr></argument>, <argument><expr><name><name>ff</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>read_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>ff</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>read_bytes</name></expr></argument>,
<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>-</operator> <name>read_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>-=</operator> <name>read_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>written_bytes</name> <operator>+=</operator> <name>read_bytes</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>written_bytes</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>flac_stream_close</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FLACFILE</name> <modifier>*</modifier></type><name>ff</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_acodec_stop_feed_thread</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flac_close</name><argument_list>(<argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>real_seek</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sample</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FLACFILE</name> <modifier>*</modifier></type><name>ff</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>






<expr_stmt><expr><call><name><name>lib</name><operator>.</operator><name>FLAC__stream_decoder_flush</name></name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>lib</name><operator>.</operator><name>FLAC__stream_decoder_seek_absolute</name></name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><name>sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ff</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff</name><operator>-&gt;</operator><name>streamed_samples</name></name> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff</name><operator>-&gt;</operator><name>decoded_samples</name></name> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>flac_stream_seek</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FLACFILE</name> <modifier>*</modifier></type><name>ff</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>sample</name> <init>= <expr><name>time</name> <operator>*</operator> <name><name>ff</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>real_seek</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>sample</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>flac_stream_rewind</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FLACFILE</name> <modifier>*</modifier></type><name>ff</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>real_seek</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>ff</name><operator>-&gt;</operator><name>loop_start</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>flac_stream_get_length</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FLACFILE</name> <modifier>*</modifier></type><name>ff</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ff</name><operator>-&gt;</operator><name>total_samples</name></name> <operator>/</operator> <name><name>ff</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>flac_stream_set_loop</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>start</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FLACFILE</name> <modifier>*</modifier></type><name>ff</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ff</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>=</operator> <name>start</name> <operator>*</operator> <name><name>ff</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>=</operator> <name>end</name> <operator>*</operator> <name><name>ff</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FLACFILE</name> <modifier>*</modifier></type><name>flac_open</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name><modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FLACFILE</name> <modifier>*</modifier></type><name>ff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FLAC__StreamDecoderInitStatus</name></type> <name>init_status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_dynlib</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ff</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>ff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ff</name><operator>-&gt;</operator><name>decoder</name></name> <operator>=</operator> <call><name><name>lib</name><operator>.</operator><name>FLAC__stream_decoder_new</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ff</name><operator>-&gt;</operator><name>decoder</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Error allocating FLAC decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ff</name><operator>-&gt;</operator><name>fh</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ff</name><operator>-&gt;</operator><name>fh</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Error opening FLAC file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>init_status</name> <operator>=</operator> <call><name><name>lib</name><operator>.</operator><name>FLAC__stream_decoder_init_stream</name></name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><name>read_callback</name></expr></argument>,
<argument><expr><name>seek_callback</name></expr></argument>, <argument><expr><name>tell_callback</name></expr></argument>, <argument><expr><name>length_callback</name></expr></argument>, <argument><expr><name>eof_callback</name></expr></argument>,
<argument><expr><name>write_callback</name></expr></argument>, <argument><expr><name>metadata_callback</name></expr></argument>, <argument><expr><name>error_callback</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>init_status</name> <operator>!=</operator> <name>FLAC__STREAM_DECODER_INIT_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_ACODEC_FLAC_DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Error initializing FLAC decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Error initializing FLAC decoder: %s\n"</literal></expr></argument>,
<argument><expr><name><name>FLAC__StreamDecoderInitStatusString</name><index>[<expr><name>init_status</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>lib</name><operator>.</operator><name>FLAC__stream_decoder_process_until_end_of_metadata</name></name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ff</name><operator>-&gt;</operator><name>sample_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Error: don't support sub 8-bit sizes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Loaded FLAC sample with properties:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">" channels %d\n"</literal></expr></argument>, <argument><expr><name><name>ff</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">" sample_size %d\n"</literal></expr></argument>, <argument><expr><name><name>ff</name><operator>-&gt;</operator><name>sample_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">" rate %.f\n"</literal></expr></argument>, <argument><expr><name><name>ff</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">" total_samples %ld\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>ff</name><operator>-&gt;</operator><name>total_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ff</name></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ff</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ff</name><operator>-&gt;</operator><name>decoder</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>lib</name><operator>.</operator><name>FLAC__stream_decoder_delete</name></name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>_al_load_flac</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to open %s for reading.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>spl</name> <operator>=</operator> <call><name>_al_load_flac_f</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>spl</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>_al_load_flac_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FLACFILE</name> <modifier>*</modifier></type><name>ff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ff</name> <operator>=</operator> <call><name>flac_open</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ff</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ff</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name><name>ff</name><operator>-&gt;</operator><name>total_samples</name></name> <operator>*</operator> <name><name>ff</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>ff</name><operator>-&gt;</operator><name>sample_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>lib</name><operator>.</operator><name>FLAC__stream_decoder_process_until_end_of_stream</name></name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <call><name>al_create_sample</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>ff</name><operator>-&gt;</operator><name>total_samples</name></name></expr></argument>, <argument><expr><name><name>ff</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>,
<argument><expr><call><name>_al_word_size_to_depth_conf</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>sample_size</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_al_count_to_channel_conf</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sample</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to create a sample.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>flac_close</name><argument_list>(<argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>sample</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>_al_load_flac_audio_stream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to open %s for reading.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>_al_load_flac_audio_stream_f</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buffer_count</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>stream</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>_al_load_flac_audio_stream_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name><modifier>*</modifier></type> <name>f</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FLACFILE</name> <modifier>*</modifier></type><name>ff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ff</name> <operator>=</operator> <call><name>flac_open</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ff</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>al_create_audio_stream</name><argument_list>(<argument><expr><name>buffer_count</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name><name>ff</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>,
<argument><expr><call><name>_al_word_size_to_depth_conf</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>sample_size</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_al_count_to_channel_conf</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>ff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>=</operator> <name><name>ff</name><operator>-&gt;</operator><name>total_samples</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>feeder</name></name> <operator>=</operator> <name>flac_stream_update</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>unload_feeder</name></name> <operator>=</operator> <name>flac_stream_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>rewind_feeder</name></name> <operator>=</operator> <name>flac_stream_rewind</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>seek_feeder</name></name> <operator>=</operator> <name>flac_stream_seek</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>get_feeder_position</name></name> <operator>=</operator> <name>flac_stream_get_position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>get_feeder_length</name></name> <operator>=</operator> <name>flac_stream_get_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>set_feeder_loop</name></name> <operator>=</operator> <name>flac_stream_set_loop</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_acodec_start_feed_thread</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to create stream.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flac_close</name><argument_list>(<argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>stream</name></expr>;</return>
</block_content>}</block></function>



</unit>
