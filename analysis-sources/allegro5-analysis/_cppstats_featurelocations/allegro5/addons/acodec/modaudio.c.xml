<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\acodec\modaudio.c">





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_FILE_OFFSET_BITS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_acodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_exitfunc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"helper.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_ACODEC_MODAUDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> configuration problem, ALLEGRO_CFG_ACODEC_MODAUDIO not set</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUMB_DECLARE_DEPRECATED</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dumb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"acodec"</literal></argument>)</argument_list></macro>








<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>init_libdumb</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>modaudio_stream_update</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>modaudio_stream_rewind</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>modaudio_stream_seek</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>time</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>modaudio_stream_get_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>modaudio_stream_get_length</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>modaudio_stream_set_loop</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>end</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>modaudio_stream_close</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>;</function_decl>


<typedef>typedef <type><struct>struct <name>MOD_FILE</name>
<block>{
<decl_stmt><decl><type><name>DUH</name> <modifier>*</modifier></type><name>duh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DUH_SIGRENDERER</name> <modifier>*</modifier></type><name>sig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>loop_start</name></decl>, <name>loop_end</name>;</decl_stmt>
}</block></struct></type> <name>MOD_FILE</name>;</typedef>


<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>libdumb_loaded</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_ACODEC_DUMB_DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>dumb_dll</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>DUMB_MAJOR_VERSION</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">2</literal></expr></cpp:if>
<typedef>typedef <type><name>long</name></type> <name>dumb_off_t</name>;</typedef>
<typedef>typedef <type><name>long</name></type> <name>dumb_ssize_t</name>;</typedef>
<typedef>typedef <type><name>long</name></type> <name>_al_dumb_size_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>size_t</name></type> <name>_al_dumb_size_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct><specifier>static</specifier> struct
<block>{
<function_decl><type><name>long</name></type> (<modifier>*</modifier><name>duh_sigrenderer_get_position</name>)<parameter_list>(<parameter><decl><type><name>DUH_SIGRENDERER</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>duh_end_sigrenderer</name>)<parameter_list>(<parameter><decl><type><name>DUH_SIGRENDERER</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>unload_duh</name>)<parameter_list>(<parameter><decl><type><name>DUH</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DUH_SIGRENDERER</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>duh_start_sigrenderer</name>)<parameter_list>(<parameter><decl><type><name>DUH</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>dumb_off_t</name></type> (<modifier>*</modifier><name>duh_get_length</name>)<parameter_list>(<parameter><decl><type><name>DUH</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dumb_exit</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DUMB_IT_SIGRENDERER</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>duh_get_it_sigrenderer</name>)<parameter_list>(<parameter><decl><type><name>DUH_SIGRENDERER</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dumb_it_set_loop_callback</name>)<parameter_list>(<parameter><decl><type><name>DUMB_IT_SIGRENDERER</name> <modifier>*</modifier></type></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dumb_it_set_xm_speed_zero_callback</name>)<parameter_list>(<parameter><decl><type><name>DUMB_IT_SIGRENDERER</name> <modifier>*</modifier></type></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>dumb_it_callback_terminate</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>DUMB_MAJOR_VERSION</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">2</literal></expr></cpp:if>






<function_decl><type><name>long</name></type> (<modifier>*</modifier><name>duh_render</name>)<parameter_list>(<parameter><decl><type><name>DUH_SIGRENDERER</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>register_dumbfile_system</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DUMBFILE_SYSTEM</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DUMBFILE</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>dumbfile_open_ex</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DUMBFILE_SYSTEM</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DUH</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>dumb_read_any</name>)<parameter_list>(<parameter><decl><type><name>DUMBFILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>long</name></type> (<modifier>*</modifier><name>duh_render</name>)<parameter_list>(<parameter><decl><type><name>DUH_SIGRENDERER</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>register_dumbfile_system</name>)<parameter_list>(<parameter><decl><type><name>DUMBFILE_SYSTEM</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DUMBFILE</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>dumbfile_open_ex</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>DUMBFILE_SYSTEM</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DUH</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>dumb_read_mod</name>)<parameter_list>(<parameter><decl><type><name>DUMBFILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DUH</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>dumb_read_it</name>)<parameter_list>(<parameter><decl><type><name>DUMBFILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DUH</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>dumb_read_xm</name>)<parameter_list>(<parameter><decl><type><name>DUMBFILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DUH</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>dumb_read_s3m</name>)<parameter_list>(<parameter><decl><type><name>DUMBFILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block> <decl><name>lib</name></decl>;</struct>


<decl_stmt><decl><type><specifier>static</specifier> <name>DUMBFILE_SYSTEM</name></type> <name>dfs</name></decl>, <decl><type ref="prev"/><name>dfs_f</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>dfs_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dfs_skip</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>dumb_off_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>al_fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>ALLEGRO_SEEK_CUR</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dfs_getc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>al_fgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>dumb_ssize_t</name></type> <name>dfs_getnc</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>_al_dumb_size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dfs_close</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>f</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>DUMB_MAJOR_VERSION</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">2</literal></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dfs_seek</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>dumb_off_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>al_fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>ALLEGRO_SEEK_SET</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>dumb_off_t</name></type> <name>dfs_get_size</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>al_fsize</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>size_t</name></type> <name>modaudio_stream_update</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MOD_FILE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>df</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sample_size</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DUMB_IT_SIGRENDERER</name> <modifier>*</modifier></type><name>it_sig</name> <init>= <expr><call><name><name>lib</name><operator>.</operator><name>duh_get_it_sigrenderer</name></name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>sig</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>it_sig</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>lib</name><operator>.</operator><name>dumb_it_set_loop_callback</name></name><argument_list>(<argument><expr><name>it_sig</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>loop</name></name> <operator>==</operator> <name>_ALLEGRO_PLAYMODE_STREAM_ONCE</name></expr>
?</condition><then> <expr><name><name>lib</name><operator>.</operator><name>dumb_it_callback_terminate</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>written</name> <operator>&lt;</operator> <name>buf_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>written</name> <operator>+=</operator> <call><name><name>lib</name><operator>.</operator><name>duh_render</name></name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>sig</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">65536.0</literal> <operator>/</operator> <literal type="number">44100.0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>buf_size</name> <operator>-</operator> <name>written</name><operator>)</operator> <operator>/</operator> <name>sample_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name><operator>)</operator><index>[<expr><name>written</name></expr>]</index><operator>)</operator></expr></argument>)</argument_list></call> <operator>*</operator> <name>sample_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>loop</name></name> <operator>==</operator> <name>_ALLEGRO_PLAYMODE_STREAM_ONCE</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>written</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buf_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>written</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>modaudio_stream_close</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MOD_FILE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>df</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_acodec_stop_feed_thread</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>lib</name><operator>.</operator><name>duh_end_sigrenderer</name></name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>sig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>lib</name><operator>.</operator><name>unload_duh</name></name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>duh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>df</name><operator>-&gt;</operator><name>fh</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>modaudio_stream_rewind</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MOD_FILE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>df</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>lib</name><operator>.</operator><name>duh_end_sigrenderer</name></name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>sig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>df</name><operator>-&gt;</operator><name>sig</name></name> <operator>=</operator> <call><name><name>lib</name><operator>.</operator><name>duh_start_sigrenderer</name></name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>duh</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>df</name><operator>-&gt;</operator><name>loop_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>modaudio_stream_seek</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MOD_FILE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>df</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>lib</name><operator>.</operator><name>duh_end_sigrenderer</name></name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>sig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>df</name><operator>-&gt;</operator><name>sig</name></name> <operator>=</operator> <call><name><name>lib</name><operator>.</operator><name>duh_start_sigrenderer</name></name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>duh</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>time</name> <operator>*</operator> <literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>modaudio_stream_get_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MOD_FILE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>df</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>lib</name><operator>.</operator><name>duh_sigrenderer_get_position</name></name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>sig</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">65536.0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>modaudio_stream_get_length</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MOD_FILE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>df</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>df</name><operator>-&gt;</operator><name>length</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>modaudio_stream_set_loop</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MOD_FILE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>df</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>df</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>=</operator> <name>start</name> <operator>*</operator> <literal type="number">65536</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>df</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>=</operator> <name>end</name> <operator>*</operator> <literal type="number">65536</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>modaudio_stream_init</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name><modifier>*</modifier></type> <name>f</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>DUMB_MAJOR_VERSION</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">2</literal></expr></cpp:if>

, <parameter><function_decl><type><name>DUH</name> <modifier>*</modifier></type>(<name>loader</name>)<parameter_list>(<parameter><decl><type><name>DUMBFILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DUMBFILE</name> <modifier>*</modifier></type><name>df</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DUH_SIGRENDERER</name> <modifier>*</modifier></type><name>sig</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DUH</name> <modifier>*</modifier></type><name>duh</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DUMB_IT_SIGRENDERER</name> <modifier>*</modifier></type><name>it_sig</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>start_pos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>df</name> <operator>=</operator> <call><name><name>lib</name><operator>.</operator><name>dumbfile_open_ex</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dfs_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>df</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"dumbfile_open_ex failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <call><name>al_ftell</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>DUMB_MAJOR_VERSION</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">2</literal></expr></cpp:if>










<expr_stmt><expr><name>duh</name> <operator>=</operator> <call><name><name>lib</name><operator>.</operator><name>dumb_read_any</name></name><argument_list>(<argument><expr><name>df</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>duh</name> <operator>=</operator> <call><name>loader</name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>duh</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to create DUH.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sig</name> <operator>=</operator> <call><name><name>lib</name><operator>.</operator><name>duh_start_sigrenderer</name></name><argument_list>(<argument><expr><name>duh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sig</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"duh_start_sigrenderer failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>it_sig</name> <operator>=</operator> <call><name><name>lib</name><operator>.</operator><name>duh_get_it_sigrenderer</name></name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>it_sig</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>lib</name><operator>.</operator><name>dumb_it_set_xm_speed_zero_callback</name></name><argument_list>(<argument><expr><name>it_sig</name></expr></argument>, <argument><expr><name><name>lib</name><operator>.</operator><name>dumb_it_callback_terminate</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>al_create_audio_stream</name><argument_list>(<argument><expr><name>buffer_count</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><literal type="number">44100</literal></expr></argument>,
<argument><expr><name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr></argument>, <argument><expr><name>ALLEGRO_CHANNEL_CONF_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>MOD_FILE</name> <modifier>*</modifier></type><name>mf</name> <init>= <expr><call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MOD_FILE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>duh</name></name> <operator>=</operator> <name>duh</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>sig</name></name> <operator>=</operator> <name>sig</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>fh</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name><name>lib</name><operator>.</operator><name>duh_get_length</name></name><argument_list>(<argument><expr><name>duh</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">65536.0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>mf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>feeder</name></name> <operator>=</operator> <name>modaudio_stream_update</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>unload_feeder</name></name> <operator>=</operator> <name>modaudio_stream_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>rewind_feeder</name></name> <operator>=</operator> <name>modaudio_stream_rewind</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>seek_feeder</name></name> <operator>=</operator> <name>modaudio_stream_seek</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>get_feeder_position</name></name> <operator>=</operator> <name>modaudio_stream_get_position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>get_feeder_length</name></name> <operator>=</operator> <name>modaudio_stream_get_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>set_feeder_loop</name></name> <operator>=</operator> <name>modaudio_stream_set_loop</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_acodec_start_feed_thread</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to create stream.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Error</name>;</goto>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>stream</name></expr>;</return>

<label><name>Error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>sig</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>lib</name><operator>.</operator><name>duh_end_sigrenderer</name></name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>duh</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>lib</name><operator>.</operator><name>unload_duh</name></name><argument_list>(<argument><expr><name>duh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>start_pos</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>ALLEGRO_SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>shutdown_libdumb</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>libdumb_loaded</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>lib</name><operator>.</operator><name>dumb_exit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>libdumb_loaded</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_ACODEC_DUMB_DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>dumb_dll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_close_library</name><argument_list>(<argument><expr><name>dumb_dll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dumb_dll</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>init_libdumb</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>libdumb_loaded</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_ACODEC_DUMB_DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dumb_dll</name> <operator>=</operator> <call><name>_al_open_library</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_ACODEC_DUMB_DLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dumb_dll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not load "</literal> <name>ALLEGRO_CFG_ACODEC_DUMB_DLL</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITSYM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { lib.x = _al_import_symbol(dumb_dll, #x); if (lib.x == 0) { ALLEGRO_ERROR("undefined symbol in lib structure: " #x "\n"); return false; } } while(0)</cpp:value></cpp:define>








<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITSYM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(lib.x = (x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>_al_add_exit_func</name><argument_list>(<argument><expr><name>shutdown_libdumb</name></expr></argument>, <argument><expr><literal type="string">"shutdown_libdumb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lib</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>duh_render</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>duh_sigrenderer_get_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>duh_end_sigrenderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>unload_duh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>duh_start_sigrenderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>dumbfile_open_ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>duh_get_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>dumb_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>register_dumbfile_system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>duh_get_it_sigrenderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>dumb_it_set_loop_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>dumb_it_set_xm_speed_zero_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>dumb_it_callback_terminate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dfs</name><operator>.</operator><name>open</name></name> <operator>=</operator> <name>dfs_open</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dfs</name><operator>.</operator><name>skip</name></name> <operator>=</operator> <name>dfs_skip</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dfs</name><operator>.</operator><name>getc</name></name> <operator>=</operator> <name>dfs_getc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dfs</name><operator>.</operator><name>getnc</name></name> <operator>=</operator> <name>dfs_getnc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dfs</name><operator>.</operator><name>close</name></name> <operator>=</operator> <name>dfs_close</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>DUMB_MAJOR_VERSION</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">2</literal></expr></cpp:if>
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>dumb_read_any</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dfs</name><operator>.</operator><name>seek</name></name> <operator>=</operator> <name>dfs_seek</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dfs</name><operator>.</operator><name>get_size</name></name> <operator>=</operator> <name>dfs_get_size</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>dumb_read_it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>dumb_read_xm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>dumb_read_s3m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>dumb_read_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name><name>lib</name><operator>.</operator><name>register_dumbfile_system</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>dfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>dfs_f</name> <operator>=</operator> <name>dfs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dfs_f</name><operator>.</operator><name>open</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dfs_f</name><operator>.</operator><name>close</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>libdumb_loaded</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>DUMB_MAJOR_VERSION</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">2</literal></expr></cpp:if>

<function><type><specifier>static</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>load_dumb_audio_stream_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_libdumb</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>modaudio_stream_init</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buffer_count</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>load_dumb_audio_stream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>load_dumb_audio_stream_f</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buffer_count</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>MOD_FILE</name> <operator>*</operator><operator>)</operator><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name><operator>)</operator><operator>-&gt;</operator><name>fh</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<return>return <expr><name>stream</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>








<function><type><specifier>static</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>load_mod_audio_stream_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_libdumb</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>modaudio_stream_init</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buffer_count</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name><name>lib</name><operator>.</operator><name>dumb_read_mod</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>load_it_audio_stream_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_libdumb</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>modaudio_stream_init</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buffer_count</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name><name>lib</name><operator>.</operator><name>dumb_read_it</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>load_xm_audio_stream_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_libdumb</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>modaudio_stream_init</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buffer_count</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name><name>lib</name><operator>.</operator><name>dumb_read_xm</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>load_s3m_audio_stream_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_libdumb</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>modaudio_stream_init</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buffer_count</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name><name>lib</name><operator>.</operator><name>dumb_read_s3m</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>load_mod_audio_stream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to open %s for reading.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>load_mod_audio_stream_f</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buffer_count</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>MOD_FILE</name> <operator>*</operator><operator>)</operator><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name><operator>)</operator><operator>-&gt;</operator><name>fh</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<return>return <expr><name>stream</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>load_it_audio_stream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to open %s for reading.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>load_it_audio_stream_f</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buffer_count</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>MOD_FILE</name> <operator>*</operator><operator>)</operator><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name><operator>)</operator><operator>-&gt;</operator><name>fh</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<return>return <expr><name>stream</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>load_xm_audio_stream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to open %s for reading.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>load_xm_audio_stream_f</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buffer_count</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>MOD_FILE</name> <operator>*</operator><operator>)</operator><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name><operator>)</operator><operator>-&gt;</operator><name>fh</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<return>return <expr><name>stream</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>load_s3m_audio_stream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to open %s for reading.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>load_s3m_audio_stream_f</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buffer_count</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>MOD_FILE</name> <operator>*</operator><operator>)</operator><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name><operator>)</operator><operator>-&gt;</operator><name>fh</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<return>return <expr><name>stream</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>bool</name></type> <name>_al_register_dumb_loaders</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>DUMB_MAJOR_VERSION</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">2</literal></expr></cpp:if>






<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader</name><argument_list>(<argument><expr><literal type="string">".669"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader_f</name><argument_list>(<argument><expr><literal type="string">".669"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader</name><argument_list>(<argument><expr><literal type="string">".amf"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader_f</name><argument_list>(<argument><expr><literal type="string">".amf"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader</name><argument_list>(<argument><expr><literal type="string">".asy"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader_f</name><argument_list>(<argument><expr><literal type="string">".asy"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader</name><argument_list>(<argument><expr><literal type="string">".it"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader_f</name><argument_list>(<argument><expr><literal type="string">".it"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader</name><argument_list>(<argument><expr><literal type="string">".mod"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader_f</name><argument_list>(<argument><expr><literal type="string">".mod"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader</name><argument_list>(<argument><expr><literal type="string">".mtm"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader_f</name><argument_list>(<argument><expr><literal type="string">".mtm"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader</name><argument_list>(<argument><expr><literal type="string">".okt"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader_f</name><argument_list>(<argument><expr><literal type="string">".okt"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader</name><argument_list>(<argument><expr><literal type="string">".psm"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader_f</name><argument_list>(<argument><expr><literal type="string">".psm"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader</name><argument_list>(<argument><expr><literal type="string">".ptm"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader_f</name><argument_list>(<argument><expr><literal type="string">".ptm"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader</name><argument_list>(<argument><expr><literal type="string">".riff"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader_f</name><argument_list>(<argument><expr><literal type="string">".riff"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader</name><argument_list>(<argument><expr><literal type="string">".s3m"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader_f</name><argument_list>(<argument><expr><literal type="string">".s3m"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader</name><argument_list>(<argument><expr><literal type="string">".stm"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader_f</name><argument_list>(<argument><expr><literal type="string">".stm"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader</name><argument_list>(<argument><expr><literal type="string">".xm"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader_f</name><argument_list>(<argument><expr><literal type="string">".xm"</literal></expr></argument>, <argument><expr><name>load_dumb_audio_stream_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>





<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader</name><argument_list>(<argument><expr><literal type="string">".xm"</literal></expr></argument>, <argument><expr><name>load_xm_audio_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader_f</name><argument_list>(<argument><expr><literal type="string">".xm"</literal></expr></argument>, <argument><expr><name>load_xm_audio_stream_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader</name><argument_list>(<argument><expr><literal type="string">".it"</literal></expr></argument>, <argument><expr><name>load_it_audio_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader_f</name><argument_list>(<argument><expr><literal type="string">".it"</literal></expr></argument>, <argument><expr><name>load_it_audio_stream_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader</name><argument_list>(<argument><expr><literal type="string">".mod"</literal></expr></argument>, <argument><expr><name>load_mod_audio_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader_f</name><argument_list>(<argument><expr><literal type="string">".mod"</literal></expr></argument>, <argument><expr><name>load_mod_audio_stream_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader</name><argument_list>(<argument><expr><literal type="string">".s3m"</literal></expr></argument>, <argument><expr><name>load_s3m_audio_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>al_register_audio_stream_loader_f</name><argument_list>(<argument><expr><literal type="string">".s3m"</literal></expr></argument>, <argument><expr><name>load_s3m_audio_stream_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


</unit>
