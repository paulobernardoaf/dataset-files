<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\acodec\wav.c">




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"helper.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"wav"</literal></argument>)</argument_list></macro>


<typedef>typedef <type><struct>struct <name>WAVFILE</name>
<block>{
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>dpos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>freq</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>short</name></type> <name>bits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>short</name></type> <name>channels</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>sample_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>samples</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>double</name></type> <name>loop_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>loop_end</name></decl>;</decl_stmt>
}</block></struct></type> <name>WAVFILE</name>;</typedef>







<function><type><specifier>static</specifier> <name>WAVFILE</name> <modifier>*</modifier></type><name>wav_open</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WAVFILE</name> <modifier>*</modifier></type><name>wavfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>wav_open_error</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>wavfile</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WAVFILE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wavfile</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to allocate WAVFILE.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>wavfile</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wavfile</name><operator>-&gt;</operator><name>freq</name></name> <operator>=</operator> <literal type="number">22050</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wavfile</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wavfile</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unexpected EOF while reading the header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>wav_open_error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"RIFF"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>buffer</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"WAVE"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Bad magic number.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>wav_open_error</name>;</goto>
</block_content>}</block></if></if_stmt>




<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>pcm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unexpected EOF while reading RIFF type.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>wav_open_error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"fmt "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>al_fread32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Bad length: %d.\n"</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>wav_open_error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>pcm</name> <operator>=</operator> <call><name>al_fread16le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pcm</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Bad PCM value: %d.\n"</literal></expr></argument>, <argument><expr><name>pcm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>wav_open_error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>wavfile</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <call><name>al_fread16le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wavfile</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>wavfile</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Bad number of channels: %d.\n"</literal></expr></argument>, <argument><expr><name><name>wavfile</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>wav_open_error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>wavfile</name><operator>-&gt;</operator><name>freq</name></name> <operator>=</operator> <call><name>al_fread32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>al_fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>ALLEGRO_SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><name><name>wavfile</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <call><name>al_fread16le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wavfile</name><operator>-&gt;</operator><name>bits</name></name> <operator>!=</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>wavfile</name><operator>-&gt;</operator><name>bits</name></name> <operator>!=</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Bad number of bits: %d.\n"</literal></expr></argument>, <argument><expr><name><name>wavfile</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>wav_open_error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>ALLEGRO_SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Bad RIFF type.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Ignoring chunk: %c%c%c%c\n"</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>al_fread32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>ALLEGRO_SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name><name>wavfile</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <call><name>al_fread32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wavfile</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wavfile</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <operator>(</operator><name><name>wavfile</name><operator>-&gt;</operator><name>samples</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wavfile</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wavfile</name><operator>-&gt;</operator><name>samples</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>wavfile</name><operator>-&gt;</operator><name>sample_size</name></name> <operator>=</operator> <name><name>wavfile</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>wavfile</name><operator>-&gt;</operator><name>bits</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wavfile</name><operator>-&gt;</operator><name>dpos</name></name> <operator>=</operator> <call><name>al_ftell</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>wavfile</name></expr>;</return>

<label><name>wav_open_error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>wavfile</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>wavfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>size_t</name></type> <name>wav_read</name><parameter_list>(<parameter><decl><type><name>WAVFILE</name> <modifier>*</modifier></type><name>wavfile</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cur_samples</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>wavfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_samples</name> <operator>=</operator> <operator>(</operator><call><name>al_ftell</name><argument_list>(<argument><expr><name><name>wavfile</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>wavfile</name><operator>-&gt;</operator><name>dpos</name></name><operator>)</operator> <operator>/</operator> <name><name>wavfile</name><operator>-&gt;</operator><name>sample_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cur_samples</name> <operator>+</operator> <name>samples</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>wavfile</name><operator>-&gt;</operator><name>samples</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>samples</name> <operator>=</operator> <name><name>wavfile</name><operator>-&gt;</operator><name>samples</name></name> <operator>-</operator> <name>cur_samples</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>al_fread</name><argument_list>(<argument><expr><name><name>wavfile</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>samples</name> <operator>*</operator> <name><name>wavfile</name><operator>-&gt;</operator><name>sample_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wavfile</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>end</name> <init>= <expr><name>p</name> <operator>+</operator> <operator>(</operator><name>bytes_read</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>bytes_read</name> <operator>/</operator> <name><name>wavfile</name><operator>-&gt;</operator><name>sample_size</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>wav_close</name><parameter_list>(<parameter><decl><type><name>WAVFILE</name> <modifier>*</modifier></type><name>wavfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>wavfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>wavfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>wav_stream_seek</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WAVFILE</name> <modifier>*</modifier></type><name>wavfile</name> <init>= <expr><operator>(</operator><name>WAVFILE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>align</name> <init>= <expr><operator>(</operator><name><name>wavfile</name><operator>-&gt;</operator><name>bits</name></name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name><name>wavfile</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>cpos</name> <init>= <expr><name>time</name> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>wavfile</name><operator>-&gt;</operator><name>freq</name></name> <operator>*</operator> <operator>(</operator><name><name>wavfile</name><operator>-&gt;</operator><name>bits</name></name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name><name>wavfile</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>time</name> <operator>&gt;=</operator> <name><name>wavfile</name><operator>-&gt;</operator><name>loop_end</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cpos</name> <operator>+=</operator> <name>cpos</name> <operator>%</operator> <name>align</name></expr>;</expr_stmt>
<return>return <expr><call><name>al_fseek</name><argument_list>(<argument><expr><name><name>wavfile</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name><name>wavfile</name><operator>-&gt;</operator><name>dpos</name></name> <operator>+</operator> <name>cpos</name></expr></argument>, <argument><expr><name>ALLEGRO_SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>bool</name></type> <name>wav_stream_rewind</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WAVFILE</name> <modifier>*</modifier></type><name>wavfile</name> <init>= <expr><operator>(</operator><name>WAVFILE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>wav_stream_seek</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>wavfile</name><operator>-&gt;</operator><name>loop_start</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>double</name></type> <name>wav_stream_get_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type> <name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WAVFILE</name> <modifier>*</modifier></type><name>wavfile</name> <init>= <expr><operator>(</operator><name>WAVFILE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>samples_per</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>wavfile</name><operator>-&gt;</operator><name>bits</name></name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name><name>wavfile</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>wavfile</name><operator>-&gt;</operator><name>freq</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><call><name>al_ftell</name><argument_list>(<argument><expr><name><name>wavfile</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>wavfile</name><operator>-&gt;</operator><name>dpos</name></name><operator>)</operator> <operator>/</operator> <name>samples_per</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>double</name></type> <name>wav_stream_get_length</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type> <name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WAVFILE</name> <modifier>*</modifier></type><name>wavfile</name> <init>= <expr><operator>(</operator><name>WAVFILE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>total_time</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>wavfile</name><operator>-&gt;</operator><name>samples</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>wavfile</name><operator>-&gt;</operator><name>freq</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><name>total_time</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>wav_stream_set_loop</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WAVFILE</name> <modifier>*</modifier></type><name>wavfile</name> <init>= <expr><operator>(</operator><name>WAVFILE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>wavfile</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wavfile</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>size_t</name></type> <name>wav_stream_update</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bytes_per_sample</name></decl>, <decl><type ref="prev"/><name>samples</name></decl>, <decl><type ref="prev"/><name>samples_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>ctime</name></decl>, <decl><type ref="prev"/><name>btime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WAVFILE</name> <modifier>*</modifier></type><name>wavfile</name> <init>= <expr><operator>(</operator><name>WAVFILE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bytes_per_sample</name> <operator>=</operator> <operator>(</operator><name><name>wavfile</name><operator>-&gt;</operator><name>bits</name></name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name><name>wavfile</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ctime</name> <operator>=</operator> <call><name>wav_stream_get_position</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>btime</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>buf_size</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>bytes_per_sample</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>wavfile</name><operator>-&gt;</operator><name>freq</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>loop</name></name> <operator>==</operator> <name>_ALLEGRO_PLAYMODE_STREAM_ONEDIR</name> <operator>&amp;&amp;</operator> <name>ctime</name> <operator>+</operator> <name>btime</name> <operator>&gt;</operator> <name><name>wavfile</name><operator>-&gt;</operator><name>loop_end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>samples</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>wavfile</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>-</operator> <name>ctime</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>wavfile</name><operator>-&gt;</operator><name>freq</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>samples</name> <operator>=</operator> <name>buf_size</name> <operator>/</operator> <name>bytes_per_sample</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>samples</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>samples_read</name> <operator>=</operator> <call><name>wav_read</name><argument_list>(<argument><expr><name>wavfile</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>samples_read</name> <operator>*</operator> <name>bytes_per_sample</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>wav_stream_close</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WAVFILE</name> <modifier>*</modifier></type><name>wavfile</name> <init>= <expr><operator>(</operator><name>WAVFILE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_acodec_stop_feed_thread</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name><name>wavfile</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wav_close</name><argument_list>(<argument><expr><name>wavfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>feed_thread</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>_al_load_wav</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to open %s for reading.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>spl</name> <operator>=</operator> <call><name>_al_load_wav_f</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>spl</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>_al_load_wav_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WAVFILE</name> <modifier>*</modifier></type><name>wavfile</name> <init>= <expr><call><name>wav_open</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wavfile</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><operator>(</operator><name><name>wavfile</name><operator>-&gt;</operator><name>bits</name></name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name><name>wavfile</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>wavfile</name><operator>-&gt;</operator><name>samples</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>al_malloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>spl</name> <operator>=</operator> <call><name>al_create_sample</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>wavfile</name><operator>-&gt;</operator><name>samples</name></name></expr></argument>, <argument><expr><name><name>wavfile</name><operator>-&gt;</operator><name>freq</name></name></expr></argument>,
<argument><expr><call><name>_al_word_size_to_depth_conf</name><argument_list>(<argument><expr><name><name>wavfile</name><operator>-&gt;</operator><name>bits</name></name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_al_count_to_channel_conf</name><argument_list>(<argument><expr><name><name>wavfile</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>spl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wav_read</name><argument_list>(<argument><expr><name>wavfile</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>wavfile</name><operator>-&gt;</operator><name>samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>wav_close</name><argument_list>(<argument><expr><name>wavfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>spl</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>_al_load_wav_audio_stream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to open %s for reading.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>_al_load_wav_audio_stream_f</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buffer_count</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to load wav stream.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>stream</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>_al_load_wav_audio_stream_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name><modifier>*</modifier></type> <name>f</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WAVFILE</name><modifier>*</modifier></type> <name>wavfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_AUDIO_STREAM</name><modifier>*</modifier></type> <name>stream</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wavfile</name> <operator>=</operator> <call><name>wav_open</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wavfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to load wav file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>al_create_audio_stream</name><argument_list>(<argument><expr><name>buffer_count</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name><name>wavfile</name><operator>-&gt;</operator><name>freq</name></name></expr></argument>,
<argument><expr><call><name>_al_word_size_to_depth_conf</name><argument_list>(<argument><expr><name><name>wavfile</name><operator>-&gt;</operator><name>bits</name></name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_al_count_to_channel_conf</name><argument_list>(<argument><expr><name><name>wavfile</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>wavfile</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wavfile</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wavfile</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>=</operator> <call><name>wav_stream_get_length</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>feeder</name></name> <operator>=</operator> <name>wav_stream_update</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>unload_feeder</name></name> <operator>=</operator> <name>wav_stream_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>rewind_feeder</name></name> <operator>=</operator> <name>wav_stream_rewind</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>seek_feeder</name></name> <operator>=</operator> <name>wav_stream_seek</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>get_feeder_position</name></name> <operator>=</operator> <name>wav_stream_get_position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>get_feeder_length</name></name> <operator>=</operator> <name>wav_stream_get_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>set_feeder_loop</name></name> <operator>=</operator> <name>wav_stream_set_loop</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_acodec_start_feed_thread</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to load wav stream.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wav_close</name><argument_list>(<argument><expr><name>wavfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>stream</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>_al_save_wav</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>pf</name> <init>= <expr><call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pf</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>rvsave</name> <init>= <expr><call><name>_al_save_wav_f</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rvclose</name> <init>= <expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>rvsave</name> <operator>&amp;&amp;</operator> <name>rvclose</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to open %s for writing.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>false</name></expr>;</return> 
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>_al_save_wav_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>pf</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>channels</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>data_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>channels</name> <operator>=</operator> <operator>(</operator><name><name>spl</name><operator>-&gt;</operator><name>chan_conf</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>spl</name><operator>-&gt;</operator><name>chan_conf</name></name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>spl</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_INT8</name> <operator>||</operator>
<name><name>spl</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_UINT8</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channels</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>channels</name></expr></argument> &gt;</argument_list></name> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Can only save samples with 1 or 2 channels as WAV.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>samples</name> <operator>=</operator> <name><name>spl</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>data_size</name> <operator>=</operator> <name>samples</name> <operator>*</operator> <name>channels</name> <operator>*</operator> <name>bits</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>samples</name> <operator>*</operator> <name>channels</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_fputs</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><literal type="string">"RIFF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_fwrite32le</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><literal type="number">36</literal> <operator>+</operator> <name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_fputs</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><literal type="string">"WAVE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_fputs</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><literal type="string">"fmt "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_fwrite32le</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_fwrite16le</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_fwrite16le</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_fwrite32le</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><name><name>spl</name><operator>-&gt;</operator><name>frequency</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_fwrite32le</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><name><name>spl</name><operator>-&gt;</operator><name>frequency</name></name> <operator>*</operator> <name>channels</name> <operator>*</operator> <name>bits</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_fwrite16le</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><name>channels</name> <operator>*</operator> <name>bits</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_fwrite16le</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_fputs</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_fwrite32le</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_UINT8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_fwrite</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><name><name>spl</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>u8</name></name></expr></argument>, <argument><expr><name>samples</name> <operator>*</operator> <name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_fwrite</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><name><name>spl</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>s16</name></name></expr></argument>, <argument><expr><name>samples</name> <operator>*</operator> <name>channels</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_INT8</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>spl</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>s8</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>al_fputc</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>+</operator> <literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_UINT16</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>spl</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>u16</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>al_fwrite16le</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>-</operator> <literal type="number">0x8000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_INT24</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>spl</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>s24</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v</name> <init>= <expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>*</operator><name>data</name><operator>++</operator> <operator>+</operator> <literal type="number">0x800000</literal><operator>)</operator> <operator>/</operator> <literal type="number">0x7FFFFF</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x7FFF</literal> <operator>-</operator> <literal type="number">0x8000</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_fwrite16le</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_UINT24</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>spl</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>u24</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v</name> <init>= <expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>*</operator><name>data</name><operator>++</operator><operator>)</operator> <operator>/</operator> <literal type="number">0x7FFFFF</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x7FFF</literal> <operator>-</operator> <literal type="number">0x8000</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_fwrite16le</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_FLOAT32</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>spl</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>f32</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>al_fwrite16le</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><operator>*</operator><name>data</name> <operator>*</operator> <literal type="number">0x7FFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unknown audio depth (%d) when saving wav ALLEGRO_FILE.\n"</literal></expr></argument>,
<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


</unit>
