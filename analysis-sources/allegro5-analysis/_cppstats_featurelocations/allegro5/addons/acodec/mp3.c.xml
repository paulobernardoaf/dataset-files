<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\acodec\mp3.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_acodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_exitfunc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"helper.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIMP3_IMPLEMENTATION</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;minimp3.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;minimp3_ex.h&gt;</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"acodec"</literal></argument>)</argument_list></macro>

<typedef>typedef <type><struct>struct <name>MP3FILE</name>
<block>{
<decl_stmt><decl><type><name>mp3dec_t</name></type> <name>dec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>file_buffer</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>file_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>next_frame_offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>file_pos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>file_samples</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>double</name></type> <name>loop_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>loop_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp3d_sample_t</name></type> <name><name>frame_buffer</name><index>[<expr><name>MINIMP3_MAX_SAMPLES_PER_FRAME</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>frame_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>frame_offsets</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>num_frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_samples</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>freq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_CHANNEL_CONF</name></type> <name>chan_conf</name></decl>;</decl_stmt>
}</block></struct></type> <name>MP3FILE</name>;</typedef>

<function><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>_al_load_mp3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Could not open file '%s'.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>spl</name> <operator>=</operator> <call><name>_al_load_mp3_f</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>spl</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>_al_load_mp3_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mp3dec_t</name></type> <name>dec</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mp3dec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>mp3dec_file_info_t</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int64_t</name></type> <name>filesize</name> <init>= <expr><call><name>al_fsize</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>filesize</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Could not determine file size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>mp3data</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><call><name>al_malloc</name><argument_list>(<argument><expr><name>filesize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>readbytes</name> <init>= <expr><call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>mp3data</name></expr></argument>, <argument><expr><name>filesize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>readbytes</name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>filesize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Failed to read file into memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>mp3data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>mp3dec_load_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dec</name></expr></argument>, <argument><expr><name>mp3data</name></expr></argument>, <argument><expr><name>filesize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>mp3data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Could not decode MP3.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>spl</name> <operator>=</operator> <call><name>al_create_sample</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>samples</name></name> <operator>/</operator> <name><name>info</name><operator>.</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>hz</name></name></expr></argument>,
<argument><expr><call><name>_al_word_size_to_depth_conf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mp3d_sample_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_al_count_to_channel_conf</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>spl</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>_al_load_mp3_audio_stream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Could not open file '%s'.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>_al_load_mp3_audio_stream_f</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buffer_count</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>stream</name></expr>;</return>
</block_content>}</block></function>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mp3_stream_seek</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MP3FILE</name> <modifier>*</modifier></type><name>mp3file</name> <init>= <expr><operator>(</operator><name>MP3FILE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>file_pos</name> <init>= <expr><name>time</name> <operator>*</operator> <name><name>mp3file</name><operator>-&gt;</operator><name>freq</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame</name> <init>= <expr><name>file_pos</name> <operator>/</operator> <name><name>mp3file</name><operator>-&gt;</operator><name>frame_samples</name></name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>sync_frame</name> <init>= <expr><call><name>_ALLEGRO_MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>frame</name> <operator>-</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_pos</name> <init>= <expr><name>file_pos</name> <operator>-</operator> <name>frame</name> <operator>*</operator> <name><name>mp3file</name><operator>-&gt;</operator><name>frame_samples</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>frame</name></expr></argument> &gt;</argument_list></name> <name><name>mp3file</name><operator>-&gt;</operator><name>num_frames</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Seeking outside the stream bounds: %f\n"</literal></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_offset</name> <init>= <expr><name><name>mp3file</name><operator>-&gt;</operator><name>frame_offsets</name><index>[<expr><name>frame</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sync_frame_offset</name> <init>= <expr><name><name>mp3file</name><operator>-&gt;</operator><name>frame_offsets</name><index>[<expr><name>sync_frame</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp3dec_frame_info_t</name></type> <name>frame_info</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>mp3dec_decode_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp3file</name><operator>-&gt;</operator><name>dec</name></name></expr></argument>,
<argument><expr><name><name>mp3file</name><operator>-&gt;</operator><name>file_buffer</name></name> <operator>+</operator> <name>sync_frame_offset</name></expr></argument>,
<argument><expr><name><name>mp3file</name><operator>-&gt;</operator><name>file_size</name></name> <operator>-</operator> <name>sync_frame_offset</name></expr></argument>,
<argument><expr><name><name>mp3file</name><operator>-&gt;</operator><name>frame_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sync_frame_offset</name> <operator>+=</operator> <name><name>frame_info</name><operator>.</operator><name>frame_bytes</name></name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>sync_frame_offset</name> <operator>&lt;=</operator> <name>frame_offset</name></expr>)</condition>;</do>

<expr_stmt><expr><name><name>mp3file</name><operator>-&gt;</operator><name>next_frame_offset</name></name> <operator>=</operator> <name>frame_offset</name> <operator>+</operator> <name><name>frame_info</name><operator>.</operator><name>frame_bytes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp3file</name><operator>-&gt;</operator><name>file_pos</name></name> <operator>=</operator> <name>file_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp3file</name><operator>-&gt;</operator><name>frame_pos</name></name> <operator>=</operator> <name>frame_pos</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mp3_stream_rewind</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MP3FILE</name> <modifier>*</modifier></type><name>mp3file</name> <init>= <expr><operator>(</operator><name>MP3FILE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>mp3_stream_seek</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>mp3file</name><operator>-&gt;</operator><name>loop_start</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>mp3_stream_get_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MP3FILE</name> <modifier>*</modifier></type><name>mp3file</name> <init>= <expr><operator>(</operator><name>MP3FILE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>mp3file</name><operator>-&gt;</operator><name>file_pos</name></name> <operator>/</operator> <name><name>mp3file</name><operator>-&gt;</operator><name>freq</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>mp3_stream_get_length</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type> <name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MP3FILE</name> <modifier>*</modifier></type><name>mp3file</name> <init>= <expr><operator>(</operator><name>MP3FILE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>mp3file</name><operator>-&gt;</operator><name>file_samples</name></name> <operator>/</operator> <name><name>mp3file</name><operator>-&gt;</operator><name>freq</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mp3_stream_set_loop</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MP3FILE</name> <modifier>*</modifier></type><name>mp3file</name> <init>= <expr><operator>(</operator><name>MP3FILE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mp3file</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp3file</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>size_t</name></type> <name>mp3_stream_update</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MP3FILE</name> <modifier>*</modifier></type><name>mp3file</name> <init>= <expr><operator>(</operator><name>MP3FILE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>mp3d_sample_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>al_get_channel_count</name><argument_list>(<argument><expr><name><name>mp3file</name><operator>-&gt;</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>samples_needed</name> <init>= <expr><name>buf_size</name> <operator>/</operator> <name>sample_size</name></expr></init></decl>;</decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>ctime</name> <init>= <expr><call><name>mp3_stream_get_position</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>btime</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name>samples_needed</name> <operator>/</operator> <name><name>mp3file</name><operator>-&gt;</operator><name>freq</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>loop</name></name> <operator>==</operator> <name>_ALLEGRO_PLAYMODE_STREAM_ONEDIR</name> <operator>&amp;&amp;</operator> <name>ctime</name> <operator>+</operator> <name>btime</name> <operator>&gt;</operator> <name><name>mp3file</name><operator>-&gt;</operator><name>loop_end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>samples_needed</name> <operator>=</operator> <operator>(</operator><name><name>mp3file</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>-</operator> <name>ctime</name><operator>)</operator> <operator>*</operator> <name><name>mp3file</name><operator>-&gt;</operator><name>freq</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>samples_needed</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>mp3dec_t</name></type> <name>dec</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mp3dec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>samples_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>samples_read</name> <operator>&lt;</operator> <name>samples_needed</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>samples_from_this_frame</name> <init>= <expr><call><name>_ALLEGRO_MIN</name><argument_list>(
<argument><expr><name><name>mp3file</name><operator>-&gt;</operator><name>frame_samples</name></name> <operator>-</operator> <name><name>mp3file</name><operator>-&gt;</operator><name>frame_pos</name></name></expr></argument>,
<argument><expr><name>samples_needed</name> <operator>-</operator> <name>samples_read</name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><name><name>mp3file</name><operator>-&gt;</operator><name>frame_buffer</name></name> <operator>+</operator> <name><name>mp3file</name><operator>-&gt;</operator><name>frame_pos</name></name> <operator>*</operator> <call><name>al_get_channel_count</name><argument_list>(<argument><expr><name><name>mp3file</name><operator>-&gt;</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>samples_from_this_frame</name> <operator>*</operator> <name>sample_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mp3file</name><operator>-&gt;</operator><name>frame_pos</name></name> <operator>+=</operator> <name>samples_from_this_frame</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp3file</name><operator>-&gt;</operator><name>file_pos</name></name> <operator>+=</operator> <name>samples_from_this_frame</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name>data</name><operator>)</operator> <operator>+</operator> <name>samples_from_this_frame</name> <operator>*</operator> <name>sample_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>samples_read</name> <operator>+=</operator> <name>samples_from_this_frame</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mp3file</name><operator>-&gt;</operator><name>frame_pos</name></name> <operator>&gt;=</operator> <name><name>mp3file</name><operator>-&gt;</operator><name>frame_samples</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mp3dec_frame_info_t</name></type> <name>frame_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_samples</name> <init>= <expr><call><name>mp3dec_decode_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp3file</name><operator>-&gt;</operator><name>dec</name></name></expr></argument>,
<argument><expr><name><name>mp3file</name><operator>-&gt;</operator><name>file_buffer</name></name> <operator>+</operator> <name><name>mp3file</name><operator>-&gt;</operator><name>next_frame_offset</name></name></expr></argument>,
<argument><expr><name><name>mp3file</name><operator>-&gt;</operator><name>file_size</name></name> <operator>-</operator> <name><name>mp3file</name><operator>-&gt;</operator><name>next_frame_offset</name></name></expr></argument>,
<argument><expr><name><name>mp3file</name><operator>-&gt;</operator><name>frame_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame_info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>frame_samples</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mp3_stream_rewind</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mp3file</name><operator>-&gt;</operator><name>frame_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp3file</name><operator>-&gt;</operator><name>next_frame_offset</name></name> <operator>+=</operator> <name><name>frame_info</name><operator>.</operator><name>frame_bytes</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>samples_read</name> <operator>*</operator> <name>sample_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mp3_stream_close</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MP3FILE</name> <modifier>*</modifier></type><name>mp3file</name> <init>= <expr><operator>(</operator><name>MP3FILE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_acodec_stop_feed_thread</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>mp3file</name><operator>-&gt;</operator><name>frame_offsets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>mp3file</name><operator>-&gt;</operator><name>file_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>mp3file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>feed_thread</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>_al_load_mp3_audio_stream_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name><modifier>*</modifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MP3FILE</name><modifier>*</modifier></type> <name>mp3file</name> <init>= <expr><call><name>al_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MP3FILE</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mp3dec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp3file</name><operator>-&gt;</operator><name>dec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>mp3file</name><operator>-&gt;</operator><name>file_size</name></name> <operator>=</operator> <call><name>al_fsize</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mp3file</name><operator>-&gt;</operator><name>file_size</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Could not determine file size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failure</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>mp3file</name><operator>-&gt;</operator><name>file_buffer</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><call><name>al_malloc</name><argument_list>(<argument><expr><name><name>mp3file</name><operator>-&gt;</operator><name>file_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>readbytes</name> <init>= <expr><call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>mp3file</name><operator>-&gt;</operator><name>file_buffer</name></name></expr></argument>, <argument><expr><name><name>mp3file</name><operator>-&gt;</operator><name>file_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>readbytes</name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>mp3file</name><operator>-&gt;</operator><name>file_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Failed to read file into memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failure</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>frame_offset_capacity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset_so_far</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mp3file</name><operator>-&gt;</operator><name>num_frames</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>frame_offset_capacity</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>frame_offset_capacity</name> <operator>=</operator> <name><name>mp3file</name><operator>-&gt;</operator><name>num_frames</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp3file</name><operator>-&gt;</operator><name>frame_offsets</name></name> <operator>=</operator> <call><name>al_realloc</name><argument_list>(<argument><expr><name><name>mp3file</name><operator>-&gt;</operator><name>frame_offsets</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>frame_offset_capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>mp3dec_frame_info_t</name></type> <name>frame_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_samples</name> <init>= <expr><call><name>mp3dec_decode_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp3file</name><operator>-&gt;</operator><name>dec</name></name></expr></argument>,
<argument><expr><name><name>mp3file</name><operator>-&gt;</operator><name>file_buffer</name></name> <operator>+</operator> <name>offset_so_far</name></expr></argument>,
<argument><expr><name><name>mp3file</name><operator>-&gt;</operator><name>file_size</name></name> <operator>-</operator> <name>offset_so_far</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame_info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>frame_samples</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mp3file</name><operator>-&gt;</operator><name>num_frames</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Could not decode the first frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failure</name>;</goto>
</block_content>}</block></if>
<else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset_so_far</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Channels %d, frequency %d\n"</literal></expr></argument>, <argument><expr><name><name>frame_info</name><operator>.</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>frame_info</name><operator>.</operator><name>hz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp3file</name><operator>-&gt;</operator><name>chan_conf</name></name> <operator>=</operator> <call><name>_al_count_to_channel_conf</name><argument_list>(<argument><expr><name><name>frame_info</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp3file</name><operator>-&gt;</operator><name>freq</name></name> <operator>=</operator> <name><name>frame_info</name><operator>.</operator><name>hz</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp3file</name><operator>-&gt;</operator><name>frame_samples</name></name> <operator>=</operator> <name>frame_samples</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mp3file</name><operator>-&gt;</operator><name>frame_offsets</name><index>[<expr><name><name>mp3file</name><operator>-&gt;</operator><name>num_frames</name></name></expr>]</index></name> <operator>=</operator> <name>offset_so_far</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp3file</name><operator>-&gt;</operator><name>num_frames</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset_so_far</name> <operator>+=</operator> <name><name>frame_info</name><operator>.</operator><name>frame_bytes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp3file</name><operator>-&gt;</operator><name>file_samples</name></name> <operator>+=</operator> <name>frame_samples</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>mp3file</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>mp3file</name><operator>-&gt;</operator><name>file_samples</name></name> <operator>*</operator> <name><name>mp3file</name><operator>-&gt;</operator><name>freq</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><call><name>al_create_audio_stream</name><argument_list>(
<argument><expr><name>buffer_count</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name><name>mp3file</name><operator>-&gt;</operator><name>freq</name></name></expr></argument>,
<argument><expr><call><name>_al_word_size_to_depth_conf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mp3d_sample_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>mp3file</name><operator>-&gt;</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Failed to create stream.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failure</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>mp3file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>feeder</name></name> <operator>=</operator> <name>mp3_stream_update</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>unload_feeder</name></name> <operator>=</operator> <name>mp3_stream_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>rewind_feeder</name></name> <operator>=</operator> <name>mp3_stream_rewind</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>seek_feeder</name></name> <operator>=</operator> <name>mp3_stream_seek</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>get_feeder_position</name></name> <operator>=</operator> <name>mp3_stream_get_position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>get_feeder_length</name></name> <operator>=</operator> <name>mp3_stream_get_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>set_feeder_loop</name></name> <operator>=</operator> <name>mp3_stream_set_loop</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mp3_stream_rewind</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_acodec_start_feed_thread</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>stream</name></expr>;</return>
<label><name>failure</name>:</label>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>mp3file</name><operator>-&gt;</operator><name>frame_offsets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>mp3file</name><operator>-&gt;</operator><name>file_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>mp3file</name><operator>-&gt;</operator><name>frame_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>mp3file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
