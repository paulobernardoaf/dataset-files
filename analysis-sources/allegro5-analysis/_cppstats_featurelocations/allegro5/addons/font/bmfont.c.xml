<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\font\bmfont.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_font.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_font.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"font.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xml.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"font"</literal></argument>)</argument_list></macro>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>second</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>amount</name></decl>;</decl_stmt>
}</block></struct></type> <name>BMFONT_KERNING</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>page</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <name>y</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xoffset</name></decl>, <name>yoffset</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xadvance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chnl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kerning_pairs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMFONT_KERNING</name> <modifier>*</modifier></type><name>kerning</name></decl>;</decl_stmt>
}</block></struct></type> <name>BMFONT_CHAR</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>BMFONT_RANGE</name></name></type> <name>BMFONT_RANGE</name>;</typedef>

<struct>struct <name>BMFONT_RANGE</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMFONT_CHAR</name> <modifier>*</modifier><modifier>*</modifier></type><name>characters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMFONT_RANGE</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>pages_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>pages</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMFONT_RANGE</name> <modifier>*</modifier></type><name>range_first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>kerning_pairs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMFONT_KERNING</name> <modifier>*</modifier></type><name>kerning</name></decl>;</decl_stmt>
}</block></struct></type> <name>BMFONT_DATA</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>attribute</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMFONT_CHAR</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
}</block></struct></type> <name>BMFONT_PARSER</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reallocate</name><parameter_list>(<parameter><decl><type><name>BMFONT_RANGE</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>characters</name></name> <operator>=</operator> <call><name>al_realloc</name><argument_list>(<argument><expr><name><name>range</name><operator>-&gt;</operator><name>characters</name></name></expr></argument>,
<argument><expr><name><name>range</name><operator>-&gt;</operator><name>count</name></name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name><name>range</name><operator>-&gt;</operator><name>characters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prepend_char</name><parameter_list>(<parameter><decl><type><name>BMFONT_PARSER</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>BMFONT_RANGE</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>first</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reallocate</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>range</name><operator>-&gt;</operator><name>characters</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>range</name><operator>-&gt;</operator><name>characters</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>range</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name><name>range</name><operator>-&gt;</operator><name>characters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>characters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>append_char</name><parameter_list>(<parameter><decl><type><name>BMFONT_PARSER</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>BMFONT_RANGE</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reallocate</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>characters</name><index>[<expr><name><name>range</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>combine_ranges</name><parameter_list>(<parameter><decl><type><name>BMFONT_DATA</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>BMFONT_RANGE</name> <modifier>*</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><name>BMFONT_RANGE</name> <modifier>*</modifier></type><name>range2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <name><name>range2</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reallocate</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>range</name><operator>-&gt;</operator><name>characters</name></name> <operator>+</operator> <name><name>range</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <name><name>range2</name><operator>-&gt;</operator><name>count</name></name></expr></argument>,
<argument><expr><name><name>range2</name><operator>-&gt;</operator><name>characters</name></name></expr></argument>,
<argument><expr><name><name>range2</name><operator>-&gt;</operator><name>count</name></name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name><name>range</name><operator>-&gt;</operator><name>characters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>range2</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>range2</name><operator>-&gt;</operator><name>characters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>range2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>insert_new_range</name><parameter_list>(<parameter><decl><type><name>BMFONT_PARSER</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>BMFONT_RANGE</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>BMFONT_RANGE</name> <modifier>*</modifier></type><name>range</name> <init>= <expr><call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>range</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>codepoint</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reallocate</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>characters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>range</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>font</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMFONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>font</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>range_first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>range_first</name></name> <operator>=</operator> <name>range</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>add_codepoint</name><parameter_list>(<parameter><decl><type><name>BMFONT_PARSER</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>font</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMFONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>font</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMFONT_RANGE</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMFONT_RANGE</name> <modifier>*</modifier></type><name>range</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>range_first</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>range</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>codepoint</name> <operator>==</operator> <name><name>range</name><operator>-&gt;</operator><name>first</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>prepend_char</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>codepoint</name> <operator>&lt;</operator> <name><name>range</name><operator>-&gt;</operator><name>first</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>insert_new_range</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>codepoint</name> <operator>==</operator> <name><name>range</name><operator>-&gt;</operator><name>first</name></name> <operator>+</operator> <name><name>range</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>append_char</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>BMFONT_RANGE</name> <modifier>*</modifier></type><name>range2</name> <init>= <expr><name><name>range</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>range2</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>codepoint</name> <operator>==</operator> <name><name>range2</name><operator>-&gt;</operator><name>first</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>combine_ranges</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>range2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>range</name></expr>;</expr_stmt>
<expr_stmt><expr><name>range</name> <operator>=</operator> <name><name>range</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>insert_new_range</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BMFONT_CHAR</name> <modifier>*</modifier></type><name>find_codepoint</name><parameter_list>(<parameter><decl><type><name>BMFONT_DATA</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>BMFONT_RANGE</name> <modifier>*</modifier></type><name>range</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>range_first</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>range</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>codepoint</name> <operator>&gt;=</operator> <name><name>range</name><operator>-&gt;</operator><name>first</name></name> <operator>&amp;&amp;</operator>
<name>codepoint</name> <operator>&lt;</operator> <name><name>range</name><operator>-&gt;</operator><name>first</name></name> <operator>+</operator> <name><name>range</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>range</name><operator>-&gt;</operator><name>characters</name><index>[<expr><name>codepoint</name> <operator>-</operator> <name><name>range</name><operator>-&gt;</operator><name>first</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>range</name> <operator>=</operator> <name><name>range</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_page</name><parameter_list>(<parameter><decl><type><name>BMFONT_PARSER</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>font</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMFONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>font</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pages_count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pages</name></name> <operator>=</operator> <call><name>al_realloc</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>pages</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>pages_count</name></name> <operator>*</operator>
<sizeof>sizeof <name/></sizeof>*<name><name>data</name><operator>-&gt;</operator><name>pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_path_filename</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>page</name> <init>= <expr><call><name>al_load_bitmap_flags</name><argument_list>(
<argument><expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pages</name><index>[<expr><name><name>data</name><operator>-&gt;</operator><name>pages_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>page</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>tag_is</name><parameter_list>(<parameter><decl><type><name>BMFONT_PARSER</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>attribute_is</name><parameter_list>(<parameter><decl><type><name>BMFONT_PARSER</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>attribute</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_int</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>strtol</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xml_callback</name><parameter_list>(<parameter><decl><type><name>XmlState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BMFONT_PARSER</name> <modifier>*</modifier></type><name>parser</name> <init>= <expr><name>u</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>font</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMFONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>font</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>ElementName</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_ustr_assign_cstr</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>tag_is</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"char"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name><name>parser</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>tag_is</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"kerning"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>kerning_pairs</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>kerning</name></name> <operator>=</operator> <call><name>al_realloc</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>kerning</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>kerning_pairs</name></name> <operator>*</operator>
<sizeof>sizeof <name/></sizeof>*<name><name>data</name><operator>-&gt;</operator><name>kerning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>AttributeName</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_ustr_assign_cstr</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>attribute</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>AttributeValue</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>tag_is</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"char"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>attribute_is</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>get_int</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>attribute_is</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <call><name>get_int</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>attribute_is</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"xoffset"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>xoffset</name></name> <operator>=</operator> <call><name>get_int</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>attribute_is</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"yoffset"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>yoffset</name></name> <operator>=</operator> <call><name>get_int</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>attribute_is</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"width"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>get_int</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>attribute_is</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"height"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>get_int</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>attribute_is</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"page"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>page</name></name> <operator>=</operator> <call><name>get_int</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>attribute_is</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"xadvance"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>xadvance</name></name> <operator>=</operator> <call><name>get_int</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>attribute_is</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"chnl"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>chnl</name></name> <operator>=</operator> <call><name>get_int</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>attribute_is</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_codepoint</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><call><name>get_int</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>tag_is</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"page"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>attribute_is</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_page</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>tag_is</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"common"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>attribute_is</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"lineHeight"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>line_height</name></name> <operator>=</operator> <call><name>get_int</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>attribute_is</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"base"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <call><name>get_int</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>tag_is</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"kerning"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>BMFONT_KERNING</name> <modifier>*</modifier></type><name>k</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>kerning</name></name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>kerning_pairs</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>attribute_is</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"first"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <call><name>get_int</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>attribute_is</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"second"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>second</name></name> <operator>=</operator> <call><name>get_int</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>attribute_is</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"amount"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>amount</name></name> <operator>=</operator> <call><name>get_int</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>font_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>BMFONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>data</name><operator>-&gt;</operator><name>line_height</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>font_ascent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>BMFONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>font_descent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>BMFONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>data</name><operator>-&gt;</operator><name>line_height</name></name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_kerning</name><parameter_list>(<parameter><decl><type><name>BMFONT_CHAR</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prev</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>prev</name><operator>-&gt;</operator><name>kerning_pairs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>prev</name><operator>-&gt;</operator><name>kerning</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>==</operator> <name>c</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name><name>prev</name><operator>-&gt;</operator><name>kerning</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>amount</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>each_character</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_GLYPH</name> <modifier>*</modifier></type><name>glyph</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_GLYPH</name> <modifier>*</modifier></type><name>glyph</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>BMFONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>advance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>al_ustr_get_next</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>BMFONT_CHAR</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><call><name>find_codepoint</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>advance</name> <operator>+=</operator> <call><name>get_kerning</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>advance</name> <operator>+=</operator> <call><name>cb</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>advance</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>glyph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>advance</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>measure_char</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_GLYPH</name> <modifier>*</modifier></type><name>glyph</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>y</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>BMFONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMFONT_CHAR</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>find_codepoint</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>advance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>yo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>advance</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>xadvance</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xo</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>xoffset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>yo</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>yoffset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>advance</name> <operator>=</operator> <call><name>al_get_glyph_width</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_get_glyph_dimensions</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>glyph</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>glyph</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>xo</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yo</name> <operator>&lt;</operator> <name><name>glyph</name><operator>-&gt;</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>yo</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yo</name> <operator>+</operator> <name>h</name> <operator>&gt;</operator> <name><name>glyph</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>yo</name> <operator>+</operator> <name>h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>+</operator> <name>xo</name> <operator>+</operator> <name>w</name> <operator>&gt;</operator> <name><name>glyph</name><operator>-&gt;</operator><name>w</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>xo</name> <operator>+</operator> <name>w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>advance</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_glyph_dimensions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bby</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbw</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbh</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>BMFONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMFONT_CHAR</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>find_codepoint</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>al_get_glyph_dimensions</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>,
<argument><expr><name>bbx</name></expr></argument>, <argument><expr><name>bby</name></expr></argument>, <argument><expr><name>bbw</name></expr></argument>, <argument><expr><name>bbh</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>bbx</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>xoffset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bby</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>yoffset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bbw</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bbh</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_glyph_advance</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>codepoint1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>BMFONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMFONT_CHAR</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>find_codepoint</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>codepoint1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kerning</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>codepoint1</name> <operator>==</operator> <name>ALLEGRO_NO_KERNING</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>al_get_glyph_advance</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr></argument>, <argument><expr><name>codepoint1</name></expr></argument>, <argument><expr><name>codepoint2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>codepoint2</name> <operator>!=</operator> <name>ALLEGRO_NO_KERNING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>kerning</name> <operator>=</operator> <call><name>get_kerning</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>codepoint2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>xadvance</name></name> <operator>+</operator> <name>kerning</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_glyph</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev_codepoint</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_GLYPH</name> <modifier>*</modifier></type><name>glyph</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>BMFONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMFONT_CHAR</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><call><name>find_codepoint</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>prev_codepoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMFONT_CHAR</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>find_codepoint</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>pages</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>page</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>kerning</name></name> <operator>=</operator> <call><name>get_kerning</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>offset_x</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>xoffset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>offset_y</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>yoffset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>advance</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>xadvance</name></name> <operator>+</operator> <name><name>glyph</name><operator>-&gt;</operator><name>kerning</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>al_get_glyph</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr></argument>, <argument><expr><name>prev_codepoint</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>,
<argument><expr><name>glyph</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>char_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>measure_char</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>text_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>each_character</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>measure_char</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>render_char</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>BMFONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMFONT_CHAR</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>find_codepoint</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>fallback</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>render_char</name></name><argument_list>(
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>page</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>pages</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>page</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_draw_tinted_bitmap_region</name><argument_list>(<argument><expr><name>page</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><name>x</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>xoffset</name></name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>yoffset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>xadvance</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>render_char_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_GLYPH</name> <modifier>*</modifier></type><name>glyph</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>glyph</name></expr>;</expr_stmt>
<return>return <expr><call><name>render_char</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>render</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>each_character</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>render_char_cb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy_range</name><parameter_list>(<parameter><decl><type><name>BMFONT_RANGE</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>range</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>BMFONT_CHAR</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>range</name><operator>-&gt;</operator><name>characters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>kerning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>BMFONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMFONT_RANGE</name> <modifier>*</modifier></type><name>range</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>range_first</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>range</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>BMFONT_RANGE</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>range</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>destroy_range</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>range</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>pages_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>pages</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>kerning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_text_dimensions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bby</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbw</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbh</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_GLYPH</name></type> <name>glyph</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>glyph</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glyph</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glyph</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name>INT_MIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glyph</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name>INT_MIN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>each_character</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>glyph</name></expr></argument>, <argument><expr><name>measure_char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bbx</name> <operator>=</operator> <name><name>glyph</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bby</name> <operator>=</operator> <name><name>glyph</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bbw</name> <operator>=</operator> <name><name>glyph</name><operator>.</operator><name>w</name></name> <operator>-</operator> <name><name>glyph</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bbh</name> <operator>=</operator> <name><name>glyph</name><operator>.</operator><name>h</name></name> <operator>-</operator> <name><name>glyph</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_font_ranges</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ranges_count</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ranges</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>BMFONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMFONT_RANGE</name> <modifier>*</modifier></type><name>range</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>range_first</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>range</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>ranges_count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ranges</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>range</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ranges</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>range</name><operator>-&gt;</operator><name>first</name></name> <operator>+</operator> <name><name>range</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>range</name> <operator>=</operator> <name><name>range</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_FONT_VTABLE</name></type> <name>_al_font_vtable_xml</name> <init>= <expr><block>{
<expr><name>font_height</name></expr>,
<expr><name>font_ascent</name></expr>, 
<expr><name>font_descent</name></expr>,
<expr><name>char_length</name></expr>,
<expr><name>text_length</name></expr>,
<expr><name>render_char</name></expr>,
<expr><name>render</name></expr>,
<expr><name>destroy</name></expr>, 
<expr><name>get_text_dimensions</name></expr>,
<expr><name>get_font_ranges</name></expr>,
<expr><name>get_glyph_dimensions</name></expr>,
<expr><name>get_glyph_advance</name></expr>,
<expr><name>get_glyph</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>_al_load_bmfont_xml</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>font_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>size</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Could not open %s.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>BMFONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMFONT_PARSER</name></type> <name>_parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMFONT_PARSER</name> <modifier>*</modifier></type><name>parser</name> <init>= <expr><operator>&amp;</operator><name>_parser</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>attribute</name></name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>al_create_path</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>font_flags</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name> <init>= <expr><call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>font</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>_al_font_vtable_xml</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>font</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>font</name></name> <operator>=</operator> <name>font</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_xml_parse</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>xml_callback</name></expr></argument>, <argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>kerning_pairs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>BMFONT_KERNING</name> <modifier>*</modifier></type><name>k</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>kerning</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMFONT_CHAR</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>find_codepoint</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>kerning_pairs</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>kerning</name></name> <operator>=</operator> <call><name>al_realloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>kerning</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>kerning_pairs</name></name> <operator>*</operator>
<sizeof>sizeof <name/></sizeof>*<name><name>c</name><operator>-&gt;</operator><name>kerning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>kerning</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>kerning_pairs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>k</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>attribute</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>font</name></expr>;</return>
</block_content>}</block></function>
</unit>
