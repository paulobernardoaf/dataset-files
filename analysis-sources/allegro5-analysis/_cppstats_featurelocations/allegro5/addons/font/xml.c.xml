<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\font\xml.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xml.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>XmlState</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>closing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>XmlState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>u</name></decl>;</decl_stmt>
}</block></struct></type> <name>XmlParser</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scalar</name><parameter_list>(<parameter><decl><type><name>XmlParser</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>x</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_assign_cstr</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>opt_scalar</name><parameter_list>(<parameter><decl><type><name>XmlParser</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>scalar</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>discard_scalar</name><parameter_list>(<parameter><decl><type><name>XmlParser</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>al_ustr_assign_cstr</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>close_tag</name><parameter_list>(<parameter><decl><type><name>XmlParser</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>Outside</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>closing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_char</name><parameter_list>(<parameter><decl><type><name>XmlParser</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[]</index></name> <init>= <expr><block>{<expr><name>c</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_ustr_append_cstr</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>create_tag</name><parameter_list>(<parameter><decl><type><name>XmlParser</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>scalar</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>open_tag</name><parameter_list>(<parameter><decl><type><name>XmlParser</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>Outside</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_xml_parse</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>XmlState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XmlParser</name></type> <name>x_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XmlParser</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><operator>&amp;</operator><name>x_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>Outside</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>closing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>al_fgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>Outside</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>opt_scalar</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ElementName</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ElementName</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>closing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>closing</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>discard_scalar</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_tag</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>create_tag</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>open_tag</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>create_tag</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>AttributeName</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>AttributeName</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>closing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>closing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>closing</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close_tag</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>open_tag</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>scalar</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>AttributeStart</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>AttributeStart</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>AttributeValue</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>AttributeValue</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>scalar</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>AttributeName</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>add_char</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
