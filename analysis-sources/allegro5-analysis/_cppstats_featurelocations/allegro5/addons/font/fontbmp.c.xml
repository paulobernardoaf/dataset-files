<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\font\fontbmp.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_font.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_dtor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"font.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"font"</literal></argument>)</argument_list></macro>


<function><type><specifier>static</specifier> <name>void</name></type> <name>font_find_character</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bmp_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bmp_h</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name> <init>= <expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pitch</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>x</name> <operator>&gt;=</operator> <name>bmp_w</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>y</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>y</name> <operator>&gt;=</operator> <name>bmp_h</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(
<expr><name><name>data</name><index>[<expr><operator>*</operator><name>x</name> <operator>+</operator> <operator>*</operator><name>y</name> <operator>*</operator> <name>pitch</name></expr>]</index></name> <operator>==</operator> <name>c</name> <operator>&amp;&amp;</operator>
<name><name>data</name><index>[<expr><operator>(</operator><operator>*</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>*</operator><name>y</name> <operator>*</operator> <name>pitch</name></expr>]</index></name> <operator>==</operator> <name>c</name> <operator>&amp;&amp;</operator>
<name><name>data</name><index>[<expr><operator>*</operator><name>x</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>pitch</name></expr>]</index></name> <operator>==</operator> <name>c</name> <operator>&amp;&amp;</operator>
<name><name>data</name><index>[<expr><operator>(</operator><operator>*</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>pitch</name></expr>]</index></name> <operator>!=</operator> <name>c</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>x</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>x</name> <operator>+</operator> <operator>*</operator><name>w</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>bmp_w</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>data</name><index>[<expr><operator>(</operator><operator>*</operator><name>x</name> <operator>+</operator> <operator>*</operator><name>w</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>pitch</name></expr>]</index></name> <operator>!=</operator> <name>c</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>w</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>y</name> <operator>+</operator> <operator>*</operator><name>h</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>bmp_h</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>data</name><index>[<expr><operator>*</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name>y</name> <operator>+</operator> <operator>*</operator><name>h</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>pitch</name></expr>]</index></name> <operator>!=</operator> <name>c</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>h</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>import_bitmap_font_color</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bmp_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bmp_h</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>glyphs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>import_x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>import_y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>font_find_character</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>, <argument><expr><name>bmp_w</name></expr></argument>, <argument><expr><name>bmp_h</name></expr></argument>,
<argument><expr><name>import_x</name></expr></argument>, <argument><expr><name>import_y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>h</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to find character %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>al_create_sub_bitmap</name><argument_list>(<argument><expr><name>glyphs</name></expr></argument>,
<argument><expr><operator>*</operator><name>import_x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>import_y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>import_x</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>bitmap_font_count</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>bmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_RGBA_8888</name></expr></argument>,
<argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>font_find_character</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>lock</name><operator>-&gt;</operator><name>pitch</name></name></expr></argument>,
<argument><expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>h</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>_al_load_bitmap_font</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>font_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>import_bmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_STATE</name></type> <name>backup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>range</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bmp_flags</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bmp_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>font_flags</name> <operator>&amp;</operator> <name>ALLEGRO_NO_PREMULTIPLIED_ALPHA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bmp_flags</name> <operator>|=</operator> <name>ALLEGRO_NO_PREMULTIPLIED_ALPHA</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_store_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backup</name></expr></argument>, <argument><expr><name>ALLEGRO_STATE_NEW_BITMAP_PARAMETERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name>ALLEGRO_MEMORY_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_new_bitmap_format</name><argument_list>(<argument><expr><name>ALLEGRO_PIXEL_FORMAT_ANY_WITH_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>import_bmp</name> <operator>=</operator> <call><name>al_load_bitmap_flags</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>bmp_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_restore_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>import_bmp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Couldn't load bitmap from '%s'\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>range</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">32</literal> <operator>+</operator> <call><name>bitmap_font_count</name><argument_list>(<argument><expr><name>import_bmp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>al_grab_font_from_bitmap</name><argument_list>(<argument><expr><name>import_bmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>import_bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>al_load_bitmap_font</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>al_get_new_bitmap_flags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_NO_PREMULTIPLIED_ALPHA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ALLEGRO_NO_PREMULTIPLIED_ALPHA</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>_al_load_bitmap_font</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>al_load_bitmap_font_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_load_bitmap_font</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>al_grab_font_from_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ranges_n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>ranges</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_FONT_COLOR_DATA</name> <modifier>*</modifier></type><name>cf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_STATE</name></type> <name>backup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>mask</name> <init>= <expr><call><name>al_get_pixel</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>glyphs</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>unmasked</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>import_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>import_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>_al_font_vtable_color</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_store_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backup</name></expr></argument>, <argument><expr><name>ALLEGRO_STATE_NEW_BITMAP_PARAMETERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name>ALLEGRO_MEMORY_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_new_bitmap_format</name><argument_list>(<argument><expr><name>ALLEGRO_PIXEL_FORMAT_ANY_WITH_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>unmasked</name> <operator>=</operator> <call><name>al_clone_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><call><name>al_convert_mask_to_alpha</name><argument_list>(<argument><expr><name>unmasked</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_restore_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>al_store_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backup</name></expr></argument>, <argument><expr><name>ALLEGRO_STATE_BITMAP</name> <operator>|</operator> <name>ALLEGRO_STATE_BLENDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ranges_n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><name><name>ranges</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><name><name>ranges</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <name>last</name> <operator>-</operator> <name>first</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cf</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_FONT_COLOR_DATA</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>cf</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>cf</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>bitmaps</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_BITMAP</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>bitmaps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>glyphs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>glyphs</name> <operator>=</operator> <call><name>al_clone_bitmap</name><argument_list>(<argument><expr><name>unmasked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>glyphs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable clone bitmap.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup_and_fail_on_error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>,
<argument><expr><name>ALLEGRO_PIXEL_FORMAT_RGBA_8888</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>glyphs</name></name> <operator>=</operator> <name>glyphs</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>import_bitmap_font_color</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>lock</name><operator>-&gt;</operator><name>pitch</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,
<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><name><name>cf</name><operator>-&gt;</operator><name>glyphs</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>import_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>import_y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>cleanup_and_fail_on_error</name>;</goto>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>last</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cf</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>al_restore_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cf</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cf</name> <operator>&amp;&amp;</operator> <name><name>cf</name><operator>-&gt;</operator><name>bitmaps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>bitmaps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>unmasked</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>unmasked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>dtor_item</name></name> <operator>=</operator> <call><name>_al_register_destructor</name><argument_list>(<argument><expr><name>_al_dtor_list</name></expr></argument>, <argument><expr><literal type="string">"font"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>,
<argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>al_destroy_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>f</name></expr>;</return>

<label><name>cleanup_and_fail_on_error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>al_restore_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_font</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>unmasked</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>unmasked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


</unit>
