<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\video\video.c">







































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_video.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_video.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_video_cfg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_exitfunc.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"video"</literal></argument>)</argument_list></macro>



<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>video_inited</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>VideoHandler</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>VideoHandler</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_VIDEO_INTERFACE</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
}</block></struct></type> <name>VideoHandler</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>VideoHandler</name> <modifier>*</modifier></type><name>handlers</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>ALLEGRO_VIDEO_INTERFACE</name> <modifier>*</modifier></type><name>find_handler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extension</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VideoHandler</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>handlers</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>extension</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>extension</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>vtable</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_handler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extension</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_VIDEO_INTERFACE</name> <modifier>*</modifier></type><name>vtable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VideoHandler</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>handlers</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>handlers</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VideoHandler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>handlers</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>handlers</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VideoHandler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>extension</name></name> <operator>=</operator> <name>extension</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <name>vtable</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>al_open_video</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extension</name> <init>= <expr><name>filename</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>extension</name> <operator>&gt;=</operator> <name>filename</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>extension</name> <operator>!=</operator> <literal type="char">'.'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>extension</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>video</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <call><name>find_handler</name><argument_list>(<argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>vtable</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"No handler for video extension %s - "</literal>
<literal type="string">"therefore not trying to load %s.\n"</literal></expr></argument>, <argument><expr><name>extension</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>al_create_path</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>playing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>video</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>open_video</name></name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not open %s.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_init_user_event_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>es_inited</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>video</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_close_video</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>video</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>video</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>close_video</name></name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>es_inited</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_destroy_user_event_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>al_get_video_event_source</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>es</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_start_video</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>mixer</name></name> <operator>=</operator> <name>mixer</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>video</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>start_video</name></name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_start_video_with_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>voice</name></name> <operator>=</operator> <name>voice</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>video</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>start_video</name></name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_set_video_playing</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>play</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>play</name> <operator>!=</operator> <name><name>video</name><operator>-&gt;</operator><name>playing</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>playing</name></name> <operator>=</operator> <name>play</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>video</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>set_video_playing</name></name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>al_is_video_playing</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>video</name><operator>-&gt;</operator><name>playing</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>al_get_video_frame</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>video</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>update_video</name></name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>video</name><operator>-&gt;</operator><name>current_frame</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>double</name></type> <name>al_get_video_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_VIDEO_POSITION_TYPE</name></type> <name>which</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>which</name> <operator>==</operator> <name>ALLEGRO_VIDEO_POSITION_VIDEO_DECODE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>video</name><operator>-&gt;</operator><name>video_position</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>which</name> <operator>==</operator> <name>ALLEGRO_VIDEO_POSITION_AUDIO_DECODE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>video</name><operator>-&gt;</operator><name>audio_position</name></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>video</name><operator>-&gt;</operator><name>position</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>al_seek_video</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>pos_in_seconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>video</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>seek_video</name></name><argument_list>(<argument><expr><name>video</name></expr></argument>, <argument><expr><name>pos_in_seconds</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>double</name></type> <name>al_get_video_audio_rate</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>video</name><operator>-&gt;</operator><name>audio_rate</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>double</name></type> <name>al_get_video_fps</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>video</name><operator>-&gt;</operator><name>fps</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>float</name></type> <name>al_get_video_scaled_width</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>video</name><operator>-&gt;</operator><name>scaled_width</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>float</name></type> <name>al_get_video_scaled_height</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>video</name><operator>-&gt;</operator><name>scaled_height</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>al_init_video_addon</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>video_inited</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_VIDEO_HAVE_OGV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>add_handler</name><argument_list>(<argument><expr><literal type="string">".ogv"</literal></expr></argument>, <argument><expr><call><name>_al_video_ogv_vtable</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>handlers</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"No video handlers available!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_add_exit_func</name><argument_list>(<argument><expr><name>al_shutdown_video_addon</name></expr></argument>, <argument><expr><literal type="string">"al_shutdown_video_addon"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_is_video_addon_initialized</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>video_inited</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_shutdown_video_addon</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>video_inited</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>VideoHandler</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>handlers</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VideoHandler</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>video_inited</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>handlers</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>uint32_t</name></type> <name>al_get_allegro_video_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>ALLEGRO_VERSION_INT</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_al_compute_scaled_dimensions</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>frame_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_h</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>aspect_ratio</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>scaled_w</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>scaled_h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>aspect_ratio</name> <operator>&gt;</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>scaled_w</name> <operator>=</operator> <name>frame_h</name> <operator>*</operator> <name>aspect_ratio</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>scaled_h</name> <operator>=</operator> <name>frame_h</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>scaled_w</name> <operator>=</operator> <name>frame_w</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>scaled_h</name> <operator>=</operator> <name>frame_w</name> <operator>/</operator> <name>aspect_ratio</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


</unit>
