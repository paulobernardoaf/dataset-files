<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\audio\kcm_instance.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio_cfg.h"</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>void</name></type> <name>maybe_lock_mutex</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mutex</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>maybe_unlock_mutex</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mutex</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>_al_kcm_stream_set_mutex</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>mutex</name></name> <operator>==</operator> <name>mutex</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <name>mutex</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>is_mixer</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name> <init>= <expr><operator>(</operator><name>ALLEGRO_MIXER</name> <operator>*</operator><operator>)</operator><name>stream</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mixer</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mixer</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name> <init>= <expr><operator>*</operator><name>slot</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_kcm_stream_set_mutex</name><argument_list>(<argument><expr><name>spl</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_free</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>spl</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>is_mixer</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name> <init>= <expr><operator>(</operator><name>ALLEGRO_MIXER</name> <operator>*</operator><operator>)</operator><name>spl</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_kcm_stream_set_mutex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mixer</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mixer</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mixer</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name> <init>= <expr><operator>*</operator><name>slot</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_read</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>matrix</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mixer</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>free_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>free_buf</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator> <name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>free_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>_al_kcm_detach_from_parent</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>spl</name> <operator>||</operator> <operator>!</operator><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>is_voice</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_detach_voice</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>voice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mixer</name> <operator>=</operator> <name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>mixer</name></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mixer</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mixer</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>slot</name> <operator>==</operator> <name>spl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_delete_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mixer</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>mixer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_kcm_stream_set_mutex</name><argument_list>(<argument><expr><name>spl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_read</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>matrix</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>al_create_sample_instance</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>sample_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl>;</decl_stmt>

<expr_stmt><expr><name>spl</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>spl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>spl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_GENERIC_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Out of memory allocating sample object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sample_data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name></name> <operator>=</operator> <operator>*</operator><name>sample_data</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>free_buf</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <name>ALLEGRO_PLAYMODE_ONCE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>speed</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>gain</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>pan</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>=</operator> <ternary><condition><expr><name>sample_data</name></expr> ?</condition><then> <expr><name><name>sample_data</name><operator>-&gt;</operator><name>len</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>matrix</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>is_mixer</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_read</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>dtor_item</name></name> <operator>=</operator> <call><name>_al_kcm_register_destructor</name><argument_list>(<argument><expr><literal type="string">"sample_instance"</literal></expr></argument>, <argument><expr><name>spl</name></expr></argument>,
<argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>al_destroy_sample_instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>spl</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>al_destroy_sample_instance</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_al_kcm_destroy_sample</name><argument_list>(<argument><expr><name>spl</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>_al_kcm_destroy_sample</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>unregister</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>spl</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>unregister</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_kcm_unregister_destructor</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>dtor_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_kcm_detach_from_parent</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stream_free</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_play_sample_instance</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>al_set_sample_instance_playing</name><argument_list>(<argument><expr><name>spl</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_stop_sample_instance</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>al_set_sample_instance_playing</name><argument_list>(<argument><expr><name>spl</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>unsigned</name> <name>int</name></type> <name>al_get_sample_instance_frequency</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>frequency</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>unsigned</name> <name>int</name></type> <name>al_get_sample_instance_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>len</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>unsigned</name> <name>int</name></type> <name>al_get_sample_instance_position</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name> <operator>&amp;&amp;</operator> <name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>is_voice</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name> <init>= <expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>voice</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>al_get_voice_position</name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>spl</name><operator>-&gt;</operator><name>pos</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>float</name></type> <name>al_get_sample_instance_speed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>spl</name><operator>-&gt;</operator><name>speed</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>float</name></type> <name>al_get_sample_instance_gain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>spl</name><operator>-&gt;</operator><name>gain</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>float</name></type> <name>al_get_sample_instance_pan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>spl</name><operator>-&gt;</operator><name>pan</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>float</name></type> <name>al_get_sample_instance_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>len</name></name><operator>)</operator>
<operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>frequency</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_AUDIO_DEPTH</name></type> <name>al_get_sample_instance_depth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>depth</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_CHANNEL_CONF</name></type> <name>al_get_sample_instance_channels</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_PLAYMODE</name></type> <name>al_get_sample_instance_playmode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>spl</name><operator>-&gt;</operator><name>loop</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_get_sample_instance_playing</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name> <operator>&amp;&amp;</operator> <name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>is_voice</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name> <init>= <expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>voice</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>al_get_voice_playing</name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>spl</name><operator>-&gt;</operator><name>is_playing</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_get_sample_instance_attached</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_set_sample_instance_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name> <operator>&amp;&amp;</operator> <name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>is_voice</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name> <init>= <expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>voice</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_set_voice_position</name><argument_list>(<argument><expr><name>voice</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_set_sample_instance_length</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>is_playing</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_OBJECT</name></expr></argument>,
<argument><expr><literal type="string">"Attempted to change the length of a playing sample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_set_sample_instance_speed</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fabsf</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><literal type="number">1.0f</literal><operator>/</operator><literal type="number">64.0f</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_PARAM</name></expr></argument>,
<argument><expr><literal type="string">"Attempted to set zero speed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name> <operator>&amp;&amp;</operator> <name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>is_voice</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_GENERIC_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Could not set voice playback speed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>speed</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>mixer</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name> <init>= <expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>mixer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <operator>(</operator><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>frequency</name></name><operator>)</operator> <operator>*</operator> <name><name>spl</name><operator>-&gt;</operator><name>speed</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>step_denom</name></name> <operator>=</operator> <name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>frequency</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>step</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>speed</name></name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_set_sample_instance_gain</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name> <operator>&amp;&amp;</operator> <name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>is_voice</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_GENERIC_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Could not set gain of sample attached to voice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>gain</name></name> <operator>!=</operator> <name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>gain</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>mixer</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name> <init>= <expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>mixer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_kcm_mixer_rejig_sample_matrix</name><argument_list>(<argument><expr><name>mixer</name></expr></argument>, <argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_set_sample_instance_pan</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name> <operator>&amp;&amp;</operator> <name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>is_voice</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_GENERIC_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Could not set panning of sample attached to voice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <name>ALLEGRO_AUDIO_PAN_NONE</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>val</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">1.0</literal> <operator>||</operator> <name>val</name></expr></argument> &gt;</argument_list></name> <literal type="number">1.0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_GENERIC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid pan value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>pan</name></name> <operator>!=</operator> <name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>pan</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>mixer</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name> <init>= <expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>mixer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_kcm_mixer_rejig_sample_matrix</name><argument_list>(<argument><expr><name>mixer</name></expr></argument>, <argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_set_sample_instance_playmode</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_PLAYMODE</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>val</name> <argument_list type="generic">&lt; <argument><expr><name>ALLEGRO_PLAYMODE_ONCE</name> <operator>||</operator> <name>val</name></expr></argument> &gt;</argument_list></name> <name>ALLEGRO_PLAYMODE_BIDIR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_PARAM</name></expr></argument>,
<argument><expr><literal type="string">"Invalid loop mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>loop</name></name> <operator>!=</operator> <name>ALLEGRO_PLAYMODE_ONCE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>spl</name><operator>-&gt;</operator><name>loop_start</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>spl</name><operator>-&gt;</operator><name>loop_start</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <name><name>spl</name><operator>-&gt;</operator><name>loop_end</name></name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>spl</name><operator>-&gt;</operator><name>loop_end</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_set_sample_instance_playing</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name> <operator>||</operator> <operator>!</operator><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>is_playing</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>is_voice</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name> <init>= <expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>voice</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>al_set_voice_playing</name><argument_list>(<argument><expr><name>voice</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>is_playing</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_detach_sample_instance</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_kcm_detach_from_parent</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_read</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_set_sample</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sample_parent_t</name></type> <name>old_parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>need_reattach</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>is_playing</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_set_sample_instance_playing</name><argument_list>(<argument><expr><name>spl</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_kcm_detach_from_parent</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>need_reattach</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>frequency</name></name> <operator>!=</operator> <name><name>data</name><operator>-&gt;</operator><name>frequency</name></name> <operator>||</operator>
<name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>depth</name></name> <operator>!=</operator> <name><name>data</name><operator>-&gt;</operator><name>depth</name></name> <operator>||</operator>
<name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name> <operator>!=</operator> <name><name>data</name><operator>-&gt;</operator><name>chan_conf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>old_parent</name> <operator>=</operator> <name><name>spl</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>need_reattach</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_kcm_detach_from_parent</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name></name> <operator>=</operator> <operator>*</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>free_buf</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>need_reattach</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>old_parent</name><operator>.</operator><name>is_voice</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_attach_sample_instance_to_voice</name><argument_list>(<argument><expr><name>spl</name></expr></argument>, <argument><expr><name><name>old_parent</name><operator>.</operator><name>u</name><operator>.</operator><name>voice</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_attach_sample_instance_to_mixer</name><argument_list>(<argument><expr><name>spl</name></expr></argument>, <argument><expr><name><name>old_parent</name><operator>.</operator><name>u</name><operator>.</operator><name>mixer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>al_get_sample</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><operator>(</operator><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_set_sample_instance_channel_matrix</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>matrix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name> <operator>&amp;&amp;</operator> <name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>is_voice</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_GENERIC_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Could not set channel matrix of sample attached to voice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>mixer</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name> <init>= <expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>mixer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dst_chans</name> <init>= <expr><call><name>al_get_channel_count</name><argument_list>(<argument><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>src_chans</name> <init>= <expr><call><name>al_get_channel_count</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>matrix</name></name></expr></argument>, <argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>dst_chans</name> <operator>*</operator> <name>src_chans</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>



</unit>
