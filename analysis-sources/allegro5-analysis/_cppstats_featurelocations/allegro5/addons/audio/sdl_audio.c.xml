<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\audio\sdl_audio.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/allegro_internal_sdl.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"SDL"</literal></argument>)</argument_list></macro>

<typedef>typedef <type><struct>struct <name>SDL_VOICE</name>
<block>{
<decl_stmt><decl><type><name>SDL_AudioDeviceID</name></type> <name>device</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDL_AudioSpec</name></type> <name>spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_playing</name></decl>;</decl_stmt>
}</block></struct></type> <name>SDL_VOICE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SDL_RECORDER</name>
<block>{
<decl_stmt><decl><type><name>SDL_AudioDeviceID</name></type> <name>device</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDL_AudioSpec</name></type> <name>spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fragment</name></decl>;</decl_stmt>
}</block></struct></type> <name>SDL_RECORDER</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audio_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>, <parameter><decl><type><name>Uint8</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>SDL_VOICE</name> <modifier>*</modifier></type><name>sv</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>instance</name> <init>= <expr><name><name>sv</name><operator>-&gt;</operator><name>voice</name><operator>-&gt;</operator><name>attached_stream</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>sample</name> <init>= <expr><operator>&amp;</operator><name><name>instance</name><operator>-&gt;</operator><name>spl_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>frames</name> <init>= <expr><name><name>sv</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>samples</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>_al_voice_update</name><argument_list>(<argument><expr><name><name>sv</name><operator>-&gt;</operator><name>voice</name></name></expr></argument>, <argument><expr><name><name>sv</name><operator>-&gt;</operator><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frames</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>sample</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sdl_open</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdl_close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SDL_AudioFormat</name></type> <name>allegro_format_to_sdl</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_DEPTH</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_INT8</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AUDIO_S8</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_UINT8</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AUDIO_U8</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AUDIO_S16</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AUDIO_U16</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>AUDIO_F32</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sdl_allocate_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SDL_VOICE</name> <modifier>*</modifier></type><name>sv</name> <init>= <expr><call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>sv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDL_AudioSpec</name></type> <name>want</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>want</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>want</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>want</name><operator>.</operator><name>freq</name></name> <operator>=</operator> <name><name>voice</name><operator>-&gt;</operator><name>frequency</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>want</name><operator>.</operator><name>format</name></name> <operator>=</operator> <call><name>allegro_format_to_sdl</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>want</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <call><name>al_get_channel_count</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>want</name><operator>.</operator><name>samples</name></name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>want</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>audio_callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>want</name><operator>.</operator><name>userdata</name></name> <operator>=</operator> <name>sv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sv</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <call><name>SDL_OpenAudioDevice</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>want</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sv</name><operator>-&gt;</operator><name>spec</name></name></expr></argument>,
<argument><expr><name>SDL_AUDIO_ALLOW_FORMAT_CHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>sv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sv</name><operator>-&gt;</operator><name>voice</name></name> <operator>=</operator> <name>voice</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdl_deallocate_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SDL_VOICE</name> <modifier>*</modifier></type><name>sv</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SDL_CloseAudioDevice</name><argument_list>(<argument><expr><name><name>sv</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>sv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sdl_load_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdl_unload_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>voice</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sdl_start_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SDL_VOICE</name> <modifier>*</modifier></type><name>sv</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sv</name><operator>-&gt;</operator><name>is_playing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_PauseAudioDevice</name><argument_list>(<argument><expr><name><name>sv</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sdl_stop_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SDL_VOICE</name> <modifier>*</modifier></type><name>sv</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sv</name><operator>-&gt;</operator><name>is_playing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_PauseAudioDevice</name><argument_list>(<argument><expr><name><name>sv</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sdl_voice_is_playing</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SDL_VOICE</name> <modifier>*</modifier></type><name>sv</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>sv</name><operator>-&gt;</operator><name>is_playing</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>sdl_get_voice_position</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>pos</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sdl_set_voice_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>recorder_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>, <parameter><decl><type><name>Uint8</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_AUDIO_RECORDER</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>(</operator><name>ALLEGRO_AUDIO_RECORDER</name> <operator>*</operator><operator>)</operator> <name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDL_RECORDER</name> <modifier>*</modifier></type><name>sdl</name> <init>= <expr><operator>(</operator><name>SDL_RECORDER</name> <operator>*</operator><operator>)</operator> <name><name>r</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>is_recording</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>SDL_min</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>samples</name></name> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>sample_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>fragments</name><index>[<expr><name><name>sdl</name><operator>-&gt;</operator><name>fragment</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>user_event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_AUDIO_RECORDER_EVENT</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>user_event</name><operator>.</operator><name>user</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_AUDIO_RECORDER_FRAGMENT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>al_get_audio_recorder_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>user_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>fragments</name><index>[<expr><name><name>sdl</name><operator>-&gt;</operator><name>fragment</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <name>count</name> <operator>/</operator> <name><name>r</name><operator>-&gt;</operator><name>sample_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_emit_user_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>user_event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sdl</name><operator>-&gt;</operator><name>fragment</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sdl</name><operator>-&gt;</operator><name>fragment</name></name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>fragment_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sdl</name><operator>-&gt;</operator><name>fragment</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sdl_allocate_recorder</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_RECORDER</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SDL_RECORDER</name> <modifier>*</modifier></type><name>sdl</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sdl</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sdl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sdl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to allocate memory for SDL_RECORDER.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>SDL_AudioSpec</name></type> <name>want</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>want</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>want</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>want</name><operator>.</operator><name>freq</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>frequency</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>want</name><operator>.</operator><name>format</name></name> <operator>=</operator> <call><name>allegro_format_to_sdl</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>want</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <call><name>al_get_channel_count</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>want</name><operator>.</operator><name>samples</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>samples</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>want</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>recorder_callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>want</name><operator>.</operator><name>userdata</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sdl</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <call><name>SDL_OpenAudioDevice</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>want</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sdl</name><operator>-&gt;</operator><name>spec</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sdl</name><operator>-&gt;</operator><name>fragment</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>sdl</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SDL_PauseAudioDevice</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdl_deallocate_recorder</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_RECORDER</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SDL_RECORDER</name> <modifier>*</modifier></type><name>sdl</name> <init>= <expr><operator>(</operator><name>SDL_RECORDER</name> <operator>*</operator><operator>)</operator> <name><name>r</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SDL_CloseAudioDevice</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>ALLEGRO_AUDIO_DRIVER</name></type> <name>_al_kcm_sdl_driver</name> <init>=
<expr><block>{
<expr><literal type="string">"SDL"</literal></expr>,
<expr><name>sdl_open</name></expr>,
<expr><name>sdl_close</name></expr>,
<expr><name>sdl_allocate_voice</name></expr>,
<expr><name>sdl_deallocate_voice</name></expr>,
<expr><name>sdl_load_voice</name></expr>,
<expr><name>sdl_unload_voice</name></expr>,
<expr><name>sdl_start_voice</name></expr>,
<expr><name>sdl_stop_voice</name></expr>,
<expr><name>sdl_voice_is_playing</name></expr>,
<expr><name>sdl_get_voice_position</name></expr>,
<expr><name>sdl_set_voice_position</name></expr>,
<expr><name>sdl_allocate_recorder</name></expr>,
<expr><name>sdl_deallocate_recorder</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
