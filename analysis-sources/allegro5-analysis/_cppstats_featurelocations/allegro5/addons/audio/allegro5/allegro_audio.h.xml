<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\audio\allegro5\allegro_audio.h">




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__al_included_allegro5_allegro_audio_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__al_included_allegro5_allegro_audio_h</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>ALLEGRO_MINGW32</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>defined</name> <name>ALLEGRO_MSVC</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>defined</name> <name>ALLEGRO_BCC32</name><operator>)</operator></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_STATICLINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_KCM_AUDIO_SRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_KCM_AUDIO_DLL</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_KCM_AUDIO_DLL</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_KCM_AUDIO_DLL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_MSVC</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_KCM_AUDIO_FUNC</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>args</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_ALLEGRO_KCM_AUDIO_DLL type __cdecl name args</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_MINGW32</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_KCM_AUDIO_FUNC</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>args</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern type name args</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_BCC32</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_KCM_AUDIO_FUNC</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>args</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern _ALLEGRO_KCM_AUDIO_DLL type name args</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_KCM_AUDIO_FUNC</name></cpp:macro> <cpp:value>AL_FUNC</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<enum>enum <name>ALLEGRO_AUDIO_EVENT_TYPE</name>
<block>{


<decl><name>_KCM_STREAM_FEEDER_QUIT_EVENT_TYPE</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>,
<decl><name>ALLEGRO_EVENT_AUDIO_STREAM_FRAGMENT</name> <init>= <expr><literal type="number">513</literal></expr></init></decl>,
<decl><name>ALLEGRO_EVENT_AUDIO_STREAM_FINISHED</name> <init>= <expr><literal type="number">514</literal></expr></init></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_UNSTABLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_INTERNAL_UNSTABLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_KCM_AUDIO_SRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl><name>ALLEGRO_EVENT_AUDIO_RECORDER_FRAGMENT</name> <init>= <expr><literal type="number">515</literal></expr></init></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</enum>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_UNSTABLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_INTERNAL_UNSTABLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_KCM_AUDIO_SRC</name></expr></argument>)</argument_list></call></expr></cpp:if>


<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_AUDIO_RECORDER_EVENT</name></name></type> <name>ALLEGRO_AUDIO_RECORDER_EVENT</name>;</typedef>
<struct>struct <name>ALLEGRO_AUDIO_RECORDER_EVENT</name>
<block>{
<macro><name>_AL_EVENT_HEADER</name><argument_list>(<argument>struct ALLEGRO_AUDIO_RECORDER</argument>)</argument_list></macro>
<decl_stmt><decl><type><name><name>struct</name> <name>ALLEGRO_USER_EVENT_DESCRIPTOR</name></name> <modifier>*</modifier></type><name>__internal__descr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<enum>enum <name>ALLEGRO_AUDIO_DEPTH</name>
<block>{




<decl><name>ALLEGRO_AUDIO_DEPTH_INT8</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,
<decl><name>ALLEGRO_AUDIO_DEPTH_INT16</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>ALLEGRO_AUDIO_DEPTH_INT24</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>ALLEGRO_AUDIO_DEPTH_FLOAT32</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>,

<decl><name>ALLEGRO_AUDIO_DEPTH_UNSIGNED</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,


<decl><name>ALLEGRO_AUDIO_DEPTH_UINT8</name> <init>= <expr><name>ALLEGRO_AUDIO_DEPTH_INT8</name> <operator>|</operator>
<name>ALLEGRO_AUDIO_DEPTH_UNSIGNED</name></expr></init></decl>,
<decl><name>ALLEGRO_AUDIO_DEPTH_UINT16</name> <init>= <expr><name>ALLEGRO_AUDIO_DEPTH_INT16</name> <operator>|</operator>
<name>ALLEGRO_AUDIO_DEPTH_UNSIGNED</name></expr></init></decl>,
<decl><name>ALLEGRO_AUDIO_DEPTH_UINT24</name> <init>= <expr><name>ALLEGRO_AUDIO_DEPTH_INT24</name> <operator>|</operator>
<name>ALLEGRO_AUDIO_DEPTH_UNSIGNED</name></expr></init></decl>
}</block>;</enum>




<enum>enum <name>ALLEGRO_CHANNEL_CONF</name>
<block>{







<decl><name>ALLEGRO_CHANNEL_CONF_1</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,
<decl><name>ALLEGRO_CHANNEL_CONF_2</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>,
<decl><name>ALLEGRO_CHANNEL_CONF_3</name> <init>= <expr><literal type="number">0x30</literal></expr></init></decl>,
<decl><name>ALLEGRO_CHANNEL_CONF_4</name> <init>= <expr><literal type="number">0x40</literal></expr></init></decl>,
<decl><name>ALLEGRO_CHANNEL_CONF_5_1</name> <init>= <expr><literal type="number">0x51</literal></expr></init></decl>,
<decl><name>ALLEGRO_CHANNEL_CONF_6_1</name> <init>= <expr><literal type="number">0x61</literal></expr></init></decl>,
<decl><name>ALLEGRO_CHANNEL_CONF_7_1</name> <init>= <expr><literal type="number">0x71</literal></expr></init></decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_MAX_CHANNELS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
}</block>;</enum>




<enum>enum <name>ALLEGRO_PLAYMODE</name>
<block>{
<decl><name>ALLEGRO_PLAYMODE_ONCE</name> <init>= <expr><literal type="number">0x100</literal></expr></init></decl>,
<decl><name>ALLEGRO_PLAYMODE_LOOP</name> <init>= <expr><literal type="number">0x101</literal></expr></init></decl>,
<decl><name>ALLEGRO_PLAYMODE_BIDIR</name> <init>= <expr><literal type="number">0x102</literal></expr></init></decl>,
<decl><name>_ALLEGRO_PLAYMODE_STREAM_ONCE</name> <init>= <expr><literal type="number">0x103</literal></expr></init></decl>, 
<decl><name>_ALLEGRO_PLAYMODE_STREAM_ONEDIR</name> <init>= <expr><literal type="number">0x104</literal></expr></init></decl> 
}</block>;</enum>




<enum>enum <name>ALLEGRO_MIXER_QUALITY</name>
<block>{
<decl><name>ALLEGRO_MIXER_QUALITY_POINT</name> <init>= <expr><literal type="number">0x110</literal></expr></init></decl>,
<decl><name>ALLEGRO_MIXER_QUALITY_LINEAR</name> <init>= <expr><literal type="number">0x111</literal></expr></init></decl>,
<decl><name>ALLEGRO_MIXER_QUALITY_CUBIC</name> <init>= <expr><literal type="number">0x112</literal></expr></init></decl>
}</block>;</enum>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_AUDIO_PAN_NONE</name></cpp:macro> <cpp:value>(-1000.0f)</cpp:value></cpp:define>



<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_SAMPLE</name></name></type> <name>ALLEGRO_SAMPLE</name>;</typedef>




<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_SAMPLE_ID</name></name></type> <name>ALLEGRO_SAMPLE_ID</name>;</typedef>

<struct>struct <name>ALLEGRO_SAMPLE_ID</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>_id</name></decl>;</decl_stmt>
}</block>;</struct>




<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_SAMPLE_INSTANCE</name></name></type> <name>ALLEGRO_SAMPLE_INSTANCE</name>;</typedef>




<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_AUDIO_STREAM</name></name></type> <name>ALLEGRO_AUDIO_STREAM</name>;</typedef>




<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_MIXER</name></name></type> <name>ALLEGRO_MIXER</name>;</typedef>




<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_VOICE</name></name></type> <name>ALLEGRO_VOICE</name>;</typedef>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_UNSTABLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_INTERNAL_UNSTABLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_KCM_AUDIO_SRC</name></expr></argument>)</argument_list></call></expr></cpp:if>


<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_AUDIO_RECORDER</name></name></type> <name>ALLEGRO_AUDIO_RECORDER</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name><name>enum</name> <name>ALLEGRO_AUDIO_DEPTH</name></name></type> <name>ALLEGRO_AUDIO_DEPTH</name>;</typedef>
<typedef>typedef <type><name><name>enum</name> <name>ALLEGRO_CHANNEL_CONF</name></name></type> <name>ALLEGRO_CHANNEL_CONF</name>;</typedef>
<typedef>typedef <type><name><name>enum</name> <name>ALLEGRO_PLAYMODE</name></name></type> <name>ALLEGRO_PLAYMODE</name>;</typedef>
<typedef>typedef <type><name><name>enum</name> <name>ALLEGRO_MIXER_QUALITY</name></name></type> <name>ALLEGRO_MIXER_QUALITY</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_SAMPLE</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_create_sample</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><name>buf</name><operator>,</operator>
<name>unsigned</name> <name>int</name> <name>samples</name><operator>,</operator> <name>unsigned</name> <name>int</name> <name>freq</name><operator>,</operator> <name>ALLEGRO_AUDIO_DEPTH</name> <name>depth</name><operator>,</operator>
<name>ALLEGRO_CHANNEL_CONF</name> <name>chan_conf</name><operator>,</operator> <name>bool</name> <name>free_buf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_destroy_sample</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SAMPLE</name> <operator>*</operator><name>spl</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_SAMPLE_INSTANCE</name><operator>*</operator></expr></argument>, <argument><expr><name>al_create_sample_instance</name></expr></argument>, <argument><expr><operator>(</operator>
<name>ALLEGRO_SAMPLE</name> <operator>*</operator><name>data</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_destroy_sample_instance</name></expr></argument>, <argument><expr><operator>(</operator>
<name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>spl</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument>unsigned int</argument>, <argument>al_get_sample_frequency</argument>, <argument>(const ALLEGRO_SAMPLE *spl)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument>unsigned int</argument>, <argument>al_get_sample_length</argument>, <argument>(const ALLEGRO_SAMPLE *spl)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_AUDIO_DEPTH</name></expr></argument>, <argument><expr><name>al_get_sample_depth</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_SAMPLE</name> <operator>*</operator><name>spl</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_CHANNEL_CONF</name></expr></argument>, <argument><expr><name>al_get_sample_channels</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_SAMPLE</name> <operator>*</operator><name>spl</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_sample_data</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_SAMPLE</name> <operator>*</operator><name>spl</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument>unsigned int</argument>, <argument>al_get_sample_instance_frequency</argument>, <argument>(const ALLEGRO_SAMPLE_INSTANCE *spl)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument>unsigned int</argument>, <argument>al_get_sample_instance_length</argument>, <argument>(const ALLEGRO_SAMPLE_INSTANCE *spl)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument>unsigned int</argument>, <argument>al_get_sample_instance_position</argument>, <argument>(const ALLEGRO_SAMPLE_INSTANCE *spl)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>al_get_sample_instance_speed</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>spl</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>al_get_sample_instance_gain</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>spl</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>al_get_sample_instance_pan</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>spl</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>al_get_sample_instance_time</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>spl</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_AUDIO_DEPTH</name></expr></argument>, <argument><expr><name>al_get_sample_instance_depth</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>spl</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_CHANNEL_CONF</name></expr></argument>, <argument><expr><name>al_get_sample_instance_channels</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>spl</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_PLAYMODE</name></expr></argument>, <argument><expr><name>al_get_sample_instance_playmode</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>spl</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_get_sample_instance_playing</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>spl</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_get_sample_instance_attached</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>spl</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_sample_instance_position</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>spl</name><operator>,</operator> <name>unsigned</name> <name>int</name> <name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_sample_instance_length</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>spl</name><operator>,</operator> <name>unsigned</name> <name>int</name> <name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_sample_instance_speed</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>spl</name><operator>,</operator> <name>float</name> <name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_sample_instance_gain</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>spl</name><operator>,</operator> <name>float</name> <name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_sample_instance_pan</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>spl</name><operator>,</operator> <name>float</name> <name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_sample_instance_playmode</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>spl</name><operator>,</operator> <name>ALLEGRO_PLAYMODE</name> <name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_sample_instance_playing</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>spl</name><operator>,</operator> <name>bool</name> <name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_detach_sample_instance</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>spl</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_sample</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>spl</name><operator>,</operator> <name>ALLEGRO_SAMPLE</name> <operator>*</operator><name>data</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_SAMPLE</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_sample</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>spl</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_play_sample_instance</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>spl</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_stop_sample_instance</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>spl</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_UNSTABLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_INTERNAL_UNSTABLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_KCM_AUDIO_SRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_sample_instance_channel_matrix</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>spl</name><operator>,</operator> <specifier>const</specifier> <name>float</name> <operator>*</operator><name>matrix</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_AUDIO_STREAM</name><operator>*</operator></expr></argument>, <argument><expr><name>al_create_audio_stream</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name> <name>buffer_count</name><operator>,</operator>
<name>unsigned</name> <name>int</name> <name>samples</name><operator>,</operator> <name>unsigned</name> <name>int</name> <name>freq</name><operator>,</operator>
<name>ALLEGRO_AUDIO_DEPTH</name> <name>depth</name><operator>,</operator> <name>ALLEGRO_CHANNEL_CONF</name> <name>chan_conf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_destroy_audio_stream</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_drain_audio_stream</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument>unsigned int</argument>, <argument>al_get_audio_stream_frequency</argument>, <argument>(const ALLEGRO_AUDIO_STREAM *stream)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument>unsigned int</argument>, <argument>al_get_audio_stream_length</argument>, <argument>(const ALLEGRO_AUDIO_STREAM *stream)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument>unsigned int</argument>, <argument>al_get_audio_stream_fragments</argument>, <argument>(const ALLEGRO_AUDIO_STREAM *stream)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument>unsigned int</argument>, <argument>al_get_available_audio_stream_fragments</argument>, <argument>(const ALLEGRO_AUDIO_STREAM *stream)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>al_get_audio_stream_speed</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>al_get_audio_stream_gain</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>al_get_audio_stream_pan</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_CHANNEL_CONF</name></expr></argument>, <argument><expr><name>al_get_audio_stream_channels</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_AUDIO_DEPTH</name></expr></argument>, <argument><expr><name>al_get_audio_stream_depth</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_PLAYMODE</name></expr></argument>, <argument><expr><name>al_get_audio_stream_playmode</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_get_audio_stream_playing</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>spl</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_get_audio_stream_attached</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>spl</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>al_get_audio_stream_played_samples</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_audio_stream_fragment</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_audio_stream_speed</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>,</operator> <name>float</name> <name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_audio_stream_gain</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>,</operator> <name>float</name> <name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_audio_stream_pan</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>,</operator> <name>float</name> <name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_audio_stream_playmode</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>,</operator> <name>ALLEGRO_PLAYMODE</name> <name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_audio_stream_playing</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>,</operator> <name>bool</name> <name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_detach_audio_stream</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_audio_stream_fragment</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>,</operator> <name>void</name> <operator>*</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_rewind_audio_stream</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_seek_audio_stream_secs</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>,</operator> <name>double</name> <name>time</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>al_get_audio_stream_position_secs</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>al_get_audio_stream_length_secs</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_audio_stream_loop_secs</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>,</operator> <name>double</name> <name>start</name><operator>,</operator> <name>double</name> <name>end</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_EVENT_SOURCE</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_audio_stream_event_source</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_UNSTABLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_INTERNAL_UNSTABLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_KCM_AUDIO_SRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_audio_stream_channel_matrix</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>,</operator> <specifier>const</specifier> <name>float</name> <operator>*</operator><name>matrix</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_MIXER</name><operator>*</operator></expr></argument>, <argument><expr><name>al_create_mixer</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name> <name>freq</name><operator>,</operator>
<name>ALLEGRO_AUDIO_DEPTH</name> <name>depth</name><operator>,</operator> <name>ALLEGRO_CHANNEL_CONF</name> <name>chan_conf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_destroy_mixer</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_MIXER</name> <operator>*</operator><name>mixer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_attach_sample_instance_to_mixer</name></expr></argument>, <argument><expr><operator>(</operator>
<name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>stream</name><operator>,</operator> <name>ALLEGRO_MIXER</name> <operator>*</operator><name>mixer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_attach_audio_stream_to_mixer</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>,</operator>
<name>ALLEGRO_MIXER</name> <operator>*</operator><name>mixer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_attach_mixer_to_mixer</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_MIXER</name> <operator>*</operator><name>stream</name><operator>,</operator>
<name>ALLEGRO_MIXER</name> <operator>*</operator><name>mixer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_mixer_postprocess_callback</name></expr></argument>, <argument><expr><operator>(</operator>
<name>ALLEGRO_MIXER</name> <operator>*</operator><name>mixer</name><operator>,</operator>
<macro><name>void</name> <argument_list>(<argument>*cb</argument>)</argument_list></macro><operator>(</operator><name>void</name> <operator>*</operator><name>buf</name><operator>,</operator> <name>unsigned</name> <name>int</name> <name>samples</name><operator>,</operator> <name>void</name> <operator>*</operator><name>data</name><operator>)</operator><operator>,</operator>
<name>void</name> <operator>*</operator><name>data</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument>unsigned int</argument>, <argument>al_get_mixer_frequency</argument>, <argument>(const ALLEGRO_MIXER *mixer)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_CHANNEL_CONF</name></expr></argument>, <argument><expr><name>al_get_mixer_channels</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_MIXER</name> <operator>*</operator><name>mixer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_AUDIO_DEPTH</name></expr></argument>, <argument><expr><name>al_get_mixer_depth</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_MIXER</name> <operator>*</operator><name>mixer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_MIXER_QUALITY</name></expr></argument>, <argument><expr><name>al_get_mixer_quality</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_MIXER</name> <operator>*</operator><name>mixer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>al_get_mixer_gain</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_MIXER</name> <operator>*</operator><name>mixer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_get_mixer_playing</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_MIXER</name> <operator>*</operator><name>mixer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_get_mixer_attached</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_MIXER</name> <operator>*</operator><name>mixer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_mixer_frequency</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_MIXER</name> <operator>*</operator><name>mixer</name><operator>,</operator> <name>unsigned</name> <name>int</name> <name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_mixer_quality</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_MIXER</name> <operator>*</operator><name>mixer</name><operator>,</operator> <name>ALLEGRO_MIXER_QUALITY</name> <name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_mixer_gain</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_MIXER</name> <operator>*</operator><name>mixer</name><operator>,</operator> <name>float</name> <name>gain</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_mixer_playing</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_MIXER</name> <operator>*</operator><name>mixer</name><operator>,</operator> <name>bool</name> <name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_detach_mixer</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_MIXER</name> <operator>*</operator><name>mixer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_VOICE</name><operator>*</operator></expr></argument>, <argument><expr><name>al_create_voice</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name> <name>freq</name><operator>,</operator>
<name>ALLEGRO_AUDIO_DEPTH</name> <name>depth</name><operator>,</operator>
<name>ALLEGRO_CHANNEL_CONF</name> <name>chan_conf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_destroy_voice</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_VOICE</name> <operator>*</operator><name>voice</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_attach_sample_instance_to_voice</name></expr></argument>, <argument><expr><operator>(</operator>
<name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator><name>stream</name><operator>,</operator> <name>ALLEGRO_VOICE</name> <operator>*</operator><name>voice</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_attach_audio_stream_to_voice</name></expr></argument>, <argument><expr><operator>(</operator>
<name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><name>stream</name><operator>,</operator> <name>ALLEGRO_VOICE</name> <operator>*</operator><name>voice</name> <operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_attach_mixer_to_voice</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_MIXER</name> <operator>*</operator><name>mixer</name><operator>,</operator>
<name>ALLEGRO_VOICE</name> <operator>*</operator><name>voice</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_detach_voice</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_VOICE</name> <operator>*</operator><name>voice</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument>unsigned int</argument>, <argument>al_get_voice_frequency</argument>, <argument>(const ALLEGRO_VOICE *voice)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument>unsigned int</argument>, <argument>al_get_voice_position</argument>, <argument>(const ALLEGRO_VOICE *voice)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_CHANNEL_CONF</name></expr></argument>, <argument><expr><name>al_get_voice_channels</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_VOICE</name> <operator>*</operator><name>voice</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_AUDIO_DEPTH</name></expr></argument>, <argument><expr><name>al_get_voice_depth</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_VOICE</name> <operator>*</operator><name>voice</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_get_voice_playing</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_VOICE</name> <operator>*</operator><name>voice</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_voice_position</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_VOICE</name> <operator>*</operator><name>voice</name><operator>,</operator> <name>unsigned</name> <name>int</name> <name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_voice_playing</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_VOICE</name> <operator>*</operator><name>voice</name><operator>,</operator> <name>bool</name> <name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_install_audio</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_uninstall_audio</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_is_audio_installed</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>al_get_allegro_audio_version</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>al_get_channel_count</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_CHANNEL_CONF</name> <name>conf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>al_get_audio_depth_size</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_AUDIO_DEPTH</name> <name>conf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_fill_silence</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><name>buf</name><operator>,</operator> <name>unsigned</name> <name>int</name> <name>samples</name><operator>,</operator>
<name>ALLEGRO_AUDIO_DEPTH</name> <name>depth</name><operator>,</operator> <name>ALLEGRO_CHANNEL_CONF</name> <name>chan_conf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_reserve_samples</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <name>reserve_samples</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_MIXER</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_default_mixer</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_default_mixer</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_MIXER</name> <operator>*</operator><name>mixer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_restore_default_mixer</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_play_sample</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SAMPLE</name> <operator>*</operator><name>data</name><operator>,</operator>
<name>float</name> <name>gain</name><operator>,</operator> <name>float</name> <name>pan</name><operator>,</operator> <name>float</name> <name>speed</name><operator>,</operator> <name>ALLEGRO_PLAYMODE</name> <name>loop</name><operator>,</operator> <name>ALLEGRO_SAMPLE_ID</name> <operator>*</operator><name>ret_id</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_stop_sample</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SAMPLE_ID</name> <operator>*</operator><name>spl_id</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_stop_samples</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_VOICE</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_default_voice</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_set_default_voice</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_VOICE</name> <operator>*</operator><name>voice</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_UNSTABLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_INTERNAL_UNSTABLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_KCM_AUDIO_SRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_SAMPLE_INSTANCE</name><operator>*</operator></expr></argument>, <argument><expr><name>al_lock_sample_id</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SAMPLE_ID</name> <operator>*</operator><name>spl_id</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_unlock_sample_id</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SAMPLE_ID</name> <operator>*</operator><name>spl_id</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_register_sample_loader</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>ext</name><operator>,</operator>
<name>ALLEGRO_SAMPLE</name> <operator>*</operator><call>(<modifier>*</modifier><name>loader</name>)<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>filename</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_register_sample_saver</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>ext</name><operator>,</operator>
<call><call><name>bool</name> <argument_list>(<argument><expr><operator>*</operator><name>saver</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>filename</name></expr></argument>, <argument><expr><name>ALLEGRO_SAMPLE</name> <operator>*</operator><name>spl</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_register_audio_stream_loader</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>ext</name><operator>,</operator>
<name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><operator>(</operator><operator>*</operator><name>stream_loader</name><operator>)</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>filename</name><operator>,</operator>
<name>size_t</name> <name>buffer_count</name><operator>,</operator> <name>unsigned</name> <name>int</name> <name>samples</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_register_sample_loader_f</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>ext</name><operator>,</operator>
<name>ALLEGRO_SAMPLE</name> <operator>*</operator><call>(<modifier>*</modifier><name>loader</name>)<argument_list>(<argument><expr><name>ALLEGRO_FILE</name> <operator>*</operator><name>fp</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_register_sample_saver_f</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>ext</name><operator>,</operator>
<call><call><name>bool</name> <argument_list>(<argument><expr><operator>*</operator><name>saver</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ALLEGRO_FILE</name> <operator>*</operator><name>fp</name></expr></argument>, <argument><expr><name>ALLEGRO_SAMPLE</name> <operator>*</operator><name>spl</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_register_audio_stream_loader_f</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>ext</name><operator>,</operator>
<name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><operator>(</operator><operator>*</operator><name>stream_loader</name><operator>)</operator><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>fp</name><operator>,</operator>
<name>size_t</name> <name>buffer_count</name><operator>,</operator> <name>unsigned</name> <name>int</name> <name>samples</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_SAMPLE</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_load_sample</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>filename</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_save_sample</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>filename</name><operator>,</operator>
<name>ALLEGRO_SAMPLE</name> <operator>*</operator><name>spl</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_load_audio_stream</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>filename</name><operator>,</operator>
<name>size_t</name> <name>buffer_count</name><operator>,</operator> <name>unsigned</name> <name>int</name> <name>samples</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_SAMPLE</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_load_sample_f</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name><operator>*</operator> <name>fp</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>ident</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_save_sample_f</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name><operator>*</operator> <name>fp</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>ident</name><operator>,</operator>
<name>ALLEGRO_SAMPLE</name> <operator>*</operator><name>spl</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_load_audio_stream_f</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name><operator>*</operator> <name>fp</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>ident</name><operator>,</operator>
<name>size_t</name> <name>buffer_count</name><operator>,</operator> <name>unsigned</name> <name>int</name> <name>samples</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_UNSTABLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_INTERNAL_UNSTABLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_KCM_AUDIO_SRC</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_AUDIO_RECORDER</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_create_audio_recorder</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name> <name>fragment_count</name><operator>,</operator>
<name>unsigned</name> <name>int</name> <name>samples</name><operator>,</operator> <name>unsigned</name> <name>int</name> <name>freq</name><operator>,</operator> <name>ALLEGRO_AUDIO_DEPTH</name> <name>depth</name><operator>,</operator> <name>ALLEGRO_CHANNEL_CONF</name> <name>chan_conf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_start_audio_recorder</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_AUDIO_RECORDER</name> <operator>*</operator><name>r</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_stop_audio_recorder</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_AUDIO_RECORDER</name> <operator>*</operator><name>r</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_is_audio_recorder_recording</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_AUDIO_RECORDER</name> <operator>*</operator><name>r</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_EVENT_SOURCE</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_audio_recorder_event_source</name></expr></argument>,
<argument><expr><operator>(</operator><name>ALLEGRO_AUDIO_RECORDER</name> <operator>*</operator><name>r</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_AUDIO_RECORDER_EVENT</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_audio_recorder_event</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_EVENT</name> <operator>*</operator><name>event</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_KCM_AUDIO_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_destroy_audio_recorder</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_AUDIO_RECORDER</name> <operator>*</operator><name>r</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



</unit>
