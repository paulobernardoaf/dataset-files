<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\audio\openal.c">




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_MACOSX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_IPHONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OpenAL/al.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OpenAL/alc.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;al.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alc.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"openal"</literal></argument>)</argument_list></macro>


<decl_stmt><decl><type><specifier>static</specifier> <name>ALCdevice</name> <modifier>*</modifier></type><name>openal_dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ALCcontext</name> <modifier>*</modifier></type><name>openal_context</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>preferred_frag_size</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ALuint</name></type> <name>preferred_buf_count</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>openal_get_err_str</name><parameter_list>(<parameter><decl><type><name>ALenum</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AL_NO_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"There is no OpenAL error"</literal></expr>;</return>
<case>case <expr><name>AL_INVALID_NAME</name></expr>:</case>
<return>return <expr><literal type="string">"A bad name (ID) was passed to OpenAL"</literal></expr>;</return>
<case>case <expr><name>AL_INVALID_ENUM</name></expr>:</case>
<return>return <expr><literal type="string">"An invalid enum was passed to OpenAL"</literal></expr>;</return>
<case>case <expr><name>AL_INVALID_VALUE</name></expr>:</case>
<return>return <expr><literal type="string">"An Invalid enum was passed to OpenAL"</literal></expr>;</return>
<case>case <expr><name>AL_INVALID_OPERATION</name></expr>:</case>
<return>return <expr><literal type="string">"The requestion operation is invalid"</literal></expr>;</return>
<case>case <expr><name>AL_OUT_OF_MEMORY</name></expr>:</case>
<return>return <expr><literal type="string">"OpenAL ran out of memory"</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="string">"Unknown error"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alc_get_err_str</name><parameter_list>(<parameter><decl><type><name>ALCenum</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALC_NO_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"There is no OpenAL error"</literal></expr>;</return>
<case>case <expr><name>ALC_INVALID_DEVICE</name></expr>:</case>
<return>return <expr><literal type="string">"A bad device was passed to OpenAL"</literal></expr>;</return>
<case>case <expr><name>ALC_INVALID_CONTEXT</name></expr>:</case>
<return>return <expr><literal type="string">"An bad context was passed to OpenAL"</literal></expr>;</return>
<case>case <expr><name>ALC_INVALID_ENUM</name></expr>:</case>
<return>return <expr><literal type="string">"An Invalid enum was passed to OpenAL"</literal></expr>;</return>
<case>case <expr><name>ALC_INVALID_VALUE</name></expr>:</case>
<return>return <expr><literal type="string">"The requestion operation is invalid"</literal></expr>;</return>
<case>case <expr><name>ALC_OUT_OF_MEMORY</name></expr>:</case>
<return>return <expr><literal type="string">"OpenAL ran out of memory"</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="string">"Unknown error"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>_openal_open</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALenum</name></type> <name>openal_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALCenum</name></type> <name>alc_err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Starting OpenAL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>openal_err</name> <operator>=</operator> <call><name>alGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>openal_dev</name> <operator>=</operator> <call><name>alcOpenDevice</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>alc_err</name> <operator>=</operator> <name>ALC_NO_ERROR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>openal_dev</name> <operator>||</operator> <operator>(</operator><name>alc_err</name> <operator>=</operator> <call><name>alcGetError</name><argument_list>(<argument><expr><name>openal_dev</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ALC_NO_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not open audio device: %s\n"</literal></expr></argument>,
<argument><expr><call><name>alc_get_err_str</name><argument_list>(<argument><expr><name>alc_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>openal_context</name> <operator>=</operator> <call><name>alcCreateContext</name><argument_list>(<argument><expr><name>openal_dev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>alc_err</name> <operator>=</operator> <name>ALC_NO_ERROR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>openal_context</name> <operator>||</operator> <operator>(</operator><name>alc_err</name> <operator>=</operator> <call><name>alcGetError</name><argument_list>(<argument><expr><name>openal_dev</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ALC_NO_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not create current device context: %s\n"</literal></expr></argument>,
<argument><expr><call><name>alc_get_err_str</name><argument_list>(<argument><expr><name>alc_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>alcMakeContextCurrent</name><argument_list>(<argument><expr><name>openal_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>ALLEGRO_IPHONE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>alc_err</name> <operator>=</operator> <call><name>alcGetError</name><argument_list>(<argument><expr><name>openal_dev</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ALC_NO_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not make context current: %s\n"</literal></expr></argument>,
<argument><expr><call><name>alc_get_err_str</name><argument_list>(<argument><expr><name>alc_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>alDistanceModel</name><argument_list>(<argument><expr><name>AL_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>openal_err</name> <operator>=</operator> <call><name>alGetError</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AL_NO_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not set distance model: %s\n"</literal></expr></argument>,
<argument><expr><call><name>openal_get_err_str</name><argument_list>(<argument><expr><name>openal_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Vendor: %s\n"</literal></expr></argument>, <argument><expr><call><name>alGetString</name><argument_list>(<argument><expr><name>AL_VENDOR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Version: %s\n"</literal></expr></argument>, <argument><expr><call><name>alGetString</name><argument_list>(<argument><expr><name>AL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Renderer: %s\n"</literal></expr></argument>, <argument><expr><call><name>alGetString</name><argument_list>(<argument><expr><name>AL_RENDERER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Extensions: %s\n"</literal></expr></argument>, <argument><expr><call><name>alGetString</name><argument_list>(<argument><expr><name>AL_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>_openal_close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>alGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alcGetError</name><argument_list>(<argument><expr><name>openal_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>alcMakeContextCurrent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alcDestroyContext</name><argument_list>(<argument><expr><name>openal_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alcCloseDevice</name><argument_list>(<argument><expr><name>openal_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>openal_context</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>openal_dev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>



<typedef>typedef <type><struct>struct <name>ALLEGRO_AL_DATA</name> <block>{
<decl_stmt><decl><type><name>ALuint</name> <modifier>*</modifier></type><name>buffers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>num_buffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALuint</name></type> <name>buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALuint</name></type> <name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALuint</name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>stopped</name></decl>;</decl_stmt>
}</block></struct></type> <name>ALLEGRO_AL_DATA</name>;</typedef>




<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>_openal_update</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name> <init>= <expr><operator>(</operator><name>ALLEGRO_VOICE</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_AL_DATA</name> <modifier>*</modifier></type><name>ex_data</name> <init>= <expr><operator>(</operator><name>ALLEGRO_AL_DATA</name><operator>*</operator><operator>)</operator><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>samples_per_update</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bytes_per_sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>silence</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>alSourcei</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>AL_LOOPING</name></expr></argument>, <argument><expr><name>AL_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>silence</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ex_data</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AL_FORMAT_STEREO8</name> <operator>||</operator>
<name><name>ex_data</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AL_FORMAT_MONO8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>silence</name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ex_data</name><operator>-&gt;</operator><name>num_buffers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>alBufferData</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>silence</name></expr></argument>,
<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>frequency</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>alSourceQueueBuffers</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>num_buffers</name></name></expr></argument>,
<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>alSourcePlay</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>ex_data</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AL_FORMAT_STEREO16</name></expr>:</case>
<expr_stmt><expr><name>bytes_per_sample</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AL_FORMAT_STEREO8</name></expr>:</case>
<case>case <expr><name>AL_FORMAT_MONO16</name></expr>:</case>
<expr_stmt><expr><name>bytes_per_sample</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>bytes_per_sample</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>samples_per_update</name> <operator>=</operator> <name><name>ex_data</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>/</operator> <name>bytes_per_sample</name></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>silence</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>al_get_thread_should_stop</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALint</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>alGetSourcei</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>AL_BUFFERS_PROCESSED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>--</operator><name>status</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALuint</name></type> <name>buffer</name></decl>;</decl_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>_al_voice_update</name><argument_list>(<argument><expr><name>voice</name></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>samples_per_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name>silence</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>alSourceUnqueueBuffers</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alBufferData</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>,
<argument><expr><name>samples_per_update</name> <operator>*</operator> <name>bytes_per_sample</name></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>frequency</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alSourceQueueBuffers</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>alGetSourcei</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>AL_SOURCE_STATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>AL_STOPPED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>alSourcePlay</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>alSourceStop</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>silence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>stopped</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_broadcast_cond</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>_openal_load_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_AL_DATA</name> <modifier>*</modifier></type><name>ex_data</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALenum</name></type> <name>openal_err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>loop</name></name> <operator>!=</operator> <name>ALLEGRO_PLAYMODE_ONCE</name> <operator>&amp;&amp;</operator>
<name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>loop</name></name> <operator>!=</operator> <name>ALLEGRO_PLAYMODE_LOOP</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name><name>voice</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ex_data</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Voice buffer and data buffer size mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>num_buffers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>alGenSources</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>openal_err</name> <operator>=</operator> <call><name>alGetError</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AL_NO_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not generate (voice) source: %s\n"</literal></expr></argument>,
<argument><expr><call><name>openal_get_err_str</name><argument_list>(<argument><expr><name>openal_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALuint</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>ex_data</name><operator>-&gt;</operator><name>num_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>alSourcei</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>AL_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alDeleteSources</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not allocate voice buffer memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>alGenBuffers</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>num_buffers</name></name></expr></argument>, <argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>openal_err</name> <operator>=</operator> <call><name>alGetError</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AL_NO_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>alSourcei</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>AL_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alDeleteSources</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not generate (voice) buffer: %s\n"</literal></expr></argument>,
<argument><expr><call><name>openal_get_err_str</name><argument_list>(<argument><expr><name>openal_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>alBufferData</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>format</name></name></expr></argument>,
<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>frequency</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>alSourcei</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>AL_BUFFER</name></expr></argument>, <argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>alSourcei</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>AL_LOOPING</name></expr></argument>,
<argument><expr><operator>(</operator><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>loop</name></name> <operator>!=</operator> <name>ALLEGRO_PLAYMODE_ONCE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>alSourcef</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>AL_GAIN</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>openal_err</name> <operator>=</operator> <call><name>alGetError</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AL_NO_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>alSourcei</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>AL_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alDeleteSources</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alDeleteBuffers</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>num_buffers</name></name></expr></argument>, <argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not attach voice source: %s\n"</literal></expr></argument>,
<argument><expr><call><name>openal_get_err_str</name><argument_list>(<argument><expr><name>openal_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>_openal_unload_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_AL_DATA</name> <modifier>*</modifier></type><name>ex_data</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>alSourcei</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>AL_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alDeleteSources</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alDeleteBuffers</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>num_buffers</name></name></expr></argument>, <argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>_openal_start_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_AL_DATA</name> <modifier>*</modifier></type><name>ex_data</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALenum</name></type> <name>openal_err</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>voice</name><operator>-&gt;</operator><name>is_streaming</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>alSourcePlay</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>openal_err</name> <operator>=</operator> <call><name>alGetError</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AL_NO_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not start voice: %s\n"</literal></expr></argument>,
<argument><expr><call><name>openal_get_err_str</name><argument_list>(<argument><expr><name>openal_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Starting voice\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<block>{<block_content>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name><name>voice</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ex_data</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>ex_data</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AL_FORMAT_STEREO16</name></expr>:</case>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name>preferred_frag_size</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AL_FORMAT_STEREO8</name></expr>:</case>
<case>case <expr><name>AL_FORMAT_MONO16</name></expr>:</case>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name>preferred_frag_size</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name>preferred_frag_size</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>num_buffers</name></name> <operator>=</operator> <name><name>voice</name><operator>-&gt;</operator><name>num_buffers</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ex_data</name><operator>-&gt;</operator><name>num_buffers</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>num_buffers</name></name> <operator>=</operator> <name>preferred_buf_count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>alGenSources</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>alGetError</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>AL_NO_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALuint</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>ex_data</name><operator>-&gt;</operator><name>num_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>alSourcei</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>AL_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alDeleteSources</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>alGenBuffers</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>num_buffers</name></name></expr></argument>, <argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>alGetError</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>AL_NO_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>alSourcei</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>AL_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alDeleteSources</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>alSourcef</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>AL_GAIN</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>alGetError</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>AL_NO_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>alSourcei</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>AL_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alDeleteSources</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alDeleteBuffers</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>num_buffers</name></name></expr></argument>, <argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>stopped</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <call><name>al_create_thread</name><argument_list>(<argument><expr><name>_openal_update</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_start_thread</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Starting voice\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>_openal_stop_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name><modifier>*</modifier></type> <name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_AL_DATA</name> <modifier>*</modifier></type><name>ex_data</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALenum</name></type> <name>openal_err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Trying to stop empty voice buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>voice</name><operator>-&gt;</operator><name>is_streaming</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>alSourceStop</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>openal_err</name> <operator>=</operator> <call><name>alGetError</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AL_NO_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not stop voice: %s\n"</literal></expr></argument>,
<argument><expr><call><name>openal_get_err_str</name><argument_list>(<argument><expr><name>openal_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex_data</name><operator>-&gt;</operator><name>thread</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_thread_should_stop</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name><name>ex_data</name><operator>-&gt;</operator><name>stopped</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_wait_cond</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>al_join_thread</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>stopped</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>alSourcei</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>AL_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alDeleteSources</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alDeleteBuffers</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>num_buffers</name></name></expr></argument>, <argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>buffers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>alGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>_openal_voice_is_playing</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_AL_DATA</name> <modifier>*</modifier></type><name>ex_data</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALint</name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ex_data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>alGetSourcei</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>AL_SOURCE_STATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>status</name> <operator>==</operator> <name>AL_PLAYING</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>_openal_allocate_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_AL_DATA</name> <modifier>*</modifier></type><name>ex_data</name></decl>;</decl_stmt>


<switch>switch <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT8</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT8</name></expr>:</case>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"OpenAL requires 8-bit data to be unsigned\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT16</name></expr>:</case>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"OpenAL requires 16-bit data to be signed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT24</name></expr>:</case>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"OpenAL does not support 24-bit data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT24</name></expr>:</case>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"OpenAL does not support 24-bit data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_FLOAT32</name></expr>:</case>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"OpenAL does not support 32-bit floating data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Cannot allocate unknown voice depth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name>ex_data</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ex_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ex_data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not allocate voice data memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>chan_conf</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_CHANNEL_CONF_1</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_UINT8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AL_FORMAT_MONO8</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AL_FORMAT_MONO16</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_CHANNEL_CONF_2</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_UINT8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AL_FORMAT_STEREO8</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AL_FORMAT_STEREO16</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_CHANNEL_CONF_3</name></expr>:</case>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"OpenAL does not support voice with 3 channel configuration\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>ex_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>ALLEGRO_CHANNEL_CONF_4</name></expr>:</case>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <call><name>alGetEnumValue</name><argument_list>(<argument><expr><literal type="string">"AL_FORMAT_QUAD16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ex_data</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"OpenAL cannot allocate voice with 4.0 channel configuration\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>ex_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"OpenAL requires 16-bit signed data for 4 channel configuration\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>ex_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<break>break;</break>
<case>case <expr><name>ALLEGRO_CHANNEL_CONF_5_1</name></expr>:</case>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <call><name>alGetEnumValue</name><argument_list>(<argument><expr><literal type="string">"AL_FORMAT_51CHN_16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ex_data</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Cannot allocate voice with 5.1 channel configuration\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>ex_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_UINT16</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"5.1 channel requires 16-bit signed data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>ex_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<break>break;</break>
<case>case <expr><name>ALLEGRO_CHANNEL_CONF_6_1</name></expr>:</case>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <call><name>alGetEnumValue</name><argument_list>(<argument><expr><literal type="string">"AL_FORMAT_61CHN_16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ex_data</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Cannot allocate voice with 6.1 channel configuration\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>ex_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_UINT16</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"6.1 channel requires 16-bit signed data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>ex_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<break>break;</break>
<case>case <expr><name>ALLEGRO_CHANNEL_CONF_7_1</name></expr>:</case>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <call><name>alGetEnumValue</name><argument_list>(<argument><expr><literal type="string">"AL_FORMAT_71CHN_16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ex_data</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Cannot allocate voice with 7.1 channel configuration\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>ex_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_UINT16</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"7.1 channel requires 16-bit signed data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>ex_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Cannot allocate voice with unknown channel configuration\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>ex_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>ex_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>stopped</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>_openal_deallocate_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_AL_DATA</name> <modifier>*</modifier></type><name>ex_data</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>thread</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ex_data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>_openal_get_voice_position</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_AL_DATA</name> <modifier>*</modifier></type><name>ex_data</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALint</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>alGetSourcei</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>AL_SAMPLE_OFFSET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>alGetError</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>AL_NO_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>pos</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>_openal_set_voice_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_AL_DATA</name> <modifier>*</modifier></type><name>ex_data</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>alSourcei</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>AL_SAMPLE_OFFSET</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>alGetError</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>AL_NO_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>ALLEGRO_AUDIO_DRIVER</name></type> <name>_al_kcm_openal_driver</name> <init>= <expr><block>{
<expr><literal type="string">"OpenAL"</literal></expr>,

<expr><name>_openal_open</name></expr>,
<expr><name>_openal_close</name></expr>,

<expr><name>_openal_allocate_voice</name></expr>,
<expr><name>_openal_deallocate_voice</name></expr>,

<expr><name>_openal_load_voice</name></expr>,
<expr><name>_openal_unload_voice</name></expr>,

<expr><name>_openal_start_voice</name></expr>,
<expr><name>_openal_stop_voice</name></expr>,

<expr><name>_openal_voice_is_playing</name></expr>,

<expr><name>_openal_get_voice_position</name></expr>,
<expr><name>_openal_set_voice_position</name></expr>,

<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>


</unit>
