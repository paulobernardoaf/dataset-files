<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\audio\kcm_voice.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio_cfg.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"audio"</literal></argument>)</argument_list></macro>



<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>stream_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>vbuf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_AUDIO_DEPTH</name></type> <name>buffer_depth</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dest_maxc</name></decl></parameter>)</parameter_list>;</function_decl>
















<function><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_al_voice_update</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name> <operator>==</operator> <name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mutex</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>spl_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>spl_read</name></name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>,
<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>al_create_voice</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>freq</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_AUDIO_DEPTH</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_CHANNEL_CONF</name></type> <name>chan_conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>freq</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_PARAM</name></expr></argument>, <argument><expr><literal type="string">"Invalid Voice Frequency"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>voice</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>voice</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>voice</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>chan_conf</name></name> <operator>=</operator> <name>chan_conf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>frequency</name></name> <operator>=</operator> <name>freq</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <call><name>al_create_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <call><name>al_create_cond</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>driver</name></name> <operator>=</operator> <name>_al_kcm_driver</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>_al_kcm_driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>_al_kcm_driver</name><operator>-&gt;</operator><name>allocate_voice</name></name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_cond</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>dtor_item</name></name> <operator>=</operator> <call><name>_al_kcm_register_destructor</name><argument_list>(<argument><expr><literal type="string">"voice"</literal></expr></argument>, <argument><expr><name>voice</name></expr></argument>,
<argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>al_destroy_voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>voice</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_destroy_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>voice</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_kcm_unregister_destructor</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>dtor_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_detach_voice</name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>al_get_voice_playing</name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name><name>voice</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>deallocate_voice</name></name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_cond</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_attach_sample_instance_to_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(
<argument><expr><literal type="string">"Attempted to attach to a voice that already has an attachment\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_OBJECT</name></expr></argument>,
<argument><expr><literal type="string">"Attempted to attach to a voice that already has an attachment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Attempted to attach a sample that is already attached\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_OBJECT</name></expr></argument>,
<argument><expr><literal type="string">"Attempted to attach a sample that is already attached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>chan_conf</name></name> <operator>!=</operator> <name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name> <operator>||</operator>
<name><name>voice</name><operator>-&gt;</operator><name>frequency</name></name> <operator>!=</operator> <name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>frequency</name></name> <operator>||</operator>
<name><name>voice</name><operator>-&gt;</operator><name>depth</name></name> <operator>!=</operator> <name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>depth</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Sample settings do not match voice settings\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_OBJECT</name></expr></argument>,
<argument><expr><literal type="string">"Sample settings do not match voice settings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name></name> <operator>=</operator> <name>spl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>is_streaming</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>num_buffers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <operator>(</operator><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>len</name></name><operator>)</operator> <operator>*</operator>
<call><name>al_get_channel_count</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call> <operator>*</operator>
<call><name>al_get_audio_depth_size</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_read</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_kcm_stream_set_mutex</name><argument_list>(<argument><expr><name>spl</name></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>voice</name></name> <operator>=</operator> <name>voice</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>is_voice</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>voice</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>load_voice</name></name><argument_list>(<argument><expr><name>voice</name></expr></argument>, <argument><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name><name>spl</name><operator>-&gt;</operator><name>is_playing</name></name> <operator>&amp;&amp;</operator> <call><name><name>voice</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>start_voice</name></name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content> 
<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_read</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_kcm_stream_set_mutex</name><argument_list>(<argument><expr><name>spl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>voice</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to load sample into voice\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>vbuf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_AUDIO_DEPTH</name></type> <name>buffer_depth</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dest_maxc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><operator>(</operator><name>ALLEGRO_AUDIO_STREAM</name><operator>*</operator><operator>)</operator><name>source</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>is_playing</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>vbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>samples</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>samples</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>_al_kcm_refill_stream</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>pending_bufs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>is_draining</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>is_playing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>vbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>vbuf</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>pending_bufs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>*</operator><name>samples</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_kcm_emit_stream_events</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bytes</name> <init>= <expr><name>pos</name> <operator>*</operator> <call><name>al_get_channel_count</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call>
<operator>*</operator> <call><name>al_get_audio_depth_size</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>vbuf</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>stream</name><operator>-&gt;</operator><name>pending_bufs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>bytes</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <operator>*</operator><name>samples</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>samples</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <operator>*</operator><name>samples</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dest_maxc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>buffer_depth</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_attach_audio_stream_to_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_OBJECT</name></expr></argument>,
<argument><expr><literal type="string">"Attempted to attach to a voice that already has an attachment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_OBJECT</name></expr></argument>,
<argument><expr><literal type="string">"Attempted to attach a stream that is already attached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>chan_conf</name></name> <operator>!=</operator> <name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name> <operator>||</operator>
<name><name>voice</name><operator>-&gt;</operator><name>frequency</name></name> <operator>!=</operator> <name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>frequency</name></name> <operator>||</operator>
<name><name>voice</name><operator>-&gt;</operator><name>depth</name></name> <operator>!=</operator> <name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>depth</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_OBJECT</name></expr></argument>,
<argument><expr><literal type="string">"Stream settings do not match voice settings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>spl</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_kcm_stream_set_mutex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>spl</name></name></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>voice</name></name> <operator>=</operator> <name>voice</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>parent</name><operator>.</operator><name>is_voice</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>is_streaming</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>num_buffers</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>buf_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <operator>(</operator><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>len</name></name><operator>)</operator> <operator>*</operator>
<call><name>al_get_channel_count</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call> <operator>*</operator>
<call><name>al_get_audio_depth_size</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_read</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_read</name></name> <operator>=</operator> <name>stream_read</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>voice</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>start_voice</name></name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_kcm_stream_set_mutex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>spl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>voice</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_read</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_GENERIC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to start stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_attach_mixer_to_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>is_mixer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>chan_conf</name></name> <operator>!=</operator> <name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name> <operator>||</operator>
<name><name>voice</name><operator>-&gt;</operator><name>frequency</name></name> <operator>!=</operator> <name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>frequency</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>mixer</name><operator>-&gt;</operator><name>ss</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_read</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_read</name></name> <operator>=</operator> <name>_al_kcm_mixer_read</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_kcm_stream_set_mutex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mixer</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>voice</name></name> <operator>=</operator> <name>voice</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>parent</name><operator>.</operator><name>is_voice</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>is_streaming</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>num_buffers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>voice</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>start_voice</name></name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_kcm_stream_set_mutex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mixer</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>voice</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_detach_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>voice</name><operator>-&gt;</operator><name>is_streaming</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <call><name><name>voice</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>get_voice_position</name></name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>is_playing</name></name> <operator>=</operator> <call><name><name>voice</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>voice_is_playing</name></name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>voice</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>stop_voice</name></name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>voice</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>unload_voice</name></name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>voice</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>stop_voice</name></name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_al_kcm_stream_set_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>voice</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>spl_read</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>unsigned</name> <name>int</name></type> <name>al_get_voice_frequency</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>voice</name><operator>-&gt;</operator><name>frequency</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>unsigned</name> <name>int</name></type> <name>al_get_voice_position</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>voice</name><operator>-&gt;</operator><name>is_streaming</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>voice</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>get_voice_position</name></name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>ALLEGRO_CHANNEL_CONF</name></type> <name>al_get_voice_channels</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>voice</name><operator>-&gt;</operator><name>chan_conf</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_AUDIO_DEPTH</name></type> <name>al_get_voice_depth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_get_voice_playing</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>voice</name><operator>-&gt;</operator><name>is_streaming</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>voice</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>voice_is_playing</name></name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_set_voice_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>voice</name><operator>-&gt;</operator><name>is_streaming</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>voice</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>set_voice_position</name></name><argument_list>(<argument><expr><name>voice</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_set_voice_playing</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Voice has no attachment\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>is_streaming</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Attempted to change the playing state of a voice "</literal>
<literal type="string">"with a streaming attachment (mixer or audiostreams)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>playing</name> <init>= <expr><call><name>al_get_voice_playing</name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>playing</name> <operator>==</operator> <name>val</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>playing</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Voice is already playing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Voice is already stopped\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>_al_kcm_set_voice_playing</name><argument_list>(<argument><expr><name>voice</name></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>_al_kcm_set_voice_playing</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name> <operator>==</operator> <name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mutex</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>voice</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>start_voice</name></name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>voice</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>stop_voice</name></name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>



</unit>
