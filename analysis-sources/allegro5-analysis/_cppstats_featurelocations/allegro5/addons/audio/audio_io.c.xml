<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\audio\audio_io.c">



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_exitfunc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_vector.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"audio"</literal></argument>)</argument_list></macro>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_EXTENSION_LENGTH</name></cpp:macro> <cpp:value>(32)</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>ACODEC_TABLE</name></name></type> <name>ACODEC_TABLE</name>;</typedef>
<struct>struct <name>ACODEC_TABLE</name>
<block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>ext</name><index>[<expr><name>MAX_EXTENSION_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<function_decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>loader</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>saver</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>stream_loader</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>fs_loader</name>)<parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>fs_saver</name>)<parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>fs_stream_loader</name>)<parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>



<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>acodec_inited</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>_AL_VECTOR</name></type> <name>acodec_table</name> <init>= <expr><call><name>_AL_VECTOR_INITIALIZER</name><argument_list>(<argument><expr><name>ACODEC_TABLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>acodec_shutdown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>acodec_inited</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>acodec_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>acodec_inited</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ACODEC_TABLE</name> <modifier>*</modifier></type><name>find_acodec_table_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ACODEC_TABLE</name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acodec_inited</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>acodec_inited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_add_exit_func</name><argument_list>(<argument><expr><name>acodec_shutdown</name></expr></argument>, <argument><expr><literal type="string">"acodec_shutdown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>acodec_table</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>acodec_table</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>_al_stricmp</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>ext</name></name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ent</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ACODEC_TABLE</name> <modifier>*</modifier></type><name>add_acodec_table_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ACODEC_TABLE</name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name>acodec_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>ext</name></name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>loader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>saver</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>stream_loader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>fs_loader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>fs_saver</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>fs_stream_loader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>ent</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_register_sample_loader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>,
<parameter><function_decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>loader</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ACODEC_TABLE</name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>MAX_EXTENSION_LENGTH</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>find_acodec_table_entry</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>loader</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ent</name> <operator>||</operator> <operator>!</operator><name><name>ent</name><operator>-&gt;</operator><name>loader</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>ent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>add_acodec_table_entry</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>loader</name></name> <operator>=</operator> <name>loader</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_register_sample_loader_f</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>,
<parameter><function_decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>loader</name>)<parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name><modifier>*</modifier></type> <name>fp</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ACODEC_TABLE</name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>MAX_EXTENSION_LENGTH</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>find_acodec_table_entry</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>loader</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ent</name> <operator>||</operator> <operator>!</operator><name><name>ent</name><operator>-&gt;</operator><name>fs_loader</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>ent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>add_acodec_table_entry</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>fs_loader</name></name> <operator>=</operator> <name>loader</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_register_sample_saver</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>,
<parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>saver</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ACODEC_TABLE</name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>MAX_EXTENSION_LENGTH</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>find_acodec_table_entry</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>saver</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ent</name> <operator>||</operator> <operator>!</operator><name><name>ent</name><operator>-&gt;</operator><name>saver</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>ent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>add_acodec_table_entry</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>saver</name></name> <operator>=</operator> <name>saver</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_register_sample_saver_f</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>,
<parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>saver</name>)<parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name><modifier>*</modifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ACODEC_TABLE</name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>MAX_EXTENSION_LENGTH</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>find_acodec_table_entry</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>saver</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ent</name> <operator>||</operator> <operator>!</operator><name><name>ent</name><operator>-&gt;</operator><name>fs_saver</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>ent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>add_acodec_table_entry</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>fs_saver</name></name> <operator>=</operator> <name>saver</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_register_audio_stream_loader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>,
<parameter><function_decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>stream_loader</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ACODEC_TABLE</name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>MAX_EXTENSION_LENGTH</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>find_acodec_table_entry</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream_loader</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ent</name> <operator>||</operator> <operator>!</operator><name><name>ent</name><operator>-&gt;</operator><name>stream_loader</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>ent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>add_acodec_table_entry</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>stream_loader</name></name> <operator>=</operator> <name>stream_loader</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_register_audio_stream_loader_f</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>,
<parameter><function_decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>stream_loader</name>)<parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name><modifier>*</modifier></type> <name>fp</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ACODEC_TABLE</name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>MAX_EXTENSION_LENGTH</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>find_acodec_table_entry</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream_loader</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ent</name> <operator>||</operator> <operator>!</operator><name><name>ent</name><operator>-&gt;</operator><name>fs_stream_loader</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>ent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>add_acodec_table_entry</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>fs_stream_loader</name></name> <operator>=</operator> <name>stream_loader</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>al_load_sample</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ACODEC_TABLE</name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ext</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to determine extension for %s.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>find_acodec_table_entry</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ent</name> <operator>&amp;&amp;</operator> <name><name>ent</name><operator>-&gt;</operator><name>loader</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>ent</name><operator>-&gt;</operator><name>loader</name></name><operator>)</operator><operator>(</operator><name>filename</name><operator>)</operator></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"No handler for audio file extension %s - "</literal>
<literal type="string">"therefore not trying to load %s.\n"</literal></expr></argument>, <argument><expr><name>ext</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>al_load_sample_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name><modifier>*</modifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ident</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ACODEC_TABLE</name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>find_acodec_table_entry</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ent</name> <operator>&amp;&amp;</operator> <name><name>ent</name><operator>-&gt;</operator><name>fs_loader</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>ent</name><operator>-&gt;</operator><name>fs_loader</name></name><operator>)</operator><operator>(</operator><name>fp</name><operator>)</operator></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"No handler for audio file extension %s.\n"</literal></expr></argument>, <argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>al_load_audio_stream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ACODEC_TABLE</name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ext</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to determine extension for %s.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>find_acodec_table_entry</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ent</name> <operator>&amp;&amp;</operator> <name><name>ent</name><operator>-&gt;</operator><name>stream_loader</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>ent</name><operator>-&gt;</operator><name>stream_loader</name></name><operator>)</operator><operator>(</operator><name>filename</name><operator>,</operator> <name>buffer_count</name><operator>,</operator> <name>samples</name><operator>)</operator></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"No handler for audio file extension %s - "</literal>
<literal type="string">"therefore not trying to load %s.\n"</literal></expr></argument>, <argument><expr><name>ext</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>al_load_audio_stream_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name><modifier>*</modifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ident</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ACODEC_TABLE</name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>find_acodec_table_entry</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ent</name> <operator>&amp;&amp;</operator> <name><name>ent</name><operator>-&gt;</operator><name>fs_stream_loader</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>ent</name><operator>-&gt;</operator><name>fs_stream_loader</name></name><operator>)</operator><operator>(</operator><name>fp</name><operator>,</operator> <name>buffer_count</name><operator>,</operator> <name>samples</name><operator>)</operator></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"No handler for audio file extension %s.\n"</literal></expr></argument>, <argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_save_sample</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ACODEC_TABLE</name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ext</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to determine extension for %s.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>find_acodec_table_entry</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ent</name> <operator>&amp;&amp;</operator> <name><name>ent</name><operator>-&gt;</operator><name>saver</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>ent</name><operator>-&gt;</operator><name>saver</name></name><operator>)</operator><operator>(</operator><name>filename</name><operator>,</operator> <name>spl</name><operator>)</operator></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"No handler for audio file extension %s - "</literal>
<literal type="string">"therefore not trying to load %s.\n"</literal></expr></argument>, <argument><expr><name>ext</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_save_sample_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ident</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ACODEC_TABLE</name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>find_acodec_table_entry</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ent</name> <operator>&amp;&amp;</operator> <name><name>ent</name><operator>-&gt;</operator><name>fs_saver</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>ent</name><operator>-&gt;</operator><name>fs_saver</name></name><operator>)</operator><operator>(</operator><name>fp</name><operator>,</operator> <name>spl</name><operator>)</operator></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"No handler for audio file extension %s.\n"</literal></expr></argument>, <argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>



</unit>
