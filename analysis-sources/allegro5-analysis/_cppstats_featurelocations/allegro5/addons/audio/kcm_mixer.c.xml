<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\audio\kcm_mixer.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio_cfg.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"audio"</literal></argument>)</argument_list></macro>


<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><name>float</name></type> <name><name>f32</name><index>[<expr><name>ALLEGRO_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>s16</name><index>[<expr><name>ALLEGRO_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
}</block></union></type> <name>SAMP_BUF</name>;</typedef>



<function><type><specifier>static</specifier> <name>void</name></type> <name>maybe_lock_mutex</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mutex</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>maybe_unlock_mutex</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mutex</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>float</name> <modifier>*</modifier></type><name>_al_rechannel_matrix</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CHANNEL_CONF</name></type> <name>orig</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_CHANNEL_CONF</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>gain</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pan</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>mat</name><index>[<expr><name>ALLEGRO_MAX_CHANNELS</name></expr>]</index><index>[<expr><name>ALLEGRO_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>dst_chans</name> <init>= <expr><call><name>al_get_channel_count</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>src_chans</name> <init>= <expr><call><name>al_get_channel_count</name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>src_chans</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>dst_chans</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>mat</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>dst_chans</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>orig</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>mat</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>orig</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mat</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>(</operator><name>orig</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>orig</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>target</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mat</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>(</operator><name>orig</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mat</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>(</operator><name>orig</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>orig</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>target</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>orig</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>target</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>mat</name><index>[<expr><name>dst_chans</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>src_chans</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>pan</name> <operator>!=</operator> <name>ALLEGRO_AUDIO_PAN_NONE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>rgain</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator> <name>pan</name> <operator>+</operator> <literal type="number">1.0f</literal><operator>)</operator> <operator>/</operator> <literal type="number">2.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>lgain</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><name>pan</name> <operator>+</operator> <literal type="number">1.0f</literal><operator>)</operator> <operator>/</operator> <literal type="number">2.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>src_chans</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>mat</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*=</operator> <name>lgain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mat</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*=</operator> <name>rgain</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>gain</name> <operator>!=</operator> <literal type="number">1.0f</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dst_chans</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>src_chans</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>mat</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*=</operator> <name>gain</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGMODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>debug</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"sample matrix:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dst_chans</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>debug</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>src_chans</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>debug</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>debug</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" %f"</literal></expr></argument>, <argument><expr><name><name>mat</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>&amp;</operator><name><name>mat</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>_al_kcm_mixer_rejig_sample_matrix</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>mat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dst_chans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>src_chans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mat</name> <operator>=</operator> <call><name>_al_rechannel_matrix</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name></expr></argument>,
<argument><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name></expr></argument>, <argument><expr><name><name>spl</name><operator>-&gt;</operator><name>gain</name></name></expr></argument>, <argument><expr><name><name>spl</name><operator>-&gt;</operator><name>pan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_chans</name> <operator>=</operator> <call><name>al_get_channel_count</name><argument_list>(<argument><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_chans</name> <operator>=</operator> <call><name>al_get_channel_count</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>spl</name><operator>-&gt;</operator><name>matrix</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>matrix</name></name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src_chans</name> <operator>*</operator> <name>dst_chans</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dst_chans</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>src_chans</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><name>i</name><operator>*</operator><name>src_chans</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>mat</name><index>[<expr><name>i</name><operator>*</operator><name>ALLEGRO_MAX_CHANNELS</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>bool</name></type> <name>fix_looped_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>is_empty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>


<switch>switch <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>loop</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_PLAYMODE_LOOP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>-</operator> <name><name>spl</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>step</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;=</operator> <name><name>spl</name><operator>-&gt;</operator><name>loop_end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>pos</name></name> <operator>-=</operator> <operator>(</operator><name><name>spl</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>-</operator> <name><name>spl</name><operator>-&gt;</operator><name>loop_start</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>step</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>spl</name><operator>-&gt;</operator><name>loop_start</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <operator>(</operator><name><name>spl</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>-</operator> <name><name>spl</name><operator>-&gt;</operator><name>loop_start</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>ALLEGRO_PLAYMODE_BIDIR</name></expr>:</case>




<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>-</operator> <name><name>spl</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>step</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<label><name>check_forward</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;=</operator> <name><name>spl</name><operator>-&gt;</operator><name>loop_end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <operator>-</operator><name><name>spl</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>spl</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>-</operator> <operator>(</operator><name><name>spl</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name><name>spl</name><operator>-&gt;</operator><name>loop_end</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>check_backward</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<label><name>check_backward</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>spl</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>||</operator> <name><name>spl</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;=</operator> <name><name>spl</name><operator>-&gt;</operator><name>loop_end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <operator>-</operator><name><name>spl</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>spl</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>+</operator> <operator>(</operator><name><name>spl</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>-</operator> <name><name>spl</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator></expr>;</expr_stmt>
<goto>goto <name>check_forward</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>ALLEGRO_PLAYMODE_ONCE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>is_playing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>

<case>case <expr><name>_ALLEGRO_PLAYMODE_STREAM_ONCE</name></expr>:</case>
<case>case <expr><name>_ALLEGRO_PLAYMODE_STREAM_ONEDIR</name></expr>:</case>
<expr_stmt><expr><name>stream</name> <operator>=</operator> <operator>(</operator><name>ALLEGRO_AUDIO_STREAM</name> <operator>*</operator><operator>)</operator><name>spl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_empty</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;=</operator> <name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>is_playing</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_empty</name> <operator>=</operator> <operator>!</operator><call><name>_al_kcm_refill_stream</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_empty</name> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>is_draining</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>is_playing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_kcm_emit_stream_events</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>!</operator><operator>(</operator><name>is_empty</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kcm_mixer_helpers.inc"</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>INLINE</name> <name>int32_t</name></type> <name>clamp</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>-=</operator> <name>min</name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>&amp;=</operator> <operator>(</operator><operator>~</operator><name>val</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <name>min</name></expr>;</expr_stmt>


<expr_stmt><expr><name>val</name> <operator>-=</operator> <name>max</name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>&amp;=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <name>max</name></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRESENHAM</name></cpp:macro> <cpp:value>do { delta = spl-&gt;step &gt; 0 ? spl-&gt;step : spl-&gt;step - spl-&gt;step_denom + 1; delta /= spl-&gt;step_denom; delta_error = spl-&gt;step - delta * spl-&gt;step_denom; } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_MIXER</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>NEXT_SAMPLE_VALUE</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void NAME(void *source, void **vbuf, unsigned int *samples, ALLEGRO_AUDIO_DEPTH buffer_depth, size_t dest_maxc) { ALLEGRO_SAMPLE_INSTANCE *spl = (ALLEGRO_SAMPLE_INSTANCE *)source; TYPE *buf = *vbuf; size_t maxc = al_get_channel_count(spl-&gt;spl_data.chan_conf); size_t samples_l = *samples; size_t c; int delta, delta_error; SAMP_BUF samp_buf; BRESENHAM; if (!spl-&gt;is_playing) return; while (samples_l &gt; 0) { const TYPE *s; int old_step = spl-&gt;step; if (!fix_looped_position(spl)) return; if (old_step != spl-&gt;step) { BRESENHAM; } s = (TYPE *) NEXT_SAMPLE_VALUE(&amp;samp_buf, spl, maxc); for (c = 0; c &lt; dest_maxc; c++) { ALLEGRO_STATIC_ASSERT(kcm_mixer, ALLEGRO_MAX_CHANNELS == 8); switch (maxc) { case 8: *buf += s[7] * spl-&gt;matrix[c*maxc + 7]; case 7: *buf += s[6] * spl-&gt;matrix[c*maxc + 6]; case 6: *buf += s[5] * spl-&gt;matrix[c*maxc + 5]; case 5: *buf += s[4] * spl-&gt;matrix[c*maxc + 4]; case 4: *buf += s[3] * spl-&gt;matrix[c*maxc + 3]; case 3: *buf += s[2] * spl-&gt;matrix[c*maxc + 2]; case 2: *buf += s[1] * spl-&gt;matrix[c*maxc + 1]; case 1: *buf += s[0] * spl-&gt;matrix[c*maxc + 0]; default: break; } buf++; } spl-&gt;pos += delta; spl-&gt;pos_bresenham_error += delta_error; if (spl-&gt;pos_bresenham_error &gt;= spl-&gt;step_denom) { spl-&gt;pos++; spl-&gt;pos_bresenham_error -= spl-&gt;step_denom; } samples_l--; } fix_looped_position(spl); (void)buffer_depth; }</cpp:value></cpp:define>

































































<macro><name>MAKE_MIXER</name><argument_list>(<argument>read_to_mixer_point_float_32</argument>, <argument>point_spl32</argument>, <argument>float</argument>)</argument_list></macro>
<macro><name>MAKE_MIXER</name><argument_list>(<argument>read_to_mixer_linear_float_32</argument>, <argument>linear_spl32</argument>, <argument>float</argument>)</argument_list></macro>
<macro><name>MAKE_MIXER</name><argument_list>(<argument>read_to_mixer_cubic_float_32</argument>, <argument>cubic_spl32</argument>, <argument>float</argument>)</argument_list></macro>
<macro><name>MAKE_MIXER</name><argument_list>(<argument>read_to_mixer_point_int16_t_16</argument>, <argument>point_spl16</argument>, <argument>int16_t</argument>)</argument_list></macro>
<macro><name>MAKE_MIXER</name><argument_list>(<argument>read_to_mixer_linear_int16_t_16</argument>, <argument>linear_spl16</argument>, <argument>int16_t</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAKE_MIXER</name></cpp:undef>







<function><type><name>void</name></type> <name>_al_kcm_mixer_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_AUDIO_DEPTH</name></type> <name>buffer_depth</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dest_maxc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><operator>(</operator><name>ALLEGRO_MIXER</name> <operator>*</operator><operator>)</operator><name>source</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxc</name> <init>= <expr><call><name>al_get_channel_count</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>samples_l</name> <init>= <expr><operator>*</operator><name>samples</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>is_playing</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>len</name></name><operator>*</operator><name>maxc</name> <operator>&lt;</operator> <name>samples_l</name><operator>*</operator><name>maxc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>samples_l</name><operator>*</operator><name>maxc</name><operator>*</operator><call><name>al_get_audio_depth_size</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_GENERIC_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Out of memory allocating mixer buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>samples_l</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mixer</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>samples_l</name> <operator>*</operator> <name>maxc</name> <operator>*</operator> <call><name>al_get_audio_depth_size</name><argument_list>(<argument><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mixer</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mixer</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name> <init>= <expr><operator>*</operator><name>slot</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>spl</name><operator>-&gt;</operator><name>spl_read</name></name><argument_list>(<argument><expr><name>spl</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>samples</name></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>depth</name></name></expr></argument>, <argument><expr><name>maxc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>mixer</name><operator>-&gt;</operator><name>postprocess_callback</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>mixer</name><operator>-&gt;</operator><name>postprocess_callback</name></name><argument_list>(<argument><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>,
<argument><expr><operator>*</operator><name>samples</name></expr></argument>, <argument><expr><name><name>mixer</name><operator>-&gt;</operator><name>pp_callback_userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>samples_l</name> <operator>*=</operator> <name>maxc</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>gain</name></name> <operator>!=</operator> <literal type="number">1.0f</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>mixer_gain</name> <init>= <expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>gain</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name> <init>= <expr><name>samples_l</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>depth</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_FLOAT32</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>f32</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>i</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>*=</operator> <name>mixer_gain</name></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>s16</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>i</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>*=</operator> <name>mixer_gain</name></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT8</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT24</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT8</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT16</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT24</name></expr>:</case>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>depth</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_FLOAT32</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>lbuf</name> <init>= <expr><operator>*</operator><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>f32</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>samples_l</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lbuf</name> <operator>+=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lbuf</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lbuf</name> <init>= <expr><operator>*</operator><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>s16</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>samples_l</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>x</name> <init>= <expr><operator>*</operator><name>lbuf</name> <operator>+</operator> <operator>*</operator><name>src</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">32768</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">32768</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">32767</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>lbuf</name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lbuf</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT8</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT24</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT8</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT16</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT24</name></expr>:</case>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>buffer_depth</name> <operator>&amp;</operator> <operator>~</operator><name>ALLEGRO_AUDIO_DEPTH_UNSIGNED</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_FLOAT32</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT24</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>depth</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_FLOAT32</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>off</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>buffer_depth</name> <operator>&amp;</operator> <name>ALLEGRO_AUDIO_DEPTH_UNSIGNED</name><operator>)</operator></expr>
?</condition><then> <expr><literal type="number">0x800000</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>lbuf</name> <init>= <expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>s24</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>f32</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>samples_l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lbuf</name> <operator>=</operator> <call><name>clamp</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><literal type="number">0x7FFFFF</literal> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>~</operator><literal type="number">0x7FFFFF</literal></expr></argument>, <argument><expr><literal type="number">0x7FFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lbuf</name> <operator>+=</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lbuf</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>samples_l</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr>:</case>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT8</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT24</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT8</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT16</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT24</name></expr>:</case>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>depth</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_FLOAT32</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name></type> <name>off</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>buffer_depth</name> <operator>&amp;</operator> <name>ALLEGRO_AUDIO_DEPTH_UNSIGNED</name><operator>)</operator></expr>
?</condition><then> <expr><literal type="number">0x8000</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lbuf</name> <init>= <expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>s16</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>f32</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>samples_l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lbuf</name> <operator>=</operator> <call><name>clamp</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><literal type="number">0x7FFF</literal> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr></argument>, <argument><expr><operator>~</operator><literal type="number">0x7FFF</literal></expr></argument>, <argument><expr><literal type="number">0x7FFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lbuf</name> <operator>+=</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lbuf</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>samples_l</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>buffer_depth</name> <operator>!=</operator> <name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lbuf</name> <init>= <expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>s16</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>samples_l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lbuf</name><operator>++</operator> <operator>^=</operator> <literal type="number">0x8000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>samples_l</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT8</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT24</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT8</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT16</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT24</name></expr>:</case>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>


<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT8</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>depth</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_FLOAT32</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int8_t</name></type> <name>off</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>buffer_depth</name> <operator>&amp;</operator> <name>ALLEGRO_AUDIO_DEPTH_UNSIGNED</name><operator>)</operator></expr>
?</condition><then> <expr><literal type="number">0x80</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>lbuf</name> <init>= <expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>s8</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>f32</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>samples_l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lbuf</name> <operator>=</operator> <call><name>clamp</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><literal type="number">0x7F</literal> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr></argument>, <argument><expr><operator>~</operator><literal type="number">0x7F</literal></expr></argument>, <argument><expr><literal type="number">0x7F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lbuf</name> <operator>+=</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lbuf</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>samples_l</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr>:</case>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT8</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT24</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT8</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT16</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT24</name></expr>:</case>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT8</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT16</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT24</name></expr>:</case>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dest_maxc</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>al_create_mixer</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>freq</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_AUDIO_DEPTH</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_CHANNEL_CONF</name></type> <name>chan_conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>default_mixer_quality</name> <init>= <expr><name>ALLEGRO_MIXER_QUALITY_LINEAR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument>,
<argument><expr><literal type="string">"default_mixer_quality"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_stricmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"point"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Point sampling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>default_mixer_quality</name> <operator>=</operator> <name>ALLEGRO_MIXER_QUALITY_POINT</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>_al_stricmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"linear"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Linear interpolation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>default_mixer_quality</name> <operator>=</operator> <name>ALLEGRO_MIXER_QUALITY_LINEAR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>_al_stricmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"cubic"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Cubic interpolation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>default_mixer_quality</name> <operator>=</operator> <name>ALLEGRO_MIXER_QUALITY_CUBIC</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>freq</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_PARAM</name></expr></argument>,
<argument><expr><literal type="string">"Attempted to create mixer with no frequency"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>!=</operator> <name>ALLEGRO_AUDIO_DEPTH_FLOAT32</name> <operator>&amp;&amp;</operator>
<name>depth</name> <operator>!=</operator> <name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_PARAM</name></expr></argument>, <argument><expr><literal type="string">"Unsupported mixer depth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mixer</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_MIXER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mixer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_GENERIC_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Out of memory allocating mixer object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>is_playing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>free_buf</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>loop</name></name> <operator>=</operator> <name>ALLEGRO_PLAYMODE_ONCE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>gain</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>depth</name></name> <operator>=</operator> <name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name> <operator>=</operator> <name>chan_conf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>frequency</name></name> <operator>=</operator> <name>freq</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>is_mixer</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_read</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mixer</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator> <name>default_mixer_quality</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mixer</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_SAMPLE_INSTANCE</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mixer</name><operator>-&gt;</operator><name>dtor_item</name></name> <operator>=</operator> <call><name>_al_kcm_register_destructor</name><argument_list>(<argument><expr><literal type="string">"mixer"</literal></expr></argument>, <argument><expr><name>mixer</name></expr></argument>, <argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>al_destroy_mixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>mixer</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_destroy_mixer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mixer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_kcm_unregister_destructor</name><argument_list>(<argument><expr><name><name>mixer</name><operator>-&gt;</operator><name>dtor_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_kcm_destroy_sample</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mixer</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>al_attach_sample_instance_to_mixer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_OBJECT</name></expr></argument>,
<argument><expr><literal type="string">"Attempted to attach a sample that's already attached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_kcm_stream_set_mutex</name><argument_list>(<argument><expr><name>spl</name></expr></argument>, <argument><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mixer</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>slot</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>mutex</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_GENERIC_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Out of memory allocating attachment pointers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>slot</name><operator>)</operator> <operator>=</operator> <name>spl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <operator>(</operator><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>frequency</name></name><operator>)</operator> <operator>*</operator> <name><name>spl</name><operator>-&gt;</operator><name>speed</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>step_denom</name></name> <operator>=</operator> <name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>frequency</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>step</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>speed</name></name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_read</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>is_mixer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_read</name></name> <operator>=</operator> <name>_al_kcm_mixer_read</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<switch>switch <condition>(<expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>depth</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_FLOAT32</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>mixer</name><operator>-&gt;</operator><name>quality</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_MIXER_QUALITY_POINT</name></expr>:</case>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_read</name></name> <operator>=</operator> <name>read_to_mixer_point_float_32</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_MIXER_QUALITY_LINEAR</name></expr>:</case>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_read</name></name> <operator>=</operator> <name>read_to_mixer_linear_float_32</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_MIXER_QUALITY_CUBIC</name></expr>:</case>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_read</name></name> <operator>=</operator> <name>read_to_mixer_cubic_float_32</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>mixer</name><operator>-&gt;</operator><name>quality</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_MIXER_QUALITY_POINT</name></expr>:</case>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_read</name></name> <operator>=</operator> <name>read_to_mixer_point_int16_t_16</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_MIXER_QUALITY_CUBIC</name></expr>:</case>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Falling back to linear interpolation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>ALLEGRO_MIXER_QUALITY_LINEAR</name></expr>:</case>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_read</name></name> <operator>=</operator> <name>read_to_mixer_linear_int16_t_16</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT8</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT24</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT8</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT16</name></expr>:</case>
<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT24</name></expr>:</case>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>_al_kcm_mixer_rejig_sample_matrix</name><argument_list>(<argument><expr><name>mixer</name></expr></argument>, <argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>mixer</name></name> <operator>=</operator> <name>mixer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>is_voice</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_attach_audio_stream_to_mixer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>al_attach_sample_instance_to_mixer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>spl</name></name></expr></argument>, <argument><expr><name>mixer</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_attach_mixer_to_mixer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mixer</name> <operator>!=</operator> <name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>frequency</name></name> <operator>!=</operator> <name><name>stream</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>frequency</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_OBJECT</name></expr></argument>,
<argument><expr><literal type="string">"Attempted to attach a mixer with different frequencies"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>depth</name></name> <operator>!=</operator> <name><name>stream</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>depth</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_OBJECT</name></expr></argument>,
<argument><expr><literal type="string">"Mixers of different audio depths cannot be attached to one another"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name> <operator>!=</operator> <name><name>stream</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_OBJECT</name></expr></argument>,
<argument><expr><literal type="string">"Mixers of different channel configurations cannot be attached to one another"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>al_attach_sample_instance_to_mixer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>, <argument><expr><name>mixer</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_set_mixer_postprocess_callback</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pp_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pp_callback_userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mixer</name><operator>-&gt;</operator><name>postprocess_callback</name></name> <operator>=</operator> <name>pp_callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mixer</name><operator>-&gt;</operator><name>pp_callback_userdata</name></name> <operator>=</operator> <name>pp_callback_userdata</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>unsigned</name> <name>int</name></type> <name>al_get_mixer_frequency</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>frequency</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_CHANNEL_CONF</name></type> <name>al_get_mixer_channels</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_AUDIO_DEPTH</name></type> <name>al_get_mixer_depth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>depth</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_MIXER_QUALITY</name></type> <name>al_get_mixer_quality</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>mixer</name><operator>-&gt;</operator><name>quality</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>float</name></type> <name>al_get_mixer_gain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>gain</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_get_mixer_playing</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>is_playing</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_get_mixer_attached</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>_al_vector_is_nonempty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mixer</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_set_mixer_frequency</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_OBJECT</name></expr></argument>,
<argument><expr><literal type="string">"Attempted to change the frequency of an attached mixer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>frequency</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_set_mixer_quality</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_MIXER_QUALITY</name></type> <name>new_quality</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mixer</name><operator>-&gt;</operator><name>quality</name></name> <operator>==</operator> <name>new_quality</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mixer</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mixer</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator> <name>new_quality</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_OBJECT</name></expr></argument>,
<argument><expr><literal type="string">"Attempted to change the quality of a mixer with attachments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_set_mixer_gain</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>new_gain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>gain</name></name> <operator>!=</operator> <name>new_gain</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>gain</name></name> <operator>=</operator> <name>new_gain</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mixer</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mixer</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_kcm_mixer_rejig_sample_matrix</name><argument_list>(<argument><expr><name>mixer</name></expr></argument>, <argument><expr><operator>*</operator><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_set_mixer_playing</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>is_playing</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_detach_mixer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_kcm_detach_from_parent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mixer</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_read</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>



</unit>
