<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\audio\kcm_sample.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_vector.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"audio"</literal></argument>)</argument_list></macro>


<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>allegro_voice</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>allegro_mixer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>default_mixer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<typedef>typedef <type><struct>struct <name>AUTO_SAMPLE</name> <block>{
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>instance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>locked</name></decl>;</decl_stmt>
}</block></struct></type> <name>AUTO_SAMPLE</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>_AL_VECTOR</name></type> <name>auto_samples</name> <init>= <expr><call><name>_AL_VECTOR_INITIALIZER</name><argument_list>(<argument><expr><name>AUTO_SAMPLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>create_default_mixer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>do_play_sample</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>gain</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pan</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>speed</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_PLAYMODE</name></type> <name>loop</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_sample_vector</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>int</name></type> <name>string_to_depth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_stricmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"int16"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>ALLEGRO_AUDIO_DEPTH_FLOAT32</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>create_default_mixer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>voice_frequency</name> <init>= <expr><literal type="number">44100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>voice_depth</name> <init>= <expr><name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mixer_frequency</name> <init>= <expr><literal type="number">44100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mixer_depth</name> <init>= <expr><name>ALLEGRO_AUDIO_DEPTH_FLOAT32</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument>, <argument><expr><literal type="string">"primary_voice_frequency"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>voice_frequency</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument>, <argument><expr><literal type="string">"primary_mixer_frequency"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mixer_frequency</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument>, <argument><expr><literal type="string">"primary_voice_depth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>voice_depth</name> <operator>=</operator> <call><name>string_to_depth</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument>, <argument><expr><literal type="string">"primary_mixer_depth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mixer_depth</name> <operator>=</operator> <call><name>string_to_depth</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>allegro_voice</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>allegro_voice</name> <operator>=</operator> <call><name>al_create_voice</name><argument_list>(<argument><expr><name>voice_frequency</name></expr></argument>, <argument><expr><name>voice_depth</name></expr></argument>,
<argument><expr><name>ALLEGRO_CHANNEL_CONF_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>allegro_voice</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"al_create_voice failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>allegro_mixer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>allegro_mixer</name> <operator>=</operator> <call><name>al_create_mixer</name><argument_list>(<argument><expr><name>mixer_frequency</name></expr></argument>, <argument><expr><name>mixer_depth</name></expr></argument>,
<argument><expr><name>ALLEGRO_CHANNEL_CONF_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>allegro_mixer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"al_create_voice failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>al_detach_mixer</name><argument_list>(<argument><expr><name>allegro_mixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_attach_mixer_to_voice</name><argument_list>(<argument><expr><name>allegro_mixer</name></expr></argument>, <argument><expr><name>allegro_voice</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"al_attach_mixer_to_voice failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Error</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>Error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>allegro_mixer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_destroy_mixer</name><argument_list>(<argument><expr><name>allegro_mixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>allegro_mixer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>allegro_voice</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_destroy_voice</name><argument_list>(<argument><expr><name>allegro_voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>allegro_voice</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>al_create_sample</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>freq</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_AUDIO_DEPTH</name></type> <name>depth</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_CHANNEL_CONF</name></type> <name>chan_conf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>free_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>freq</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_PARAM</name></expr></argument>, <argument><expr><literal type="string">"Invalid sample frequency"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>spl</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>spl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>spl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_GENERIC_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Out of memory allocating sample data object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>chan_conf</name></name> <operator>=</operator> <name>chan_conf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>frequency</name></name> <operator>=</operator> <name>freq</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>samples</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>free_buf</name></name> <operator>=</operator> <name>free_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>dtor_item</name></name> <operator>=</operator> <call><name>_al_kcm_register_destructor</name><argument_list>(<argument><expr><literal type="string">"sample"</literal></expr></argument>, <argument><expr><name>spl</name></expr></argument>, <argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>al_destroy_sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>spl</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>stop_sample_instances_helper</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>splinst</name> <init>= <expr><name>object</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>func</name> <operator>==</operator> <operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>al_destroy_sample_instance</name>
<operator>&amp;&amp;</operator> <call><name>al_get_sample_data</name><argument_list>(<argument><expr><call><name>al_get_sample</name><argument_list>(<argument><expr><name>splinst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>userdata</name>
<operator>&amp;&amp;</operator> <call><name>al_get_sample_instance_playing</name><argument_list>(<argument><expr><name>splinst</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>al_stop_sample_instance</name><argument_list>(<argument><expr><name>splinst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_destroy_sample</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>spl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_kcm_foreach_destructor</name><argument_list>(<argument><expr><name>stop_sample_instances_helper</name></expr></argument>,
<argument><expr><call><name>al_get_sample_data</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_kcm_unregister_destructor</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>dtor_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spl</name><operator>-&gt;</operator><name>free_buf</name></name> <operator>&amp;&amp;</operator> <name><name>spl</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>free_buf</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_reserve_samples</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>reserve_samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>current_samples_count</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>auto_samples</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>reserve_samples</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>default_mixer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_restore_default_mixer</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>Error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>current_samples_count</name> <operator>&lt;</operator> <name>reserve_samples</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>reserve_samples</name> <operator>-</operator> <name>current_samples_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AUTO_SAMPLE</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name>auto_samples</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>instance</name></name> <operator>=</operator> <call><name>al_create_sample_instance</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>locked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>slot</name><operator>-&gt;</operator><name>instance</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"al_create_sample failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_attach_sample_instance_to_mixer</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>, <argument><expr><name>default_mixer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"al_attach_mixer_to_sample failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>current_samples_count</name> <operator>&gt;</operator> <name>reserve_samples</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>current_samples_count</name><operator>--</operator> <operator>&gt;</operator> <name>reserve_samples</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AUTO_SAMPLE</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>auto_samples</name></expr></argument>, <argument><expr><name>current_samples_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_destroy_sample_instance</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_vector_delete_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name>auto_samples</name></expr></argument>, <argument><expr><name>current_samples_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>Error</name>:</label>
<expr_stmt><expr><call><name>free_sample_vector</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>al_get_default_mixer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>default_mixer</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_set_default_mixer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mixer</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mixer</name> <operator>!=</operator> <name>default_mixer</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>default_mixer</name> <operator>=</operator> <name>mixer</name></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>auto_samples</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AUTO_SAMPLE</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>auto_samples</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_sample_instance</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>locked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>instance</name></name> <operator>=</operator> <call><name>al_create_sample_instance</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>slot</name><operator>-&gt;</operator><name>instance</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"al_create_sample failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_attach_sample_instance_to_mixer</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>, <argument><expr><name>default_mixer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"al_attach_mixer_to_sample failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for> 
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>Error</name>:</label>
<expr_stmt><expr><call><name>free_sample_vector</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>default_mixer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_restore_default_mixer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>create_default_mixer</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_set_default_mixer</name><argument_list>(<argument><expr><name>allegro_mixer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>al_get_default_voice</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>allegro_voice</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_set_default_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>allegro_voice</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_destroy_voice</name><argument_list>(<argument><expr><name>allegro_voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>allegro_voice</name> <operator>=</operator> <name>voice</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_play_sample</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>gain</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pan</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>speed</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_PLAYMODE</name></type> <name>loop</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_SAMPLE_ID</name> <modifier>*</modifier></type><name>ret_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>next_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret_id</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret_id</name><operator>-&gt;</operator><name>_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret_id</name><operator>-&gt;</operator><name>_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>auto_samples</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AUTO_SAMPLE</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>auto_samples</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_get_sample_instance_playing</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>slot</name><operator>-&gt;</operator><name>locked</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>do_play_sample</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>, <argument><expr><name>spl</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>, <argument><expr><name>pan</name></expr></argument>, <argument><expr><name>speed</name></expr></argument>, <argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret_id</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret_id</name><operator>-&gt;</operator><name>_index</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret_id</name><operator>-&gt;</operator><name>_id</name></name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <operator>++</operator><name>next_id</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>do_play_sample</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>splinst</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>gain</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pan</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>speed</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_PLAYMODE</name></type> <name>loop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_set_sample</name><argument_list>(<argument><expr><name>splinst</name></expr></argument>, <argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"al_set_sample failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_set_sample_instance_gain</name><argument_list>(<argument><expr><name>splinst</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>al_set_sample_instance_pan</name><argument_list>(<argument><expr><name>splinst</name></expr></argument>, <argument><expr><name>pan</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>al_set_sample_instance_speed</name><argument_list>(<argument><expr><name>splinst</name></expr></argument>, <argument><expr><name>speed</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>al_set_sample_instance_playmode</name><argument_list>(<argument><expr><name>splinst</name></expr></argument>, <argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_play_sample_instance</name><argument_list>(<argument><expr><name>splinst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"al_play_sample_instance failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_stop_sample</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_ID</name> <modifier>*</modifier></type><name>spl_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AUTO_SAMPLE</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>spl_id</name><operator>-&gt;</operator><name>_id</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>spl_id</name><operator>-&gt;</operator><name>_index</name></name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>auto_samples</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>auto_samples</name></expr></argument>, <argument><expr><name><name>spl_id</name><operator>-&gt;</operator><name>_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name><name>spl_id</name><operator>-&gt;</operator><name>_id</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_stop_sample_instance</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>ALLEGRO_SAMPLE_INSTANCE</name><modifier>*</modifier></type> <name>al_lock_sample_id</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_ID</name> <modifier>*</modifier></type><name>spl_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AUTO_SAMPLE</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>spl_id</name><operator>-&gt;</operator><name>_id</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>spl_id</name><operator>-&gt;</operator><name>_index</name></name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>auto_samples</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>auto_samples</name></expr></argument>, <argument><expr><name><name>spl_id</name><operator>-&gt;</operator><name>_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name><name>spl_id</name><operator>-&gt;</operator><name>_id</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>locked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name><name>slot</name><operator>-&gt;</operator><name>instance</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_unlock_sample_id</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE_ID</name> <modifier>*</modifier></type><name>spl_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AUTO_SAMPLE</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>spl_id</name><operator>-&gt;</operator><name>_id</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>spl_id</name><operator>-&gt;</operator><name>_index</name></name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>auto_samples</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>auto_samples</name></expr></argument>, <argument><expr><name><name>spl_id</name><operator>-&gt;</operator><name>_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name><name>spl_id</name><operator>-&gt;</operator><name>_id</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>locked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_stop_samples</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>auto_samples</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AUTO_SAMPLE</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>auto_samples</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_stop_sample_instance</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>unsigned</name> <name>int</name></type> <name>al_get_sample_frequency</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>spl</name><operator>-&gt;</operator><name>frequency</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>unsigned</name> <name>int</name></type> <name>al_get_sample_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>spl</name><operator>-&gt;</operator><name>len</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_AUDIO_DEPTH</name></type> <name>al_get_sample_depth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>spl</name><operator>-&gt;</operator><name>depth</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_CHANNEL_CONF</name></type> <name>al_get_sample_channels</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>spl</name><operator>-&gt;</operator><name>chan_conf</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name> <modifier>*</modifier></type><name>al_get_sample_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>spl</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>free_sample_vector</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>auto_samples</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AUTO_SAMPLE</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>auto_samples</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_destroy_sample_instance</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>auto_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_kcm_shutdown_default_mixer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free_sample_vector</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>al_destroy_mixer</name><argument_list>(<argument><expr><name>allegro_mixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_voice</name><argument_list>(<argument><expr><name>allegro_voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>allegro_mixer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>allegro_voice</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>default_mixer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>



</unit>
