<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\image\jpg.c">



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_HAVE_STDINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_image.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_image.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jpeglib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jerror.h&gt;</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"image"</literal></argument>)</argument_list></macro>


<struct>struct <name>my_src_mgr</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>jpeg_source_mgr</name></name></type> <name>pub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JOCTET</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>my_dest_mgr</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>jpeg_destination_mgr</name></name></type> <name>pub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JOCTET</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>my_err_mgr</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>jpeg_error_mgr</name></name></type> <name>pub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmp_buf</name></type> <name>jmpenv</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_source</name><parameter_list>(<parameter><decl><type><name>j_decompress_ptr</name></type> <name>cinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>cinfo</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_destination</name><parameter_list>(<parameter><decl><type><name>j_compress_ptr</name></type> <name>cinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>my_dest_mgr</name></name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cinfo</name><operator>-&gt;</operator><name>dest</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>next_output_byte</name></name> <operator>=</operator> <name><name>dest</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>free_in_buffer</name></name> <operator>=</operator> <name>BUFFER_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>boolean</name></type> <name>fill_input_buffer</name><parameter_list>(<parameter><decl><type><name>j_decompress_ptr</name></type> <name>cinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>my_src_mgr</name></name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cinfo</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>next_input_byte</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>bytes_in_buffer</name></name> <operator>=</operator> <call><name>al_fread</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>boolean</name></type> <name>empty_output_buffer</name><parameter_list>(<parameter><decl><type><name>j_compress_ptr</name></type> <name>cinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>my_dest_mgr</name></name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cinfo</name><operator>-&gt;</operator><name>dest</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_fwrite</name><argument_list>(<argument><expr><name><name>dest</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><name><name>dest</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>next_output_byte</name></name> <operator>=</operator> <name><name>dest</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>free_in_buffer</name></name> <operator>=</operator> <name>BUFFER_SIZE</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>skip_input_data</name><parameter_list>(<parameter><decl><type><name>j_decompress_ptr</name></type> <name>cinfo</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>num_bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>my_src_mgr</name></name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cinfo</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>num_bytes</name> <operator>&lt;=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>bytes_in_buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>next_input_byte</name></name> <operator>+=</operator> <name>num_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>bytes_in_buffer</name></name> <operator>-=</operator> <name>num_bytes</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>skip</name> <init>= <expr><name>num_bytes</name> <operator>-</operator> <name><name>src</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>bytes_in_buffer</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_fseek</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><name>skip</name></expr></argument>, <argument><expr><name>ALLEGRO_SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>bytes_in_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>term_source</name><parameter_list>(<parameter><decl><type><name>j_decompress_ptr</name></type> <name>cinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>cinfo</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>term_destination</name><parameter_list>(<parameter><decl><type><name>j_compress_ptr</name></type> <name>cinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>my_dest_mgr</name></name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cinfo</name><operator>-&gt;</operator><name>dest</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_fwrite</name><argument_list>(<argument><expr><name><name>dest</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><name><name>dest</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>BUFFER_SIZE</name> <operator>-</operator> <name><name>dest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>free_in_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>jpeg_packfile_src</name><parameter_list>(<parameter><decl><type><name>j_decompress_ptr</name></type> <name>cinfo</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>,
<parameter><decl><type><name>JOCTET</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>my_src_mgr</name></name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cinfo</name><operator>-&gt;</operator><name>src</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cinfo</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator>
<call>(<modifier>*</modifier><name><name>cinfo</name><operator>-&gt;</operator><name>mem</name><operator>-&gt;</operator><name>alloc_small</name></name>) <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>cinfo</name></expr></argument>, <argument><expr><name>JPOOL_PERMANENT</name></expr></argument>,
<argument><expr><sizeof>sizeof <name/></sizeof>*<name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cinfo</name><operator>-&gt;</operator><name>src</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>init_source</name></name> <operator>=</operator> <name>init_source</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>fill_input_buffer</name></name> <operator>=</operator> <name>fill_input_buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>skip_input_data</name></name> <operator>=</operator> <name>skip_input_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>resync_to_restart</name></name> <operator>=</operator> <name>jpeg_resync_to_restart</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>term_source</name></name> <operator>=</operator> <name>term_source</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>bytes_in_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jpeg_packfile_dest</name><parameter_list>(<parameter><decl><type><name>j_compress_ptr</name></type> <name>cinfo</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>,
<parameter><decl><type><name>JOCTET</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>my_dest_mgr</name></name> <modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cinfo</name><operator>-&gt;</operator><name>dest</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cinfo</name><operator>-&gt;</operator><name>dest</name></name> <operator>=</operator>
<call>(<modifier>*</modifier><name><name>cinfo</name><operator>-&gt;</operator><name>mem</name><operator>-&gt;</operator><name>alloc_small</name></name>) <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>cinfo</name></expr></argument>, <argument><expr><name>JPOOL_PERMANENT</name></expr></argument>,
<argument><expr><sizeof>sizeof <name/></sizeof>*<name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dest</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cinfo</name><operator>-&gt;</operator><name>dest</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>init_destination</name></name> <operator>=</operator> <name>init_destination</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>empty_output_buffer</name></name> <operator>=</operator> <name>empty_output_buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>term_destination</name></name> <operator>=</operator> <name>term_destination</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>free_in_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>my_error_exit</name><parameter_list>(<parameter><decl><type><name>j_common_ptr</name></type> <name>cinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>JMSG_LENGTH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>my_err_mgr</name></name> <modifier>*</modifier></type><name>jerr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cinfo</name><operator>-&gt;</operator><name>err</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>jerr</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>format_message</name></name><argument_list>(<argument><expr><name>cinfo</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"jpeg error: %s\n"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>jerr</name><operator>-&gt;</operator><name>jmpenv</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<struct>struct <name>load_jpg_entry_helper_data</name> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JOCTET</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>row</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_jpg_entry_helper</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>load_jpg_entry_helper_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>jpeg_decompress_struct</name></name></type> <name>cinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>my_err_mgr</name></name></type> <name>jerr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>




<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cinfo</name><operator>.</operator><name>err</name></name> <operator>=</operator> <call><name>jpeg_std_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jerr</name><operator>.</operator><name>pub</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jerr</name><operator>.</operator><name>pub</name><operator>.</operator><name>error_exit</name></name> <operator>=</operator> <name>my_error_exit</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setjmp</name><argument_list>(<argument><expr><name><name>jerr</name><operator>.</operator><name>jmpenv</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<goto>goto <name>longjmp_error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>jpeg_create_decompress</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jpeg_packfile_src</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cinfo</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jpeg_read_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cinfo</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jpeg_start_decompress</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>cinfo</name><operator>.</operator><name>output_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>cinfo</name><operator>.</operator><name>output_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>cinfo</name><operator>.</operator><name>output_components</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>s</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"%d components makes no sense\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bmp</name></name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>bmp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"%dx%d bitmap creation failed\n"</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>bmp</name></name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_RGB_888</name></expr></argument>,
<argument><expr><name>ALLEGRO_LOCK_WRITEONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>bmp</name></name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_BGR_888</name></expr></argument>,
<argument><expr><name>ALLEGRO_LOCK_WRITEONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>cinfo</name><operator>.</operator><name>output_scanline</name></name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name> <operator>=</operator> <name><name>cinfo</name><operator>.</operator><name>output_scanline</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>lock</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>lock</name><operator>-&gt;</operator><name>pitch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jpeg_read_scanlines</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cinfo</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>row</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>cinfo</name><operator>.</operator><name>output_scanline</name></name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name> <operator>=</operator> <name><name>cinfo</name><operator>.</operator><name>output_scanline</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>jpeg_read_scanlines</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cinfo</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>row</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>row</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>lock</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>lock</name><operator>-&gt;</operator><name>pitch</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>jpeg_finish_decompress</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>longjmp_error</name>:</label>
<expr_stmt><expr><call><name>jpeg_destroy_decompress</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>bmp</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>al_is_bitmap_locked</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>bmp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>bmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>bmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bmp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>_al_load_jpg_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>load_jpg_entry_helper_data</name></name></type> <name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_jpg_entry_helper</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>data</name><operator>.</operator><name>bmp</name></name></expr>;</return>
</block_content>}</block></function>


<struct>struct <name>save_jpg_entry_helper_data</name> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JOCTET</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>save_jpg_entry_helper</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>save_jpg_entry_helper_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>jpeg_compress_struct</name></name></type> <name>cinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>my_err_mgr</name></name></type> <name>jerr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cinfo</name><operator>.</operator><name>err</name></name> <operator>=</operator> <call><name>jpeg_std_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jerr</name><operator>.</operator><name>pub</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jerr</name><operator>.</operator><name>pub</name><operator>.</operator><name>error_exit</name></name> <operator>=</operator> <name>my_error_exit</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setjmp</name><argument_list>(<argument><expr><name><name>jerr</name><operator>.</operator><name>jmpenv</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<goto>goto <name>longjmp_error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>jpeg_create_compress</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jpeg_packfile_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cinfo</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cinfo</name><operator>.</operator><name>image_width</name></name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cinfo</name><operator>.</operator><name>image_height</name></name> <operator>=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cinfo</name><operator>.</operator><name>input_components</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cinfo</name><operator>.</operator><name>in_color_space</name></name> <operator>=</operator> <name>JCS_RGB</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jpeg_set_defaults</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>level</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"image"</literal></expr></argument>, <argument><expr><literal type="string">"jpeg_quality_level"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>jpeg_set_quality</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cinfo</name></expr></argument>, <argument><expr><ternary><condition><expr><name>level</name></expr> ?</condition><then> <expr><call><name>strtol</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">75</literal></expr></else></ternary></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jpeg_start_compress</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_RGB_888</name></expr></argument>,
<argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_BGR_888</name></expr></argument>,
<argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><name><name>cinfo</name><operator>.</operator><name>next_scanline</name></name> <operator>&lt;</operator> <name><name>cinfo</name><operator>.</operator><name>image_height</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>lock</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator>
<operator>+</operator> <operator>(</operator><name>signed</name><operator>)</operator><name><name>cinfo</name><operator>.</operator><name>next_scanline</name></name> <operator>*</operator> <name><name>lock</name><operator>-&gt;</operator><name>pitch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jpeg_write_scanlines</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cinfo</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>row</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>jpeg_finish_compress</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>longjmp_error</name>:</label>
<expr_stmt><expr><call><name>jpeg_destroy_compress</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_is_bitmap_locked</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_save_jpg_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>save_jpg_entry_helper_data</name></name></type> <name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>save_jpg_entry_helper</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>bmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><name><name>data</name><operator>.</operator><name>error</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>_al_load_jpg</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to open %s for reading.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name>_al_load_jpg_f</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_save_jpg</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>retsave</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>retclose</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_ASSERT</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to open file %s for writing\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>retsave</name> <operator>=</operator> <call><name>_al_save_jpg_f</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retclose</name> <operator>=</operator> <call><name>al_fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retsave</name> <operator>&amp;&amp;</operator> <name>retclose</name></expr>;</return>
</block_content>}</block></function>


</unit>
