<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\image\iio.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_image.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_exitfunc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_image.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_image_cfg.h"</cpp:file></cpp:include>



<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>iio_inited</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>




<function><type><name>bool</name></type> <name>al_init_image_addon</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>success</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>iio_inited</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_loader</name><argument_list>(<argument><expr><literal type="string">".pcx"</literal></expr></argument>, <argument><expr><name>_al_load_pcx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_saver</name><argument_list>(<argument><expr><literal type="string">".pcx"</literal></expr></argument>, <argument><expr><name>_al_save_pcx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_loader_f</name><argument_list>(<argument><expr><literal type="string">".pcx"</literal></expr></argument>, <argument><expr><name>_al_load_pcx_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_saver_f</name><argument_list>(<argument><expr><literal type="string">".pcx"</literal></expr></argument>, <argument><expr><name>_al_save_pcx_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_identifier</name><argument_list>(<argument><expr><literal type="string">".pcx"</literal></expr></argument>, <argument><expr><name>_al_identify_pcx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_loader</name><argument_list>(<argument><expr><literal type="string">".bmp"</literal></expr></argument>, <argument><expr><name>_al_load_bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_saver</name><argument_list>(<argument><expr><literal type="string">".bmp"</literal></expr></argument>, <argument><expr><name>_al_save_bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_loader_f</name><argument_list>(<argument><expr><literal type="string">".bmp"</literal></expr></argument>, <argument><expr><name>_al_load_bmp_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_saver_f</name><argument_list>(<argument><expr><literal type="string">".bmp"</literal></expr></argument>, <argument><expr><name>_al_save_bmp_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_identifier</name><argument_list>(<argument><expr><literal type="string">".bmp"</literal></expr></argument>, <argument><expr><name>_al_identify_bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_loader</name><argument_list>(<argument><expr><literal type="string">".tga"</literal></expr></argument>, <argument><expr><name>_al_load_tga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_saver</name><argument_list>(<argument><expr><literal type="string">".tga"</literal></expr></argument>, <argument><expr><name>_al_save_tga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_loader_f</name><argument_list>(<argument><expr><literal type="string">".tga"</literal></expr></argument>, <argument><expr><name>_al_load_tga_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_saver_f</name><argument_list>(<argument><expr><literal type="string">".tga"</literal></expr></argument>, <argument><expr><name>_al_save_tga_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_identifier</name><argument_list>(<argument><expr><literal type="string">".tga"</literal></expr></argument>, <argument><expr><name>_al_identify_tga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_loader</name><argument_list>(<argument><expr><literal type="string">".dds"</literal></expr></argument>, <argument><expr><name>_al_load_dds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_loader_f</name><argument_list>(<argument><expr><literal type="string">".dds"</literal></expr></argument>, <argument><expr><name>_al_load_dds_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_identifier</name><argument_list>(<argument><expr><literal type="string">".dds"</literal></expr></argument>, <argument><expr><name>_al_identify_dds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_identifier</name><argument_list>(<argument><expr><literal type="string">".png"</literal></expr></argument>, <argument><expr><name>_al_identify_png</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_identifier</name><argument_list>(<argument><expr><literal type="string">".jpg"</literal></expr></argument>, <argument><expr><name>_al_identify_jpg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_IIO_HAVE_GDIPLUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name><name>extensions</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">".tif"</literal></expr>, <expr><literal type="string">".tiff"</literal></expr>, <expr><literal type="string">".jpg"</literal></expr>, <expr><literal type="string">".jpeg"</literal></expr>, <expr><literal type="string">".gif"</literal></expr>,
<expr><literal type="string">".png"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_init_gdiplus</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_loader</name><argument_list>(<argument><expr><name><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>_al_load_gdiplus_bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_loader_f</name><argument_list>(<argument><expr><name><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>_al_load_gdiplus_bitmap_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_saver</name><argument_list>(<argument><expr><name><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>_al_save_gdiplus_bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_saver_f</name><argument_list>(<argument><expr><literal type="string">".tif"</literal></expr></argument>, <argument><expr><name>_al_save_gdiplus_tif_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_saver_f</name><argument_list>(<argument><expr><literal type="string">".tiff"</literal></expr></argument>, <argument><expr><name>_al_save_gdiplus_tif_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_saver_f</name><argument_list>(<argument><expr><literal type="string">".gif"</literal></expr></argument>, <argument><expr><name>_al_save_gdiplus_gif_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_saver_f</name><argument_list>(<argument><expr><literal type="string">".png"</literal></expr></argument>, <argument><expr><name>_al_save_gdiplus_png_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_saver_f</name><argument_list>(<argument><expr><literal type="string">".jpg"</literal></expr></argument>, <argument><expr><name>_al_save_gdiplus_jpg_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_saver_f</name><argument_list>(<argument><expr><literal type="string">".jpeg"</literal></expr></argument>, <argument><expr><name>_al_save_gdiplus_jpg_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_IIO_HAVE_PNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_loader</name><argument_list>(<argument><expr><literal type="string">".png"</literal></expr></argument>, <argument><expr><name>_al_load_png</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_saver</name><argument_list>(<argument><expr><literal type="string">".png"</literal></expr></argument>, <argument><expr><name>_al_save_png</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_loader_f</name><argument_list>(<argument><expr><literal type="string">".png"</literal></expr></argument>, <argument><expr><name>_al_load_png_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_saver_f</name><argument_list>(<argument><expr><literal type="string">".png"</literal></expr></argument>, <argument><expr><name>_al_save_png_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_IIO_HAVE_JPG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_loader</name><argument_list>(<argument><expr><literal type="string">".jpg"</literal></expr></argument>, <argument><expr><name>_al_load_jpg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_saver</name><argument_list>(<argument><expr><literal type="string">".jpg"</literal></expr></argument>, <argument><expr><name>_al_save_jpg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_loader_f</name><argument_list>(<argument><expr><literal type="string">".jpg"</literal></expr></argument>, <argument><expr><name>_al_load_jpg_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_saver_f</name><argument_list>(<argument><expr><literal type="string">".jpg"</literal></expr></argument>, <argument><expr><name>_al_save_jpg_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_loader</name><argument_list>(<argument><expr><literal type="string">".jpeg"</literal></expr></argument>, <argument><expr><name>_al_load_jpg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_saver</name><argument_list>(<argument><expr><literal type="string">".jpeg"</literal></expr></argument>, <argument><expr><name>_al_save_jpg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_loader_f</name><argument_list>(<argument><expr><literal type="string">".jpeg"</literal></expr></argument>, <argument><expr><name>_al_load_jpg_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_saver_f</name><argument_list>(<argument><expr><literal type="string">".jpeg"</literal></expr></argument>, <argument><expr><name>_al_save_jpg_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_IIO_HAVE_WEBP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_loader</name><argument_list>(<argument><expr><literal type="string">".webp"</literal></expr></argument>, <argument><expr><name>_al_load_webp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_saver</name><argument_list>(<argument><expr><literal type="string">".webp"</literal></expr></argument>, <argument><expr><name>_al_save_webp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_loader_f</name><argument_list>(<argument><expr><literal type="string">".webp"</literal></expr></argument>, <argument><expr><name>_al_load_webp_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_saver_f</name><argument_list>(<argument><expr><literal type="string">".webp"</literal></expr></argument>, <argument><expr><name>_al_save_webp_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_identifier</name><argument_list>(<argument><expr><literal type="string">".webp"</literal></expr></argument>, <argument><expr><name>_al_identify_webp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_IIO_HAVE_FREEIMAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name><name>extensions</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">".ico"</literal></expr>, <expr><literal type="string">".jng"</literal></expr>, <expr><literal type="string">".koala"</literal></expr>, <expr><literal type="string">".lbm"</literal></expr>,
<expr><literal type="string">".iff"</literal></expr>, <expr><literal type="string">".mng"</literal></expr>, <expr><literal type="string">".pbm"</literal></expr>, <expr><literal type="string">".pcd"</literal></expr>, <expr><literal type="string">".pgm"</literal></expr>, <expr><literal type="string">".ppm"</literal></expr>, <expr><literal type="string">".ras"</literal></expr>, <expr><literal type="string">".wbmp"</literal></expr>,
<expr><literal type="string">".psd"</literal></expr>, <expr><literal type="string">".cut"</literal></expr>, <expr><literal type="string">".xpm"</literal></expr>, <expr><literal type="string">".hdr"</literal></expr>, <expr><literal type="string">".fax"</literal></expr>, <expr><literal type="string">".sgi"</literal></expr>, <expr><literal type="string">".exr"</literal></expr>, <expr><literal type="string">".raw"</literal></expr>,
<expr><literal type="string">".j2k"</literal></expr>, <expr><literal type="string">".jp2"</literal></expr>, <expr><literal type="string">".jpf"</literal></expr>, <expr><literal type="string">".jpm"</literal></expr>, <expr><literal type="string">".jpx"</literal></expr>, <expr><literal type="string">".mj2"</literal></expr>, <expr><literal type="string">".pfm"</literal></expr>, <expr><literal type="string">".pict"</literal></expr>,
<expr><literal type="string">".jxr"</literal></expr>, <expr><literal type="string">".jbg"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_init_fi</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_loader</name><argument_list>(<argument><expr><name><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>_al_load_fi_bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_loader_f</name><argument_list>(<argument><expr><name><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>_al_load_fi_bitmap_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_identifier</name><argument_list>(<argument><expr><name><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>_al_identify_fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_IIO_HAVE_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name><name>extensions</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">".webp"</literal></expr>, <expr><literal type="string">".jpg"</literal></expr>, <expr><literal type="string">".jpeg"</literal></expr>, <expr><literal type="string">".ico"</literal></expr>, <expr><literal type="string">".gif"</literal></expr>,
<expr><literal type="string">".wbmp"</literal></expr>, <expr><literal type="string">".png"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_loader</name><argument_list>(<argument><expr><name><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>_al_load_android_bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_loader_f</name><argument_list>(<argument><expr><name><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>_al_load_android_bitmap_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_identifier</name><argument_list>(<argument><expr><literal type="string">".webp"</literal></expr></argument>, <argument><expr><name>_al_identify_webp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_WANT_NATIVE_IMAGE_LOADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_IPHONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name><name>extensions</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">".tif"</literal></expr>, <expr><literal type="string">".tiff"</literal></expr>, <expr><literal type="string">".jpg"</literal></expr>, <expr><literal type="string">".jpeg"</literal></expr>, <expr><literal type="string">".gif"</literal></expr>,
<expr><literal type="string">".png"</literal></expr>, <expr><literal type="string">".BMPf"</literal></expr>, <expr><literal type="string">".ico"</literal></expr>, <expr><literal type="string">".cur"</literal></expr>, <expr><literal type="string">".xbm"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_loader</name><argument_list>(<argument><expr><name><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>_al_iphone_load_image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>al_register_bitmap_loader_f</name><argument_list>(<argument><expr><name><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>_al_iphone_load_image_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>success</name> <operator>|=</operator> <call><name>_al_osx_register_image_loader</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>iio_inited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_add_exit_func</name><argument_list>(<argument><expr><name>al_shutdown_image_addon</name></expr></argument>, <argument><expr><literal type="string">"al_shutdown_image_addon"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_is_image_addon_initialized</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>iio_inited</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_shutdown_image_addon</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>iio_inited</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>uint32_t</name></type> <name>al_get_allegro_image_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>ALLEGRO_VERSION_INT</name></expr>;</return>
</block_content>}</block></function>



</unit>
