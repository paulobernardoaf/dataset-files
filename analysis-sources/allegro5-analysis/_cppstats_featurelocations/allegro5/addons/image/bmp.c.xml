<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\image\bmp.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_image.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_convert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_image.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iio.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"image"</literal></argument>)</argument_list></macro>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_TO_BOOL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) != 0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_RGB</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_RLE8</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_RLE4</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_BITFIELDS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS2INFOHEADERSIZE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WININFOHEADERSIZE</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WININFOHEADERSIZEV2</name></cpp:macro> <cpp:value>52</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WININFOHEADERSIZEV3</name></cpp:macro> <cpp:value>56</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WININFOHEADERSIZEV4</name></cpp:macro> <cpp:value>108</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WININFOHEADERSIZEV5</name></cpp:macro> <cpp:value>124</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>BMPFILEHEADER</name>
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>bfType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>bfSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>bfReserved1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>bfReserved2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>bfOffBits</name></decl>;</decl_stmt>
}</block></struct></type> <name>BMPFILEHEADER</name>;</typedef>





<typedef>typedef <type><struct>struct <name>BMPINFOHEADER</name>
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>biWidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>signed</name> <name>long</name></type> <name>biHeight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>biBitCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>biCompression</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>biClrUsed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>biRedMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>biGreenMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>biBlueMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>biHaveAlphaMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>biAlphaMask</name></decl>;</decl_stmt>
}</block></struct></type> <name>BMPINFOHEADER</name>;</typedef>


<typedef>typedef <type><struct>struct <name>WINBMPINFOHEADER</name>
<block>{ 
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>biWidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>signed</name> <name>long</name></type> <name>biHeight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>biPlanes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>biBitCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>biCompression</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>biSizeImage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>biXPelsPerMeter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>biYPelsPerMeter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>biClrUsed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>biClrImportant</name></decl>;</decl_stmt>
}</block></struct></type> <name>WINBMPINFOHEADER</name>;</typedef>


<typedef>typedef <type><struct>struct <name>OS2BMPINFOHEADER</name>
<block>{ 
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>biWidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>biHeight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>biPlanes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>biBitCount</name></decl>;</decl_stmt>
}</block></struct></type> <name>OS2BMPINFOHEADER</name>;</typedef>


<typedef>typedef <function_decl><type><name>void</name></type>(<modifier>*</modifier><name>bmp_line_fn</name>)<parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premul</name></decl></parameter>)</parameter_list>;</function_decl></typedef>






<function><type><specifier>static</specifier> <name>int</name></type> <name>read_bmfileheader</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>BMPFILEHEADER</name> <modifier>*</modifier></type><name>fileheader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>fileheader</name><operator>-&gt;</operator><name>bfType</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>al_fread16le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fileheader</name><operator>-&gt;</operator><name>bfSize</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>al_fread32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fileheader</name><operator>-&gt;</operator><name>bfReserved1</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>al_fread16le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fileheader</name><operator>-&gt;</operator><name>bfReserved2</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>al_fread16le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fileheader</name><operator>-&gt;</operator><name>bfOffBits</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>al_fread32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fileheader</name><operator>-&gt;</operator><name>bfType</name></name> <operator>!=</operator> <literal type="number">0x4D42</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Not BMP format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_feof</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>al_ferror</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to read file header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>read_win_bminfoheader</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>BMPINFOHEADER</name> <modifier>*</modifier></type><name>infoheader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WINBMPINFOHEADER</name></type> <name>win_infoheader</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>win_infoheader</name><operator>.</operator><name>biWidth</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>al_fread32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win_infoheader</name><operator>.</operator><name>biHeight</name></name> <operator>=</operator> <call><name>al_fread32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win_infoheader</name><operator>.</operator><name>biPlanes</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>al_fread16le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win_infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>al_fread16le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win_infoheader</name><operator>.</operator><name>biCompression</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>al_fread32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win_infoheader</name><operator>.</operator><name>biSizeImage</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>al_fread32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win_infoheader</name><operator>.</operator><name>biXPelsPerMeter</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>al_fread32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win_infoheader</name><operator>.</operator><name>biYPelsPerMeter</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>al_fread32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win_infoheader</name><operator>.</operator><name>biClrUsed</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>al_fread32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win_infoheader</name><operator>.</operator><name>biClrImportant</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>al_fread32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>infoheader</name><operator>-&gt;</operator><name>biWidth</name></name> <operator>=</operator> <name><name>win_infoheader</name><operator>.</operator><name>biWidth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>infoheader</name><operator>-&gt;</operator><name>biHeight</name></name> <operator>=</operator> <name><name>win_infoheader</name><operator>.</operator><name>biHeight</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>infoheader</name><operator>-&gt;</operator><name>biBitCount</name></name> <operator>=</operator> <name><name>win_infoheader</name><operator>.</operator><name>biBitCount</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>infoheader</name><operator>-&gt;</operator><name>biCompression</name></name> <operator>=</operator> <name><name>win_infoheader</name><operator>.</operator><name>biCompression</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>infoheader</name><operator>-&gt;</operator><name>biClrUsed</name></name> <operator>=</operator> <name><name>win_infoheader</name><operator>.</operator><name>biClrUsed</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_feof</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>al_ferror</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to read file header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>read_os2_bminfoheader</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>BMPINFOHEADER</name> <modifier>*</modifier></type><name>infoheader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OS2BMPINFOHEADER</name></type> <name>os2_infoheader</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>os2_infoheader</name><operator>.</operator><name>biWidth</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>al_fread16le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>os2_infoheader</name><operator>.</operator><name>biHeight</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>al_fread16le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>os2_infoheader</name><operator>.</operator><name>biPlanes</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>al_fread16le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>os2_infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>al_fread16le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>infoheader</name><operator>-&gt;</operator><name>biWidth</name></name> <operator>=</operator> <name><name>os2_infoheader</name><operator>.</operator><name>biWidth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>infoheader</name><operator>-&gt;</operator><name>biHeight</name></name> <operator>=</operator> <name><name>os2_infoheader</name><operator>.</operator><name>biHeight</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>infoheader</name><operator>-&gt;</operator><name>biBitCount</name></name> <operator>=</operator> <name><name>os2_infoheader</name><operator>.</operator><name>biBitCount</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>infoheader</name><operator>-&gt;</operator><name>biCompression</name></name> <operator>=</operator> <name>BIT_RGB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>infoheader</name><operator>-&gt;</operator><name>biClrUsed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>al_feof</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>al_ferror</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to read file header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_bitfield</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>shift_out</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>mask_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>shift_out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mask_out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <call><name>__builtin_ctz</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>&gt;&gt;=</operator> <name>shift</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><operator>(</operator><name>m</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>shift</name></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>shift_out</name> <operator>=</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mask_out</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>read_palette</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ncolors</name></decl></parameter>, <parameter><decl><type><name>PalEntry</name> <modifier>*</modifier></type><name>pal</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BMPINFOHEADER</name> <modifier>*</modifier></type><name>infoheader</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>win_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>premul</name> <init>= <expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_NO_PREMULTIPLIED_ALPHA</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>as</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>am</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decode_bitfield</name><argument_list>(<argument><expr><name><name>infoheader</name><operator>-&gt;</operator><name>biAlphaMask</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>as</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>am</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ncolors</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pixel</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel</name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>b</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>am</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x00</literal></expr>:</case>
<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x01</literal></expr>:</case>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>pixel</name> <operator>&gt;&gt;</operator> <name>as</name><operator>)</operator> <operator>&amp;</operator> <name>am</name><operator>)</operator> <operator>*</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0xFF</literal></expr>:</case>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>pixel</name> <operator>&gt;&gt;</operator> <name>as</name><operator>)</operator> <operator>&amp;</operator> <name>am</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>pixel</name> <operator>&gt;&gt;</operator> <name>as</name><operator>)</operator> <operator>&amp;</operator> <name>am</name><operator>)</operator> <operator>*</operator> <literal type="number">255</literal> <operator>/</operator> <name>am</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>am</name> <operator>&amp;&amp;</operator> <name>premul</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name>g</name> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>b</name> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>win_flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_fgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>uint16_t</name></type> <name>read_16le</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ucbuf</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ucbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>ucbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>read_32le</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ucbuf</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ucbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>ucbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>ucbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>ucbuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>read_1bit_line</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premul</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ucbuf</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_wanted</name> <init>= <expr><operator>(</operator><operator>(</operator><name>length</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name> <init>= <expr><call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ucbuf</name></expr></argument>, <argument><expr><name>bytes_wanted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ucbuf</name> <operator>+</operator> <name>bytes_read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bytes_wanted</name> <operator>-</operator> <name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>premul</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>x</name> <init>= <expr><name><name>ucbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ucbuf</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal> <operator>+</operator> <literal type="number">7</literal> <operator>-</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>j</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>j</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>read_2bit_line</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premul</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ucbuf</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_wanted</name> <init>= <expr><operator>(</operator><operator>(</operator><name>length</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name> <init>= <expr><call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ucbuf</name></expr></argument>, <argument><expr><name>bytes_wanted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ucbuf</name> <operator>+</operator> <name>bytes_read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bytes_wanted</name> <operator>-</operator> <name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>premul</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>x</name> <init>= <expr><name><name>ucbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ucbuf</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ucbuf</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x30</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ucbuf</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x0C</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ucbuf</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>read_4bit_line</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premul</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ucbuf</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_wanted</name> <init>= <expr><operator>(</operator><operator>(</operator><name>length</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name> <init>= <expr><call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ucbuf</name></expr></argument>, <argument><expr><name>bytes_wanted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ucbuf</name> <operator>+</operator> <name>bytes_read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bytes_wanted</name> <operator>-</operator> <name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>premul</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>x</name> <init>= <expr><name><name>ucbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ucbuf</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ucbuf</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>read_8bit_line</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premul</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_wanted</name> <init>= <expr><operator>(</operator><name>length</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name> <init>= <expr><call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes_wanted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>bytes_read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bytes_wanted</name> <operator>-</operator> <name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>premul</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>read_16_rgb_555_line</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premul</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>data32</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_wanted</name> <init>= <expr><operator>(</operator><name>length</name> <operator>+</operator> <operator>(</operator><name>length</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name> <init>= <expr><call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes_wanted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>bytes_read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bytes_wanted</name> <operator>-</operator> <name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>premul</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pixel</name> <init>= <expr><call><name>read_16le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_555_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>read_16_argb_1555_line</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premul</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>data32</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_wanted</name> <init>= <expr><operator>(</operator><name>length</name> <operator>+</operator> <operator>(</operator><name>length</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name> <init>= <expr><call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes_wanted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>bytes_read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bytes_wanted</name> <operator>-</operator> <name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pixel</name> <init>= <expr><call><name>read_16le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_1555_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>premul</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>read_16_rgb_565_line</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premul</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>data32</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_wanted</name> <init>= <expr><operator>(</operator><name>length</name> <operator>+</operator> <operator>(</operator><name>length</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name> <init>= <expr><call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes_wanted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>bytes_read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bytes_wanted</name> <operator>-</operator> <name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>premul</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pixel</name> <init>= <expr><call><name>read_16le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_565_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>read_24_rgb_888_line</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premul</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bi</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ucbuf</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>data32</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_wanted</name> <init>= <expr><name>length</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name>length</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name> <init>= <expr><call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes_wanted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>bytes_read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bytes_wanted</name> <operator>-</operator> <name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>premul</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>bi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>length</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr><operator>,</operator> <expr><name>bi</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>read_32le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>bi</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>read_32le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>bi</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name> <init>= <expr><call><name>read_32le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>bi</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>w</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>c</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>z</name> <init>= <expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_888_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data32</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_888_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data32</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_888_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data32</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_888_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>bi</name> <operator>*=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>bi</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pixel</name> <init>= <expr><name><name>ucbuf</name><index>[<expr><name>bi</name></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>ucbuf</name><index>[<expr><name>bi</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>ucbuf</name><index>[<expr><name>bi</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGB_888_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>read_32_xrgb_8888_line</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premul</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>data32</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_wanted</name> <init>= <expr><name>length</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name> <init>= <expr><call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes_wanted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>bytes_read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bytes_wanted</name> <operator>-</operator> <name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>premul</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pixel</name> <init>= <expr><call><name>read_32le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_XRGB_8888_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>read_32_rgbx_8888_line</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premul</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>data32</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_wanted</name> <init>= <expr><name>length</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name> <init>= <expr><call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes_wanted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>bytes_read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bytes_wanted</name> <operator>-</operator> <name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>premul</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pixel</name> <init>= <expr><call><name>read_32le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBX_8888_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>read_32_argb_8888_line</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premul</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>data32</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_wanted</name> <init>= <expr><name>length</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name> <init>= <expr><call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes_wanted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>bytes_read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bytes_wanted</name> <operator>-</operator> <name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pixel</name> <init>= <expr><call><name>read_32le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0xFF000000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_ARGB_8888_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>premul</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>!=</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>read_32_rgba_8888_line</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premul</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>data32</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_wanted</name> <init>= <expr><name>length</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name> <init>= <expr><call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes_wanted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>bytes_read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bytes_wanted</name> <operator>-</operator> <name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pixel</name> <init>= <expr><call><name>read_32le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0x000000FFU</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ALLEGRO_CONVERT_RGBA_8888_TO_ABGR_8888_LE</name><argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>premul</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>!=</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>bool</name></type> <name>read_RGB_image</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>BMPINFOHEADER</name> <modifier>*</modifier></type><name>infoheader</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name></decl></parameter>,
<parameter><decl><type><name>bmp_line_fn</name></type> <name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>line</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>linesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linebuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>premul</name> <init>= <expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_NO_PREMULTIPLIED_ALPHA</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>infoheader</name><operator>-&gt;</operator><name>biHeight</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>infoheader</name><operator>-&gt;</operator><name>biWidth</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>linesize</name> <operator>=</operator> <operator>(</operator><name><name>infoheader</name><operator>-&gt;</operator><name>biWidth</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>infoheader</name><operator>-&gt;</operator><name>biBitCount</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>linesize</name> <operator>*=</operator> <operator>(</operator><literal type="number">8</literal> <operator>/</operator> <name><name>infoheader</name><operator>-&gt;</operator><name>biBitCount</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>linesize</name> <operator>*=</operator> <operator>(</operator><name><name>infoheader</name><operator>-&gt;</operator><name>biBitCount</name></name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>linebuf</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>linebuf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Failed to allocate pixel row buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <ternary><condition><expr><name>height</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <ternary><condition><expr><name>height</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>line</name> <operator>+=</operator> <name>dir</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>lr</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name> <operator>*</operator> <name>line</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fn</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>linebuf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>premul</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>bool</name></type> <name>read_RGB_paletted_image</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>BMPINFOHEADER</name> <modifier>*</modifier></type><name>infoheader</name></decl></parameter>, <parameter><decl><type><name>PalEntry</name><modifier>*</modifier></type> <name>pal</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name></decl></parameter>, <parameter><decl><type><name>bmp_line_fn</name></type> <name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>line</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>linesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linebuf</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>infoheader</name><operator>-&gt;</operator><name>biHeight</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>infoheader</name><operator>-&gt;</operator><name>biWidth</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>linesize</name> <operator>=</operator> <operator>(</operator><name>width</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>infoheader</name><operator>-&gt;</operator><name>biBitCount</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>linesize</name> <operator>*=</operator> <operator>(</operator><literal type="number">8</literal> <operator>/</operator> <name><name>infoheader</name><operator>-&gt;</operator><name>biBitCount</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>linesize</name> <operator>*=</operator> <operator>(</operator><name><name>infoheader</name><operator>-&gt;</operator><name>biBitCount</name></name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>linebuf</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>linebuf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Failed to allocate pixel row buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <ternary><condition><expr><name>height</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <ternary><condition><expr><name>height</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>line</name> <operator>+=</operator> <name>dir</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>lr</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name> <operator>*</operator> <name>line</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fn</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>linebuf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>idx</name> <init>= <expr><name><name>linebuf</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>pal</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pal</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>pal</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>pal</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>a</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>generate_scale_table</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>entries</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>entries</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>*</operator> <literal type="number">255</literal> <operator>/</operator> <operator>(</operator><name>entries</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>bool</name></type> <name>read_bitfields_image</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>BMPINFOHEADER</name> <modifier>*</modifier></type><name>infoheader</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>line</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>linesize</name></decl>, <decl><type ref="prev"/><name>bytes_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>linebuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bytes_per_pixel</name> <init>= <expr><name><name>infoheader</name><operator>-&gt;</operator><name>biBitCount</name></name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>premul</name> <init>= <expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_NO_PREMULTIPLIED_ALPHA</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rs</name></decl>, <decl><type ref="prev"/><name>gs</name></decl>, <decl><type ref="prev"/><name>bs</name></decl>, <decl><type ref="prev"/><name>as</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rm</name></decl>, <decl><type ref="prev"/><name>gm</name></decl>, <decl><type ref="prev"/><name>bm</name></decl>, <decl><type ref="prev"/><name>am</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name><name>tempconvert</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>rtable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>gtable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>btable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>atable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>infoheader</name><operator>-&gt;</operator><name>biHeight</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>infoheader</name><operator>-&gt;</operator><name>biWidth</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name>width</name> <operator>*</operator> <name>bytes_per_pixel</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>width</name> <operator>*</operator> <name>bytes_per_pixel</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>linebuf</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>linebuf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Failed to allocate pixel row buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>decode_bitfield</name><argument_list>(<argument><expr><name><name>infoheader</name><operator>-&gt;</operator><name>biRedMask</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decode_bitfield</name><argument_list>(<argument><expr><name><name>infoheader</name><operator>-&gt;</operator><name>biGreenMask</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decode_bitfield</name><argument_list>(<argument><expr><name><name>infoheader</name><operator>-&gt;</operator><name>biBlueMask</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decode_bitfield</name><argument_list>(<argument><expr><name><name>infoheader</name><operator>-&gt;</operator><name>biAlphaMask</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>as</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>am</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tempconvert</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name> <init>= <expr><operator>~</operator><operator>(</operator><literal type="number">0xFFFFFFFFU</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFU</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name><name>tempconvert</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>_al_rgb_scale_1</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name><name>tempconvert</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>_al_rgb_scale_4</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name><name>tempconvert</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>_al_rgb_scale_5</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name><name>tempconvert</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>_al_rgb_scale_6</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>rm</name> <operator>==</operator> <name>mask</name> <operator>||</operator> <name>gm</name> <operator>==</operator> <name>mask</name> <operator>||</operator> <name>bm</name> <operator>==</operator> <name>mask</name> <operator>||</operator> <name>am</name> <operator>==</operator> <name>mask</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>entries</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>width</name> <operator>*</operator> <name>height</name> <operator>&gt;</operator> <name>entries</name> <operator>*</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tempconvert</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>generate_scale_table</name><argument_list>(<argument><expr><name><name>tempconvert</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>tempconvert</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>tempconvert</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>rm</name> <operator>==</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rtable</name> <operator>=</operator> <name><name>tempconvert</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>gm</name> <operator>==</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>gtable</name> <operator>=</operator> <name><name>tempconvert</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bm</name> <operator>==</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>btable</name> <operator>=</operator> <name><name>tempconvert</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>am</name> <operator>==</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>atable</name> <operator>=</operator> <name><name>tempconvert</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>line</name> <operator>=</operator> <ternary><condition><expr><name>height</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <ternary><condition><expr><name>height</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>line</name> <operator>+=</operator> <name>dir</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>lr</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name> <operator>*</operator> <name>line</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>linebuf</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>linebuf</name> <operator>+</operator> <name>bytes_read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>linesize</name> <operator>-</operator> <name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pixel</name> <init>= <expr><call><name>read_32le</name><argument_list>(<argument><expr><name>linebuf</name> <operator>+</operator> <name>k</name><operator>*</operator><name>bytes_per_pixel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>a</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>pixel</name> <operator>&gt;&gt;</operator> <name>rs</name><operator>)</operator> <operator>&amp;</operator> <name>rm</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>pixel</name> <operator>&gt;&gt;</operator> <name>gs</name><operator>)</operator> <operator>&amp;</operator> <name>gm</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>pixel</name> <operator>&gt;&gt;</operator> <name>bs</name><operator>)</operator> <operator>&amp;</operator> <name>bm</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rtable</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>rtable</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>rm</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>=</operator> <name>r</name> <operator>*</operator> <literal type="number">255</literal> <operator>/</operator> <name>rm</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gtable</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>gtable</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>gm</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g</name> <operator>=</operator> <name>g</name> <operator>*</operator> <literal type="number">255</literal> <operator>/</operator> <name>gm</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>btable</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>btable</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>bm</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>b</name> <operator>*</operator> <literal type="number">255</literal> <operator>/</operator> <name>bm</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>am</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>pixel</name> <operator>&gt;&gt;</operator> <name>as</name><operator>)</operator> <operator>&amp;</operator> <name>am</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>atable</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>atable</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name> <operator>*</operator> <literal type="number">255</literal> <operator>/</operator> <name>am</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>premul</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name>g</name> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>b</name> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tempconvert</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>tempconvert</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>bool</name></type> <name>read_RGB_image_32bit_alpha_hack</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>BMPINFOHEADER</name> <modifier>*</modifier></type><name>infoheader</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>line</name></decl>, <decl><type ref="prev"/><name>startline</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>have_alpha</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>linesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linebuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>premul</name> <init>= <expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_NO_PREMULTIPLIED_ALPHA</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>infoheader</name><operator>-&gt;</operator><name>biHeight</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>infoheader</name><operator>-&gt;</operator><name>biWidth</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>linesize</name> <operator>=</operator> <operator>(</operator><name><name>infoheader</name><operator>-&gt;</operator><name>biWidth</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>infoheader</name><operator>-&gt;</operator><name>biBitCount</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>linesize</name> <operator>*=</operator> <operator>(</operator><literal type="number">8</literal> <operator>/</operator> <name><name>infoheader</name><operator>-&gt;</operator><name>biBitCount</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>linesize</name> <operator>*=</operator> <operator>(</operator><name><name>infoheader</name><operator>-&gt;</operator><name>biBitCount</name></name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>linebuf</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>linebuf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Failed to allocate pixel row buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name>startline</name> <operator>=</operator> <ternary><condition><expr><name>height</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <ternary><condition><expr><name>height</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>line</name> <operator>+=</operator> <name>dir</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>lr</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name> <operator>*</operator> <name>line</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>read_32_argb_8888_line</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>linebuf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>have_alpha</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>data</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>have_alpha</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <name>startline</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>line</name> <operator>+=</operator> <name>dir</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>lr</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name> <operator>*</operator> <name>line</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>premul</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <name>startline</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>line</name> <operator>+=</operator> <name>dir</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>lr</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name> <operator>*</operator> <name>line</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>data</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>data</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>data</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>read_RLE8_compressed_image</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>BMPINFOHEADER</name> <modifier>*</modifier></type><name>infoheader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>val0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>, <decl><type ref="prev"/><name>line</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eolflag</name></decl>, <decl><type ref="prev"/><name>eopicflag</name></decl>;</decl_stmt>

<expr_stmt><expr><name>eopicflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>infoheader</name><operator>-&gt;</operator><name>biHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>infoheader</name><operator>-&gt;</operator><name>biHeight</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>infoheader</name><operator>-&gt;</operator><name>biHeight</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<while>while <condition>(<expr><name>eopicflag</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>eolflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>(</operator><name>eolflag</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>eopicflag</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>al_fgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <name>count</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>infoheader</name><operator>-&gt;</operator><name>biWidth</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"overlong compressed line\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>infoheader</name><operator>-&gt;</operator><name>biWidth</name></name> <operator>-</operator> <name>pos</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>al_fgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>line</name> <operator>*</operator> <name><name>infoheader</name><operator>-&gt;</operator><name>biWidth</name></name> <operator>+</operator> <name>pos</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else <block>{<block_content>
<switch>switch <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 
<expr_stmt><expr><name>eolflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> 
<expr_stmt><expr><name>eopicflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>al_fgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>al_fgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>+=</operator> <name>dir</name> <operator>*</operator> <name>val</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default> 
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>val</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>val0</name> <operator>=</operator> <call><name>al_fgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>line</name> <operator>*</operator> <name><name>infoheader</name><operator>-&gt;</operator><name>biWidth</name></name> <operator>+</operator> <name>pos</name></expr>]</index></name> <operator>=</operator> <name>val0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val0</name> <operator>=</operator> <call><name>al_fgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>infoheader</name><operator>-&gt;</operator><name>biWidth</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>eolflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>line</name> <operator>&gt;=</operator> <name>height</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>eopicflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>read_RLE4_compressed_image</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>BMPINFOHEADER</name> <modifier>*</modifier></type><name>infoheader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>val0</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>, <decl><type ref="prev"/><name>line</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eolflag</name></decl>, <decl><type ref="prev"/><name>eopicflag</name></decl>;</decl_stmt>

<expr_stmt><expr><name>eopicflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>infoheader</name><operator>-&gt;</operator><name>biHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>infoheader</name><operator>-&gt;</operator><name>biHeight</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>infoheader</name><operator>-&gt;</operator><name>biHeight</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<while>while <condition>(<expr><name>eopicflag</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>eolflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>(</operator><name>eolflag</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>eopicflag</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>al_fgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <name>count</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>infoheader</name><operator>-&gt;</operator><name>biWidth</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"overlong compressed line\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>infoheader</name><operator>-&gt;</operator><name>biWidth</name></name> <operator>-</operator> <name>pos</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>al_fgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>line</name> <operator>*</operator> <name><name>infoheader</name><operator>-&gt;</operator><name>biWidth</name></name> <operator>+</operator> <name>pos</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>j</name> <operator>%</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else <block>{<block_content>
<switch>switch <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 
<expr_stmt><expr><name>eolflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> 
<expr_stmt><expr><name>eopicflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>al_fgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>al_fgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>+=</operator> <name>dir</name> <operator>*</operator> <name>val</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default> 
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>val</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>%</operator> <literal type="number">4</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val0</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>al_fread16le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>val0</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val0</name> <operator>=</operator> <name>val0</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <name>val0</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val0</name> <operator>=</operator> <name>val0</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>line</name> <operator>*</operator> <name><name>infoheader</name><operator>-&gt;</operator><name>biWidth</name></name> <operator>+</operator> <name>pos</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>j</name> <operator>%</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>infoheader</name><operator>-&gt;</operator><name>biWidth</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>eolflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>line</name> <operator>&gt;=</operator> <name>height</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>eopicflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>









<function><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>_al_load_bmp_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BMPFILEHEADER</name></type> <name>fileheader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BMPINFOHEADER</name></type> <name>infoheader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PalEntry</name></type> <name><name>pal</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>file_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>header_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>biSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>keep_index</name> <init>= <expr><call><name>INT_TO_BOOL</name><argument_list>(<argument><expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_KEEP_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>file_start</name> <operator>=</operator> <call><name>al_ftell</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_bmfileheader</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileheader</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>header_start</name> <operator>=</operator> <call><name>al_ftell</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>biSize</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>al_fread32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>al_feof</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>al_ferror</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"EOF or file error while reading bitmap header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>biSize</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>WININFOHEADERSIZE</name></expr>:</case>
<case>case <expr><name>WININFOHEADERSIZEV2</name></expr>:</case>
<case>case <expr><name>WININFOHEADERSIZEV3</name></expr>:</case>
<case>case <expr><name>WININFOHEADERSIZEV4</name></expr>:</case>
<case>case <expr><name>WININFOHEADERSIZEV5</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>read_win_bminfoheader</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoheader</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>OS2INFOHEADERSIZE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>read_os2_bminfoheader</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoheader</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>infoheader</name><operator>.</operator><name>biCompression</name></name> <operator>==</operator> <name>BIT_RGB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Unsupported header size: %ld\n"</literal></expr></argument>, <argument><expr><name>biSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><name>biSize</name> <operator>==</operator> <name>OS2INFOHEADERSIZE</name> <operator>||</operator> <name>biSize</name> <operator>==</operator> <name>WININFOHEADERSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>al_ftell</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>header_start</name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name>biSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>infoheader</name><operator>.</operator><name>biWidth</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"negative width: %ld\n"</literal></expr></argument>, <argument><expr><name><name>infoheader</name><operator>.</operator><name>biWidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>!=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>
<name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>!=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>!=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>!=</operator> <literal type="number">24</literal> <operator>&amp;&amp;</operator>
<name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"unsupported bit depth: %d\n"</literal></expr></argument>, <argument><expr><name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biCompression</name></name> <operator>==</operator> <name>BIT_RLE4</name> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"unsupported bit depth for RLE4 compression: %d\n"</literal></expr></argument>, <argument><expr><name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biCompression</name></name> <operator>==</operator> <name>BIT_RLE8</name> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"unsupported bit depth for RLE8 compression: %d\n"</literal></expr></argument>, <argument><expr><name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biCompression</name></name> <operator>==</operator> <name>BIT_BITFIELDS</name> <operator>&amp;&amp;</operator> 
<name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>!=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>!=</operator> <literal type="number">24</literal> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"unsupported bit depth for bitfields compression: %d\n"</literal></expr></argument>, <argument><expr><name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biCompression</name></name> <operator>==</operator> <name>BIT_BITFIELDS</name>
<operator>||</operator> <name>biSize</name> <operator>&gt;=</operator> <name>WININFOHEADERSIZEV2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>infoheader</name><operator>.</operator><name>biRedMask</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>al_fread32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>infoheader</name><operator>.</operator><name>biGreenMask</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>al_fread32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>infoheader</name><operator>.</operator><name>biBlueMask</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>al_fread32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>biSize</name> <operator>&lt;</operator> <name>WININFOHEADERSIZEV3</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>infoheader</name><operator>.</operator><name>biHaveAlphaMask</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>infoheader</name><operator>.</operator><name>biAlphaMask</name></name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pixel_mask</name> <init>= <expr><literal type="number">0xFFFFFFFFU</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>infoheader</name><operator>.</operator><name>biHaveAlphaMask</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>infoheader</name><operator>.</operator><name>biAlphaMask</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>al_fread32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pixel_mask</name> <operator>=</operator> <operator>~</operator><operator>(</operator><name>pixel_mask</name> <operator>&lt;&lt;</operator> <name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFU</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>infoheader</name><operator>.</operator><name>biAlphaMask</name></name> <operator>&amp;</operator> <name>pixel_mask</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>infoheader</name><operator>.</operator><name>biAlphaMask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Ignoring invalid alpha mask\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>biSize</name> <operator>&gt;</operator> <name>WININFOHEADERSIZEV3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>file_start</name> <operator>+</operator> <literal type="number">14</literal> <operator>+</operator> <name>biSize</name></expr></argument>, <argument><expr><name>ALLEGRO_SEEK_SET</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Seek error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biCompression</name></name> <operator>!=</operator> <name>BIT_BITFIELDS</name>
<operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>win_flag</name> <init>= <expr><operator>(</operator><name>biSize</name> <operator>!=</operator> <name>OS2INFOHEADERSIZE</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ncolors</name> <init>= <expr><name><name>infoheader</name><operator>.</operator><name>biClrUsed</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extracolors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bytes_per_color</name> <init>= <expr><ternary><condition><expr><name>win_flag</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>win_flag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ncolors</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ncolors</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ncolors</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ncolors</name> <operator>=</operator> <operator>(</operator><name><name>fileheader</name><operator>.</operator><name>bfOffBits</name></name> <operator>-</operator> <literal type="number">14</literal> <operator>-</operator> <name>OS2INFOHEADERSIZE</name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ncolors</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"No palette in OS2v1 BMP file!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ncolors</name> <operator>&gt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Too many colors: %d\n"</literal></expr></argument>, <argument><expr><name>ncolors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ncolors</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>extracolors</name> <operator>=</operator> <name>ncolors</name> <operator>-</operator> <literal type="number">256</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>read_palette</name><argument_list>(<argument><expr><name>ncolors</name></expr></argument>, <argument><expr><name>pal</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoheader</name></expr></argument>, <argument><expr><name>win_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>al_feof</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>al_ferror</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"EOF or I/O error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>extracolors</name> <operator>*</operator> <name>bytes_per_color</name></expr></argument>, <argument><expr><name>ALLEGRO_SEEK_SET</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Seek error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biClrUsed</name></name> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>win_flag</name> <init>= <expr><operator>(</operator><name>biSize</name> <operator>!=</operator> <name>OS2INFOHEADERSIZE</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bytes_per_color</name> <init>= <expr><ternary><condition><expr><name>win_flag</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>infoheader</name><operator>.</operator><name>biClrUsed</name></name> <operator>*</operator> <name>bytes_per_color</name></expr></argument>, <argument><expr><name>ALLEGRO_SEEK_CUR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Seek error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>file_start</name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>fileheader</name><operator>.</operator><name>bfOffBits</name></name> <operator>&gt;</operator> <call><name>al_ftell</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>file_start</name> <operator>+</operator> <name><name>fileheader</name><operator>.</operator><name>bfOffBits</name></name></expr></argument>, <argument><expr><name>ALLEGRO_SEEK_SET</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Seek error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><name><name>infoheader</name><operator>.</operator><name>biWidth</name></name></expr></argument>, <argument><expr><call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>infoheader</name><operator>.</operator><name>biHeight</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bmp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to create bitmap\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>&lt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>keep_index</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lr</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_SINGLE_CHANNEL_8</name></expr></argument>,
<argument><expr><name>ALLEGRO_LOCK_WRITEONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>lr</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name></expr></argument>,
<argument><expr><name>ALLEGRO_LOCK_WRITEONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to lock region\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biCompression</name></name> <operator>==</operator> <name>BIT_RLE8</name>
<operator>||</operator> <name><name>infoheader</name><operator>.</operator><name>biCompression</name></name> <operator>==</operator> <name>BIT_RLE4</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biHeight</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"compressed bitmap with negative height\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><name><name>infoheader</name><operator>.</operator><name>biWidth</name></name></expr></argument>, <argument><expr><call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>infoheader</name><operator>.</operator><name>biHeight</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biCompression</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BIT_RGB</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>infoheader</name><operator>.</operator><name>biHaveAlphaMask</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_RGB_image_32bit_alpha_hack</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoheader</name></expr></argument>, <argument><expr><name>lr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>bmp_line_fn</name></type> <name>fn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>fn</name> <operator>=</operator> <name>read_1bit_line</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>fn</name> <operator>=</operator> <name>read_2bit_line</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>fn</name> <operator>=</operator> <name>read_4bit_line</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>fn</name> <operator>=</operator> <name>read_8bit_line</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">16</literal></expr>:</case> <expr_stmt><expr><name>fn</name> <operator>=</operator> <name>read_16_rgb_555_line</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">24</literal></expr>:</case> <expr_stmt><expr><name>fn</name> <operator>=</operator> <name>read_24_rgb_888_line</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">32</literal></expr>:</case> <expr_stmt><expr><name>fn</name> <operator>=</operator> <name>read_32_xrgb_8888_line</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"No decoding function for bit depth %d\n"</literal></expr></argument>, <argument><expr><name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>==</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biAlphaMask</name></name> <operator>==</operator> <literal type="number">0x00008000U</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fn</name> <operator>=</operator> <name>read_16_argb_1555_line</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biAlphaMask</name></name> <operator>==</operator> <literal type="number">0xFF000000U</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fn</name> <operator>=</operator> <name>read_32_argb_8888_line</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keep_index</name> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_RGB_paletted_image</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoheader</name></expr></argument>, <argument><expr><name>pal</name></expr></argument>, <argument><expr><name>lr</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_RGB_image</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoheader</name></expr></argument>, <argument><expr><name>lr</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>BIT_RLE8</name></expr>:</case>
<expr_stmt><expr><call><name>read_RLE8_compressed_image</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoheader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_RLE4</name></expr>:</case>
<expr_stmt><expr><call><name>read_RLE4_compressed_image</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoheader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_BITFIELDS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biRedMask</name></name> <operator>==</operator> <literal type="number">0x00007C00U</literal> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biGreenMask</name></name> <operator>==</operator> <literal type="number">0x000003E0U</literal> <operator>&amp;&amp;</operator>
<name><name>infoheader</name><operator>.</operator><name>biBlueMask</name></name> <operator>==</operator> <literal type="number">0x0000001FU</literal> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biAlphaMask</name></name> <operator>==</operator> <literal type="number">0x00000000U</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_RGB_image</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoheader</name></expr></argument>, <argument><expr><name>lr</name></expr></argument>, <argument><expr><name>read_16_rgb_555_line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biRedMask</name></name> <operator>==</operator> <literal type="number">0x00007C00U</literal> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biGreenMask</name></name> <operator>==</operator> <literal type="number">0x000003E0U</literal> <operator>&amp;&amp;</operator>
<name><name>infoheader</name><operator>.</operator><name>biBlueMask</name></name> <operator>==</operator> <literal type="number">0x0000001FU</literal> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biAlphaMask</name></name> <operator>==</operator> <literal type="number">0x00008000U</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_RGB_image</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoheader</name></expr></argument>, <argument><expr><name>lr</name></expr></argument>, <argument><expr><name>read_16_argb_1555_line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biRedMask</name></name> <operator>==</operator> <literal type="number">0x0000F800U</literal> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biGreenMask</name></name> <operator>==</operator> <literal type="number">0x000007E0U</literal> <operator>&amp;&amp;</operator>
<name><name>infoheader</name><operator>.</operator><name>biBlueMask</name></name> <operator>==</operator> <literal type="number">0x0000001FU</literal> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biAlphaMask</name></name> <operator>==</operator> <literal type="number">0x00000000U</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_RGB_image</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoheader</name></expr></argument>, <argument><expr><name>lr</name></expr></argument>, <argument><expr><name>read_16_rgb_565_line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_bitfields_image</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoheader</name></expr></argument>, <argument><expr><name>lr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biRedMask</name></name> <operator>==</operator> <literal type="number">0x00FF0000U</literal> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biGreenMask</name></name> <operator>==</operator> <literal type="number">0x0000FF00U</literal> <operator>&amp;&amp;</operator>
<name><name>infoheader</name><operator>.</operator><name>biBlueMask</name></name> <operator>==</operator> <literal type="number">0x000000FFU</literal> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biAlphaMask</name></name> <operator>==</operator> <literal type="number">0x00000000U</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_RGB_image</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoheader</name></expr></argument>, <argument><expr><name>lr</name></expr></argument>, <argument><expr><name>read_24_rgb_888_line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_bitfields_image</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoheader</name></expr></argument>, <argument><expr><name>lr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biBitCount</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biRedMask</name></name> <operator>==</operator> <literal type="number">0x00FF0000U</literal> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biGreenMask</name></name> <operator>==</operator> <literal type="number">0x0000FF00U</literal> <operator>&amp;&amp;</operator>
<name><name>infoheader</name><operator>.</operator><name>biBlueMask</name></name> <operator>==</operator> <literal type="number">0x000000FFU</literal> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biAlphaMask</name></name> <operator>==</operator> <literal type="number">0x00000000U</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_RGB_image</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoheader</name></expr></argument>, <argument><expr><name>lr</name></expr></argument>, <argument><expr><name>read_32_xrgb_8888_line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biRedMask</name></name> <operator>==</operator> <literal type="number">0x00FF0000U</literal> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biGreenMask</name></name> <operator>==</operator> <literal type="number">0x0000FF00U</literal> <operator>&amp;&amp;</operator>
<name><name>infoheader</name><operator>.</operator><name>biBlueMask</name></name> <operator>==</operator> <literal type="number">0x000000FFU</literal> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biAlphaMask</name></name> <operator>==</operator> <literal type="number">0xFF000000U</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_RGB_image</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoheader</name></expr></argument>, <argument><expr><name>lr</name></expr></argument>, <argument><expr><name>read_32_argb_8888_line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biRedMask</name></name> <operator>==</operator> <literal type="number">0xFF000000U</literal> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biGreenMask</name></name> <operator>==</operator> <literal type="number">0x00FF0000U</literal> <operator>&amp;&amp;</operator>
<name><name>infoheader</name><operator>.</operator><name>biBlueMask</name></name> <operator>==</operator> <literal type="number">0x0000FF00U</literal> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biAlphaMask</name></name> <operator>==</operator> <literal type="number">0x00000000U</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_RGB_image</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoheader</name></expr></argument>, <argument><expr><name>lr</name></expr></argument>, <argument><expr><name>read_32_rgbx_8888_line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biRedMask</name></name> <operator>==</operator> <literal type="number">0xFF000000U</literal> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biGreenMask</name></name> <operator>==</operator> <literal type="number">0x00FF0000U</literal> <operator>&amp;&amp;</operator>
<name><name>infoheader</name><operator>.</operator><name>biBlueMask</name></name> <operator>==</operator> <literal type="number">0x0000FF00U</literal> <operator>&amp;&amp;</operator> <name><name>infoheader</name><operator>.</operator><name>biAlphaMask</name></name> <operator>==</operator> <literal type="number">0x000000FFU</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_RGB_image</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoheader</name></expr></argument>, <argument><expr><name>lr</name></expr></argument>, <argument><expr><name>read_32_rgba_8888_line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_bitfields_image</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoheader</name></expr></argument>, <argument><expr><name>lr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Unknown compression: %ld\n"</literal></expr></argument>, <argument><expr><name><name>infoheader</name><operator>.</operator><name>biCompression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bmp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>infoheader</name><operator>.</operator><name>biCompression</name></name> <operator>==</operator> <name>BIT_RLE8</name>
<operator>||</operator> <name><name>infoheader</name><operator>.</operator><name>biCompression</name></name> <operator>==</operator> <name>BIT_RLE4</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>infoheader</name><operator>.</operator><name>biHeight</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>lr</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>infoheader</name><operator>.</operator><name>biWidth</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>keep_index</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>infoheader</name><operator>.</operator><name>biWidth</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pal</name><index>[<expr><name><name>buf</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>infoheader</name><operator>.</operator><name>biWidth</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pal</name><index>[<expr><name><name>buf</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>infoheader</name><operator>.</operator><name>biWidth</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>pal</name><index>[<expr><name><name>buf</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>infoheader</name><operator>.</operator><name>biWidth</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bmp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>bmp</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>bool</name></type> <name>_al_save_bmp_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bfSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>biSizeImage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bpp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>filler</name> <operator>=</operator> <literal type="number">3</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>w</name> <operator>*</operator> <operator>(</operator><name>bpp</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>biSizeImage</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>filler</name><operator>)</operator> <operator>*</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bfSize</name> <operator>=</operator> <literal type="number">14</literal> <operator>+</operator> <name>WININFOHEADERSIZE</name> <operator>+</operator> <name>biSizeImage</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>al_fwrite16le</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0x4D42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>al_fwrite32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>bfSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>al_fwrite16le</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>al_fwrite16le</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>al_fwrite32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">14</literal> <operator>+</operator> <name>WININFOHEADERSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>al_fwrite32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>WININFOHEADERSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>al_fwrite32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>al_fwrite32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>al_fwrite16le</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>al_fwrite16le</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>al_fwrite32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>BIT_RGB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>al_fwrite32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>biSizeImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>al_fwrite32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0xB12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>al_fwrite32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0xB12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>al_fwrite32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>al_fwrite32le</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 




<expr_stmt><expr><name>lr</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name></expr></argument>,
<argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>lr</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>r</name> <init>= <expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>g</name> <init>= <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b</name> <init>= <expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_fputc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_fputc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_fputc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filler</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_fputc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><call><name>al_get_errno</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>



<function><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>_al_load_bmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to open %s for reading.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name>_al_load_bmp_f</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bmp</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>_al_save_bmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>retsave</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>retclose</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to open %s for writing.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>retsave</name> <operator>=</operator> <call><name>_al_save_bmp_f</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retclose</name> <operator>=</operator> <call><name>al_fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retsave</name> <operator>&amp;&amp;</operator> <name>retclose</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>_al_identify_bmp</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>al_fread16le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <literal type="number">0x4D42</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">14</literal> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ALLEGRO_SEEK_CUR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>al_fread16le</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>WININFOHEADERSIZE</name></expr>:</case>
<case>case <expr><name>WININFOHEADERSIZEV2</name></expr>:</case>
<case>case <expr><name>WININFOHEADERSIZEV3</name></expr>:</case>
<case>case <expr><name>WININFOHEADERSIZEV4</name></expr>:</case>
<case>case <expr><name>WININFOHEADERSIZEV5</name></expr>:</case>
<case>case <expr><name>OS2INFOHEADERSIZE</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


</unit>
