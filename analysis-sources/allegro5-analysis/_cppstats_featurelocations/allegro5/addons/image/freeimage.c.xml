<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\image\freeimage.c">



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;FreeImage.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_image.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_exitfunc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_image.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iio.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"image"</literal></argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>freeimage_initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_fiio_al_error_handler</name><parameter_list>(<parameter><decl><type><name>FREE_IMAGE_FORMAT</name></type> <name>fif</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"FreeImage %s : %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>fif</name> <operator>==</operator> <name>FIF_UNKNOWN</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"UNKNOWN"</literal></expr> </then><else>: <expr><call><name>FreeImage_GetFormatFromFIF</name><argument_list>(<argument><expr><name>fif</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_init_fi</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>freeimage_initialized</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>FreeImage_Initialise</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_add_exit_func</name><argument_list>(<argument><expr><name>_al_shutdown_fi</name></expr></argument>, <argument><expr><literal type="string">"_al_shutdown_fi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeImage_SetOutputMessage</name><argument_list>(<argument><expr><name>_fiio_al_error_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_shutdown_fi</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>freeimage_initialized</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>FreeImage_DeInitialise</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>freeimage_initialized</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>_al_fi_to_al_bitmap</name><parameter_list>(<parameter><decl><type><name>FIBITMAP</name> <modifier>*</modifier></type><name>fib</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>FreeImage_GetWidth</name><argument_list>(<argument><expr><name>fib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>FreeImage_GetHeight</name><argument_list>(<argument><expr><name>fib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bitmap</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>a_lock</name> <init>= <expr><call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>,
<argument><expr><name>ALLEGRO_PIXEL_FORMAT_ARGB_8888</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_WRITEONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>a_lock</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>a_lock</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out_inc</name> <init>= <expr><name><name>a_lock</name><operator>-&gt;</operator><name>pitch</name></name> <operator>-</operator> <operator>(</operator><name>width</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>--</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RGBQUAD</name></type> <name>color</name> <init>= <expr><block>{ <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr> }</block></expr></init></decl> ;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FreeImage_GetPixelColor</name><argument_list>(<argument><expr><name>fib</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to get pixel data at %d,%d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> , <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>color</name><operator>.</operator><name>rgbBlue</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>color</name><operator>.</operator><name>rgbGreen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>color</name><operator>.</operator><name>rgbRed</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>color</name><operator>.</operator><name>rgbReserved</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>out_inc</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>bitmap</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>_al_load_fi_bitmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FIBITMAP</name> <modifier>*</modifier></type><name>fib</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FREE_IMAGE_FORMAT</name></type> <name>fif</name> <init>= <expr><name>FIF_UNKNOWN</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>freeimage_initialized</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fif</name> <operator>=</operator> <call><name>FreeImage_GetFIFFromFilename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fif</name> <operator>==</operator> <name>FIF_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fif</name> <operator>=</operator> <call><name>FreeImage_GetFileType</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fif</name> <operator>==</operator> <name>FIF_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Could not determine the file type for '%s'\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>FIBITMAP</name> <modifier>*</modifier></type><name>fibRaw</name> <init>= <expr><call><name>FreeImage_Load</name><argument_list>(<argument><expr><name>fif</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fibRaw</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fib</name> <operator>=</operator> <call><name>FreeImage_ConvertTo32Bits</name><argument_list>(<argument><expr><name>fibRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeImage_Unload</name><argument_list>(<argument><expr><name>fibRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fib</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name>_al_fi_to_al_bitmap</name><argument_list>(<argument><expr><name>fib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeImage_Unload</name><argument_list>(<argument><expr><name>fib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bitmap</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>_fiio_al_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>fi_handle</name></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>al_fread</name><argument_list>(<argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><operator>)</operator><name>handle</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>count</name> <operator>*</operator> <name>size</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>_fiio_al_write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>fi_handle</name></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>al_fwrite</name><argument_list>(<argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><operator>)</operator><name>handle</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>count</name> <operator>*</operator> <name>size</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_fiio_al_fseek</name><parameter_list>(<parameter><decl><type><name>fi_handle</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>origin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>al_fseek</name><argument_list>(<argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><operator>)</operator><name>handle</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type> <name>_fiio_al_ftell</name><parameter_list>(<parameter><decl><type><name>fi_handle</name></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>long</name><operator>)</operator> <call><name>al_ftell</name><argument_list>(<argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><operator>)</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>_al_load_fi_bitmap_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FreeImageIO</name></type> <name>fio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FIBITMAP</name> <modifier>*</modifier></type><name>fib</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FREE_IMAGE_FORMAT</name></type> <name>fif</name> <init>= <expr><name>FIF_UNKNOWN</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Ignoring bitmap loading flags.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>freeimage_initialized</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fio</name><operator>.</operator><name>read_proc</name></name> <operator>=</operator> <name>_fiio_al_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fio</name><operator>.</operator><name>write_proc</name></name> <operator>=</operator> <name>_fiio_al_write</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fio</name><operator>.</operator><name>seek_proc</name></name> <operator>=</operator> <name>_fiio_al_fseek</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fio</name><operator>.</operator><name>tell_proc</name></name> <operator>=</operator> <name>_fiio_al_ftell</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fif</name> <operator>=</operator> <call><name>FreeImage_GetFileTypeFromHandle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fio</name></expr></argument>, <argument><expr><operator>(</operator><name>fi_handle</name><operator>)</operator><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fif</name> <operator>==</operator> <name>FIF_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Could not determine the file type for Allegro file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>FIBITMAP</name> <modifier>*</modifier></type><name>fibRaw</name> <init>= <expr><call><name>FreeImage_LoadFromHandle</name><argument_list>(<argument><expr><name>fif</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fio</name></expr></argument>, <argument><expr><operator>(</operator><name>fi_handle</name><operator>)</operator><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fibRaw</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fib</name> <operator>=</operator> <call><name>FreeImage_ConvertTo32Bits</name><argument_list>(<argument><expr><name>fibRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeImage_Unload</name><argument_list>(<argument><expr><name>fibRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fib</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name>_al_fi_to_al_bitmap</name><argument_list>(<argument><expr><name>fib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeImage_Unload</name><argument_list>(<argument><expr><name>fib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bitmap</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_identify_fi</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FreeImageIO</name></type> <name>fio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FREE_IMAGE_FORMAT</name></type> <name>fif</name> <init>= <expr><name>FIF_UNKNOWN</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>freeimage_initialized</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fio</name><operator>.</operator><name>read_proc</name></name> <operator>=</operator> <name>_fiio_al_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fio</name><operator>.</operator><name>write_proc</name></name> <operator>=</operator> <name>_fiio_al_write</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fio</name><operator>.</operator><name>seek_proc</name></name> <operator>=</operator> <name>_fiio_al_fseek</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fio</name><operator>.</operator><name>tell_proc</name></name> <operator>=</operator> <name>_fiio_al_ftell</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fif</name> <operator>=</operator> <call><name>FreeImage_GetFileTypeFromHandle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fio</name></expr></argument>, <argument><expr><operator>(</operator><name>fi_handle</name><operator>)</operator><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fif</name> <operator>==</operator> <name>FIF_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Could not determine the file type for Allegro file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>



</unit>
