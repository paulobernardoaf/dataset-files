<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\primitives\polyline.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_primitives.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_prim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>





<function><type><specifier>static</specifier> <name>float</name></type> <name>compute_direction_and_normal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>begin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>length</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>dir</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>begin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>end</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>begin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>_al_prim_normalize</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>normal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>dir</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>normal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dir</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>length</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_end_cross_points</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>v0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>p0</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>p1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name><name>dir</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>normal</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>radius</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>compute_direction_and_normal</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>normal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>normal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>normal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>normal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>normal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_cross_points</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>v0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>,
<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>l0</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>l1</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>r0</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>r1</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>out_middle</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>out_angle</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>out_miter_distance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name><name>normal_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>normal_1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>dir_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dir_1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>middle</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>diff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>miter_distance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>angle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>len_0</name></decl>, <decl><type ref="prev"/><name>len_1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>sharp</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>len_0</name> <operator>=</operator> <call><name>compute_direction_and_normal</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>dir_0</name></expr></argument>, <argument><expr><name>normal_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len_1</name> <operator>=</operator> <call><name>compute_direction_and_normal</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>dir_1</name></expr></argument>, <argument><expr><name>normal_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>diff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dir_0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>dir_1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dir_0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>dir_1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name><name>dir_0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>dir_1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>dir_0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>dir_1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>angle</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>diff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>diff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><call><name>atan2f</name><argument_list>(<argument><expr><name><name>diff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>diff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0.0f</literal></expr></else></ternary></expr>;</expr_stmt>


<expr_stmt><expr><name>miter_distance</name> <operator>=</operator> <ternary><condition><expr><name>angle</name> <operator>!=</operator> <literal type="number">0.0f</literal></expr> ?</condition><then> <expr><name>radius</name> <operator>/</operator> <call><name>cosf</name><argument_list>(<argument><expr><call><name>fabsf</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>radius</name></expr></else></ternary></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>miter_distance</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sharp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>miter_distance</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>miter_distance</name> <operator>&gt;</operator> <name>len_0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sharp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>miter_distance</name> <operator>=</operator> <name>len_0</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>miter_distance</name> <operator>&gt;</operator> <name>len_1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sharp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>miter_distance</name> <operator>=</operator> <name>len_1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>middle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>normal_0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>normal_1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>middle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>normal_0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>normal_1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>middle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>middle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>middle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>middle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dir_1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>middle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dir_1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_prim_normalize</name><argument_list>(<argument><expr><name>middle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>angle</name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>l0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>normal_0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>normal_0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>normal_1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>normal_1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sharp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>l1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>normal_0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>normal_0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>normal_1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>normal_1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>l1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>r1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>middle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>miter_distance</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>r1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>middle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>miter_distance</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>middle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>middle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>middle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>middle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>normal_0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>normal_0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>normal_1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>normal_1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sharp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>l0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>normal_0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>normal_0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>normal_1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>normal_1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>l0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>r0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>middle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>miter_distance</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>r0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>middle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>miter_distance</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out_angle</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>out_angle</name> <operator>=</operator> <name>angle</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out_miter_distance</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>out_miter_distance</name> <operator>=</operator> <name>miter_distance</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out_middle</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out_middle</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_arc</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PRIM_VERTEX_CACHE</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>pivot</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>segments</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>arc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>v0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>v1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>cp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>fabsf</name><argument_list>(<argument><expr><name>end</name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0.001f</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>fmodf</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>ALLEGRO_PI</name> <operator>*</operator> <literal type="number">2.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>fmodf</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>ALLEGRO_PI</name> <operator>*</operator> <literal type="number">2.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;=</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>+=</operator> <name>ALLEGRO_PI</name> <operator>*</operator> <literal type="number">2.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>arc</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>segments</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>segments</name> <operator>*</operator> <name>arc</name> <operator>/</operator> <name>ALLEGRO_PI</name> <operator>*</operator> <literal type="number">2.0f</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>segments</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>segments</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>arc</name> <operator>/</operator> <name>segments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>arc</name> <operator>/</operator> <name>segments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>pivot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>pivot</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>segments</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>*</operator> <name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>s</name> <operator>*</operator> <name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>s</name> <operator>*</operator> <name>t</name> <operator>+</operator> <name>c</name> <operator>*</operator> <name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>pivot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>pivot</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_prim_cache_push_triangle</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>pivot</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>radius</name> <operator>+</operator> <name><name>pivot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>radius</name> <operator>+</operator> <name><name>pivot</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_prim_cache_push_triangle</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>pivot</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_square_end_cap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PRIM_VERTEX_CACHE</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>pivot</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>normal</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>v0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>pivot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>normal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>, <expr><name><name>pivot</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>normal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>v1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>pivot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>normal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>, <expr><name><name>pivot</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>normal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>v2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>v0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dir</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>, <expr><name><name>v0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dir</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>v3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dir</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>, <expr><name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dir</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>_al_prim_cache_push_triangle</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>v3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_prim_cache_push_triangle</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v3</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_triange_end_cap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PRIM_VERTEX_CACHE</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>pivot</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>normal</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>v0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>pivot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>normal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>, <expr><name><name>pivot</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>normal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>v1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>pivot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>normal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>, <expr><name><name>pivot</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>normal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>v2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>pivot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dir</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr>, <expr><name><name>pivot</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dir</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>radius</name></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>_al_prim_cache_push_triangle</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_round_end_cap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PRIM_VERTEX_CACHE</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>pivot</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>normal</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>angle</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><operator>-</operator><name><name>normal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><name><name>normal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dir</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>radius</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_arc</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>pivot</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>, <argument><expr><name>angle</name> <operator>+</operator> <name>ALLEGRO_PI</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_end_cap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PRIM_VERTEX_CACHE</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cap_style</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>v0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name><name>dir</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>normal</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cap_style</name> <operator>!=</operator> <name>ALLEGRO_LINE_CAP_CLOSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>cap_style</name> <operator>==</operator> <name>ALLEGRO_LINE_CAP_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>compute_direction_and_normal</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>normal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>cap_style</name> <operator>==</operator> <name>ALLEGRO_LINE_CAP_SQUARE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emit_square_end_cap</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>normal</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cap_style</name> <operator>==</operator> <name>ALLEGRO_LINE_CAP_TRIANGLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emit_triange_end_cap</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>normal</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cap_style</name> <operator>==</operator> <name>ALLEGRO_LINE_CAP_ROUND</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emit_round_end_cap</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>normal</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"Unknown or unsupported style of ending cap."</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_bevel_join</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PRIM_VERTEX_CACHE</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>pivot</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>p0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>p1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_al_prim_cache_push_triangle</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>pivot</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_round_join</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PRIM_VERTEX_CACHE</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>pivot</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>p0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>start</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name><name>p1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>pivot</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>pivot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>end</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name><name>p0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>pivot</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>pivot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>+=</operator> <name>ALLEGRO_PI</name> <operator>*</operator> <literal type="number">2.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>emit_arc</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>pivot</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_miter_join</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PRIM_VERTEX_CACHE</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>pivot</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>p0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>p1</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>middle</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>angle</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>miter_distance</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>max_miter_distance</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>radius</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>miter_distance</name> <operator>&gt;</operator> <name>max_miter_distance</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>normal</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><name><name>middle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>middle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>miter_distance</name> <operator>-</operator> <name>max_miter_distance</name><operator>)</operator> <operator>*</operator> <call><name>tanf</name><argument_list>(<argument><expr><operator>(</operator><name>ALLEGRO_PI</name> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>v0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name><name>pivot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>middle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>max_miter_distance</name> <operator>+</operator> <name><name>normal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>offset</name></expr>,
<expr><name><name>pivot</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>middle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>max_miter_distance</name> <operator>+</operator> <name><name>normal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>offset</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>v1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name><name>pivot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>middle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>max_miter_distance</name> <operator>-</operator> <name><name>normal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>offset</name></expr>,
<expr><name><name>pivot</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>middle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>max_miter_distance</name> <operator>-</operator> <name><name>normal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>offset</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_prim_cache_push_triangle</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>pivot</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_prim_cache_push_triangle</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>pivot</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_prim_cache_push_triangle</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>pivot</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>miter</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name><name>pivot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>middle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>miter_distance</name></expr>,
<expr><name><name>pivot</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>middle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>miter_distance</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_prim_cache_push_triangle</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>pivot</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>miter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_prim_cache_push_triangle</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>pivot</name></expr></argument>, <argument><expr><name>miter</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_join</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PRIM_VERTEX_CACHE</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>join_style</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>pivot</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>p0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>middle</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>angle</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>miter_distance</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>miter_limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>join_style</name> <operator>==</operator> <name>ALLEGRO_LINE_JOIN_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>join_style</name> <operator>==</operator> <name>ALLEGRO_LINE_JOIN_BEVEL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emit_bevel_join</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>pivot</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>join_style</name> <operator>==</operator> <name>ALLEGRO_LINE_JOIN_ROUND</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emit_round_join</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>pivot</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>join_style</name> <operator>==</operator> <name>ALLEGRO_LINE_JOIN_MITER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emit_miter_join</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>pivot</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>, <argument><expr><name>miter_distance</name></expr></argument>, <argument><expr><name>miter_limit</name> <operator>*</operator> <name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"Unknown or unsupported style of join."</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_polyline</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PRIM_VERTEX_CACHE</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>vertices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vertex_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vertex_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>join_style</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cap_style</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>thickness</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>miter_limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERTEX</name><parameter_list>(<parameter><type><name>index</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((const float*)(((uint8_t*)vertices) + vertex_stride * ((vertex_count + (index)) % vertex_count)))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>float</name></type> <name><name>l0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>l1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>r0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>r1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>p0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>p1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>radius</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>steps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>thickness</name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>vertex_count</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>radius</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name>thickness</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>vertex_count</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>cap_style</name> <operator>==</operator> <name>ALLEGRO_LINE_CAP_CLOSED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cap_style</name> <operator>=</operator> <name>ALLEGRO_LINE_CAP_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>cap_style</name> <operator>!=</operator> <name>ALLEGRO_LINE_CAP_CLOSED</name></expr>)</condition>
<block>{<block_content>






<expr_stmt><expr><call><name>emit_end_cap</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>cap_style</name></expr></argument>, <argument><expr><call><name>VERTEX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VERTEX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emit_end_cap</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>cap_style</name></expr></argument>, <argument><expr><call><name>VERTEX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VERTEX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>compute_end_cross_points</name><argument_list>(<argument><expr><call><name>VERTEX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VERTEX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>steps</name> <operator>=</operator> <name>vertex_count</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>compute_cross_points</name><argument_list>(<argument><expr><call><name>VERTEX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VERTEX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VERTEX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><name>l0</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>steps</name> <operator>=</operator> <name>vertex_count</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>steps</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>v0</name> <init>= <expr><call><name>VERTEX</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>v1</name> <init>= <expr><call><name>VERTEX</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>v2</name> <init>= <expr><call><name>VERTEX</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cap_style</name> <operator>==</operator> <name>ALLEGRO_LINE_CAP_CLOSED</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <name>steps</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>middle</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>miter_distance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>angle</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>compute_cross_points</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><name>l0</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>angle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>miter_distance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>angle</name> <operator>&gt;=</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emit_join</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>join_style</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>l0</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>, <argument><expr><name>miter_distance</name></expr></argument>, <argument><expr><name>miter_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emit_join</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>join_style</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>, <argument><expr><name>miter_distance</name></expr></argument>, <argument><expr><name>miter_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>compute_end_cross_points</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><name>l0</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>_al_prim_cache_push_triangle</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_prim_cache_push_triangle</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_prim_cache_push_triangle</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>l0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_prim_cache_push_triangle</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>l0</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VERTEX</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_draw_polyline</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PRIM_VERTEX_CACHE</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>vertices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vertex_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vertex_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>join_style</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cap_style</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>thickness</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>miter_limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>thickness</name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_al_prim_cache_init</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_VERTEX_CACHE_TRIANGLE</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emit_polyline</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>vertices</name></expr></argument>, <argument><expr><name>vertex_stride</name></expr></argument>, <argument><expr><name>vertex_count</name></expr></argument>, <argument><expr><name>join_style</name></expr></argument>, <argument><expr><name>cap_style</name></expr></argument>, <argument><expr><name>thickness</name></expr></argument>, <argument><expr><name>miter_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_prim_cache_term</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERTEX</name><parameter_list>(<parameter><type><name>index</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((const float*)(((uint8_t*)vertices) + vertex_stride * ((vertex_count + (index)) % vertex_count)))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_prim_cache_init</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_VERTEX_CACHE_LINE_STRIP</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>vertex_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <operator>(</operator><name>ALLEGRO_VERTEX_CACHE_SIZE</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_al_prim_cache_flush</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_prim_cache_push_point</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><call><name>VERTEX</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>cap_style</name> <operator>==</operator> <name>ALLEGRO_LINE_CAP_CLOSED</name> <operator>&amp;&amp;</operator> <name>vertex_count</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <operator>(</operator><name>ALLEGRO_VERTEX_CACHE_SIZE</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_al_prim_cache_flush</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_prim_cache_push_point</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><call><name>VERTEX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_prim_cache_term</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VERTEX</name></cpp:undef>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_draw_polyline</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>vertices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vertex_stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>vertex_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>join_style</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cap_style</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>thickness</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>miter_limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_PRIM_VERTEX_CACHE</name></type> <name>cache</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>do_draw_polyline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cache</name></expr></argument>, <argument><expr><name>vertices</name></expr></argument>, <argument><expr><name>vertex_stride</name></expr></argument>, <argument><expr><name>vertex_count</name></expr></argument>, <argument><expr><name>join_style</name></expr></argument>, <argument><expr><name>cap_style</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>thickness</name></expr></argument>, <argument><expr><name>miter_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


</unit>
