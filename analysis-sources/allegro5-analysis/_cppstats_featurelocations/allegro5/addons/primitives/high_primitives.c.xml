<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\primitives\high_primitives.c">






































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_primitives.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_opengl.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_MSVC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hypotf</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_hypotf((x), (y))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL_VERTEX_CACHE</name></cpp:macro> <cpp:value>ALLEGRO_VERTEX vertex_cache[ALLEGRO_VERTEX_CACHE_SIZE]</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <name>float</name></type> <name>get_scale</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DET2D</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(fabs((T)-&gt;m[0][0] * (T)-&gt;m[1][1] - (T)-&gt;m[0][1] * (T)-&gt;m[1][0]))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_TRANSFORM</name><modifier>*</modifier></type> <name>t</name> <init>= <expr><call><name>al_get_current_transform</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>scale_sq</name> <init>= <expr><call><name>DET2D</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>b</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_TRANSFORM</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>al_get_current_projection_transform</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>scale_sq</name> <operator>*=</operator> <call><name>DET2D</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">4.0f</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>scale_sq</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DET2D</name></cpp:undef>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_draw_line</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y2</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>thickness</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>thickness</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tx</name></decl>, <decl><type ref="prev"/><name>ty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>len</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>x2</name> <operator>-</operator> <name>x1</name></expr></argument>, <argument><expr><name>y2</name> <operator>-</operator> <name>y1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name><name>vtx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tx</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name>thickness</name> <operator>*</operator> <operator>(</operator><name>y2</name> <operator>-</operator> <name>y1</name><operator>)</operator> <operator>/</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ty</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name>thickness</name> <operator>*</operator> <operator>-</operator><operator>(</operator><name>x2</name> <operator>-</operator> <name>x1</name><operator>)</operator> <operator>/</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name> <operator>+</operator> <name>tx</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name> <operator>+</operator> <name>ty</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name> <operator>-</operator> <name>tx</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name> <operator>-</operator> <name>ty</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x2</name> <operator>-</operator> <name>tx</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y2</name> <operator>-</operator> <name>ty</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x2</name> <operator>+</operator> <name>tx</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y2</name> <operator>+</operator> <name>ty</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_FAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x2</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_LINE_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_draw_triangle</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y2</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>x3</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y3</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>thickness</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>thickness</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ii</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>side1</name></decl>, <decl><type ref="prev"/><name>side2</name></decl>, <decl><type ref="prev"/><name>side3</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>perimeter</name></decl>, <decl><type ref="prev"/><name>semi_perimeter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>outer_frac</name></decl>, <decl><type ref="prev"/><name>inner_frac</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>incenter_x</name></decl>, <decl><type ref="prev"/><name>incenter_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>incircle_rad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name><name>vtx</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>x1</name></expr>, <expr><name>x2</name></expr>, <expr><name>x3</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>y1</name></expr>, <expr><name>y2</name></expr>, <expr><name>y3</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name>first_inner_vtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name>first_outer_vtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name>ini_vtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cross</name> <init>= <expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ini_vtx</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>ini_vtx</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>ini_vtx</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>ini_vtx</name><operator>.</operator><name>u</name></name> <operator>=</operator> <name><name>ini_vtx</name><operator>.</operator><name>v</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ini_vtx</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first_inner_vtx</name> <operator>=</operator> <name>ini_vtx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first_outer_vtx</name> <operator>=</operator> <name>ini_vtx</name></expr>;</expr_stmt>




<if_stmt><if>if<condition>(<expr><call><name>fabsf</name><argument_list>(<argument><expr><name>cross</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0.0001f</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>tx</name></decl>, <decl><type ref="prev"/><name>ty</name></decl>, <decl><type ref="prev"/><name>lx</name></decl>, <decl><type ref="prev"/><name>ly</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>len</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>float</name></type> <name>dot</name> <init>= <expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>dot</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x1</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>y1</name> <operator>=</operator> <name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x2</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>y2</name> <operator>=</operator> <name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>dot</name> <operator>=</operator> <operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>dot</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x1</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>y1</name> <operator>=</operator> <name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x2</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>y2</name> <operator>=</operator> <name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>x1</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>y1</name> <operator>=</operator> <name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x2</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>y2</name> <operator>=</operator> <name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>hypotf</name><argument_list>(<argument><expr><name>x2</name> <operator>-</operator> <name>x1</name></expr></argument>, <argument><expr><name>y2</name> <operator>-</operator> <name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tx</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name>thickness</name> <operator>*</operator> <operator>(</operator><name>y2</name> <operator>-</operator> <name>y1</name><operator>)</operator> <operator>/</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ty</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name>thickness</name> <operator>*</operator> <operator>-</operator><operator>(</operator><name>x2</name> <operator>-</operator> <name>x1</name><operator>)</operator> <operator>/</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lx</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name>thickness</name> <operator>*</operator> <operator>(</operator><name>x2</name> <operator>-</operator> <name>x1</name><operator>)</operator> <operator>/</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ly</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name>thickness</name> <operator>*</operator> <operator>(</operator><name>y2</name> <operator>-</operator> <name>y1</name><operator>)</operator> <operator>/</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name> <operator>+</operator> <name>tx</name> <operator>-</operator> <name>lx</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name> <operator>+</operator> <name>ty</name> <operator>-</operator> <name>ly</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name> <operator>-</operator> <name>tx</name> <operator>-</operator> <name>lx</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name> <operator>-</operator> <name>ty</name> <operator>-</operator> <name>ly</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x2</name> <operator>-</operator> <name>tx</name> <operator>+</operator> <name>lx</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y2</name> <operator>-</operator> <name>ty</name> <operator>+</operator> <name>ly</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x2</name> <operator>+</operator> <name>tx</name> <operator>+</operator> <name>lx</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y2</name> <operator>+</operator> <name>ty</name> <operator>+</operator> <name>ly</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_FAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>cross</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>float</name></type> <name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>side1</name> <operator>=</operator> <call><name>hypotf</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>side2</name> <operator>=</operator> <call><name>hypotf</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>side3</name> <operator>=</operator> <call><name>hypotf</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>perimeter</name> <operator>=</operator> <name>side1</name> <operator>+</operator> <name>side2</name> <operator>+</operator> <name>side3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>semi_perimeter</name> <operator>=</operator> <name>perimeter</name> <operator>/</operator> <literal type="number">2.0f</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>semi_perimeter</name> <operator>&lt;</operator> <literal type="number">0.00001f</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>incircle_rad</name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><operator>(</operator><name>semi_perimeter</name> <operator>-</operator> <name>side1</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>semi_perimeter</name> <operator>-</operator> <name>side2</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>semi_perimeter</name> <operator>-</operator> <name>side3</name><operator>)</operator> <operator>/</operator> <name>semi_perimeter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>incircle_rad</name> <operator>&lt;</operator> <literal type="number">0.00001f</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>outer_frac</name> <operator>=</operator> <operator>(</operator><name>incircle_rad</name> <operator>+</operator> <name>thickness</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>incircle_rad</name></expr>;</expr_stmt>
<expr_stmt><expr><name>inner_frac</name> <operator>=</operator> <operator>(</operator><name>incircle_rad</name> <operator>-</operator> <name>thickness</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>incircle_rad</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>inner_frac</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>inner_frac</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>incenter_x</name> <operator>=</operator> <operator>(</operator><name>side1</name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>side2</name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>side3</name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <name>perimeter</name></expr>;</expr_stmt>
<expr_stmt><expr><name>incenter_y</name> <operator>=</operator> <operator>(</operator><name>side1</name> <operator>*</operator> <name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>side2</name> <operator>*</operator> <name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>side3</name> <operator>*</operator> <name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <name>perimeter</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRAW</name></cpp:macro> <cpp:value>if(ii != 0) { vtx[idx++] = outer_vtx; vtx[idx++] = inner_vtx; al_draw_prim(vtx, 0, 0, 0, idx, ALLEGRO_PRIM_TRIANGLE_FAN); idx = 0; }</cpp:value></cpp:define>












<for>for<control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>vert_x</name> <init>= <expr><name><name>x</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>-</operator> <name>incenter_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>vert_y</name> <init>= <expr><name><name>y</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>-</operator> <name>incenter_y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>o_dx</name> <init>= <expr><name>vert_x</name> <operator>*</operator> <name>outer_frac</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>o_dy</name> <init>= <expr><name>vert_y</name> <operator>*</operator> <name>outer_frac</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>i_dx</name> <init>= <expr><name>vert_x</name> <operator>*</operator> <name>inner_frac</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>i_dy</name> <init>= <expr><name>vert_y</name> <operator>*</operator> <name>inner_frac</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>tdx</name> <init>= <expr><name>o_dx</name> <operator>-</operator> <name>i_dx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tdy</name> <init>= <expr><name>o_dy</name> <operator>-</operator> <name>i_dy</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name>inner_vtx</name> <init>= <expr><name>ini_vtx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name>outer_vtx</name> <init>= <expr><name>ini_vtx</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>tdx</name> <operator>*</operator> <name>tdx</name> <operator>+</operator> <name>tdy</name> <operator>*</operator> <name>tdy</name> <operator>&gt;</operator> <literal type="number">16</literal> <operator>*</operator> <name>thickness</name> <operator>*</operator> <name>thickness</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x_pos</name> <init>= <expr><name><name>x</name><index>[<expr><operator>(</operator><name>ii</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y_pos</name> <init>= <expr><name><name>y</name><index>[<expr><operator>(</operator><name>ii</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x_neg</name> <init>= <expr><name><name>x</name><index>[<expr><operator>(</operator><name>ii</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y_neg</name> <init>= <expr><name><name>y</name><index>[<expr><operator>(</operator><name>ii</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x1_x2</name> <init>= <expr><name><name>x</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>-</operator> <name>x_pos</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y1_y2</name> <init>= <expr><name><name>y</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>-</operator> <name>y_pos</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x1_x3</name> <init>= <expr><name><name>x</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>-</operator> <name>x_neg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y1_y3</name> <init>= <expr><name><name>y</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>-</operator> <name>y_neg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mag_1_2</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>x1_x2</name></expr></argument>, <argument><expr><name>y1_y2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>mag_1_3</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>x1_x3</name></expr></argument>, <argument><expr><name>y1_y3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name>next_vtx</name> <init>= <expr><name>ini_vtx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x1_x2</name> <operator>*=</operator> <name>thickness</name> <operator>/</operator> <literal type="number">2</literal> <operator>/</operator> <name>mag_1_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y1_y2</name> <operator>*=</operator> <name>thickness</name> <operator>/</operator> <literal type="number">2</literal> <operator>/</operator> <name>mag_1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x1_x3</name> <operator>*=</operator> <name>thickness</name> <operator>/</operator> <literal type="number">2</literal> <operator>/</operator> <name>mag_1_3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y1_y3</name> <operator>*=</operator> <name>thickness</name> <operator>/</operator> <literal type="number">2</literal> <operator>/</operator> <name>mag_1_3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outer_vtx</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>x</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>+</operator> <name>x1_x3</name> <operator>-</operator> <name>y1_y3</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>outer_vtx</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>y</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>+</operator> <name>y1_y3</name> <operator>+</operator> <name>x1_x3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inner_vtx</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>incenter_x</name> <operator>+</operator> <name>i_dx</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>inner_vtx</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>incenter_y</name> <operator>+</operator> <name>i_dy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next_vtx</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>x</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>+</operator> <name>x1_x2</name> <operator>+</operator> <name>y1_y2</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>next_vtx</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>y</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>+</operator> <name>y1_y2</name> <operator>-</operator> <name>x1_x2</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DRAW</name></type>

<name><name>vtx</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <init>= <expr><name>inner_vtx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>outer_vtx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>next_vtx</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>inner_vtx</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>incenter_x</name> <operator>+</operator> <name>i_dx</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>inner_vtx</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>incenter_y</name> <operator>+</operator> <name>i_dy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outer_vtx</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>incenter_x</name> <operator>+</operator> <name>o_dx</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>outer_vtx</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>incenter_y</name> <operator>+</operator> <name>o_dy</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DRAW</name></type>

<name><name>vtx</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <init>= <expr><name>inner_vtx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>outer_vtx</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ii</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>first_inner_vtx</name> <operator>=</operator> <name>inner_vtx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first_outer_vtx</name> <operator>=</operator> <name>outer_vtx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>first_outer_vtx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>first_inner_vtx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_FAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DRAW</name></cpp:undef>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name><name>vtx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x2</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x3</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_LINE_LOOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_draw_filled_triangle</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y2</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>x3</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y3</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name><name>vtx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x2</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x3</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_draw_rectangle</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y2</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>thickness</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>thickness</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><name>thickness</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name><name>vtx</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name> <operator>-</operator> <name>t</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name> <operator>+</operator> <name>t</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name> <operator>+</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x2</name> <operator>+</operator> <name>t</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x2</name> <operator>-</operator> <name>t</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name> <operator>+</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x2</name> <operator>+</operator> <name>t</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y2</name> <operator>+</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x2</name> <operator>-</operator> <name>t</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y2</name> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name> <operator>-</operator> <name>t</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y2</name> <operator>+</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name> <operator>+</operator> <name>t</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y2</name> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name> <operator>-</operator> <name>t</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name> <operator>+</operator> <name>t</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name> <operator>+</operator> <name>t</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_STRIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name><name>vtx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x2</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x2</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y2</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_LINE_LOOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_draw_filled_rectangle</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y2</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name><name>vtx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x2</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x2</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_FAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_calculate_arc</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>cy</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>rx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>ry</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>start_theta</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>delta_theta</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>thickness</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_points</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
<decl_stmt><decl><type><name>float</name></type> <name>theta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>num_points</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ry</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>thickness</name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>theta</name> <operator>=</operator> <name>delta_theta</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>num_points</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>start_theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>start_theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rx</name> <operator>==</operator> <name>ry</name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>float</name></type> <name>r1</name> <init>= <expr><name>rx</name> <operator>-</operator> <name>thickness</name> <operator>/</operator> <literal type="number">2.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>r2</name> <init>= <expr><name>rx</name> <operator>+</operator> <name>thickness</name> <operator>/</operator> <literal type="number">2.0f</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_points</name></expr>;</condition> <incr><expr><name>ii</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>r2</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>cx</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <name>r2</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>cy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>dest</name><operator>)</operator> <operator>+</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>r1</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>cx</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <name>r1</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>cy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>dest</name><operator>)</operator> <operator>+</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>c</name> <operator>*</operator> <name>x</name> <operator>-</operator> <name>s</name> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>s</name> <operator>*</operator> <name>t</name> <operator>+</operator> <name>c</name> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rx</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ry</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_points</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>denom</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>ry</name> <operator>*</operator> <name>x</name></expr></argument>, <argument><expr><name>rx</name> <operator>*</operator> <name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>nx</name> <init>= <expr><name>thickness</name> <operator>/</operator> <literal type="number">2</literal> <operator>*</operator> <name>ry</name> <operator>*</operator> <name>x</name> <operator>/</operator> <name>denom</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>ny</name> <init>= <expr><name>thickness</name> <operator>/</operator> <literal type="number">2</literal> <operator>*</operator> <name>rx</name> <operator>*</operator> <name>y</name> <operator>/</operator> <name>denom</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>rx</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>cx</name> <operator>+</operator> <name>nx</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <name>ry</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>cy</name> <operator>+</operator> <name>ny</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>dest</name><operator>)</operator> <operator>+</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>rx</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>cx</name> <operator>-</operator> <name>nx</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <name>ry</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>cy</name> <operator>-</operator> <name>ny</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>dest</name><operator>)</operator> <operator>+</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>c</name> <operator>*</operator> <name>x</name> <operator>-</operator> <name>s</name> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>s</name> <operator>*</operator> <name>t</name> <operator>+</operator> <name>c</name> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>theta</name> <operator>=</operator> <name>delta_theta</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>num_points</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>start_theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>start_theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_points</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>rx</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>cx</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <name>ry</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>cy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>dest</name><operator>)</operator> <operator>+</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>c</name> <operator>*</operator> <name>x</name> <operator>-</operator> <name>s</name> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>s</name> <operator>*</operator> <name>t</name> <operator>+</operator> <name>c</name> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_draw_pieslice</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>cy</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>start_theta</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>delta_theta</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>thickness</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>LOCAL_VERTEX_CACHE</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>scale</name> <init>= <expr><call><name>get_scale</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_segments</name></decl>, <decl><type ref="prev"/><name>ii</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>r</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>delta_theta</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>delta_theta</name> <operator>=</operator> <operator>-</operator><name>delta_theta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>start_theta</name> <operator>-=</operator> <name>delta_theta</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>thickness</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>delta_theta</name> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name><operator>)</operator> <operator>*</operator> <name>ALLEGRO_PRIM_QUALITY</name> <operator>*</operator> <name>scale</name> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_segments</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_segments</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>ALLEGRO_VERTEX_CACHE_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <name>ALLEGRO_VERTEX_CACHE_SIZE</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_calculate_arc</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vertex_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>start_theta</name></expr></argument>, <argument><expr><name>delta_theta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_segments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>cx</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>cy</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_segments</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vertex_cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_segments</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_LINE_LOOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>ht</name> <init>= <expr><name>thickness</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>inner_side_angle</name> <init>= <expr><call><name>asinf</name><argument_list>(<argument><expr><name>ht</name> <operator>/</operator> <operator>(</operator><name>r</name> <operator>-</operator> <name>ht</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>outer_side_angle</name> <init>= <expr><call><name>asinf</name><argument_list>(<argument><expr><name>ht</name> <operator>/</operator> <operator>(</operator><name>r</name> <operator>+</operator> <name>ht</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>central_angle</name> <init>= <expr><name>delta_theta</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>inner_side_angle</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>inverted_winding</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>delta_theta</name> <operator>/</operator> <name>ALLEGRO_PI</name><operator>)</operator><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>midangle</name> <init>= <expr><name>start_theta</name> <operator>+</operator> <operator>(</operator><call><name>fmodf</name><argument_list>(<argument><expr><name>delta_theta</name> <operator>+</operator> <name>ALLEGRO_PI</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>ALLEGRO_PI</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>midpoint_dir_x</name> <init>= <expr><call><name>cosf</name><argument_list>(<argument><expr><name>midangle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>midpoint_dir_y</name> <init>= <expr><call><name>sinf</name><argument_list>(<argument><expr><name>midangle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>side_dir_x</name> <init>= <expr><call><name>cosf</name><argument_list>(<argument><expr><name>start_theta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>side_dir_y</name> <init>= <expr><call><name>sinf</name><argument_list>(<argument><expr><name>start_theta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sine_half_delta</name> <init>= <expr><call><name>fabsf</name><argument_list>(<argument><expr><name>side_dir_x</name> <operator>*</operator> <name>midpoint_dir_y</name> <operator>-</operator> <name>side_dir_y</name> <operator>*</operator> <name>midpoint_dir_x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>connect_len</name> <init>= <expr><name>ht</name> <operator>/</operator> <name>sine_half_delta</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>blunt_tip</name> <init>= <expr><name>connect_len</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>thickness</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>central_angle</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>central_start_angle</name> <init>= <expr><name>start_theta</name> <operator>+</operator> <name>inner_side_angle</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>vtx_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vtx_delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extra_vtx</name> <init>= <expr><ternary><condition><expr><name>blunt_tip</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_draw_arc</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>central_start_angle</name></expr></argument>, <argument><expr><name>central_angle</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>cx</name> <operator>+</operator> <operator>(</operator><name>r</name> <operator>-</operator> <name>thickness</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>central_start_angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>cy</name> <operator>+</operator> <operator>(</operator><name>r</name> <operator>-</operator> <name>thickness</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>central_start_angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <operator>(</operator><name>inner_side_angle</name> <operator>+</operator> <name>outer_side_angle</name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name><operator>)</operator> <operator>*</operator> <name>ALLEGRO_PRIM_QUALITY</name> <operator>*</operator> <name>scale</name> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>r</name> <operator>+</operator> <name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_segments</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_segments</name> <operator>+</operator> <name>extra_vtx</name> <operator>&gt;=</operator> <name>ALLEGRO_VERTEX_CACHE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <name>ALLEGRO_VERTEX_CACHE_SIZE</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>extra_vtx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_calculate_arc</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vertex_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><name>r</name> <operator>+</operator> <name>ht</name></expr></argument>, <argument><expr><name>r</name> <operator>+</operator> <name>ht</name></expr></argument>, <argument><expr><name>central_start_angle</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>outer_side_angle</name> <operator>+</operator> <name>inner_side_angle</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_segments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>vtx_id</name> <operator>=</operator> <name>num_segments</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>inverted_winding</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>blunt_tip</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>vtx_delta</name> <operator>=</operator> <ternary><condition><expr><name>inverted_winding</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>blunt_tip</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>vx</name> <init>= <expr><name>ht</name> <operator>*</operator> <operator>(</operator><name>side_dir_y</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>inverted_winding</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator> <operator>-</operator> <name>side_dir_x</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>vy</name> <init>= <expr><name>ht</name> <operator>*</operator> <operator>(</operator><operator>-</operator><name>side_dir_x</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>inverted_winding</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator> <operator>-</operator> <name>side_dir_y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dot</name> <init>= <expr><name>vx</name> <operator>*</operator> <name>midpoint_dir_x</name> <operator>+</operator> <name>vy</name> <operator>*</operator> <name>midpoint_dir_y</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>vtx_id</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>cx</name> <operator>+</operator> <name>vx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>vtx_id</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>cy</name> <operator>+</operator> <name>vy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vtx_id</name> <operator>+=</operator> <name>vtx_delta</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>vtx_id</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>cx</name> <operator>+</operator> <name>dot</name> <operator>*</operator> <name>midpoint_dir_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>vtx_id</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>cy</name> <operator>+</operator> <name>dot</name> <operator>*</operator> <name>midpoint_dir_y</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>vtx_id</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>cx</name> <operator>-</operator> <name>connect_len</name> <operator>*</operator> <name>midpoint_dir_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>vtx_id</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>cy</name> <operator>-</operator> <name>connect_len</name> <operator>*</operator> <name>midpoint_dir_y</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>vtx_id</name> <operator>+=</operator> <name>vtx_delta</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>connect_len</name> <operator>&gt;</operator> <name>r</name> <operator>-</operator> <name>ht</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>connect_len</name> <operator>=</operator> <name>r</name> <operator>-</operator> <name>ht</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>vtx_id</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>cx</name> <operator>+</operator> <name>connect_len</name> <operator>*</operator> <name>midpoint_dir_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>vtx_id</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>cy</name> <operator>+</operator> <name>connect_len</name> <operator>*</operator> <name>midpoint_dir_y</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_segments</name> <operator>+</operator> <name>extra_vtx</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vertex_cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_segments</name> <operator>+</operator> <name>extra_vtx</name></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_FAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_segments</name> <operator>+</operator> <name>extra_vtx</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>dot</name> <init>= <expr><operator>(</operator><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name>cx</name><operator>)</operator> <operator>*</operator> <name>midpoint_dir_x</name> <operator>+</operator> <operator>(</operator><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name>cy</name><operator>)</operator> <operator>*</operator> <name>midpoint_dir_y</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>cx</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>dot</name> <operator>*</operator> <name>midpoint_dir_x</name> <operator>-</operator> <name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>cy</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>dot</name> <operator>*</operator> <name>midpoint_dir_y</name> <operator>-</operator> <name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vertex_cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_segments</name> <operator>+</operator> <name>extra_vtx</name></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_FAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>extra_vtx</name> <init>= <expr><ternary><condition><expr><name>blunt_tip</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>outer_side_angle</name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name><operator>)</operator> <operator>*</operator> <name>ALLEGRO_PRIM_QUALITY</name> <operator>*</operator> <name>scale</name> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>r</name> <operator>+</operator> <name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_segments</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_segments</name> <operator>+</operator> <name>extra_vtx</name> <operator>&gt;=</operator> <name>ALLEGRO_VERTEX_CACHE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <name>ALLEGRO_VERTEX_CACHE_SIZE</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>extra_vtx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_calculate_arc</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vertex_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><name>r</name> <operator>+</operator> <name>ht</name></expr></argument>, <argument><expr><name>r</name> <operator>+</operator> <name>ht</name></expr></argument>, <argument><expr><name>start_theta</name> <operator>-</operator> <name>outer_side_angle</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>outer_side_angle</name> <operator>+</operator> <name>delta_theta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_segments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>blunt_tip</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>vx</name> <init>= <expr><name>ht</name> <operator>*</operator> <operator>(</operator><name>side_dir_y</name> <operator>-</operator> <name>side_dir_x</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>vy</name> <init>= <expr><name>ht</name> <operator>*</operator> <operator>(</operator><operator>-</operator><name>side_dir_x</name> <operator>-</operator> <name>side_dir_y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dot</name> <init>= <expr><name>vx</name> <operator>*</operator> <name>midpoint_dir_x</name> <operator>+</operator> <name>vy</name> <operator>*</operator> <name>midpoint_dir_y</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>cx</name> <operator>+</operator> <name>vx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>cy</name> <operator>+</operator> <name>vy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vx</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dot</name> <operator>*</operator> <name>midpoint_dir_x</name> <operator>-</operator> <name>vx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vy</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dot</name> <operator>*</operator> <name>midpoint_dir_y</name> <operator>-</operator> <name>vy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>num_segments</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>cx</name> <operator>+</operator> <name>vx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>num_segments</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>cy</name> <operator>+</operator> <name>vy</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>cx</name> <operator>-</operator> <name>connect_len</name> <operator>*</operator> <name>midpoint_dir_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>cy</name> <operator>-</operator> <name>connect_len</name> <operator>*</operator> <name>midpoint_dir_y</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_segments</name> <operator>+</operator> <name>extra_vtx</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vertex_cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_segments</name> <operator>+</operator> <name>extra_vtx</name></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_FAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_draw_filled_pieslice</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>cy</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>start_theta</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>delta_theta</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>LOCAL_VERTEX_CACHE</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>scale</name> <init>= <expr><call><name>get_scale</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_segments</name></decl>, <decl><type ref="prev"/><name>ii</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>r</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>delta_theta</name> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name><operator>)</operator> <operator>*</operator> <name>ALLEGRO_PRIM_QUALITY</name> <operator>*</operator> <name>scale</name> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_segments</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_segments</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>ALLEGRO_VERTEX_CACHE_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <name>ALLEGRO_VERTEX_CACHE_SIZE</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_calculate_arc</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vertex_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>start_theta</name></expr></argument>, <argument><expr><name>delta_theta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_segments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>cx</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>cy</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_segments</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vertex_cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_segments</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_FAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_draw_ellipse</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>cy</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>ry</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>thickness</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>LOCAL_VERTEX_CACHE</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>scale</name> <init>= <expr><call><name>get_scale</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ry</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>thickness</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num_segments</name> <init>= <expr><name>ALLEGRO_PRIM_QUALITY</name> <operator>*</operator> <name>scale</name> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><operator>(</operator><name>rx</name> <operator>+</operator> <name>ry</name><operator>)</operator> <operator>/</operator> <literal type="number">2.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>num_segments</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>*</operator> <name>num_segments</name> <operator>&gt;=</operator> <name>ALLEGRO_VERTEX_CACHE_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <operator>(</operator><name>ALLEGRO_VERTEX_CACHE_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_calculate_arc</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><name>rx</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ALLEGRO_PI</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>thickness</name></expr></argument>, <argument><expr><name>num_segments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>num_segments</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vertex_cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>num_segments</name></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_STRIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num_segments</name> <init>= <expr><name>ALLEGRO_PRIM_QUALITY</name> <operator>*</operator> <name>scale</name> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><operator>(</operator><name>rx</name> <operator>+</operator> <name>ry</name><operator>)</operator> <operator>/</operator> <literal type="number">2.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>num_segments</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_segments</name> <operator>&gt;=</operator> <name>ALLEGRO_VERTEX_CACHE_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <name>ALLEGRO_VERTEX_CACHE_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_calculate_arc</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><name>rx</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ALLEGRO_PI</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_segments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_segments</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vertex_cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_segments</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_LINE_LOOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_draw_filled_ellipse</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>cy</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>ry</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>LOCAL_VERTEX_CACHE</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_segments</name></decl>, <decl><type ref="prev"/><name>ii</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>scale</name> <init>= <expr><call><name>get_scale</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ry</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <name>ALLEGRO_PRIM_QUALITY</name> <operator>*</operator> <name>scale</name> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><operator>(</operator><name>rx</name> <operator>+</operator> <name>ry</name><operator>)</operator> <operator>/</operator> <literal type="number">2.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>num_segments</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_segments</name> <operator>&gt;=</operator> <name>ALLEGRO_VERTEX_CACHE_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <name>ALLEGRO_VERTEX_CACHE_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_calculate_arc</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vertex_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><name>rx</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ALLEGRO_PI</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_segments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>cx</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>cy</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_segments</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vertex_cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_segments</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_FAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_draw_circle</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>cy</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>thickness</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>al_draw_ellipse</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_draw_filled_circle</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>cy</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>al_draw_filled_ellipse</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_draw_elliptical_arc</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>cy</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>ry</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>start_theta</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>delta_theta</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>thickness</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>LOCAL_VERTEX_CACHE</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>scale</name> <init>= <expr><call><name>get_scale</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ry</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>thickness</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num_segments</name> <init>= <expr><call><name>fabs</name><argument_list>(<argument><expr><name>delta_theta</name> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name><operator>)</operator> <operator>*</operator> <name>ALLEGRO_PRIM_QUALITY</name> <operator>*</operator> <name>scale</name> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><operator>(</operator><name>rx</name> <operator>+</operator> <name>ry</name><operator>)</operator> <operator>/</operator> <literal type="number">2.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num_segments</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>*</operator> <name>num_segments</name> <operator>&gt;=</operator> <name>ALLEGRO_VERTEX_CACHE_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <operator>(</operator><name>ALLEGRO_VERTEX_CACHE_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_calculate_arc</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><name>rx</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><name>start_theta</name></expr></argument>, <argument><expr><name>delta_theta</name></expr></argument>, <argument><expr><name>thickness</name></expr></argument>, <argument><expr><name>num_segments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>num_segments</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vertex_cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>num_segments</name></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_STRIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num_segments</name> <init>= <expr><call><name>fabs</name><argument_list>(<argument><expr><name>delta_theta</name> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name><operator>)</operator> <operator>*</operator> <name>ALLEGRO_PRIM_QUALITY</name> <operator>*</operator> <name>scale</name> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><operator>(</operator><name>rx</name> <operator>+</operator> <name>ry</name><operator>)</operator> <operator>/</operator> <literal type="number">2.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num_segments</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_segments</name> <operator>&gt;=</operator> <name>ALLEGRO_VERTEX_CACHE_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <name>ALLEGRO_VERTEX_CACHE_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_calculate_arc</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><name>rx</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><name>start_theta</name></expr></argument>, <argument><expr><name>delta_theta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_segments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_segments</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vertex_cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_segments</name></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_LINE_STRIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_draw_arc</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>cy</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>start_theta</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>delta_theta</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>thickness</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>al_draw_elliptical_arc</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>start_theta</name></expr></argument>, <argument><expr><name>delta_theta</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_draw_rounded_rectangle</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y2</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>rx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>ry</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>thickness</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>LOCAL_VERTEX_CACHE</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>scale</name> <init>= <expr><call><name>get_scale</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ry</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>thickness</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num_segments</name> <init>= <expr><name>ALLEGRO_PRIM_QUALITY</name> <operator>*</operator> <name>scale</name> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><operator>(</operator><name>rx</name> <operator>+</operator> <name>ry</name><operator>)</operator> <operator>/</operator> <literal type="number">2.0f</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>num_segments</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_draw_rectangle</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">8</literal> <operator>*</operator> <name>num_segments</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>ALLEGRO_VERTEX_CACHE_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <operator>(</operator><name>ALLEGRO_VERTEX_CACHE_SIZE</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_calculate_arc</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rx</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ALLEGRO_PI</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>thickness</name></expr></argument>, <argument><expr><name>num_segments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>num_segments</name></expr>;</condition> <incr><expr><name>ii</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>num_segments</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name> <operator>+</operator> <name>rx</name> <operator>-</operator> <name><name>vertex_cache</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>num_segments</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>ii</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>num_segments</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name> <operator>+</operator> <name>ry</name> <operator>-</operator> <name><name>vertex_cache</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>num_segments</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>ii</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>num_segments</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name> <operator>+</operator> <name>rx</name> <operator>-</operator> <name><name>vertex_cache</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>num_segments</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>ii</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>num_segments</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name> <operator>+</operator> <name>ry</name> <operator>-</operator> <name><name>vertex_cache</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>num_segments</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>ii</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>num_segments</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name> <operator>+</operator> <name>rx</name> <operator>-</operator> <name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>num_segments</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y2</name> <operator>-</operator> <name>ry</name> <operator>+</operator> <name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>num_segments</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name> <operator>+</operator> <name>rx</name> <operator>-</operator> <name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>num_segments</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y2</name> <operator>-</operator> <name>ry</name> <operator>+</operator> <name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name>num_segments</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x2</name> <operator>-</operator> <name>rx</name> <operator>+</operator> <name><name>vertex_cache</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>num_segments</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>ii</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name>num_segments</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y2</name> <operator>-</operator> <name>ry</name> <operator>+</operator> <name><name>vertex_cache</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>num_segments</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>ii</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name>num_segments</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x2</name> <operator>-</operator> <name>rx</name> <operator>+</operator> <name><name>vertex_cache</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>num_segments</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>ii</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name>num_segments</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y2</name> <operator>-</operator> <name>ry</name> <operator>+</operator> <name><name>vertex_cache</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>num_segments</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>ii</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>num_segments</name></expr>;</condition> <incr><expr><name>ii</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x2</name> <operator>-</operator> <name>rx</name> <operator>+</operator> <name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name> <operator>+</operator> <name>ry</name> <operator>-</operator> <name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x2</name> <operator>-</operator> <name>rx</name> <operator>+</operator> <name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name> <operator>+</operator> <name>ry</name> <operator>-</operator> <name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>num_segments</name></expr>]</index></name> <operator>=</operator> <name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>num_segments</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>vertex_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>*</operator> <name>num_segments</name> <operator>+</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vertex_cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>num_segments</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_STRIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num_segments</name> <init>= <expr><name>ALLEGRO_PRIM_QUALITY</name> <operator>*</operator> <name>scale</name> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><operator>(</operator><name>rx</name> <operator>+</operator> <name>ry</name><operator>)</operator> <operator>/</operator> <literal type="number">2.0f</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>num_segments</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_draw_rectangle</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_segments</name> <operator>*</operator> <literal type="number">4</literal> <operator>&gt;=</operator> <name>ALLEGRO_VERTEX_CACHE_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <operator>(</operator><name>ALLEGRO_VERTEX_CACHE_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_calculate_arc</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rx</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ALLEGRO_PI</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_segments</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_segments</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>num_segments</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name> <operator>+</operator> <name>rx</name> <operator>-</operator> <name><name>vertex_cache</name><index>[<expr><name>num_segments</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>ii</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>num_segments</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name> <operator>+</operator> <name>ry</name> <operator>-</operator> <name><name>vertex_cache</name><index>[<expr><name>num_segments</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>ii</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>num_segments</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name> <operator>+</operator> <name>rx</name> <operator>-</operator> <name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>num_segments</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y2</name> <operator>-</operator> <name>ry</name> <operator>+</operator> <name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>num_segments</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x2</name> <operator>-</operator> <name>rx</name> <operator>+</operator> <name><name>vertex_cache</name><index>[<expr><name>num_segments</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>ii</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>num_segments</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y2</name> <operator>-</operator> <name>ry</name> <operator>+</operator> <name><name>vertex_cache</name><index>[<expr><name>num_segments</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>ii</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_segments</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x2</name> <operator>-</operator> <name>rx</name> <operator>+</operator> <name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name> <operator>+</operator> <name>ry</name> <operator>-</operator> <name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>*</operator> <name>num_segments</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vertex_cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>num_segments</name></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_LINE_LOOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_draw_filled_rounded_rectangle</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y2</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>rx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>ry</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>LOCAL_VERTEX_CACHE</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>scale</name> <init>= <expr><call><name>get_scale</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_segments</name> <init>= <expr><name>ALLEGRO_PRIM_QUALITY</name> <operator>*</operator> <name>scale</name> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><operator>(</operator><name>rx</name> <operator>+</operator> <name>ry</name><operator>)</operator> <operator>/</operator> <literal type="number">2.0f</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ry</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>num_segments</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_draw_filled_rectangle</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_segments</name> <operator>*</operator> <literal type="number">4</literal> <operator>&gt;=</operator> <name>ALLEGRO_VERTEX_CACHE_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <operator>(</operator><name>ALLEGRO_VERTEX_CACHE_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_calculate_arc</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rx</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ALLEGRO_PI</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_segments</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_segments</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>num_segments</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name> <operator>+</operator> <name>rx</name> <operator>-</operator> <name><name>vertex_cache</name><index>[<expr><name>num_segments</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>ii</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>num_segments</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name> <operator>+</operator> <name>ry</name> <operator>-</operator> <name><name>vertex_cache</name><index>[<expr><name>num_segments</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>ii</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>num_segments</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x1</name> <operator>+</operator> <name>rx</name> <operator>-</operator> <name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>num_segments</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y2</name> <operator>-</operator> <name>ry</name> <operator>+</operator> <name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>num_segments</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x2</name> <operator>-</operator> <name>rx</name> <operator>+</operator> <name><name>vertex_cache</name><index>[<expr><name>num_segments</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>ii</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>num_segments</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y2</name> <operator>-</operator> <name>ry</name> <operator>+</operator> <name><name>vertex_cache</name><index>[<expr><name>num_segments</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>ii</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_segments</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x2</name> <operator>-</operator> <name>rx</name> <operator>+</operator> <name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y1</name> <operator>+</operator> <name>ry</name> <operator>-</operator> <name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>*</operator> <name>num_segments</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>




<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vertex_cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>num_segments</name></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_FAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_calculate_spline</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>points</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>thickness</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_segments</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>dx</name></decl>, <decl><type ref="prev"/><name>ddx</name></decl>, <decl><type ref="prev"/><name>dddx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>dy</name></decl>, <decl><type ref="prev"/><name>ddy</name></decl>, <decl><type ref="prev"/><name>dddy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ii</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>dt</name></decl>, <decl><type ref="prev"/><name>dt2</name></decl>, <decl><type ref="prev"/><name>dt3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>xdt2_term</name></decl>, <decl><type ref="prev"/><name>xdt3_term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>ydt2_term</name></decl>, <decl><type ref="prev"/><name>ydt3_term</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>float</name></type> <name><name>cache_point_buffer_storage</name><index>[<expr><literal type="number">150</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>cache_point_buffer</name> <init>= <expr><name>cache_point_buffer_storage</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>num_segments</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>points</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_segments</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>cache_point_buffer_storage</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cache_point_buffer</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_segments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dt</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><name>num_segments</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dt2</name> <operator>=</operator> <operator>(</operator><name>dt</name> <operator>*</operator> <name>dt</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dt3</name> <operator>=</operator> <operator>(</operator><name>dt2</name> <operator>*</operator> <name>dt</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>xdt2_term</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name><name>points</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>xdt3_term</name> <operator>=</operator> <name><name>points</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name><name>points</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>xdt2_term</name> <operator>=</operator> <name>dt2</name> <operator>*</operator> <name>xdt2_term</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xdt3_term</name> <operator>=</operator> <name>dt3</name> <operator>*</operator> <name>xdt3_term</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dddx</name> <operator>=</operator> <literal type="number">6</literal> <operator>*</operator> <name>xdt3_term</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ddx</name> <operator>=</operator> <operator>-</operator><literal type="number">6</literal> <operator>*</operator> <name>xdt3_term</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>xdt2_term</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx</name> <operator>=</operator> <name>xdt3_term</name> <operator>-</operator> <name>xdt2_term</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>dt</name> <operator>*</operator> <operator>(</operator><name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><name>ydt2_term</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name><name>points</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>points</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ydt3_term</name> <operator>=</operator> <name><name>points</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name><name>points</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>points</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ydt2_term</name> <operator>=</operator> <name>dt2</name> <operator>*</operator> <name>ydt2_term</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ydt3_term</name> <operator>=</operator> <name>dt3</name> <operator>*</operator> <name>ydt3_term</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dddy</name> <operator>=</operator> <literal type="number">6</literal> <operator>*</operator> <name>ydt3_term</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ddy</name> <operator>=</operator> <operator>-</operator><literal type="number">6</literal> <operator>*</operator> <name>ydt3_term</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>ydt2_term</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy</name> <operator>=</operator> <name>ydt3_term</name> <operator>-</operator> <name>ydt2_term</name> <operator>+</operator> <name>dt</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name><name>points</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache_point_buffer</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>ii</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache_point_buffer</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>ii</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_segments</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ddx</name> <operator>+=</operator> <name>dddx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx</name> <operator>+=</operator> <name>ddx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ddy</name> <operator>+=</operator> <name>dddy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy</name> <operator>+=</operator> <name>ddy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>dy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache_point_buffer</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>ii</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache_point_buffer</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>ii</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>al_calculate_ribbon</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>cache_point_buffer</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>thickness</name></expr></argument>, <argument><expr><name>num_segments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cache_point_buffer</name> <operator>!=</operator> <name>cache_point_buffer_storage</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>cache_point_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_draw_spline</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name><name>points</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>thickness</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>scale</name> <init>= <expr><call><name>get_scale</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_segments</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>sqrtf</name><argument_list>(<argument><expr><call><name>hypotf</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>hypotf</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>points</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>hypotf</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>points</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name><name>points</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator>
<literal type="number">1.2</literal> <operator>*</operator> <name>ALLEGRO_PRIM_QUALITY</name> <operator>*</operator> <name>scale</name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>LOCAL_VERTEX_CACHE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>num_segments</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>thickness</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>*</operator> <name>num_segments</name> <operator>&gt;=</operator> <name>ALLEGRO_VERTEX_CACHE_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <operator>(</operator><name>ALLEGRO_VERTEX_CACHE_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_calculate_spline</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>points</name></expr></argument>, <argument><expr><name>thickness</name></expr></argument>, <argument><expr><name>num_segments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>num_segments</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vertex_cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>num_segments</name></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_STRIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>num_segments</name> <operator>&gt;=</operator> <name>ALLEGRO_VERTEX_CACHE_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_segments</name> <operator>=</operator> <name>ALLEGRO_VERTEX_CACHE_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_calculate_spline</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>points</name></expr></argument>, <argument><expr><name>thickness</name></expr></argument>, <argument><expr><name>num_segments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_segments</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vertex_cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_segments</name></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_LINE_STRIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_calculate_ribbon</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dest_stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>points</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>points_stride</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>thickness</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_segments</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>points</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>num_segments</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>thickness</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ii</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cur_dir_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cur_dir_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>prev_dir_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>prev_dir_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><name>thickness</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tx</name></decl>, <decl><type ref="prev"/><name>ty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>nx</name></decl>, <decl><type ref="prev"/><name>ny</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sign</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>num_segments</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>ii</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>dir_len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>*</operator><name>points</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>points</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>points</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>points</name><operator>)</operator> <operator>+</operator> <name>points_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_dir_x</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>points</name><operator>)</operator> <operator>-</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_dir_y</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>points</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dir_len</name> <operator>=</operator> <call><name>hypotf</name><argument_list>(<argument><expr><name>cur_dir_x</name></expr></argument>, <argument><expr><name>cur_dir_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>dir_len</name> <operator>&gt;</operator> <literal type="number">0.000001f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur_dir_x</name> <operator>/=</operator> <name>dir_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_dir_y</name> <operator>/=</operator> <name>dir_len</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ii</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur_dir_x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_dir_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cur_dir_x</name> <operator>=</operator> <name>prev_dir_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_dir_y</name> <operator>=</operator> <name>prev_dir_y</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ii</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tx</name> <operator>=</operator> <operator>-</operator><name>t</name> <operator>*</operator> <name>cur_dir_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ty</name> <operator>=</operator> <name>t</name> <operator>*</operator> <name>cur_dir_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ny</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>dot</name> <init>= <expr><name>cur_dir_x</name> <operator>*</operator> <name>prev_dir_x</name> <operator>+</operator> <name>cur_dir_y</name> <operator>*</operator> <name>prev_dir_y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>norm_len</name></decl>, <decl><type ref="prev"/><name>cosine</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>dot</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>float</name></type> <name>tx_</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tx</name> <operator>=</operator> <name>cur_dir_x</name> <operator>-</operator> <name>prev_dir_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ty</name> <operator>=</operator> <name>cur_dir_y</name> <operator>-</operator> <name>prev_dir_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>norm_len</name> <operator>=</operator> <call><name>hypotf</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>ty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tx</name> <operator>/=</operator> <name>norm_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ty</name> <operator>/=</operator> <name>norm_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cosine</name> <operator>=</operator> <name>tx</name> <operator>*</operator> <name>cur_dir_x</name> <operator>+</operator> <name>ty</name> <operator>*</operator> <name>cur_dir_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nx</name> <operator>=</operator> <operator>-</operator><name>t</name> <operator>*</operator> <name>tx</name> <operator>/</operator> <name>cosine</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ny</name> <operator>=</operator> <operator>-</operator><name>t</name> <operator>*</operator> <name>ty</name> <operator>/</operator> <name>cosine</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tx_</name> <operator>=</operator> <name>tx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tx</name> <operator>=</operator> <operator>-</operator><name>t</name> <operator>*</operator> <name>ty</name> <operator>*</operator> <name>cosine</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ty</name> <operator>=</operator> <name>t</name> <operator>*</operator> <name>tx_</name> <operator>*</operator> <name>cosine</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><name>sign</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>new_norm_len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tx</name> <operator>=</operator> <name>cur_dir_y</name> <operator>+</operator> <name>prev_dir_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ty</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>cur_dir_x</name> <operator>+</operator> <name>prev_dir_x</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>norm_len</name> <operator>=</operator> <call><name>hypotf</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>ty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tx</name> <operator>/=</operator> <name>norm_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ty</name> <operator>/=</operator> <name>norm_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cosine</name> <operator>=</operator> <name>tx</name> <operator>*</operator> <operator>(</operator><operator>-</operator><name>cur_dir_y</name><operator>)</operator> <operator>+</operator> <name>ty</name> <operator>*</operator> <operator>(</operator><name>cur_dir_x</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>new_norm_len</name> <operator>=</operator> <name>t</name> <operator>/</operator> <name>cosine</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tx</name> <operator>*=</operator> <name>new_norm_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ty</name> <operator>*=</operator> <name>new_norm_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ny</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>x</name> <operator>-</operator> <name>sign</name> <operator>*</operator> <name>tx</name> <operator>+</operator> <name>nx</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <name>y</name> <operator>-</operator> <name>sign</name> <operator>*</operator> <name>ty</name> <operator>+</operator> <name>ny</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>dest</name><operator>)</operator> <operator>+</operator> <name>dest_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>sign</name> <operator>*</operator> <name>tx</name> <operator>+</operator> <name>nx</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <name>y</name> <operator>+</operator> <name>sign</name> <operator>*</operator> <name>ty</name> <operator>+</operator> <name>ny</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>dest</name><operator>)</operator> <operator>+</operator> <name>dest_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_dir_x</name> <operator>=</operator> <name>cur_dir_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_dir_y</name> <operator>=</operator> <name>cur_dir_y</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>tx</name> <operator>=</operator> <operator>-</operator><name>t</name> <operator>*</operator> <name>prev_dir_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ty</name> <operator>=</operator> <name>t</name> <operator>*</operator> <name>prev_dir_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>*</operator><name>points</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>points</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>x</name> <operator>-</operator> <name>sign</name> <operator>*</operator> <name>tx</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <name>y</name> <operator>-</operator> <name>sign</name> <operator>*</operator> <name>ty</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>dest</name><operator>)</operator> <operator>+</operator> <name>dest_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>sign</name> <operator>*</operator> <name>tx</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <name>y</name> <operator>+</operator> <name>sign</name> <operator>*</operator> <name>ty</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_segments</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <operator>*</operator><name>points</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>points</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>dest</name><operator>)</operator> <operator>+</operator> <name>dest_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>points</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>points</name><operator>)</operator> <operator>+</operator> <name>points_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>al_draw_ribbon</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>points</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>points_stride</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>thickness</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_segments</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>LOCAL_VERTEX_CACHE</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_calculate_ribbon</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>points</name></expr></argument>, <argument><expr><name>points_stride</name></expr></argument>, <argument><expr><name>thickness</name></expr></argument>, <argument><expr><name>num_segments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>thickness</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>num_segments</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vertex_cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>num_segments</name></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_STRIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_segments</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vertex_cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_segments</name></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_LINE_STRIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


</unit>
