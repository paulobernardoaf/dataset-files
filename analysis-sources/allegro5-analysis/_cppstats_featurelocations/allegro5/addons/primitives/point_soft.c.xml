<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\primitives\point_soft.c">


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_NO_BLEND_INLINE_FUNC</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_primitives.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_blend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_prim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_prim_soft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fix_var</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>var</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ivar</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>floorf</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ret</name> <init>= <expr><name>ivar</name> <operator>%</operator> <name>max_var</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>ret</name> <operator>+</operator> <name>max_var</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_point_2d</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_VERTEX</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>shade</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>, <decl><type ref="prev"/><name>src_mode</name></decl>, <decl><type ref="prev"/><name>dst_mode</name></decl>, <decl><type ref="prev"/><name>op_alpha</name></decl>, <decl><type ref="prev"/><name>src_alpha</name></decl>, <decl><type ref="prev"/><name>dst_alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>vc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>clip_min_x</name></decl>, <decl><type ref="prev"/><name>clip_min_y</name></decl>, <decl><type ref="prev"/><name>clip_max_x</name></decl>, <decl><type ref="prev"/><name>clip_max_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>floorf</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>floorf</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_get_clipping_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_min_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clip_min_y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clip_max_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clip_max_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clip_max_x</name> <operator>+=</operator> <name>clip_min_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>clip_max_y</name> <operator>+=</operator> <name>clip_min_y</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>x</name> <operator>&lt;</operator> <name>clip_min_x</name> <operator>||</operator> <name>x</name> <operator>&gt;=</operator> <name>clip_max_x</name> <operator>||</operator> <name>y</name> <operator>&lt;</operator> <name>clip_min_y</name> <operator>||</operator> <name>y</name> <operator>&gt;=</operator> <name>clip_max_y</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vc</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_get_separate_blender</name><argument_list>(<argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op_alpha</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_alpha</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>_AL_DEST_IS_ZERO</name> <operator>&amp;&amp;</operator> <name>_AL_SRC_NOT_MODIFIED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shade</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>texture</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>U</name> <init>= <expr><call><name>fix_var</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>u</name></name></expr></argument>, <argument><expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>V</name> <init>= <expr><call><name>fix_var</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name> <init>= <expr><call><name>al_get_pixel</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><name>U</name></expr></argument>, <argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>vc</name><operator>.</operator><name>r</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>vc</name><operator>.</operator><name>g</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>vc</name><operator>.</operator><name>b</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>vc</name><operator>.</operator><name>a</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>r</name></name> <operator>*=</operator> <name><name>vc</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>g</name></name> <operator>*=</operator> <name><name>vc</name><operator>.</operator><name>g</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>b</name></name> <operator>*=</operator> <name><name>vc</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>a</name></name> <operator>*=</operator> <name><name>vc</name><operator>.</operator><name>a</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shade</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_put_blended_pixel</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>al_put_pixel</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name> <init>= <expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><name><name>vc</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>vc</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>vc</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>vc</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>shade</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_put_blended_pixel</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>al_put_pixel</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
