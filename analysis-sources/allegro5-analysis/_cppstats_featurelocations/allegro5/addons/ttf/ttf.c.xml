<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\ttf\ttf.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_INTERNAL_UNSTABLE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_opengl.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_vector.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_ttf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_font.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_ttf_cfg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_dtor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ft2build.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> FT_FREETYPE_H</cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"font"</literal></argument>)</argument_list></macro>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGN_TO_4_PIXEL</name></cpp:macro></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANGE_SIZE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>REGION</name>
<block>{
<decl_stmt><decl><type><name>short</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>h</name></decl>;</decl_stmt>
}</block></struct></type> <name>REGION</name>;</typedef>


<typedef>typedef <type><struct>struct <name>ALLEGRO_TTF_GLYPH_DATA</name>
<block>{
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>page_bitmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REGION</name></type> <name>region</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>offset_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>offset_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>advance</name></decl>;</decl_stmt>
}</block></struct></type> <name>ALLEGRO_TTF_GLYPH_DATA</name>;</typedef>


<typedef>typedef <type><struct>struct <name>ALLEGRO_TTF_GLYPH_RANGE</name>
<block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name>range_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_TTF_GLYPH_DATA</name> <modifier>*</modifier></type><name>glyphs</name></decl>;</decl_stmt> 
}</block></struct></type> <name>ALLEGRO_TTF_GLYPH_RANGE</name>;</typedef>


<typedef>typedef <type><struct>struct <name>ALLEGRO_TTF_FONT_DATA</name>
<block>{
<decl_stmt><decl><type><name>FT_Face</name></type> <name>face</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_VECTOR</name></type> <name>glyph_ranges</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>_AL_VECTOR</name></type> <name>page_bitmaps</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>page_pos_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>page_pos_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>page_line_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>page_lr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_StreamRec</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>base_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitmap_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitmap_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_page_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_page_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>skip_cache_misses</name></decl>;</decl_stmt>
}</block></struct></type> <name>ALLEGRO_TTF_FONT_DATA</name>;</typedef>



<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>ttf_inited</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>FT_Library</name></type> <name>ft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_FONT_VTABLE</name></type> <name>vt</name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>INLINE</name> <name>int</name></type> <name>align4</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALIGN_TO_4_PIXEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>x</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_glyph</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TTF_FONT_DATA</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ft_index</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_TTF_GLYPH_DATA</name> <modifier>*</modifier><modifier>*</modifier></type><name>glyph</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TTF_GLYPH_RANGE</name> <modifier>*</modifier></type><name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>range_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lo</name></decl>, <decl><type ref="prev"/><name>hi</name></decl>, <decl><type ref="prev"/><name>mid</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>glyph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>range_start</name> <operator>=</operator> <name>ft_index</name> <operator>-</operator> <operator>(</operator><name>ft_index</name> <operator>%</operator> <name>RANGE_SIZE</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>lo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>glyph_ranges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>hi</name> <operator>+</operator> <name>lo</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>range</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>lo</name> <operator>&lt;</operator> <name>hi</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TTF_GLYPH_RANGE</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>glyph_ranges</name></name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>range_start</name></name> <operator>==</operator> <name>range_start</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>range</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>range_start</name></name> <operator>&lt;</operator> <name>range_start</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>hi</name> <operator>+</operator> <name>lo</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>range</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>range</name> <operator>=</operator> <call><name>_al_vector_alloc_mid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>glyph_ranges</name></name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>range_start</name></name> <operator>=</operator> <name>range_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>glyphs</name></name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><name>RANGE_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_TTF_GLYPH_DATA</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>glyph</name> <operator>=</operator> <operator>&amp;</operator><name><name>range</name><operator>-&gt;</operator><name>glyphs</name><index>[<expr><name>ft_index</name> <operator>-</operator> <name>range_start</name></expr>]</index></name></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>skip_cache_misses</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><operator>(</operator><operator>*</operator><name>glyph</name><operator>)</operator><operator>-&gt;</operator><name>page_bitmap</name></name> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>glyph</name><operator>)</operator><operator>-&gt;</operator><name><name>region</name><operator>.</operator><name>x</name></name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ft_index</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>unlock_current_page</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TTF_FONT_DATA</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>page_lr</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>back</name> <init>= <expr><call><name>_al_vector_ref_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>page_bitmaps</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>al_is_bitmap_locked</name><argument_list>(<argument><expr><operator>*</operator><name>back</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><operator>*</operator><name>back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>page_lr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Unlocking page: %p\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>push_new_page</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TTF_FONT_DATA</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>back</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>page</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_STATE</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>page_size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><name>page_size</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>*</operator> <name>glyph_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>page_size</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>page_size</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>min_page_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>page_size</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>min_page_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>page_size</name> <operator>&gt;</operator> <name><name>data</name><operator>-&gt;</operator><name>max_page_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>page_size</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>max_page_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>glyph_size</name> <operator>&gt;</operator> <name>page_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable create new page, glyph too large: %d &gt; %d\n"</literal></expr></argument>,
<argument><expr><name>glyph_size</name></expr></argument>, <argument><expr><name>page_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unlock_current_page</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>_al_push_destructor_owner</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_store_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>ALLEGRO_STATE_NEW_BITMAP_PARAMETERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_new_bitmap_format</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>bitmap_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>bitmap_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>page</name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><name>page_size</name></expr></argument>, <argument><expr><name>page_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_restore_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_pop_destructor_owner</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>page</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>back</name> <operator>=</operator> <call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>page_bitmaps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>back</name> <operator>=</operator> <name>page</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>page_pos_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>page_pos_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>page_line_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>page</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>alloc_glyph_region</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TTF_FONT_DATA</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ft_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>new</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_TTF_GLYPH_DATA</name> <modifier>*</modifier></type><name>glyph</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>lock_whole_page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>page</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w4</name> <init>= <expr><call><name>align4</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h4</name> <init>= <expr><call><name>align4</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>glyph_size</name> <init>= <expr><ternary><condition><expr><name>w4</name> <operator>&gt;</operator> <name>h4</name></expr> ?</condition><then> <expr><name>w4</name></expr> </then><else>: <expr><name>h4</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>lock</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_vector_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>page_bitmaps</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>new</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>page</name> <operator>=</operator> <call><name>push_new_page</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>glyph_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>page</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to create a new page for glyph %d.\n"</literal></expr></argument>, <argument><expr><name>ft_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>back</name> <init>= <expr><call><name>_al_vector_ref_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>page_bitmaps</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>page</name> <operator>=</operator> <operator>*</operator><name>back</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Glyph %d: %dx%d (%dx%d)%s\n"</literal></expr></argument>,
<argument><expr><name>ft_index</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w4</name></expr></argument>, <argument><expr><name>h4</name></expr></argument>, <argument><expr><ternary><condition><expr><name>new</name></expr> ?</condition><then> <expr><literal type="string">" new"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>page_pos_x</name></name> <operator>+</operator> <name>w4</name> <operator>&gt;</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>page_pos_y</name></name> <operator>+=</operator> <name><name>data</name><operator>-&gt;</operator><name>page_line_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>page_pos_y</name></name> <operator>=</operator> <call><name>align4</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>page_pos_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>page_pos_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>page_line_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>page_pos_y</name></name> <operator>+</operator> <name>h4</name> <operator>&gt;</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>alloc_glyph_region</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>ft_index</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>glyph</name></expr></argument>, <argument><expr><name>lock_whole_page</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>page_bitmap</name></name> <operator>=</operator> <name>page</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>page_pos_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>page_pos_y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>page_pos_x</name></name> <operator>=</operator> <call><name>align4</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>page_pos_x</name></name> <operator>+</operator> <name>w4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>&gt;</operator> <name><name>data</name><operator>-&gt;</operator><name>page_line_height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>page_line_height</name></name> <operator>=</operator> <name>h4</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>REGION</name></type> <name>lock_rect</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lock_whole_page</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lock_rect</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lock_rect</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lock_rect</name><operator>.</operator><name>w</name></name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lock_rect</name><operator>.</operator><name>h</name></name> <operator>=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>page_lr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lock</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Locking whole page: %p\n"</literal></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>unlock_current_page</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lock_rect</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>glyph</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lock_rect</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>glyph</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lock_rect</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name>w4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lock_rect</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name>h4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lock</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Locking glyph region: %p %d %d %d %d\n"</literal></expr></argument>, <argument><expr><name>page</name></expr></argument>,
<argument><expr><name><name>lock_rect</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>lock_rect</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>lock_rect</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>lock_rect</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>page_lr</name></name> <operator>=</operator> <call><name>al_lock_bitmap_region</name><argument_list>(<argument><expr><name>page</name></expr></argument>,
<argument><expr><name><name>lock_rect</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>lock_rect</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>lock_rect</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>lock_rect</name><operator>.</operator><name>h</name></name></expr></argument>,
<argument><expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_WRITEONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>page_lr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to lock page.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>lock_rect</name><operator>.</operator><name>h</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>page_lr</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <name><name>data</name><operator>-&gt;</operator><name>page_lr</name><operator>-&gt;</operator><name>pitch</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>lock_rect</name><operator>.</operator><name>w</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>page_lr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>page_lr</name><operator>-&gt;</operator><name>data</name></name>
<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>glyph</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>lock_rect</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>*</operator> <name><name>data</name><operator>-&gt;</operator><name>page_lr</name><operator>-&gt;</operator><name>pitch</name></name>
<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>glyph</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>lock_rect</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_glyph_mono</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TTF_FONT_DATA</name> <modifier>*</modifier></type><name>font_data</name></decl></parameter>, <parameter><decl><type><name>FT_Face</name></type> <name>face</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>glyph_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pitch</name> <init>= <expr><name><name>font_data</name><operator>-&gt;</operator><name>page_lr</name><operator>-&gt;</operator><name>pitch</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>buffer</name></name> <operator>+</operator> <name><name>face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>pitch</name></name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dptr</name> <init>= <expr><name>glyph_data</name> <operator>+</operator> <name>pitch</name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>font_data</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_NO_PREMULTIPLIED_ALPHA</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>set</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><operator>*</operator><name>ptr</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">7</literal><operator>-</operator><name>bit</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>dptr</name><operator>++</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dptr</name><operator>++</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dptr</name><operator>++</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dptr</name><operator>++</operator> <operator>=</operator> <name>set</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <operator>(</operator><name>bit</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>set</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><operator>*</operator><name>ptr</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">7</literal><operator>-</operator><name>bit</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>dptr</name><operator>++</operator> <operator>=</operator> <name>set</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dptr</name><operator>++</operator> <operator>=</operator> <name>set</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dptr</name><operator>++</operator> <operator>=</operator> <name>set</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dptr</name><operator>++</operator> <operator>=</operator> <name>set</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <operator>(</operator><name>bit</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_glyph_color</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TTF_FONT_DATA</name> <modifier>*</modifier></type><name>font_data</name></decl></parameter>, <parameter><decl><type><name>FT_Face</name></type> <name>face</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>glyph_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pitch</name> <init>= <expr><name><name>font_data</name><operator>-&gt;</operator><name>page_lr</name><operator>-&gt;</operator><name>pitch</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>buffer</name></name> <operator>+</operator> <name><name>face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>pitch</name></name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dptr</name> <init>= <expr><name>glyph_data</name> <operator>+</operator> <name>pitch</name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>font_data</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_NO_PREMULTIPLIED_ALPHA</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>dptr</name><operator>++</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dptr</name><operator>++</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dptr</name><operator>++</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dptr</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>dptr</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dptr</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dptr</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dptr</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>cache_glyph</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TTF_FONT_DATA</name> <modifier>*</modifier></type><name>font_data</name></decl></parameter>, <parameter><decl><type><name>FT_Face</name></type> <name>face</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ft_index</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_TTF_GLYPH_DATA</name> <modifier>*</modifier></type><name>glyph</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>lock_whole_page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FT_Int32</name></type> <name>ft_load_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_Error</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>glyph_data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>glyph</name><operator>-&gt;</operator><name>page_bitmap</name></name> <operator>||</operator> <name><name>glyph</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>font_data</name><operator>-&gt;</operator><name>skip_cache_misses</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>lock_whole_page</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>ft_load_flags</name> <operator>=</operator> <name>FT_LOAD_RENDER</name> <operator>|</operator> <name>FT_LOAD_NO_BITMAP</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>font_data</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_TTF_MONOCHROME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ft_load_flags</name> <operator>|=</operator> <name>FT_LOAD_TARGET_MONO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>font_data</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_TTF_NO_AUTOHINT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ft_load_flags</name> <operator>|=</operator> <name>FT_LOAD_NO_AUTOHINT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>FT_Load_Glyph</name><argument_list>(<argument><expr><name>face</name></expr></argument>, <argument><expr><name>ft_index</name></expr></argument>, <argument><expr><name>ft_load_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Failed loading glyph %d from.\n"</literal></expr></argument>, <argument><expr><name>ft_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>offset_x</name></name> <operator>=</operator> <name><name>face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>bitmap_left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>offset_y</name></name> <operator>=</operator> <operator>(</operator><name><name>face</name><operator>-&gt;</operator><name>size</name><operator>-&gt;</operator><name>metrics</name><operator>.</operator><name>ascender</name></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>-</operator> <name><name>face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>bitmap_top</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>advance</name></name> <operator>=</operator> <name><name>face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>advance</name><operator>.</operator><name>x</name></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>h</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Glyph %d has zero size.\n"</literal></expr></argument>, <argument><expr><name>ft_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>glyph_data</name> <operator>=</operator> <call><name>alloc_glyph_region</name><argument_list>(<argument><expr><name>font_data</name></expr></argument>, <argument><expr><name>ft_index</name></expr></argument>,
<argument><expr><name>w</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>glyph</name></expr></argument>, <argument><expr><name>lock_whole_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>glyph_data</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>font_data</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_TTF_MONOCHROME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy_glyph_mono</name><argument_list>(<argument><expr><name>font_data</name></expr></argument>, <argument><expr><name>face</name></expr></argument>, <argument><expr><name>glyph_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy_glyph_color</name><argument_list>(<argument><expr><name>font_data</name></expr></argument>, <argument><expr><name>face</name></expr></argument>, <argument><expr><name>glyph_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lock_whole_page</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unlock_current_page</name><argument_list>(<argument><expr><name>font_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>cache_glyphs</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TTF_FONT_DATA</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>text_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name><modifier>*</modifier></type> <name>ustr</name> <init>= <expr><call><name>al_ref_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>text_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_Face</name></type> <name>face</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>face</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ch</name></decl>;</decl_stmt> 

<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>al_ustr_get_next</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TTF_GLYPH_DATA</name> <modifier>*</modifier></type><name>glyph</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ft_index</name> <init>= <expr><call><name>FT_Get_Char_Index</name><argument_list>(<argument><expr><name>face</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_glyph</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>ft_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glyph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cache_glyph</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>face</name></expr></argument>, <argument><expr><name>ft_index</name></expr></argument>, <argument><expr><name>glyph</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>get_kerning</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TTF_FONT_DATA</name> <specifier>const</specifier> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>FT_Face</name></type> <name>face</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>prev_ft_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ft_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_TTF_NO_KERNING</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>prev_ft_index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>FT_Vector</name></type> <name>delta</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FT_Get_Kerning</name><argument_list>(<argument><expr><name>face</name></expr></argument>, <argument><expr><name>prev_ft_index</name></expr></argument>, <argument><expr><name>ft_index</name></expr></argument>,
<argument><expr><name>FT_KERNING_DEFAULT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>delta</name><operator>.</operator><name>x</name></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>ttf_get_glyph_worker</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <specifier>const</specifier> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev_ft_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ft_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev_codepoint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_GLYPH</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TTF_FONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_Face</name></type> <name>face</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>face</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_TTF_GLYPH_DATA</name> <modifier>*</modifier></type><name>glyph</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>advance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_glyph</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>ft_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glyph</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>fallback</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>get_glyph</name></name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr></argument>, <argument><expr><name>prev_codepoint</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_glyph</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>glyph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ft_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cache_glyph</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>face</name></expr></argument>, <argument><expr><name>ft_index</name></expr></argument>, <argument><expr><name>glyph</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>advance</name> <operator>+=</operator> <call><name>get_kerning</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>face</name></expr></argument>, <argument><expr><name>prev_ft_index</name></expr></argument>, <argument><expr><name>ft_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>glyph</name><operator>-&gt;</operator><name>page_bitmap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>=</operator> <name><name>glyph</name><operator>-&gt;</operator><name>page_bitmap</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>glyph</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>glyph</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>glyph</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>glyph</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>kerning</name></name> <operator>=</operator> <name>advance</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>offset_x</name></name> <operator>=</operator> <name><name>glyph</name><operator>-&gt;</operator><name>offset_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>offset_y</name></name> <operator>=</operator> <name><name>glyph</name><operator>-&gt;</operator><name>offset_y</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>glyph</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Glyph %d not on any page.\n"</literal></expr></argument>, <argument><expr><name>ft_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>advance</name> <operator>+=</operator> <name><name>glyph</name><operator>-&gt;</operator><name>advance</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>advance</name></name> <operator>=</operator> <name>advance</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>ttf_get_glyph</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <specifier>const</specifier> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev_codepoint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_GLYPH</name> <modifier>*</modifier></type><name>glyph</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TTF_FONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_Face</name></type> <name>face</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>face</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_ft_index</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>prev_codepoint</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>FT_Get_Char_Index</name><argument_list>(<argument><expr><name>face</name></expr></argument>, <argument><expr><name>prev_codepoint</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ft_index</name> <init>= <expr><call><name>FT_Get_Char_Index</name><argument_list>(<argument><expr><name>face</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ttf_get_glyph_worker</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>prev_ft_index</name></expr></argument>, <argument><expr><name>ft_index</name></expr></argument>, <argument><expr><name>prev_codepoint</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>, <argument><expr><name>glyph</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>render_glyph</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <specifier>const</specifier> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>prev_ft_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ft_index</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>prev_ch</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>ypos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_GLYPH</name></type> <name>glyph</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ttf_get_glyph_worker</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>prev_ft_index</name></expr></argument>, <argument><expr><name>ft_index</name></expr></argument>, <argument><expr><name>prev_ch</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glyph</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>glyph</name><operator>.</operator><name>bitmap</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_draw_tinted_bitmap_region</name><argument_list>(
<argument><expr><name><name>glyph</name><operator>.</operator><name>bitmap</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>,
<argument><expr><name><name>glyph</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>glyph</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>glyph</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>glyph</name><operator>.</operator><name>h</name></name></expr></argument>,
<argument><expr><name>xpos</name> <operator>+</operator> <name><name>glyph</name><operator>.</operator><name>offset_x</name></name> <operator>+</operator> <name><name>glyph</name><operator>.</operator><name>kerning</name></name></expr></argument>,
<argument><expr><name>ypos</name> <operator>+</operator> <name><name>glyph</name><operator>.</operator><name>offset_y</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>glyph</name><operator>.</operator><name>advance</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>ttf_font_height</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <specifier>const</specifier> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>f</name><operator>-&gt;</operator><name>height</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>ttf_font_ascent</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <specifier>const</specifier> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TTF_FONT_DATA</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_Face</name></type> <name>face</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>face</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>face</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>face</name><operator>-&gt;</operator><name>size</name><operator>-&gt;</operator><name>metrics</name><operator>.</operator><name>ascender</name></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>ttf_font_descent</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <specifier>const</specifier> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TTF_FONT_DATA</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_Face</name></type> <name>face</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>face</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>face</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>-</operator><name><name>face</name><operator>-&gt;</operator><name>size</name><operator>-&gt;</operator><name>metrics</name><operator>.</operator><name>descender</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>ttf_render_char</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <specifier>const</specifier> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>ypos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TTF_FONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_Face</name></type> <name>face</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>face</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>advance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ch32</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator> <name>ch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ft_index</name> <init>= <expr><call><name>FT_Get_Char_Index</name><argument_list>(<argument><expr><name>face</name></expr></argument>, <argument><expr><name>ch32</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>advance</name> <operator>=</operator> <call><name>render_glyph</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ft_index</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>xpos</name></expr></argument>, <argument><expr><name>ypos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>advance</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>ttf_char_length</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <specifier>const</specifier> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_TTF_FONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_TTF_GLYPH_DATA</name> <modifier>*</modifier></type><name>glyph</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_Face</name></type> <name>face</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>face</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ft_index</name> <init>= <expr><call><name>FT_Get_Char_Index</name><argument_list>(<argument><expr><name>face</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_glyph</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>ft_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glyph</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>al_get_glyph_width</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_glyph</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>glyph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ft_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cache_glyph</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>face</name></expr></argument>, <argument><expr><name>ft_index</name></expr></argument>, <argument><expr><name>glyph</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>glyph</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>ttf_render</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <specifier>const</specifier> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TTF_FONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_Face</name></type> <name>face</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>face</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>advance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_ft_index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>prev_ch</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hold</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hold</name> <operator>=</operator> <call><name>al_is_bitmap_drawing_held</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_hold_bitmap_drawing</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>al_ustr_get_next</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ft_index</name> <init>= <expr><call><name>FT_Get_Char_Index</name><argument_list>(<argument><expr><name>face</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>advance</name> <operator>+=</operator> <call><name>render_glyph</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>prev_ft_index</name></expr></argument>, <argument><expr><name>ft_index</name></expr></argument>, <argument><expr><name>prev_ch</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>,
<argument><expr><name>x</name> <operator>+</operator> <name>advance</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_ft_index</name> <operator>=</operator> <name>ft_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_ch</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>al_hold_bitmap_drawing</name><argument_list>(<argument><expr><name>hold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>advance</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>ttf_text_length</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <specifier>const</specifier> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>nch</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nch</name> <operator>=</operator> <call><name>al_ustr_get_next</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>nch</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>nch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nch</name> <operator>=</operator> <call><name>al_ustr_get_next</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>al_get_glyph_advance</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><ternary><condition><expr><name>nch</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then>
<expr><name>ALLEGRO_NO_KERNING</name></expr> </then><else>: <expr><name>nch</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>ttf_get_text_dimensions</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <specifier>const</specifier> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_USTR</name> <specifier>const</specifier> <modifier>*</modifier></type><name>text</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bby</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbw</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>nch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ymin</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ymax</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>bbx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nch</name> <operator>=</operator> <call><name>al_ustr_get_next</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>nch</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>gx</name></decl>, <decl><type ref="prev"/><name>gy</name></decl>, <decl><type ref="prev"/><name>gw</name></decl>, <decl><type ref="prev"/><name>gh</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>nch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nch</name> <operator>=</operator> <call><name>al_ustr_get_next</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_get_glyph_dimensions</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nch</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>gx</name> <operator>+</operator> <name>gw</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>al_get_glyph_advance</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>nch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gy</name> <operator>&lt;</operator> <name>ymin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ymin</name> <operator>=</operator> <name>gy</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gh</name><operator>+</operator><name>gy</name> <operator>&gt;</operator> <name>ymax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ymax</name> <operator>=</operator> <name>gh</name> <operator>+</operator> <name>gy</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bbx</name> <operator>=</operator> <name>gx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>bby</name> <operator>=</operator> <name>ymin</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bbw</name> <operator>=</operator> <name>x</name> <operator>-</operator> <operator>*</operator><name>bbx</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bbh</name> <operator>=</operator> <name>ymax</name> <operator>-</operator> <name>ymin</name></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_CACHE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_image.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>void</name></type> <name>debug_cache</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TTF_FONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_VECTOR</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>page_bitmaps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_init_image_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>bmp</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><call><name>al_ustr_newf</name><argument_list>(<argument><expr><literal type="string">"font%d_%d.png"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_save_bitmap</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>void</name></type> <name>ttf_destroy</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TTF_FONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>unlock_current_page</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_CACHE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>debug_cache</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>FT_Done_Face</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>face</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>glyph_ranges</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TTF_GLYPH_RANGE</name> <modifier>*</modifier></type><name>range</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>glyph_ranges</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>range</name><operator>-&gt;</operator><name>glyphs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>glyph_ranges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>page_bitmaps</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>bmp</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>page_bitmaps</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><operator>*</operator><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>page_bitmaps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>ftread</name><parameter_list>(<parameter><decl><type><name>FT_Stream</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TTF_FONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>pathname</name><operator>.</operator><name>pointer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>bytes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <name><name>data</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_fseek</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base_offset</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>ALLEGRO_SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>al_fread</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name> <operator>+</operator> <name>bytes</name></expr>;</expr_stmt>
<return>return <expr><name>bytes</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>ftclose</name><parameter_list>(<parameter><decl><type><name>FT_Stream</name></type> <name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TTF_FONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>pathname</name><operator>.</operator><name>pointer</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>al_load_ttf_font_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>al_load_ttf_font_stretch_f</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>al_load_ttf_font_stretch_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FT_Face</name></type> <name>face</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_TTF_FONT_DATA</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_Open_Args</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG</name><modifier>*</modifier></type> <name>system_cfg</name> <init>= <expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>min_page_size_str</name> <init>=
<expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><name>system_cfg</name></expr></argument>, <argument><expr><literal type="string">"ttf"</literal></expr></argument>, <argument><expr><literal type="string">"min_page_size"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>max_page_size_str</name> <init>=
<expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><name>system_cfg</name></expr></argument>, <argument><expr><literal type="string">"ttf"</literal></expr></argument>, <argument><expr><literal type="string">"max_page_size"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>cache_str</name> <init>=
<expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><name>system_cfg</name></expr></argument>, <argument><expr><literal type="string">"ttf"</literal></expr></argument>, <argument><expr><literal type="string">"cache_text"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>skip_cache_misses_str</name> <init>=
<expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><name>system_cfg</name></expr></argument>, <argument><expr><literal type="string">"ttf"</literal></expr></argument>, <argument><expr><literal type="string">"skip_cache_misses"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>h</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>w</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>h</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>w</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Height/width have opposite signs (w = %d, h = %d).\n"</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>read</name></name> <operator>=</operator> <name>ftread</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>close</name></name> <operator>=</operator> <name>ftclose</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>pathname</name><operator>.</operator><name>pointer</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>base_offset</name></name> <operator>=</operator> <call><name>al_ftell</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>al_fsize</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bitmap_format</name></name> <operator>=</operator> <call><name>al_get_new_bitmap_format</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bitmap_flags</name></name> <operator>=</operator> <call><name>al_get_new_bitmap_flags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>min_page_size</name></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>max_page_size</name></name> <operator>=</operator> <literal type="number">8192</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>min_page_size_str</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>min_page_size</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>min_page_size_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>min_page_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>min_page_size</name></name> <operator>=</operator> <name>min_page_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max_page_size_str</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>max_page_size</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>max_page_size_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>max_page_size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>max_page_size</name> <operator>&gt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>min_page_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>max_page_size</name></name> <operator>=</operator> <name>max_page_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>skip_cache_misses_str</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>skip_cache_misses_str</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>skip_cache_misses</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>args</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>FT_OPEN_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>stream</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>stream</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>FT_Open_Face</name><argument_list>(<argument><expr><name>ft</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>face</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Reading %s failed. Freetype error code %d\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>,
<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>al_create_path</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_get_path_extension</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">".pfa"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>helper</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Type1 font assumed for %s.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_path_extension</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">".afm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>helper</name> <operator>=</operator> <call><name>al_path_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FT_Attach_File</name><argument_list>(<argument><expr><name>face</name></expr></argument>, <argument><expr><name>helper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Guessed afm file %s.\n"</literal></expr></argument>, <argument><expr><name>helper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_path_extension</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">".tfm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>helper</name> <operator>=</operator> <call><name>al_path_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FT_Attach_File</name><argument_list>(<argument><expr><name>face</name></expr></argument>, <argument><expr><name>helper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Guessed tfm file %s.\n"</literal></expr></argument>, <argument><expr><name>helper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FT_Set_Pixel_Sizes</name><argument_list>(<argument><expr><name>face</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>



<decl_stmt><decl><type><name>FT_Size_RequestRec</name></type> <name>req</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>w</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>h</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>FT_SIZE_REQUEST_TYPE_REAL_DIM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>.</operator><name>width</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>w</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>.</operator><name>height</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>h</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>.</operator><name>horiResolution</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>.</operator><name>vertResolution</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FT_Request_Size</name><argument_list>(<argument><expr><name>face</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Font %s loaded with pixel size %d x %d.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>,
<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">" ascent=%.1f, descent=%.1f, height=%.1f\n"</literal></expr></argument>,
<argument><expr><name><name>face</name><operator>-&gt;</operator><name>size</name><operator>-&gt;</operator><name>metrics</name><operator>.</operator><name>ascender</name></name> <operator>/</operator> <literal type="number">64.0</literal></expr></argument>,
<argument><expr><name><name>face</name><operator>-&gt;</operator><name>size</name><operator>-&gt;</operator><name>metrics</name><operator>.</operator><name>descender</name></name> <operator>/</operator> <literal type="number">64.0</literal></expr></argument>,
<argument><expr><name><name>face</name><operator>-&gt;</operator><name>size</name><operator>-&gt;</operator><name>metrics</name><operator>.</operator><name>height</name></name> <operator>/</operator> <literal type="number">64.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>face</name></name> <operator>=</operator> <name>face</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>glyph_ranges</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_TTF_GLYPH_RANGE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>page_bitmaps</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_BITMAP</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>skip_cache_misses</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cache_glyphs</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cache_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cache_glyphs</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>cache_str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>cache_str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>unlock_current_page</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>face</name><operator>-&gt;</operator><name>size</name><operator>-&gt;</operator><name>metrics</name><operator>.</operator><name>height</name></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>vt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>dtor_item</name></name> <operator>=</operator> <call><name>_al_register_destructor</name><argument_list>(<argument><expr><name>_al_dtor_list</name></expr></argument>, <argument><expr><literal type="string">"ttf_font"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>,
<argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>al_destroy_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>al_load_ttf_font</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>al_load_ttf_font_stretch</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>al_load_ttf_font_stretch</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to open file for reading: %s\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>al_load_ttf_font_stretch_f</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>font</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>ttf_get_font_ranges</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ranges_count</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ranges</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TTF_FONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>font</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_UInt</name></type> <name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_ULong</name></type> <name>unicode</name> <init>= <expr><call><name>FT_Get_First_Char</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>face</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>ranges_count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ranges</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>unicode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ranges</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>unicode</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>g</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>FT_ULong</name></type> <name>unicode2</name> <init>= <expr><call><name>FT_Get_Next_Char</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>face</name></name></expr></argument>, <argument><expr><name>unicode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>unicode</name> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator> <name>unicode2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>ranges_count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ranges</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>unicode</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>ranges_count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ranges</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>unicode2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>ranges_count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ranges</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>unicode2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>unicode</name> <operator>=</operator> <name>unicode2</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ttf_get_glyph_dimensions</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <specifier>const</specifier> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bby</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbw</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TTF_FONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_TTF_GLYPH_DATA</name> <modifier>*</modifier></type><name>glyph</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_Face</name></type> <name>face</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>face</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ft_index</name> <init>= <expr><call><name>FT_Get_Char_Index</name><argument_list>(<argument><expr><name>face</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_glyph</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>ft_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glyph</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>al_get_glyph_dimensions</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>,
<argument><expr><name>bbx</name></expr></argument>, <argument><expr><name>bby</name></expr></argument>, <argument><expr><name>bbw</name></expr></argument>, <argument><expr><name>bbh</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_glyph</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>glyph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ft_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cache_glyph</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>face</name></expr></argument>, <argument><expr><name>ft_index</name></expr></argument>, <argument><expr><name>glyph</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bbx</name> <operator>=</operator> <name><name>glyph</name><operator>-&gt;</operator><name>offset_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bbw</name> <operator>=</operator> <name><name>glyph</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bbh</name> <operator>=</operator> <name><name>glyph</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bby</name> <operator>=</operator> <name><name>glyph</name><operator>-&gt;</operator><name>offset_y</name></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ttf_get_glyph_advance</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <specifier>const</specifier> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>codepoint2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TTF_FONT_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_Face</name></type> <name>face</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>face</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ft_index</name> <init>= <expr><call><name>FT_Get_Char_Index</name><argument_list>(<argument><expr><name>face</name></expr></argument>, <argument><expr><name>codepoint1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_TTF_GLYPH_DATA</name> <modifier>*</modifier></type><name>glyph</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kerning</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>advance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>codepoint1</name> <operator>==</operator> <name>ALLEGRO_NO_KERNING</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_glyph</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>ft_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glyph</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>al_get_glyph_advance</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr></argument>, <argument><expr><name>codepoint1</name></expr></argument>, <argument><expr><name>codepoint2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_glyph</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>glyph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ft_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cache_glyph</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>face</name></expr></argument>, <argument><expr><name>ft_index</name></expr></argument>, <argument><expr><name>glyph</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>codepoint2</name> <operator>!=</operator> <name>ALLEGRO_NO_KERNING</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ft_index1</name> <init>= <expr><call><name>FT_Get_Char_Index</name><argument_list>(<argument><expr><name>face</name></expr></argument>, <argument><expr><name>codepoint1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ft_index2</name> <init>= <expr><call><name>FT_Get_Char_Index</name><argument_list>(<argument><expr><name>face</name></expr></argument>, <argument><expr><name>codepoint2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>kerning</name> <operator>=</operator> <call><name>get_kerning</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>face</name></expr></argument>, <argument><expr><name>ft_index1</name></expr></argument>, <argument><expr><name>ft_index2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>advance</name> <operator>=</operator> <name><name>glyph</name><operator>-&gt;</operator><name>advance</name></name></expr>;</expr_stmt>
<return>return <expr><name>advance</name> <operator>+</operator> <name>kerning</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>al_init_ttf_addon</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ttf_inited</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"TTF addon already initialised.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FT_Init_FreeType</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>font_height</name></name> <operator>=</operator> <name>ttf_font_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>font_ascent</name></name> <operator>=</operator> <name>ttf_font_ascent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>font_descent</name></name> <operator>=</operator> <name>ttf_font_descent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>char_length</name></name> <operator>=</operator> <name>ttf_char_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>text_length</name></name> <operator>=</operator> <name>ttf_text_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>render_char</name></name> <operator>=</operator> <name>ttf_render_char</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>render</name></name> <operator>=</operator> <name>ttf_render</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>destroy</name></name> <operator>=</operator> <name>ttf_destroy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>get_text_dimensions</name></name> <operator>=</operator> <name>ttf_get_text_dimensions</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>get_font_ranges</name></name> <operator>=</operator> <name>ttf_get_font_ranges</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>get_glyph_dimensions</name></name> <operator>=</operator> <name>ttf_get_glyph_dimensions</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>get_glyph_advance</name></name> <operator>=</operator> <name>ttf_get_glyph_advance</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>get_glyph</name></name> <operator>=</operator> <name>ttf_get_glyph</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_font_loader</name><argument_list>(<argument><expr><literal type="string">".ttf"</literal></expr></argument>, <argument><expr><name>al_load_ttf_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>ttf_inited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>ttf_inited</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_is_ttf_addon_initialized</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>ttf_inited</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_shutdown_ttf_addon</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ttf_inited</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"TTF addon not initialised.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_register_font_loader</name><argument_list>(<argument><expr><literal type="string">".ttf"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FT_Done_FreeType</name><argument_list>(<argument><expr><name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ttf_inited</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>uint32_t</name></type> <name>al_get_allegro_ttf_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>ALLEGRO_VERSION_INT</name></expr>;</return>
</block_content>}</block></function>


</unit>
