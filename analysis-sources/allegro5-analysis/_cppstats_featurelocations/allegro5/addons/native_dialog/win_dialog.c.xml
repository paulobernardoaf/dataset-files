<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\native_dialog\win_dialog.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_native_dialog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_native_dialog.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintwin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_wunicode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_windows.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;richedit.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlobj.h&gt;</cpp:file></cpp:include> 

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"win_dialog"</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_SHOW_POPUP</name></cpp:macro> <cpp:value>(WM_APP + 42)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_HIDE_MENU</name></cpp:macro> <cpp:value>(WM_APP + 43)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_SHOW_MENU</name></cpp:macro> <cpp:value>(WM_APP + 44)</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>wlog_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>wlog_rich_edit_module</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>TCHAR</name><modifier>*</modifier></type> <name>wlog_edit_control</name> <init>= <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"EDIT"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>wlog_unicode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_MUTEX</name><modifier>*</modifier></type> <name>global_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_COND</name><modifier>*</modifier></type> <name>wm_size_cond</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>got_wm_size_event</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>









<function><type><specifier>static</specifier> <name>ALLEGRO_PATH</name><modifier>*</modifier></type> <name>_tcreate_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name><modifier>*</modifier></type> <name>ts</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>_twin_tchar_to_utf8</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_PATH</name><modifier>*</modifier></type> <name>path</name> <init>= <expr><call><name>al_create_path</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>path</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>ALLEGRO_PATH</name><modifier>*</modifier></type> <name>_tcreate_path_for_directory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name><modifier>*</modifier></type> <name>ts</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>_twin_tchar_to_utf8</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_PATH</name><modifier>*</modifier></type> <name>path</name> <init>= <expr><call><name>al_create_path_for_directory</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>path</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_init_native_dialog_addon</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>global_mutex</name> <operator>=</operator> <call><name>al_create_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wm_size_cond</name> <operator>=</operator> <call><name>al_create_cond</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>global_mutex</name> <operator>||</operator> <operator>!</operator><name>wm_size_cond</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name>global_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_cond</name><argument_list>(<argument><expr><name>wm_size_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_shutdown_native_dialog_addon</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name>global_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_cond</name><argument_list>(<argument><expr><name>wm_size_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>global_mutex</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wm_size_cond</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>select_folder</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BROWSEINFO</name></type> <name>folderinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPCITEMIDLIST</name></type> <name>pidl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>buf</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name> <init>= <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>dbuf</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name> <init>= <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>folderinfo</name><operator>.</operator><name>hwndOwner</name></name> <operator>=</operator> <ternary><condition><expr><name>win_display</name></expr> ?</condition><then> <expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>folderinfo</name><operator>.</operator><name>pidlRoot</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>folderinfo</name><operator>.</operator><name>pszDisplayName</name></name> <operator>=</operator> <name>dbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>folderinfo</name><operator>.</operator><name>lpszTitle</name></name> <operator>=</operator> <call><name>_twin_ustr_to_tchar</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>folderinfo</name><operator>.</operator><name>ulFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>folderinfo</name><operator>.</operator><name>lpfn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pidl</name> <operator>=</operator> <call><name>SHBrowseForFolder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>folderinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>folderinfo</name><operator>.</operator><name>lpszTitle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pidl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SHGetPathFromIDList</name><argument_list>(<argument><expr><name>pidl</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>fc_path_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>fc_paths</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>fc_paths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>_tcreate_path</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>create_filter_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>patterns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>filter_all</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>patterns</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"*.*"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filter_all</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>al_ustr_append_cstr</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"All Supported Files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_append_chr</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_append</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>patterns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>al_ustr_find_cstr</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="string">"*.*;"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>start</name> <operator>||</operator> <call><name>al_ustr_get</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filter_all</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_remove_range</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<while>while <condition>(<expr><call><name>al_ustr_has_suffix_cstr</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">";*.*"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filter_all</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_remove_range</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>al_ustr_append_chr</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>filter_all</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_ustr_append_cstr</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"All Files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_append_chr</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_append_cstr</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"*.*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_append_chr</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_ustr_append_chr</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>filter</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>skip_nul_terminated_string</name><parameter_list>(<parameter><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_show_native_file_dialog</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OPENFILENAME</name></type> <name>ofn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>BUFSIZE</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name><modifier>*</modifier></type> <name>wfilter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name><modifier>*</modifier></type> <name>wpath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>filter_string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_PATH</name><modifier>*</modifier></type> <name>initial_dir_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>win_display</name> <operator>=</operator> <operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name> <operator>*</operator><operator>)</operator><name>display</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FILECHOOSER_FOLDER</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>select_folder</name><argument_list>(<argument><expr><name>win_display</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ofn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OPENFILENAME</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ofn</name><operator>.</operator><name>lStructSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OPENFILENAME</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ofn</name><operator>.</operator><name>hwndOwner</name></name> <operator>=</operator> <ternary><condition><expr><name>win_display</name></expr> ?</condition><then> <expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>fc_patterns</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filter_string</name> <operator>=</operator> <call><name>create_filter_string</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>fc_patterns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wfilter</name> <operator>=</operator> <call><name>_twin_ustr_to_tchar</name><argument_list>(<argument><expr><name>filter_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ofn</name><operator>.</operator><name>lpstrFilter</name></name> <operator>=</operator> <name>wfilter</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>ofn</name><operator>.</operator><name>lpstrFilter</name></name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"All Files\0*.*\0\0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>ofn</name><operator>.</operator><name>lpstrFile</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ofn</name><operator>.</operator><name>nMaxFile</name></name> <operator>=</operator> <name>BUFSIZE</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>fc_initial_path</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>is_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>al_path_ustr</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>fc_initial_path</name></name></expr></argument>, <argument><expr><name>ALLEGRO_NATIVE_PATH_SEP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_filename_exists</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fs</name> <init>= <expr><call><name>al_create_fs_entry</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>is_dir</name> <operator>=</operator> <call><name>al_get_fs_entry_mode</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_FILEMODE_ISDIR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_fs_entry</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>is_dir</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_dir</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wpath</name> <operator>=</operator> <call><name>_twin_ustr_to_tchar</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>initial_dir_path</name> <operator>=</operator> <call><name>al_clone_path</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>fc_initial_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>initial_dir_path</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_path_filename</name><argument_list>(<argument><expr><name>initial_dir_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wpath</name> <operator>=</operator> <call><name>_twin_utf8_to_tchar</name><argument_list>(<argument><expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>initial_dir_path</name></expr></argument>, <argument><expr><name>ALLEGRO_NATIVE_PATH_SEP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>ofn</name><operator>.</operator><name>lpstrInitialDir</name></name> <operator>=</operator> <name>wpath</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>title</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ofn</name><operator>.</operator><name>lpstrTitle</name></name> <operator>=</operator> <call><name>_twin_ustr_to_tchar</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>OFN_NOCHANGEDIR</name> <operator>|</operator> <name>OFN_EXPLORER</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FILECHOOSER_SAVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>OFN_OVERWRITEPROMPT</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name><name>fd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FILECHOOSER_FILE_MUST_EXIST</name><operator>)</operator></expr> ?</condition><then> <expr><name>OFN_FILEMUSTEXIST</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name><name>fd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FILECHOOSER_MULTIPLE</name><operator>)</operator></expr> ?</condition><then> <expr><name>OFN_ALLOWMULTISELECT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name><name>fd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FILECHOOSER_SHOW_HIDDEN</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x10000000</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ofn</name><operator>.</operator><name>Flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>OFN_OVERWRITEPROMPT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GetSaveFileName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ofn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GetOpenFileName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ofn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>initial_dir_path</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>initial_dir_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>ofn</name><operator>.</operator><name>lpstrTitle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>wfilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>filter_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>err</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"al_show_native_file_dialog failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>_al_win_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>OFN_ALLOWMULTISELECT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>fc_path_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><call><name>skip_nul_terminated_string</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>fc_path_count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>fc_path_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>fc_path_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>fc_paths</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>fc_paths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>_tcreate_path</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>



<expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>fc_path_count</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>fc_paths</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>fc_path_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>skip_nul_terminated_string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>fd</name><operator>-&gt;</operator><name>fc_path_count</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>fc_paths</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <call><name>_tcreate_path_for_directory</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>_twin_tchar_to_utf8</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_set_path_filename</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>fc_paths</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>skip_nul_terminated_string</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_al_show_native_message_box</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UINT</name></type> <name>type</name> <init>= <expr><name>MB_SETFOREGROUND</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>text</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>title</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_MESSAGEBOX_QUESTION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>|=</operator> <name>MB_ICONQUESTION</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_MESSAGEBOX_WARN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>|=</operator> <name>MB_ICONWARNING</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_MESSAGEBOX_ERROR</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>type</name> <operator>|=</operator> <name>MB_ICONERROR</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name>type</name> <operator>|=</operator> <name>MB_ICONINFORMATION</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_MESSAGEBOX_YES_NO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>|=</operator> <name>MB_YESNO</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_MESSAGEBOX_OK_CANCEL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>|=</operator> <name>MB_OKCANCEL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>mb_heading</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>al_ustr_append_cstr</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>mb_heading</name></name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_ustr_append</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>mb_heading</name></name></expr></argument>, <argument><expr><name><name>fd</name><operator>-&gt;</operator><name>mb_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>_twin_ustr_to_tchar</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>mb_heading</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>text</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>title</name> <operator>=</operator> <call><name>_twin_ustr_to_tchar</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>title</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>MessageBox</name><argument_list>(<argument><expr><call><name>al_get_win_window_handle</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>text</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>IDYES</name> <operator>||</operator> <name>result</name> <operator>==</operator> <name>IDOK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>wlog_emit_close_event</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>textlog</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>keypress</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>user</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_NATIVE_DIALOG_CLOSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>user</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>user</name><operator>.</operator><name>data1</name></name> <operator>=</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator><name>textlog</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>user</name><operator>.</operator><name>data2</name></name> <operator>=</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator><name>keypress</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_emit_user_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>textlog</name><operator>-&gt;</operator><name>tl_events</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>ALLEGRO_USTR</name><modifier>*</modifier></type> <name>convert_crlf</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>prev</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>pos</name> <operator>=</operator> <call><name>al_ustr_find_chr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>al_ustr_prev_get</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_ustr_insert_chr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_next</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>al_ustr_next</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wlog_do_append_native_text_log</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>textlog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>GetWindowTextLength</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_textview</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_textview</name></name></expr></argument>, <argument><expr><name>EM_SETSEL</name></expr></argument>, <argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>index</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>convert_crlf</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_pending_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>TCHAR</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>_twin_utf8_to_tchar</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_pending_text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_textview</name></name></expr></argument>, <argument><expr><name>EM_REPLACESEL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator> <name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_truncate</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_pending_text</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_have_pending</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_textview</name></name></expr></argument>, <argument><expr><name>WM_VSCROLL</name></expr></argument>, <argument><expr><name>SB_BOTTOM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type> <name>wlog_text_log_callback</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hWnd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>uMsg</name></decl></parameter>, <parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CREATESTRUCT</name><modifier>*</modifier></type> <name>create_struct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_NATIVE_DIALOG</name><modifier>*</modifier></type> <name>textlog</name> <init>= <expr><operator>(</operator><name>ALLEGRO_NATIVE_DIALOG</name><operator>*</operator><operator>)</operator><call><name>GetWindowLongPtr</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>GWLP_USERDATA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>uMsg</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>WM_CREATE</name></expr>:</case>

<expr_stmt><expr><name>create_struct</name> <operator>=</operator> <operator>(</operator><name>CREATESTRUCT</name><operator>*</operator><operator>)</operator><name>lParam</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowLongPtr</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>GWLP_USERDATA</name></expr></argument>, <argument><expr><operator>(</operator><name>LONG_PTR</name><operator>)</operator><name><name>create_struct</name><operator>-&gt;</operator><name>lpCreateParams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>WM_CLOSE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>textlog</name><operator>-&gt;</operator><name>is_active</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>textlog</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_TEXTLOG_NO_CLOSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wlog_emit_close_event</name><argument_list>(<argument><expr><name>textlog</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>WM_DESTROY</name></expr>:</case>
<expr_stmt><expr><call><name>PostQuitMessage</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>WM_KEYDOWN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>wParam</name> <operator>==</operator> <name>VK_ESCAPE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wlog_emit_close_event</name><argument_list>(<argument><expr><name>textlog</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>WM_MOVE</name></expr>:</case>
<expr_stmt><expr><call><name>InvalidateRect</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>WM_SIZE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>wParam</name> <operator>==</operator> <name>SIZE_RESTORED</name> <operator>||</operator> <name>wParam</name> <operator>==</operator> <name>SIZE_MAXIMIZED</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RECT</name></type> <name>client_rect</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetClientRect</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>client_rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MoveWindow</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_textview</name></name></expr></argument>, <argument><expr><name><name>client_rect</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>client_rect</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name><name>client_rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>client_rect</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>client_rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>client_rect</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>WM_USER</name></expr>:</case>
<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_text_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wlog_do_append_native_text_log</name><argument_list>(<argument><expr><name>textlog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_text_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><call><name>DefWindowProc</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>uMsg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>open_native_text_log_inner</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>textlog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LPCTSTR</name></type> <name>font_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name>hWnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name>hLog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RECT</name></type> <name>client_rect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HFONT</name></type> <name>hFont</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name><modifier>*</modifier></type> <name>title</name></decl>;</decl_stmt>


<expr_stmt><expr><name>title</name> <operator>=</operator> <call><name>_twin_ustr_to_tchar</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hWnd</name> <operator>=</operator> <call><name>CreateWindow</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Allegro Text Log"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>title</name></expr></argument>,
<argument><expr><name>WS_CAPTION</name> <operator>|</operator> <name>WS_SIZEBOX</name> <operator>|</operator> <name>WS_MINIMIZEBOX</name> <operator>|</operator> <name>WS_MAXIMIZEBOX</name> <operator>|</operator> <name>WS_SYSMENU</name></expr></argument>,
<argument><expr><name>CW_USEDEFAULT</name></expr></argument>, <argument><expr><name>CW_USEDEFAULT</name></expr></argument>, <argument><expr><literal type="number">640</literal></expr></argument>, <argument><expr><literal type="number">480</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>(</operator><name>HINSTANCE</name><operator>)</operator><call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>textlog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hWnd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"CreateWindow failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>GetClientRect</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>client_rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>hLog</name> <operator>=</operator> <call><name>CreateWindow</name><argument_list>(<argument><expr><name>wlog_edit_control</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>WS_CHILD</name> <operator>|</operator> <name>WS_VISIBLE</name> <operator>|</operator> <name>WS_VSCROLL</name> <operator>|</operator> <name>ES_MULTILINE</name> <operator>|</operator> <name>ES_WANTRETURN</name> <operator>|</operator> <name>ES_AUTOVSCROLL</name> <operator>|</operator> <name>ES_READONLY</name></expr></argument>,
<argument><expr><name><name>client_rect</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>client_rect</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name><name>client_rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>client_rect</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>client_rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>client_rect</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>HINSTANCE</name><operator>)</operator><call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hLog</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"CreateWindow failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>SetWindowLong</name><argument_list>(<argument><expr><name>hLog</name></expr></argument>, <argument><expr><name>GWL_EXSTYLE</name></expr></argument>, <argument><expr><call><name>GetWindowLong</name><argument_list>(<argument><expr><name>hLog</name></expr></argument>, <argument><expr><name>GWL_EXSTYLE</name></expr></argument>)</argument_list></call> <operator>|</operator> <literal type="number">0x02000000L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>textlog</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_TEXTLOG_MONOSPACE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>font_name</name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Courier New"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>font_name</name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Arial"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>hFont</name> <operator>=</operator> <call><name>CreateFont</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FW_LIGHT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DEFAULT_CHARSET</name></expr></argument>, <argument><expr><name>OUT_DEFAULT_PRECIS</name></expr></argument>, <argument><expr><name>CLIP_DEFAULT_PRECIS</name></expr></argument>, <argument><expr><name>DEFAULT_QUALITY</name></expr></argument>,
<argument><expr><name>FF_MODERN</name> <operator>|</operator> <name>FIXED_PITCH</name></expr></argument>, <argument><expr><name>font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>hFont</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>hLog</name></expr></argument>, <argument><expr><name>WM_SETFONT</name></expr></argument>, <argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>hFont</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>SW_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <name>hWnd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_textview</name></name> <operator>=</operator> <name>hLog</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>is_active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_done</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_signal_cond</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_text_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_text_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>GetMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>msg</name><operator>.</operator><name>message</name></name> <operator>!=</operator> <name>WM_QUIT</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>.</operator><name>hwnd</name></name> <operator>!=</operator> <name><name>textlog</name><operator>-&gt;</operator><name>window</name></name> <operator>&amp;&amp;</operator> <name><name>msg</name><operator>.</operator><name>message</name></name> <operator>==</operator> <name>WM_KEYDOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PostMessage</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>WM_KEYDOWN</name></expr></argument>, <argument><expr><name><name>msg</name><operator>.</operator><name>wParam</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>.</operator><name>lParam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>TranslateMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DispatchMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><call><name>IsWindow</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name>hFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_text_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_done</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_signal_cond</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_text_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_open_native_text_log</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>textlog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WNDCLASS</name></type> <name>text_log_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_text_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>wlog_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Register text log class\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>text_log_class</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>text_log_class</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>text_log_class</name><operator>.</operator><name>hInstance</name></name> <operator>=</operator> <operator>(</operator><name>HINSTANCE</name><operator>)</operator><call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>text_log_class</name><operator>.</operator><name>lpszClassName</name></name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Allegro Text Log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>text_log_class</name><operator>.</operator><name>lpfnWndProc</name></name> <operator>=</operator> <name>wlog_text_log_callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>text_log_class</name><operator>.</operator><name>hIcon</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>text_log_class</name><operator>.</operator><name>hCursor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>text_log_class</name><operator>.</operator><name>lpszMenuName</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>text_log_class</name><operator>.</operator><name>hbrBackground</name></name> <operator>=</operator> <operator>(</operator><name>HBRUSH</name><operator>)</operator><call><name>GetStockObject</name><argument_list>(<argument><expr><name>GRAY_BRUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RegisterClass</name><argument_list>(<argument><expr><operator>&amp;</operator><name>text_log_class</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"RegisterClass failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_text_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>wlog_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Load rich edit module\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>wlog_rich_edit_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>wlog_rich_edit_module</name> <operator>=</operator> <call><name>_al_open_library</name><argument_list>(<argument><expr><literal type="string">"msftedit.dll"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>wlog_edit_control</name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"RICHEDIT50W"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>wlog_unicode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>wlog_rich_edit_module</name> <operator>=</operator> <call><name>_al_open_library</name><argument_list>(<argument><expr><literal type="string">"riched20.dll"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>wlog_edit_control</name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"RichEdit20W"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>wlog_unicode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>wlog_rich_edit_module</name> <operator>=</operator> <call><name>_al_open_library</name><argument_list>(<argument><expr><literal type="string">"riched32.dll"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>wlog_edit_control</name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"RichEdit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>wlog_unicode</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>wlog_edit_control</name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"EDIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wlog_unicode</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wlog_count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"wlog_count = %d\n"</literal></expr></argument>, <argument><expr><name>wlog_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>open_native_text_log_inner</name><argument_list>(<argument><expr><name>textlog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wlog_count</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"wlog_count = %d\n"</literal></expr></argument>, <argument><expr><name>wlog_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>wlog_count</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>wlog_rich_edit_module</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Unload rich edit module\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_close_library</name><argument_list>(<argument><expr><name>wlog_rich_edit_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wlog_rich_edit_module</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>wlog_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Unregister text log class\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnregisterClass</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Allegro Text Log"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>HINSTANCE</name><operator>)</operator><call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_text_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_close_native_text_log</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>textlog</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsWindow</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>is_active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PostMessage</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>WM_CLOSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_append_native_text_log</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>textlog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_have_pending</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_have_pending</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>IsWindow</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PostMessage</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>WM_USER</name></expr></argument>, <argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>textlog</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>menu_callback</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>,
<parameter><decl><type><name>LPARAM</name><modifier>*</modifier></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>userdata</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>==</operator> <name>WM_COMMAND</name> <operator>&amp;&amp;</operator> <name>lParam</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>id</name> <init>= <expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_MENU_ID</name> <modifier>*</modifier></type><name>menu_id</name> <init>= <expr><call><name>_al_find_parent_menu_by_id</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>menu_id</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_al_find_menu_item_unique</name><argument_list>(<argument><expr><name><name>menu_id</name><operator>-&gt;</operator><name>menu</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>al_get_menu_item_flags</name><argument_list>(<argument><expr><name><name>menu_id</name><operator>-&gt;</operator><name>menu</name></name></expr></argument>, <argument><expr><operator>-</operator><name>index</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_MENU_ITEM_CHECKBOX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_toggle_menu_item_flags</name><argument_list>(<argument><expr><name><name>menu_id</name><operator>-&gt;</operator><name>menu</name></name></expr></argument>, <argument><expr><operator>-</operator><name>index</name></expr></argument>, <argument><expr><name>ALLEGRO_MENU_ITEM_CHECKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>_al_emit_menu_event</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>msg</name> <operator>==</operator> <name>WM_SYSCOMMAND</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>wParam</name> <operator>&amp;</operator> <literal type="number">0xfff0</literal><operator>)</operator> <operator>==</operator> <name>SC_KEYMENU</name> <operator>&amp;&amp;</operator> <call><name>al_get_display_menu</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>DefWindowProc</name><argument_list>(<argument><expr><call><name>al_get_win_window_handle</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>msg</name> <operator>==</operator> <name>WM_SHOW_POPUP</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_MENU</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><operator>(</operator><name>ALLEGRO_MENU</name> <operator>*</operator><operator>)</operator> <name>lParam</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name> <init>= <expr><call><name>al_get_win_window_handle</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POINT</name></type> <name>pos</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetCursorPos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>SetForegroundWindow</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TrackPopupMenuEx</name><argument_list>(<argument><expr><operator>(</operator><name>HMENU</name><operator>)</operator> <name><name>menu</name><operator>-&gt;</operator><name>extra1</name></name></expr></argument>, <argument><expr><name>TPM_LEFTALIGN</name> <operator>|</operator> <name>TPM_TOPALIGN</name> <operator>|</operator> <name>TPM_RIGHTBUTTON</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>msg</name> <operator>==</operator> <name>WM_HIDE_MENU</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SetMenu</name><argument_list>(<argument><expr><call><name>al_get_win_window_handle</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>msg</name> <operator>==</operator> <name>WM_SHOW_MENU</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_MENU</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><operator>(</operator><name>ALLEGRO_MENU</name> <operator>*</operator><operator>)</operator> <name>lParam</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetMenu</name><argument_list>(<argument><expr><call><name>al_get_win_window_handle</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>HMENU</name><operator>)</operator> <name><name>menu</name><operator>-&gt;</operator><name>extra1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>msg</name> <operator>==</operator> <name>WM_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Got the WM_SIZE event.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_wm_size_event</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_signal_cond</name><argument_list>(<argument><expr><name>wm_size_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>msg</name> <operator>==</operator> <name>WM_MENUSELECT</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_menu_info</name><parameter_list>(<parameter><decl><type><name>MENUITEMINFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_MENU_ITEM</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fMask</name></name> <operator>=</operator> <name>MIIM_FTYPE</name> <operator>|</operator> <name>MIIM_STATE</name> <operator>|</operator> <name>MIIM_ID</name> <operator>|</operator> <name>MIIM_SUBMENU</name> <operator>|</operator> <name>MIIM_STRING</name> <operator>|</operator> <name>MIIM_CHECKMARKS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>wID</name></name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>unique_id</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>menu</name><operator>-&gt;</operator><name>caption</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fType</name></name> <operator>=</operator> <name>MFT_SEPARATOR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fType</name></name> <operator>=</operator> <name>MFT_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dwTypeData</name></name> <operator>=</operator> <call><name>_twin_ustr_to_tchar</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>caption</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cch</name></name> <operator>=</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>caption</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_MENU_ITEM_CHECKED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fState</name></name> <operator>|=</operator> <name>MFS_CHECKED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_MENU_ITEM_DISABLED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fState</name></name> <operator>|=</operator> <name>MFS_DISABLED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>icon</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name> <init>= <expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>icon</name></name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>icon</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HDC</name></type> <name>hdc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HBITMAP</name></type> <name>hbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BITMAPINFO</name></type> <name>bi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BITMAPINFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BITMAPINFO</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biWidth</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biHeight</name></name> <operator>=</operator> <operator>-</operator><name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biPlanes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biBitCount</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biCompression</name></name> <operator>=</operator> <name>BI_RGB</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hdc</name> <operator>=</operator> <call><name>GetDC</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>display</name></name></expr> ?</condition><then> <expr><call><name>al_get_win_window_handle</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hbmp</name> <operator>=</operator> <call><name>CreateDIBSection</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><operator>(</operator><name>BITMAPINFO</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>bi</name></expr></argument>, <argument><expr><name>DIB_RGB_COLORS</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>icon</name></name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_ARGB_8888</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>lock</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>w</name> <operator>*</operator> <name>h</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>icon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>hbmpUnchecked</name></name> <operator>=</operator> <name>hbmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>extra2</name></name> <operator>=</operator> <name>hbmp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>display</name></name></expr> ?</condition><then> <expr><call><name>al_get_win_window_handle</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>popup</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>hSubMenu</name></name> <operator>=</operator> <operator>(</operator><name>HMENU</name><operator>)</operator> <name><name>menu</name><operator>-&gt;</operator><name>popup</name><operator>-&gt;</operator><name>extra1</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy_menu_info</name><parameter_list>(<parameter><decl><type><name>MENUITEMINFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>dwTypeData</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>dwTypeData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>_al_init_menu</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MENU</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>extra1</name></name> <operator>=</operator> <call><name>CreateMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>menu</name><operator>-&gt;</operator><name>extra1</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_init_popup_menu</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MENU</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>extra1</name></name> <operator>=</operator> <call><name>CreatePopupMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>menu</name><operator>-&gt;</operator><name>extra1</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_insert_menu_item_at</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MENU_ITEM</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MENUITEMINFO</name></type> <name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_menu_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InsertMenuItem</name><argument_list>(<argument><expr><operator>(</operator><name>HMENU</name><operator>)</operator> <name><name>item</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>extra1</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroy_menu_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_update_menu_item_at</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MENU_ITEM</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MENUITEMINFO</name></type> <name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_menu_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetMenuItemInfo</name><argument_list>(<argument><expr><operator>(</operator><name>HMENU</name><operator>)</operator> <name><name>item</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>extra1</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>display</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DrawMenuBar</name><argument_list>(<argument><expr><call><name>al_get_win_window_handle</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>destroy_menu_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_destroy_menu_item_at</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MENU_ITEM</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DeleteMenu</name><argument_list>(<argument><expr><operator>(</operator><name>HMENU</name><operator>)</operator> <name><name>item</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>extra1</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>MF_BYPOSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>display</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DrawMenuBar</name><argument_list>(<argument><expr><call><name>al_get_win_window_handle</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_show_display_menu</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_MENU</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name> <init>= <expr><call><name>al_get_win_window_handle</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hwnd</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>extra1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>al_win_add_window_callback</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>menu_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>got_wm_size_event</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PostMessage</name><argument_list>(<argument><expr><call><name>al_get_win_window_handle</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>WM_SHOW_MENU</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator> <name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>wm_size_cond</name> <operator>&amp;&amp;</operator> <name>global_mutex</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Sent WM_SHOW_MENU, waiting for WM_SIZE.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>global_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name>got_wm_size_event</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_wait_cond</name><argument_list>(<argument><expr><name>wm_size_cond</name></expr></argument>, <argument><expr><name>global_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>global_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_hide_display_menu</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_MENU</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name> <init>= <expr><call><name>al_get_win_window_handle</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hwnd</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>got_wm_size_event</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PostMessage</name><argument_list>(<argument><expr><call><name>al_get_win_window_handle</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>WM_HIDE_MENU</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator> <name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>wm_size_cond</name> <operator>&amp;&amp;</operator> <name>global_mutex</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Sent WM_HIDE_MENU, waiting for WM_SIZE.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>global_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name>got_wm_size_event</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_wait_cond</name><argument_list>(<argument><expr><name>wm_size_cond</name></expr></argument>, <argument><expr><name>global_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>global_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>menu</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_show_popup_menu</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_MENU</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_win_add_window_callback</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>menu_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PostMessage</name><argument_list>(<argument><expr><call><name>al_get_win_window_handle</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>WM_SHOW_POPUP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator> <name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_al_get_menu_display_height</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYMENU</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



</unit>
