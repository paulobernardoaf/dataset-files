<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\color\color.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_color.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <name>g</name>, <name>b</name>;</decl_stmt>
}</block></struct></type> <name>ColorName</name>;</typedef>




<decl_stmt><decl><type><specifier>static</specifier> <name>ColorName</name></type> <name><name>_al_color_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"aliceblue"</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"antiquewhite"</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xd7</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"aqua"</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"aquamarine"</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xd4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"azure"</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"beige"</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xdc</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"bisque"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xc4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"black"</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"blanchedalmond"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xcd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"blue"</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"blueviolet"</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0xe2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"brown"</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x2a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"burlywood"</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x87</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cadetblue"</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0xa0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"chartreuse"</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"chocolate"</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x1e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"coral"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x50</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cornflowerblue"</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xed</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cornsilk"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xdc</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"crimson"</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x3c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cyan"</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"darkblue"</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x8b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"darkcyan"</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x8b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"darkgoldenrod"</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x0b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"darkgray"</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xa9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"darkgreen"</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"darkgrey"</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xa9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"darkkhaki"</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x6b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"darkmagenta"</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x8b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"darkolivegreen"</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x2f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"darkorange"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"darkorchid"</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xcc</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"darkred"</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"darksalmon"</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x7a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"darkseagreen"</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x8f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"darkslateblue"</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x8b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"darkslategray"</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x4f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"darkslategrey"</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x4f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"darkturquoise"</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xd1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"darkviolet"</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xd3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"deeppink"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x93</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"deepskyblue"</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0xff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"dimgray"</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x69</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"dimgrey"</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x69</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"dodgerblue"</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"firebrick"</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x22</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"floralwhite"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xf0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"forestgreen"</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x22</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"fuchsia"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"gainsboro"</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xdc</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ghostwhite"</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"gold"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"goldenrod"</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x20</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"gray"</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x80</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"green"</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"greenyellow"</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x2f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"grey"</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x80</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"honeydew"</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xf0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"hotpink"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xb4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"indianred"</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x5c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"indigo"</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x82</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ivory"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xf0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"khaki"</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x8c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lavender"</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xfa</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lavenderblush"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xf5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lawngreen"</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lemonchiffon"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xcd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lightblue"</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0xe6</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lightcoral"</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x80</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lightcyan"</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lightgoldenrodyellow"</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xd2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lightgray"</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0xd3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lightgreen"</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0x90</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lightgrey"</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0xd3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lightpink"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0xc1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lightsalmon"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x7a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lightseagreen"</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0xaa</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lightskyblue"</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xfa</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lightslategray"</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x99</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lightslategrey"</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x99</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lightsteelblue"</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0xde</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lightyellow"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xe0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lime"</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"limegreen"</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"linen"</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xe6</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"magenta"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"maroon"</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"mediumaquamarine"</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xaa</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"mediumblue"</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xcd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"mediumorchid"</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xd3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"mediumpurple"</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0xdb</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"mediumseagreen"</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x71</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"mediumslateblue"</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xee</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"mediumspringgreen"</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x9a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"mediumturquoise"</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xcc</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"mediumvioletred"</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x85</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"midnightblue"</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x70</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"mintcream"</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xfa</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"mistyrose"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xe1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"moccasin"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xb5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"navajowhite"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xad</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"navy"</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x80</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"oldlace"</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xe6</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"olive"</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"olivedrab"</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x23</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"orange"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"orangered"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"orchid"</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0xd6</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"palegoldenrod"</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0xaa</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"palegreen"</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0x98</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"paleturquoise"</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xee</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"palevioletred"</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x93</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"papayawhip"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xd5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"peachpuff"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0xb9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"peru"</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x3f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"pink"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xcb</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"plum"</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xdd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"powderblue"</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xe6</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"purple"</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x80</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rebeccapurple"</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x99</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"red"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rosybrown"</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x8f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"royalblue"</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xe1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"saddlebrown"</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x13</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"salmon"</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x72</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sandybrown"</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x60</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"seagreen"</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x57</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"seashell"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xee</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sienna"</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x2d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"silver"</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"skyblue"</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xeb</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"slateblue"</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0xcd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"slategray"</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x90</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"slategrey"</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x90</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"snow"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xfa</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"springgreen"</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x7f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"steelblue"</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xb4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"tan"</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x8c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"teal"</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x80</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"thistle"</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0xd8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"tomato"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x47</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"turquoise"</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xd0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"violet"</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xee</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"wheat"</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xb3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"white"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"whitesmoke"</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xf5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"yellow"</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"yellowgreen"</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x32</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_COLORS</name></cpp:macro> <cpp:value>(sizeof(_al_color_names) / sizeof(ColorName))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name> <specifier>const</specifier></type> <name>Xn</name> <init>= <expr><literal type="number">0.95047</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name> <specifier>const</specifier></type> <name>Yn</name> <init>= <expr><literal type="number">1.00000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name> <specifier>const</specifier></type> <name>Zn</name> <init>= <expr><literal type="number">1.08883</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name> <specifier>const</specifier></type> <name>delta</name> <init>= <expr><literal type="number">6.0</literal> <operator>/</operator> <literal type="number">29</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name> <specifier>const</specifier></type> <name>delta2</name> <init>= <expr><literal type="number">6.0</literal> <operator>/</operator> <literal type="number">29</literal> <operator>*</operator> <literal type="number">6.0</literal> <operator>/</operator> <literal type="number">29</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name> <specifier>const</specifier></type> <name>delta3</name> <init>= <expr><literal type="number">6.0</literal> <operator>/</operator> <literal type="number">29</literal> <operator>*</operator> <literal type="number">6.0</literal> <operator>/</operator> <literal type="number">29</literal> <operator>*</operator> <literal type="number">6.0</literal> <operator>/</operator> <literal type="number">29</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name> <specifier>const</specifier></type> <name>tf7</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">4</literal> <operator>/</operator> <literal type="number">4</literal> <operator>/</operator> <literal type="number">4</literal> <operator>/</operator> <literal type="number">4</literal> <operator>/</operator> <literal type="number">4</literal> <operator>/</operator> <literal type="number">4</literal> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>assert_sorted_names</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGMODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_COLORS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>_al_color_names</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>_al_color_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>va</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>vb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>ca</name> <init>= <expr><name>va</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ColorName</name> <specifier>const</specifier> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>vb</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ca</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_color_name_to_rgb</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert_sorted_names</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>_al_color_names</name></expr></argument>, <argument><expr><name>NUM_COLORS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ColorName</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ColorName</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>result</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>r</name></name> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>g</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>g</name></name> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>b</name></name> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>al_color_rgb_to_name</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ir</name> <init>= <expr><name>r</name> <operator>*</operator> <literal type="number">255</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ig</name> <init>= <expr><name>g</name> <operator>*</operator> <literal type="number">255</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ib</name> <init>= <expr><name>b</name> <operator>*</operator> <literal type="number">255</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>NUM_COLORS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><name>n</name></expr></init></decl>, <decl><type ref="prev"/><name>mind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dr</name> <init>= <expr><name><name>_al_color_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>-</operator> <name>ir</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dg</name> <init>= <expr><name><name>_al_color_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>-</operator> <name>ig</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>db</name> <init>= <expr><name><name>_al_color_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>-</operator> <name>ib</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name>dr</name> <operator>*</operator> <name>dr</name> <operator>+</operator> <name>dg</name> <operator>*</operator> <name>dg</name> <operator>+</operator> <name>db</name> <operator>*</operator> <name>db</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>min</name> <operator>==</operator> <name>n</name> <operator>||</operator> <name>d</name> <operator>&lt;</operator> <name>mind</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mind</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name><name>_al_color_names</name><index>[<expr><name>min</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_COLOR</name></type> <name>al_color_name</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>al_color_name_to_rgb</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_color_hsv_to_rgb</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>hue</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>saturation</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>red</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>green</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>blue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hue</name> <operator>=</operator> <call><name>fmodf</name><argument_list>(<argument><expr><name>hue</name></expr></argument>, <argument><expr><literal type="number">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hue</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hue</name> <operator>+=</operator> <literal type="number">360</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>hue</name> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>hue</name> <operator>/</operator> <literal type="number">60</literal> <operator>-</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>value</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>saturation</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>value</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>e</name> <operator>*</operator> <name>saturation</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>value</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>e</name><operator>)</operator> <operator>*</operator> <name>saturation</name><operator>)</operator></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>d</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>red</name> <operator>=</operator> <name>value</name></expr><operator>,</operator> <expr><operator>*</operator><name>green</name> <operator>=</operator> <name>c</name></expr><operator>,</operator> <expr><operator>*</operator><name>blue</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <return>return;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>red</name> <operator>=</operator> <name>b</name></expr><operator>,</operator> <expr><operator>*</operator><name>green</name> <operator>=</operator> <name>value</name></expr><operator>,</operator> <expr><operator>*</operator><name>blue</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <return>return;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>red</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><operator>*</operator><name>green</name> <operator>=</operator> <name>value</name></expr><operator>,</operator> <expr><operator>*</operator><name>blue</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <return>return;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>red</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><operator>*</operator><name>green</name> <operator>=</operator> <name>b</name></expr><operator>,</operator> <expr><operator>*</operator><name>blue</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <return>return;</return>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>red</name> <operator>=</operator> <name>c</name></expr><operator>,</operator> <expr><operator>*</operator><name>green</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><operator>*</operator><name>blue</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <return>return;</return>
<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>red</name> <operator>=</operator> <name>value</name></expr><operator>,</operator> <expr><operator>*</operator><name>green</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><operator>*</operator><name>blue</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_color_rgb_to_hsv</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>blue</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>hue</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>saturation</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>red</name> <operator>&gt;</operator> <name>green</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>red</name> <operator>&gt;</operator> <name>blue</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>green</name> <operator>&gt;</operator> <name>blue</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>red</name></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>green</name> <operator>-</operator> <name>blue</name></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name>blue</name></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>red</name></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>green</name> <operator>-</operator> <name>blue</name></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name>green</name></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>blue</name></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>red</name> <operator>-</operator> <name>green</name></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name>green</name></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>red</name> <operator>&gt;</operator> <name>blue</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>green</name></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>blue</name> <operator>-</operator> <name>red</name></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name>blue</name></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>green</name> <operator>&gt;</operator> <name>blue</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>green</name></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>blue</name> <operator>-</operator> <name>red</name></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name>red</name></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>blue</name></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>red</name> <operator>-</operator> <name>green</name></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name>red</name></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>c</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>hue</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>hue</name> <operator>=</operator> <literal type="number">60</literal> <operator>*</operator> <operator>(</operator><name>d</name> <operator>+</operator> <name>b</name> <operator>/</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>c</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>hue</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>hue</name> <operator>+=</operator> <literal type="number">360</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>hue</name> <operator>&gt;</operator> <literal type="number">360</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>hue</name> <operator>-=</operator> <literal type="number">360</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>saturation</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>saturation</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>c</name><operator>)</operator> <operator>/</operator> <name>a</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>ALLEGRO_COLOR</name></type> <name>al_color_hsv</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_color_hsv_to_rgb</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>float</name></type> <name>hsl_to_rgb_helper</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>*</operator> <literal type="number">6</literal> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>b</name> <operator>+</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>b</name><operator>)</operator> <operator>*</operator> <literal type="number">6</literal> <operator>*</operator> <name>x</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>*</operator> <literal type="number">6</literal> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>a</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>*</operator> <literal type="number">6</literal> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>b</name> <operator>+</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>b</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">4.0</literal> <operator>-</operator> <literal type="number">6.0</literal> <operator>*</operator> <name>x</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_color_hsl_to_rgb</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>hue</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>saturation</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>lightness</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>red</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>green</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>blue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hue</name> <operator>=</operator> <call><name>fmodf</name><argument_list>(<argument><expr><name>hue</name></expr></argument>, <argument><expr><literal type="number">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hue</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hue</name> <operator>+=</operator> <literal type="number">360</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>hue</name> <operator>/</operator> <literal type="number">360</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lightness</name> <operator>&lt;</operator> <literal type="number">0.5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>lightness</name> <operator>+</operator> <name>lightness</name> <operator>*</operator> <name>saturation</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>lightness</name> <operator>+</operator> <name>saturation</name> <operator>-</operator> <name>lightness</name> <operator>*</operator> <name>saturation</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>lightness</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>red</name> <operator>=</operator> <call><name>hsl_to_rgb_helper</name><argument_list>(<argument><expr><name>h</name> <operator>+</operator> <literal type="number">1.0</literal> <operator>/</operator> <literal type="number">3.0</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>green</name> <operator>=</operator> <call><name>hsl_to_rgb_helper</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>blue</name> <operator>=</operator> <call><name>hsl_to_rgb_helper</name><argument_list>(<argument><expr><name>h</name> <operator>-</operator> <literal type="number">1.0</literal> <operator>/</operator> <literal type="number">3.0</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_color_rgb_to_hsl</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>blue</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>hue</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>saturation</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lightness</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>red</name> <operator>&gt;</operator> <name>green</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>red</name> <operator>&gt;</operator> <name>blue</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>green</name> <operator>&gt;</operator> <name>blue</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>red</name></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>green</name> <operator>-</operator> <name>blue</name></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name>blue</name></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>red</name></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>green</name> <operator>-</operator> <name>blue</name></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name>green</name></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>blue</name></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>red</name> <operator>-</operator> <name>green</name></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name>green</name></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>red</name> <operator>&gt;</operator> <name>blue</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>green</name></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>blue</name> <operator>-</operator> <name>red</name></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name>blue</name></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>green</name> <operator>&gt;</operator> <name>blue</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>green</name></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>blue</name> <operator>-</operator> <name>red</name></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name>red</name></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>blue</name></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>red</name> <operator>-</operator> <name>green</name></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name>red</name></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>c</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>hue</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>hue</name> <operator>=</operator> <literal type="number">60</literal> <operator>*</operator> <operator>(</operator><name>d</name> <operator>+</operator> <name>b</name> <operator>/</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>c</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>hue</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>hue</name> <operator>+=</operator> <literal type="number">360</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>saturation</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>a</name> <operator>+</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>saturation</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>c</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>a</name> <operator>+</operator> <name>c</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>saturation</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>c</name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name>a</name> <operator>-</operator> <name>c</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>lightness</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>+</operator> <name>c</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>ALLEGRO_COLOR</name></type> <name>al_color_hsl</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_color_hsl_to_rgb</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_color_cmyk_to_rgb</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>cyan</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>magenta</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>yellow</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>red</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>green</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>blue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>max</name> <init>= <expr><literal type="number">1</literal> <operator>-</operator> <name>key</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>red</name> <operator>=</operator> <name>max</name> <operator>-</operator> <name>cyan</name> <operator>*</operator> <name>max</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>green</name> <operator>=</operator> <name>max</name> <operator>-</operator> <name>magenta</name> <operator>*</operator> <name>max</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>blue</name> <operator>=</operator> <name>max</name> <operator>-</operator> <name>yellow</name> <operator>*</operator> <name>max</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_color_rgb_to_cmyk</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>blue</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>cyan</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>magenta</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>yellow</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>max</name> <init>= <expr><name>red</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>green</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <name>green</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>blue</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <name>blue</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>max</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cyan</name> <operator>=</operator> <operator>(</operator><name>max</name> <operator>-</operator> <name>red</name><operator>)</operator> <operator>/</operator> <name>max</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>magenta</name> <operator>=</operator> <operator>(</operator><name>max</name> <operator>-</operator> <name>green</name><operator>)</operator> <operator>/</operator> <name>max</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>yellow</name> <operator>=</operator> <operator>(</operator><name>max</name> <operator>-</operator> <name>blue</name><operator>)</operator> <operator>/</operator> <name>max</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cyan</name> <operator>=</operator> <operator>*</operator><name>magenta</name> <operator>=</operator> <operator>*</operator><name>yellow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>ALLEGRO_COLOR</name></type> <name>al_color_cmyk</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_color_cmyk_to_rgb</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_color_yuv_to_rgb</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>v</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>red</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>green</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>blue</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>u</name> <operator>=</operator> <literal type="number">0.436</literal> <operator>*</operator> <operator>(</operator><name>u</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0.615</literal> <operator>*</operator> <operator>(</operator><name>v</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>red</name> <operator>=</operator> <call><name>_ALLEGRO_CLAMP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>v</name> <operator>*</operator> <literal type="number">1.13983</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>green</name> <operator>=</operator> <call><name>_ALLEGRO_CLAMP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>u</name> <operator>*</operator> <operator>-</operator><literal type="number">0.39465</literal> <operator>+</operator> <name>v</name> <operator>*</operator> <operator>-</operator><literal type="number">0.58060</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>blue</name> <operator>=</operator> <call><name>_ALLEGRO_CLAMP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>u</name> <operator>*</operator> <literal type="number">2.03211</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_color_rgb_to_yuv</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>blue</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>red</name> <operator>*</operator> <literal type="number">0.299</literal> <operator>+</operator> <name>green</name> <operator>*</operator> <literal type="number">0.587</literal> <operator>+</operator> <name>blue</name> <operator>*</operator> <literal type="number">0.114</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>u</name> <operator>=</operator> <name>red</name> <operator>*</operator> <operator>-</operator><literal type="number">0.14713</literal> <operator>+</operator> <name>green</name> <operator>*</operator> <operator>-</operator><literal type="number">0.28886</literal> <operator>+</operator> <name>blue</name> <operator>*</operator> <literal type="number">0.436</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>red</name> <operator>*</operator> <literal type="number">0.615</literal> <operator>+</operator> <name>green</name> <operator>*</operator> <operator>-</operator><literal type="number">0.51499</literal> <operator>+</operator> <name>blue</name> <operator>*</operator> <operator>-</operator><literal type="number">0.10001</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>u</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>u</name> <operator>/</operator> <literal type="number">0.436</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>v</name> <operator>/</operator> <literal type="number">0.615</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>ALLEGRO_COLOR</name></type> <name>al_color_yuv</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_color_yuv_to_rgb</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_color_rgb_to_html</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>blue</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"#%02x%02x%02x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>red</name> <operator>*</operator> <literal type="number">255</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>green</name> <operator>*</operator> <literal type="number">255</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>blue</name> <operator>*</operator> <literal type="number">255</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>al_color_html_to_rgb</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>string</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>red</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>green</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>blue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>string</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ir</name></decl>, <decl><type ref="prev"/><name>ig</name></decl>, <decl><type ref="prev"/><name>ib</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>red</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>green</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>blue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>red</name> <operator>=</operator> <operator>*</operator><name>green</name> <operator>=</operator> <operator>*</operator><name>blue</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"%02x%02x%02x"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ib</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>red</name> <operator>=</operator> <name>ir</name> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>green</name> <operator>=</operator> <name>ig</name> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>blue</name> <operator>=</operator> <name>ib</name> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>ALLEGRO_COLOR</name></type> <name>al_color_html</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_color_html_to_rgb</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>al_map_rgba</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>uint32_t</name></type> <name>al_get_allegro_color_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>ALLEGRO_VERSION_INT</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>double</name></type> <name>srgba_gamma_to_linear</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>double</name> <specifier>const</specifier></type> <name>a</name> <init>= <expr><literal type="number">0.055</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0.04045</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>x</name> <operator>/</operator> <literal type="number">12.92</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>pow</name><argument_list>(<argument><expr><operator>(</operator><name>x</name> <operator>+</operator> <name>a</name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>a</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2.4</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>double</name></type> <name>srgba_linear_to_gamma</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>double</name> <specifier>const</specifier></type> <name>a</name> <init>= <expr><literal type="number">0.055</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0.0031308</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>x</name> <operator>*</operator> <literal type="number">12.92</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>pow</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>/</operator> <literal type="number">2.4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>a</name><operator>)</operator> <operator>-</operator> <name>a</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_color_xyz_to_rgb</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>red</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>green</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>blue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>r</name> <init>= <expr><literal type="number">3.2406</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <operator>(</operator><operator>-</operator><literal type="number">1.5372</literal> <operator>*</operator> <name>y</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>-</operator><literal type="number">0.4986</literal> <operator>*</operator> <name>z</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>g</name> <init>= <expr><operator>-</operator><literal type="number">0.9689</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">1.8758</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <literal type="number">0.0415</literal> <operator>*</operator> <name>z</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>b</name> <init>= <expr><literal type="number">0.0557</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <operator>(</operator><operator>-</operator><literal type="number">0.2040</literal> <operator>*</operator> <name>y</name><operator>)</operator> <operator>+</operator> <literal type="number">1.0570</literal> <operator>*</operator> <name>z</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>red</name> <operator>=</operator> <call><name>srgba_linear_to_gamma</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>green</name> <operator>=</operator> <call><name>srgba_linear_to_gamma</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>blue</name> <operator>=</operator> <call><name>srgba_linear_to_gamma</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_color_rgb_to_xyz</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>blue</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>r</name> <init>= <expr><call><name>srgba_gamma_to_linear</name><argument_list>(<argument><expr><name>red</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>g</name> <init>= <expr><call><name>srgba_gamma_to_linear</name><argument_list>(<argument><expr><name>green</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>b</name> <init>= <expr><call><name>srgba_gamma_to_linear</name><argument_list>(<argument><expr><name>blue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>r</name> <operator>*</operator> <literal type="number">0.4124</literal> <operator>+</operator> <name>g</name> <operator>*</operator> <literal type="number">0.3576</literal> <operator>+</operator> <name>b</name> <operator>*</operator> <literal type="number">0.1805</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>r</name> <operator>*</operator> <literal type="number">0.2126</literal> <operator>+</operator> <name>g</name> <operator>*</operator> <literal type="number">0.7152</literal> <operator>+</operator> <name>b</name> <operator>*</operator> <literal type="number">0.0722</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>z</name> <operator>=</operator> <name>r</name> <operator>*</operator> <literal type="number">0.0193</literal> <operator>+</operator> <name>g</name> <operator>*</operator> <literal type="number">0.1192</literal> <operator>+</operator> <name>b</name> <operator>*</operator> <literal type="number">0.9505</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>ALLEGRO_COLOR</name></type> <name>al_color_xyz</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_color_xyz_to_rgb</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>double</name></type> <name>cielab_f</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>delta3</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>pow</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">4.0</literal> <operator>/</operator> <literal type="number">29</literal> <operator>+</operator> <name>x</name> <operator>/</operator> <name>delta2</name> <operator>/</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>double</name></type> <name>cielab_f_inv</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>delta</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>pow</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">4.0</literal> <operator>/</operator> <literal type="number">29</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <name>delta2</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_color_lab_to_rgb</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>red</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>green</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>blue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><name>Xn</name> <operator>*</operator> <call><name>cielab_f_inv</name><argument_list>(<argument><expr><operator>(</operator><name>l</name> <operator>+</operator> <literal type="number">0.16</literal><operator>)</operator> <operator>/</operator> <literal type="number">1.16</literal> <operator>+</operator> <name>a</name> <operator>/</operator> <literal type="number">5.00</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><name>Yn</name> <operator>*</operator> <call><name>cielab_f_inv</name><argument_list>(<argument><expr><operator>(</operator><name>l</name> <operator>+</operator> <literal type="number">0.16</literal><operator>)</operator> <operator>/</operator> <literal type="number">1.16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><name>Zn</name> <operator>*</operator> <call><name>cielab_f_inv</name><argument_list>(<argument><expr><operator>(</operator><name>l</name> <operator>+</operator> <literal type="number">0.16</literal><operator>)</operator> <operator>/</operator> <literal type="number">1.16</literal> <operator>-</operator> <name>b</name> <operator>/</operator> <literal type="number">2.00</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_color_xyz_to_rgb</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>red</name></expr></argument>, <argument><expr><name>green</name></expr></argument>, <argument><expr><name>blue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_color_rgb_to_lab</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>blue</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_color_rgb_to_xyz</name><argument_list>(<argument><expr><name>red</name></expr></argument>, <argument><expr><name>green</name></expr></argument>, <argument><expr><name>blue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>/=</operator> <name>Xn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>/=</operator> <name>Yn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>/=</operator> <name>Zn</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>l</name> <operator>=</operator> <literal type="number">1.16</literal> <operator>*</operator> <call><name>cielab_f</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0.16</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <literal type="number">5.00</literal> <operator>*</operator> <operator>(</operator><call><name>cielab_f</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>cielab_f</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <literal type="number">2.00</literal> <operator>*</operator> <operator>(</operator><call><name>cielab_f</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>cielab_f</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>ALLEGRO_COLOR</name></type> <name>al_color_lab</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>r2</name></decl>, <decl><type ref="prev"/><name>g2</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_color_lab_to_rgb</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><name>r2</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_color_lch_to_rgb</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>h</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>red</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>green</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>blue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>a</name> <init>= <expr><name>c</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>b</name> <init>= <expr><name>c</name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_color_lab_to_rgb</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>red</name></expr></argument>, <argument><expr><name>green</name></expr></argument>, <argument><expr><name>blue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_color_rgb_to_lch</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>blue</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_color_rgb_to_lab</name><argument_list>(<argument><expr><name>red</name></expr></argument>, <argument><expr><name>green</name></expr></argument>, <argument><expr><name>blue</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <name>a</name> <operator>+</operator> <name>b</name> <operator>*</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <call><name>fmod</name><argument_list>(<argument><expr><name>ALLEGRO_PI</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <call><name>atan2</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ALLEGRO_PI</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>ALLEGRO_COLOR</name></type> <name>al_color_lch</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_color_lch_to_rgb</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_color_xyy_to_rgb</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y2</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>red</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>green</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>blue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>x2</name> <init>= <expr><name>x</name> <operator>*</operator> <name>y</name> <operator>/</operator> <name>y2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>z2</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>y2</name> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <name>y</name> <operator>/</operator> <name>y2</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_color_xyz_to_rgb</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>z2</name></expr></argument>, <argument><expr><name>red</name></expr></argument>, <argument><expr><name>green</name></expr></argument>, <argument><expr><name>blue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_color_rgb_to_xyy</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>blue</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>y2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x2</name></decl>, <decl><type ref="prev"/><name>z2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_color_rgb_to_xyz</name><argument_list>(<argument><expr><name>red</name></expr></argument>, <argument><expr><name>green</name></expr></argument>, <argument><expr><name>blue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>x2</name> <operator>/</operator> <operator>(</operator><name>x2</name> <operator>+</operator> <operator>*</operator><name>y2</name> <operator>+</operator> <name>z2</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <operator>*</operator><name>y2</name> <operator>/</operator> <operator>(</operator><name>x2</name> <operator>+</operator> <operator>*</operator><name>y2</name> <operator>+</operator> <name>z2</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>ALLEGRO_COLOR</name></type> <name>al_color_xyy</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_color_xyy_to_rgb</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>double</name></type> <name>al_color_distance_ciede2000</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color1</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color2</name></decl></parameter>)</parameter_list> <block>{<block_content>



<decl_stmt><decl><type><name>float</name></type> <name>l1</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>l2</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_color_rgb_to_lab</name><argument_list>(<argument><expr><name><name>color1</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color1</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color1</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_color_rgb_to_lab</name><argument_list>(<argument><expr><name><name>color2</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color2</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color2</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>pi</name> <init>= <expr><name>ALLEGRO_PI</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>dl</name> <init>= <expr><name>l1</name> <operator>-</operator> <name>l2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>ml</name> <init>= <expr><operator>(</operator><name>l1</name> <operator>+</operator> <name>l2</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>c1</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>a1</name> <operator>*</operator> <name>a1</name> <operator>+</operator> <name>b1</name> <operator>*</operator> <name>b1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>c2</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>a2</name> <operator>*</operator> <name>a2</name> <operator>+</operator> <name>b2</name> <operator>*</operator> <name>b2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>mc</name> <init>= <expr><operator>(</operator><name>c1</name> <operator>+</operator> <name>c2</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>fac</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><call><name>pow</name><argument_list>(<argument><expr><name>mc</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><call><name>pow</name><argument_list>(<argument><expr><name>mc</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>tf7</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>g</name> <init>= <expr><literal type="number">0.5</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>fac</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>a1</name> <operator>*=</operator> <literal type="number">1</literal> <operator>+</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>*=</operator> <literal type="number">1</literal> <operator>+</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>a1</name> <operator>*</operator> <name>a1</name> <operator>+</operator> <name>b1</name> <operator>*</operator> <name>b1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>a2</name> <operator>*</operator> <name>a2</name> <operator>+</operator> <name>b2</name> <operator>*</operator> <name>b2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>dc</name> <init>= <expr><name>c2</name> <operator>-</operator> <name>c1</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>mc</name> <operator>=</operator> <operator>(</operator><name>c1</name> <operator>+</operator> <name>c2</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fac</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><call><name>pow</name><argument_list>(<argument><expr><name>mc</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><call><name>pow</name><argument_list>(<argument><expr><name>mc</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>tf7</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>h1</name> <init>= <expr><call><name>fmod</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>pi</name> <operator>+</operator> <call><name>atan2</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>pi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>h2</name> <init>= <expr><call><name>fmod</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>pi</name> <operator>+</operator> <call><name>atan2</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>pi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>dh</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>mh</name> <init>= <expr><name>h1</name> <operator>+</operator> <name>h2</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>*</operator> <name>c2</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dh</name> <operator>=</operator> <name>h2</name> <operator>-</operator> <name>h1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dh</name> <operator>&gt;</operator> <name>pi</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dh</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name>pi</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dh</name> <operator>&lt;</operator> <operator>-</operator><name>pi</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dh</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>pi</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>h1</name> <operator>-</operator> <name>h2</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>pi</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mh</name> <operator>=</operator> <operator>(</operator><name>h1</name> <operator>+</operator> <name>h2</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>h1</name> <operator>+</operator> <name>h2</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>pi</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mh</name> <operator>=</operator> <operator>(</operator><name>h1</name> <operator>+</operator> <name>h2</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>pi</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>mh</name> <operator>=</operator> <operator>(</operator><name>h1</name> <operator>+</operator> <name>h2</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>pi</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dh</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>c1</name> <operator>*</operator> <name>c2</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>dh</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>t</name> <init>= <expr><literal type="number">1</literal> <operator>-</operator> <literal type="number">0.17</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>mh</name> <operator>-</operator> <name>pi</name> <operator>/</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.24</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>mh</name></expr></argument>)</argument_list></call> <operator>+</operator>
<literal type="number">0.32</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <name>mh</name> <operator>+</operator> <name>pi</name> <operator>/</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0.2</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <name>mh</name> <operator>-</operator> <name>pi</name> <operator>*</operator> <literal type="number">7</literal> <operator>/</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>mls</name> <init>= <expr><call><name>pow</name><argument_list>(<argument><expr><name>ml</name> <operator>-</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sl</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1.5</literal> <operator>*</operator> <name>mls</name> <operator>/</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">0.002</literal> <operator>+</operator> <name>mls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sc</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">4.5</literal> <operator>*</operator> <name>mc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sh</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1.5</literal> <operator>*</operator> <name>mc</name> <operator>*</operator> <name>t</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>rt</name> <init>= <expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>fac</name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>pi</name> <operator>/</operator> <literal type="number">3</literal> <operator>*</operator>
<call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><call><name>pow</name><argument_list>(<argument><expr><name>mh</name> <operator>/</operator> <name>pi</name> <operator>*</operator> <literal type="number">36</literal> <operator>/</operator> <literal type="number">5</literal> <operator>-</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><call><name>pow</name><argument_list>(<argument><expr><name>dl</name> <operator>/</operator> <name>sl</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>pow</name><argument_list>(<argument><expr><name>dc</name> <operator>/</operator> <name>sc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>pow</name><argument_list>(<argument><expr><name>dh</name> <operator>/</operator> <name>sh</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>rt</name> <operator>*</operator> <name>dc</name> <operator>/</operator> <name>sc</name> <operator>*</operator> <name>dh</name> <operator>/</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>al_is_color_valid</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>color</name><operator>.</operator><name>r</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>color</name><operator>.</operator><name>g</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>color</name><operator>.</operator><name>b</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>color</name><operator>.</operator><name>r</name></name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>color</name><operator>.</operator><name>g</name></name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>color</name><operator>.</operator><name>b</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


</unit>
