<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\addons\memfile\memfile.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_memfile.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_FILE_MEMFILE</name></name></type> <name>ALLEGRO_FILE_MEMFILE</name>;</typedef>

<struct>struct <name>ALLEGRO_FILE_MEMFILE</name> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>readable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>writable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>eof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mem</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>memfile_fclose</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><call><name>al_get_file_userdata</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>memfile_fread</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE_MEMFILE</name> <modifier>*</modifier></type><name>mf</name> <init>= <expr><call><name>al_get_file_userdata</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mf</name><operator>-&gt;</operator><name>readable</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>EPERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>mf</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>size</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>mf</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>mf</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>mf</name><operator>-&gt;</operator><name>mem</name></name> <operator>+</operator> <name><name>mf</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt> 

<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>memfile_fwrite</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE_MEMFILE</name> <modifier>*</modifier></type><name>mf</name> <init>= <expr><call><name>al_get_file_userdata</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mf</name><operator>-&gt;</operator><name>writable</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>EPERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>mf</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>mf</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>mf</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>mem</name></name> <operator>+</operator> <name><name>mf</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>memfile_fflush</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>fp</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>memfile_ftell</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE_MEMFILE</name> <modifier>*</modifier></type><name>mf</name> <init>= <expr><call><name>al_get_file_userdata</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>mf</name><operator>-&gt;</operator><name>pos</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>memfile_fseek</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE_MEMFILE</name> <modifier>*</modifier></type><name>mf</name> <init>= <expr><call><name>al_get_file_userdata</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>whence</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_SEEK_SET</name></expr>:</case>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_SEEK_CUR</name></expr>:</case>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>mf</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_SEEK_END</name></expr>:</case>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>mf</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name><name>mf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>mf</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type> <name>memfile_feof</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE_MEMFILE</name> <modifier>*</modifier></type><name>mf</name> <init>= <expr><call><name>al_get_file_userdata</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>mf</name><operator>-&gt;</operator><name>eof</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>memfile_ferror</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>fp</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>memfile_ferrmsg</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>fp</name></expr>;</expr_stmt>
<return>return <expr><literal type="string">""</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>memfile_fclearerr</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE_MEMFILE</name> <modifier>*</modifier></type><name>mf</name> <init>= <expr><call><name>al_get_file_userdata</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>off_t</name></type> <name>memfile_fsize</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE_MEMFILE</name> <modifier>*</modifier></type><name>mf</name> <init>= <expr><call><name>al_get_file_userdata</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>mf</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ALLEGRO_FILE_INTERFACE</name></name></type> <name>memfile_vtable</name> <init>= <expr><block>{
<expr><name>NULL</name></expr>, 
<expr><name>memfile_fclose</name></expr>,
<expr><name>memfile_fread</name></expr>,
<expr><name>memfile_fwrite</name></expr>,
<expr><name>memfile_fflush</name></expr>,
<expr><name>memfile_ftell</name></expr>,
<expr><name>memfile_fseek</name></expr>,
<expr><name>memfile_feof</name></expr>,
<expr><name>memfile_ferror</name></expr>,
<expr><name>memfile_ferrmsg</name></expr>,
<expr><name>memfile_fclearerr</name></expr>,
<expr><name>NULL</name></expr>, 
<expr><name>memfile_fsize</name></expr>
}</block></expr></init></decl>;</decl_stmt>



<function><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>al_open_memfile</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>memfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_FILE_MEMFILE</name> <modifier>*</modifier></type><name>userdata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>userdata</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_FILE_MEMFILE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>userdata</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>userdata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>userdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>userdata</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>userdata</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>userdata</name><operator>-&gt;</operator><name>mem</name></name> <operator>=</operator> <name>mem</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>userdata</name><operator>-&gt;</operator><name>readable</name></name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>userdata</name><operator>-&gt;</operator><name>writable</name></name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="char">'W'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>memfile</name> <operator>=</operator> <call><name>al_create_file_handle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>memfile_vtable</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>memfile</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>memfile</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>uint32_t</name></type> <name>al_get_allegro_memfile_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>ALLEGRO_VERSION_INT</name></expr>;</return>
</block_content>}</block></function>


</unit>
