<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\tools\x11\xf2pcx.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro5.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCAN_DEPEND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xutil.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>argv0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Usage: %s [OPTIONS]\n\n"</literal></expr></argument>, <argument><expr><name>argv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" -f FONTNAME Font name pattern ('*' by default).\n"</literal>
<literal type="string">" -o FILENAME Output file name ('font.pcx' by default).\n"</literal>
<literal type="string">" -r NUM-NUM Character range, default = 0x20-0xff.\n"</literal>
<literal type="string">" -c COLOR Character color (default 000000000 -- black).\n"</literal>
<literal type="string">" -b COLOR Background color (default 255255255 -- white).\n"</literal>
<literal type="string">" -g COLOR Grid color (default 255000255 -- magenta).\n"</literal>
<literal type="string">" Colors are specified as RRRGGGBBB values,\n"</literal>
<literal type="string">" with each RRR, GGG and BBB in the range [0, 255].\n"</literal>
<literal type="string">" -h This help.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"Find the font you want to convert using xlsfonts or xfontsel.\n\n"</literal>
<literal type="string">"Example 1:\n"</literal>
<literal type="string">"bash&gt; xlsfonts -fn '*' | less\n"</literal>
<literal type="string">"bash&gt; %s -f '-adobe-courier-medium-r-normal--34-*'\n"</literal>
<literal type="string">"bash&gt; grabber\n\n"</literal>
<literal type="string">"In grabber, create a new font 'Object|New|Font'. Use 'Object|Grab'\n"</literal>
<literal type="string">"on this object and choose the pcx file with the font (font.pcx).\n\n"</literal>
<literal type="string">"Example 2:\n"</literal>
<literal type="string">"./xf2pcx -f '-*-clearlyu-*-*-*-*-17-*-*-*-p--iso10646-1' -r 0x2800-0x28ff -o braille.pcx\n\n"</literal>
<literal type="string">"Writes the Braille alphabet into braille.pcx.\n"</literal></expr></argument>, <argument><expr><name>argv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fontname</name> <init>= <expr><literal type="string">"*"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><literal type="string">"font.pcx"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start_char</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>, <decl><type ref="prev"/><name>end_char</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ccolor</name> <init>= <expr><literal type="number">000000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bcolor</name> <init>= <expr><literal type="number">255255255</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gcolor</name> <init>= <expr><literal type="number">255000255</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>screen_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>default_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Window</name></type> <name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Font</name></type> <name>font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GC</name></type> <name>gc</name></decl>, <decl><type ref="prev"/><name>gc2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Pixmap</name></type> <name>pixmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XImage</name> <modifier>*</modifier></type><name>image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XCharStruct</name></type> <name>overall</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitmap_width</name></decl>, <decl><type ref="prev"/><name>bitmap_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_ascent</name></decl>, <decl><type ref="prev"/><name>max_descent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_width</name></decl>, <decl><type ref="prev"/><name>max_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>opt</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>cx</name></decl>, <decl><type ref="prev"/><name>cy</name></decl>, <decl><type ref="prev"/><name>sx</name></decl>, <decl><type ref="prev"/><name>sy</name></decl>, <decl><type ref="prev"/><name>lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>black</name></decl>, <decl><type ref="prev"/><name>white</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGB</name></type> <name><name>palette</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>install_allegro</name><argument_list>(<argument><expr><name>SYSTEM_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errno</name></expr></argument>, <argument><expr><name>atexit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>opterr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"f:o:z:c:b:g:r:h"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>opt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><name>fontname</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><name>ccolor</name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><name>bcolor</name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<expr_stmt><expr><name>gcolor</name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<expr_stmt><expr><name>start_char</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end_char</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: unrecognized option -- '%c'\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>optopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: try '%s -h' for more information\n"</literal></expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></while>


<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>XOpenDisplay</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>display</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: XOpenDisplay failed\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>screen_number</name> <operator>=</operator> <call><name>XDefaultScreen</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>default_depth</name> <operator>=</operator> <call><name>XDefaultDepth</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>screen_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>window</name> <operator>=</operator> <call><name>XDefaultRootWindow</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>XLoadFont</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>fontname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>val_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XGCValues</name></type> <name>val_bits</name></decl>;</decl_stmt>
<expr_stmt><expr><name>val_mask</name> <operator>=</operator> <name>GCForeground</name> <operator>|</operator> <name>GCBackground</name> <operator>|</operator> <name>GCFont</name> <operator>|</operator> <name>GCFunction</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val_bits</name><operator>.</operator><name>function</name></name> <operator>=</operator> <name>GXcopy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val_bits</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <name>white</name> <operator>=</operator> <call><name>WhitePixel</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>screen_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val_bits</name><operator>.</operator><name>background</name></name> <operator>=</operator> <name>black</name> <operator>=</operator> <call><name>BlackPixel</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>screen_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val_bits</name><operator>.</operator><name>font</name></name> <operator>=</operator> <name>font</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gc</name> <operator>=</operator> <call><name>XCreateGC</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>val_mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val_mask</name> <operator>=</operator> <name>GCForeground</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val_bits</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <name>black</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gc2</name> <operator>=</operator> <call><name>XCreateGC</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>val_mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<block>{<block_content>
<decl_stmt><decl><type><name>XFontStruct</name> <modifier>*</modifier></type><name>xfs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>
<expr_stmt><expr><name>xfs</name> <operator>=</operator> <call><name>XQueryFont</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>max_ascent</name> <operator>=</operator> <name><name>xfs</name><operator>-&gt;</operator><name>ascent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>max_descent</name> <operator>=</operator> <name><name>xfs</name><operator>-&gt;</operator><name>descent</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xfs</name><operator>-&gt;</operator><name>min_byte1</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>xfs</name><operator>-&gt;</operator><name>max_byte1</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min</name> <operator>=</operator> <name><name>xfs</name><operator>-&gt;</operator><name>min_char_or_byte2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>xfs</name><operator>-&gt;</operator><name>max_char_or_byte2</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>min</name> <operator>=</operator> <operator>(</operator><name><name>xfs</name><operator>-&gt;</operator><name>min_byte1</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>xfs</name><operator>-&gt;</operator><name>min_char_or_byte2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>max</name> <operator>=</operator> <operator>(</operator><name><name>xfs</name><operator>-&gt;</operator><name>max_byte1</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>xfs</name><operator>-&gt;</operator><name>max_char_or_byte2</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>start_char</name> <argument_list type="generic">&lt; <argument><expr><name>min</name> <operator>||</operator> <name>end_char</name></expr></argument> &gt;</argument_list></name> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"You specified characters %04x-%04x, but this font "</literal>
<literal type="string">"only has the range %04x-%04x\n"</literal></expr></argument>, <argument><expr><name>start_char</name></expr></argument>, <argument><expr><name>end_char</name></expr></argument>,
<argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XFreeFontInfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>xfs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>



<expr_stmt><expr><name>max_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lines</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>end_char</name> <operator>-</operator> <name>start_char</name><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>cy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cy</name> <operator>&lt;</operator> <name>lines</name></expr>;</condition> <incr><expr><name>cy</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>cx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cx</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>start_char</name> <operator>+</operator> <name>cy</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>cx</name> <operator>&lt;=</operator> <name>end_char</name></expr>;</condition> <incr><expr><name>cx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>, <decl><type ref="prev"/><name>ascent</name></decl>, <decl><type ref="prev"/><name>descent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XChar2b</name></type> <name><name>string</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte1</name> <operator>=</operator> <operator>(</operator><name>start_char</name> <operator>+</operator> <name>cy</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>cx</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte2</name> <operator>=</operator> <operator>(</operator><name>start_char</name> <operator>+</operator> <name>cy</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>cx</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XQueryTextExtents16</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ascent</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>descent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>overall</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <name>max_width</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_width</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max_ascent</name> <operator>&lt;</operator> <name><name>overall</name><operator>.</operator><name>ascent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_ascent</name> <operator>=</operator> <name><name>overall</name><operator>.</operator><name>ascent</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>max_descent</name> <operator>&lt;</operator> <name><name>overall</name><operator>.</operator><name>descent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_descent</name> <operator>=</operator> <name><name>overall</name><operator>.</operator><name>descent</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>max_height</name> <operator>=</operator> <name>max_ascent</name> <operator>+</operator> <name>max_descent</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmap_width</name> <operator>=</operator> <operator>(</operator><name>max_width</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bitmap_height</name> <operator>=</operator> <operator>(</operator><name>max_height</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>lines</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name>create_bitmap</name><argument_list>(<argument><expr><name>bitmap_width</name></expr></argument>, <argument><expr><name>bitmap_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bitmap</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: can not create bitmap\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>clear_to_color</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>sy</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>cy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cy</name> <operator>&lt;</operator> <name>lines</name></expr>;</condition> <incr><expr><name>cy</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>cx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cx</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>start_char</name> <operator>+</operator> <name>cy</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>cx</name> <operator>&lt;=</operator> <name>end_char</name></expr>;</condition> <incr><expr><name>cx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>, <decl><type ref="prev"/><name>ascent</name></decl>, <decl><type ref="prev"/><name>descent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XChar2b</name></type> <name><name>string</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte1</name> <operator>=</operator> <operator>(</operator><name>start_char</name> <operator>+</operator> <name>cy</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>cx</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte2</name> <operator>=</operator> <operator>(</operator><name>start_char</name> <operator>+</operator> <name>cy</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>cx</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XQueryTextExtents16</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ascent</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>descent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>overall</name><operator>.</operator><name>width</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>overall</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>pixmap</name> <operator>=</operator>
<call><name>XCreatePixmap</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>overall</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name>max_height</name></expr></argument>,
<argument><expr><name>default_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>XFillRectangle</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>pixmap</name></expr></argument>, <argument><expr><name>gc2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>overall</name><operator>.</operator><name>width</name></name></expr></argument>,
<argument><expr><name>max_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XDrawImageString16</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>pixmap</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max_ascent</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>image</name> <operator>=</operator>
<call><name>XGetImage</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>pixmap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>overall</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name>max_height</name></expr></argument>,
<argument><expr><name>AllPlanes</name></expr></argument>, <argument><expr><name>ZPixmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>image</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: can not get image\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>max_height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>overall</name><operator>.</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>XGetPixel</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>white</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putpixel</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>sx</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>sy</name> <operator>+</operator> <name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putpixel</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>sx</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>sy</name> <operator>+</operator> <name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for></block_content></block></for>

<expr_stmt><expr><call><name>XDestroyImage</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFreePixmap</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>pixmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sx</name> <operator>+=</operator> <name>max_width</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>sy</name> <operator>+=</operator> <name>max_height</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>palette</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <name><name>palette</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <name><name>palette</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLAMP</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v / 4) &gt; 63) ? 63 : (v / 4))</cpp:value></cpp:define>
<expr_stmt><expr><name><name>palette</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <call><name>CLAMP</name><argument_list>(<argument><expr><name>bcolor</name> <operator>/</operator> <literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>palette</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <call><name>CLAMP</name><argument_list>(<argument><expr><operator>(</operator><name>bcolor</name> <operator>%</operator> <literal type="number">1000000</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>palette</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <call><name>CLAMP</name><argument_list>(<argument><expr><name>bcolor</name> <operator>%</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>palette</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <call><name>CLAMP</name><argument_list>(<argument><expr><name>ccolor</name> <operator>/</operator> <literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>palette</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <call><name>CLAMP</name><argument_list>(<argument><expr><operator>(</operator><name>ccolor</name> <operator>%</operator> <literal type="number">1000000</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>palette</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <call><name>CLAMP</name><argument_list>(<argument><expr><name>ccolor</name> <operator>%</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>palette</name><index>[<expr><literal type="number">255</literal></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <call><name>CLAMP</name><argument_list>(<argument><expr><name>gcolor</name> <operator>/</operator> <literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>palette</name><index>[<expr><literal type="number">255</literal></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <call><name>CLAMP</name><argument_list>(<argument><expr><operator>(</operator><name>gcolor</name> <operator>%</operator> <literal type="number">1000000</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>palette</name><index>[<expr><literal type="number">255</literal></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <call><name>CLAMP</name><argument_list>(<argument><expr><name>gcolor</name> <operator>%</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CLAMP</name></cpp:undef>
<expr_stmt><expr><call><name>save_pcx</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>palette</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>destroy_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFreeGC</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFreeGC</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>gc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XUnloadFont</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XCloseDisplay</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
