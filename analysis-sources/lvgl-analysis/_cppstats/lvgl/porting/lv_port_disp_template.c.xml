<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\porting\lv_port_disp_template.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_port_disp_template.h"</cpp:file></cpp:include>

static void disp_init(void);

static void disp_flush(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p);

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GPU</name></expr></cpp:if>

static void gpu_blend(lv_disp_drv_t * disp_drv, lv_color_t * dest, const lv_color_t * src, uint32_t length, lv_opa_t opa);

static void gpu_fill(lv_disp_drv_t * disp_drv, lv_color_t * dest_buf, lv_coord_t dest_width,

const lv_area_t * fill_area, lv_color_t color);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

void lv_port_disp_init(void)

{

disp_init();

static lv_disp_buf_t disp_buf_1;

static lv_color_t buf1_1[LV_HOR_RES_MAX * 10]; 

lv_disp_buf_init(&amp;disp_buf_1, buf1_1, NULL, LV_HOR_RES_MAX * 10); 

static lv_disp_buf_t disp_buf_2;

static lv_color_t buf2_1[LV_HOR_RES_MAX * 10]; 

static lv_color_t buf2_2[LV_HOR_RES_MAX * 10]; 

lv_disp_buf_init(&amp;disp_buf_2, buf2_1, buf2_2, LV_HOR_RES_MAX * 10); 

static lv_disp_buf_t disp_buf_3;

static lv_color_t buf3_1[LV_HOR_RES_MAX * LV_VER_RES_MAX]; 

static lv_color_t buf3_2[LV_HOR_RES_MAX * LV_VER_RES_MAX]; 

lv_disp_buf_init(&amp;disp_buf_3, buf3_1, buf3_2, LV_HOR_RES_MAX * LV_VER_RES_MAX); 

lv_disp_drv_t disp_drv; 

lv_disp_drv_init(&amp;disp_drv); 

disp_drv.hor_res = 480;

disp_drv.ver_res = 320;

disp_drv.flush_cb = disp_flush;

disp_drv.buffer = &amp;disp_buf_2;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GPU</name></expr></cpp:if>

disp_drv.gpu_blend_cb = gpu_blend;

disp_drv.gpu_fill_cb = gpu_fill;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

lv_disp_drv_register(&amp;disp_drv);

}

static void disp_init(void)

{

}

static void disp_flush(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)

{

int32_t x;

int32_t y;

for(y = area-&gt;y1; y &lt;= area-&gt;y2; y++) {

for(x = area-&gt;x1; x &lt;= area-&gt;x2; x++) {

color_p++;

}

}

lv_disp_flush_ready(disp_drv);

}

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GPU</name></expr></cpp:if>

static void gpu_blend(lv_disp_drv_t * disp_drv, lv_color_t * dest, const lv_color_t * src, uint32_t length, lv_opa_t opa)

{

uint32_t i;

for(i = 0; i &lt; length; i++) {

dest[i] = lv_color_mix(dest[i], src[i], opa);

}

}

static void gpu_fill(lv_disp_drv_t * disp_drv, lv_color_t * dest_buf, lv_coord_t dest_width,

const lv_area_t * fill_area, lv_color_t color)

{

int32_t x, y;

dest_buf += dest_width * fill_area-&gt;y1; 

for(y = fill_area-&gt;y1; y &lt;= fill_area-&gt;y2; y++) {

for(x = fill_area-&gt;x1; x &lt;= fill_area-&gt;x2; x++) {

dest_buf[x] = color;

}

dest_buf+=dest_width; 

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<typedef>typedef <type><name>int</name></type> <name>keep_pedantic_happy</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
