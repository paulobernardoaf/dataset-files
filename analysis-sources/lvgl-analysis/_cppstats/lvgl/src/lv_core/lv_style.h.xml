<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_core\lv_style.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_font/lv_font.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_color.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_area.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_anim.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_RADIUS_CIRCLE</name></cpp:macro> <cpp:value>(LV_COORD_MAX)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_STYLE_DEGUG_SENTINEL_VALUE</name></cpp:macro> <cpp:value>0x12345678</cpp:value></cpp:define>

<expr_stmt><expr><call><name>LV_EXPORT_CONST_INT</name><argument_list>(<argument><expr><name>LV_RADIUS_CIRCLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<enum>enum <block>{

<decl><name>LV_BORDER_NONE</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,

<decl><name>LV_BORDER_BOTTOM</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,

<decl><name>LV_BORDER_TOP</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,

<decl><name>LV_BORDER_LEFT</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,

<decl><name>LV_BORDER_RIGHT</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,

<decl><name>LV_BORDER_FULL</name> <init>= <expr><literal type="number">0x0F</literal></expr></init></decl>,

<decl><name>LV_BORDER_INTERNAL</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>, 

}</block>;</enum>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_border_part_t</name>;</typedef>

<enum>enum <block>{

<decl><name>LV_SHADOW_BOTTOM</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>LV_SHADOW_FULL</name></decl>, 

}</block>;</enum>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_shadow_type_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>glass</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<struct>struct

<block>{

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>main_color</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>grad_color</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>radius</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl>;</decl_stmt> 

<struct>struct

<block>{

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>color</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_border_part_t</name></type> <name>part</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl>;</decl_stmt> 

}</block> <decl><name>border</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_shadow_type_t</name></type> <name>type</name></decl>;</decl_stmt> 

}</block> <decl><name>shadow</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>bottom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>right</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>inner</name></decl>;</decl_stmt>

}</block> <decl><name>padding</name></decl>;</struct>

}</block> <decl><name>body</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>color</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>sel_color</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>letter_space</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>line_space</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl>;</decl_stmt> 

}</block> <decl><name>text</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>color</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>intense</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl>;</decl_stmt> 

}</block> <decl><name>image</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>rounded</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

}</block> <decl><name>line</name></decl>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_DEBUG</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ASSERT_STYLE</name></expr></cpp:if>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>debug_sentinel</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>lv_style_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>lv_style_t</name></type> <name>style_start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_style_t</name></type> <name>style_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>style_anim</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_anim_ready_cb_t</name></type> <name>ready_cb</name></decl>;</decl_stmt>

}</block></struct></type> <name>lv_style_anim_dsc_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>lv_style_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_style_copy</name><parameter_list>(<parameter><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_style_mix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>ratio</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<function_decl><type><name>void</name></type> <name>lv_style_anim_init</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_style_anim_set_styles</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>to_anim</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>end</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_style_anim_set_time</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>duration</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>delay</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lv_anim_set_time</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_style_anim_set_ready_cb</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>lv_anim_ready_cb_t</name></type> <name>ready_cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_style_anim_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name> <init>= <expr><operator>(</operator><name>lv_style_anim_dsc_t</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>var</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dsc</name><operator>-&gt;</operator><name>ready_cb</name></name> <operator>=</operator> <name>ready_cb</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_style_anim_set_playback</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>wait_time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lv_anim_set_playback</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>wait_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_style_anim_clear_playback</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lv_anim_clear_playback</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_style_anim_set_repeat</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>wait_time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lv_anim_set_repeat</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>wait_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_style_anim_clear_repeat</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lv_anim_clear_repeat</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_style_anim_create</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lv_anim_create</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>lv_style_t</name></type> <name>lv_style_scr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>lv_style_t</name></type> <name>lv_style_transp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>lv_style_t</name></type> <name>lv_style_transp_fit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>lv_style_t</name></type> <name>lv_style_transp_tight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>lv_style_t</name></type> <name>lv_style_plain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>lv_style_t</name></type> <name>lv_style_plain_color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>lv_style_t</name></type> <name>lv_style_pretty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>lv_style_t</name></type> <name>lv_style_pretty_color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>lv_style_t</name></type> <name>lv_style_btn_rel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>lv_style_t</name></type> <name>lv_style_btn_pr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>lv_style_t</name></type> <name>lv_style_btn_tgl_rel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>lv_style_t</name></type> <name>lv_style_btn_tgl_pr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>lv_style_t</name></type> <name>lv_style_btn_ina</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_STYLE_CREATE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>copy_p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static lv_style_t name; lv_style_copy(&amp;name, copy_p == NULL ? &amp;lv_style_plain : copy_p);</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
