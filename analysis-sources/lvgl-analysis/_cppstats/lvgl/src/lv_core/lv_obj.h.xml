<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_core\lv_obj.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_CONF_INCLUDE_SIMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_conf.h"</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../lv_conf.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_style.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_area.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_ll.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_color.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_bidi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_hal/lv_hal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_HOR_RES_MAX</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>LV_VER_RES_MAX</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"LittlevGL: LV_HOR_RES_MAX and LV_VER_RES_MAX must be greater than 0"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"LittlevGL: LV_ANTIALIAS can be only 0 or 1"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_MAX_ANCESTOR_NUM</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_EXT_CLICK_AREA_OFF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_EXT_CLICK_AREA_TINY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_EXT_CLICK_AREA_FULL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<struct_decl>struct <name>_lv_obj_t</name>;</struct_decl>

<enum>enum <block>{

<decl><name>LV_DESIGN_DRAW_MAIN</name></decl>, 

<decl><name>LV_DESIGN_DRAW_POST</name></decl>, 

<decl><name>LV_DESIGN_COVER_CHK</name></decl>, 

}</block>;</enum>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_design_mode_t</name>;</typedef>

<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>lv_design_cb_t</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_obj_t</name></name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask_p</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<enum>enum <block>{

<decl><name>LV_EVENT_PRESSED</name></decl>, 

<decl><name>LV_EVENT_PRESSING</name></decl>, 

<decl><name>LV_EVENT_PRESS_LOST</name></decl>, 

<decl><name>LV_EVENT_SHORT_CLICKED</name></decl>, 

<decl><name>LV_EVENT_LONG_PRESSED</name></decl>, 

<decl><name>LV_EVENT_LONG_PRESSED_REPEAT</name></decl>, 

<decl><name>LV_EVENT_CLICKED</name></decl>, 

<decl><name>LV_EVENT_RELEASED</name></decl>, 

<decl><name>LV_EVENT_DRAG_BEGIN</name></decl>, 

<decl><name>LV_EVENT_DRAG_END</name></decl>,

<decl><name>LV_EVENT_DRAG_THROW_BEGIN</name></decl>,

<decl><name>LV_EVENT_KEY</name></decl>,

<decl><name>LV_EVENT_FOCUSED</name></decl>,

<decl><name>LV_EVENT_DEFOCUSED</name></decl>,

<decl><name>LV_EVENT_VALUE_CHANGED</name></decl>, 

<decl><name>LV_EVENT_INSERT</name></decl>,

<decl><name>LV_EVENT_REFRESH</name></decl>,

<decl><name>LV_EVENT_APPLY</name></decl>, 

<decl><name>LV_EVENT_CANCEL</name></decl>, 

<decl><name>LV_EVENT_DELETE</name></decl>, 

}</block>;</enum>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_event_t</name>;</typedef> 

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>lv_event_cb_t</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_obj_t</name></name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_event_t</name></type> <name>event</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<enum>enum <block>{

<decl><name>LV_SIGNAL_CLEANUP</name></decl>, 

<decl><name>LV_SIGNAL_CHILD_CHG</name></decl>, 

<decl><name>LV_SIGNAL_CORD_CHG</name></decl>, 

<decl><name>LV_SIGNAL_PARENT_SIZE_CHG</name></decl>, 

<decl><name>LV_SIGNAL_STYLE_CHG</name></decl>, 

<decl><name>LV_SIGNAL_BASE_DIR_CHG</name></decl>, 

<decl><name>LV_SIGNAL_REFR_EXT_DRAW_PAD</name></decl>, 

<decl><name>LV_SIGNAL_GET_TYPE</name></decl>, 

<decl><name>LV_SIGNAL_PRESSED</name></decl>, 

<decl><name>LV_SIGNAL_PRESSING</name></decl>, 

<decl><name>LV_SIGNAL_PRESS_LOST</name></decl>, 

<decl><name>LV_SIGNAL_RELEASED</name></decl>, 

<decl><name>LV_SIGNAL_LONG_PRESS</name></decl>, 

<decl><name>LV_SIGNAL_LONG_PRESS_REP</name></decl>, 

<decl><name>LV_SIGNAL_DRAG_BEGIN</name></decl>, 

<decl><name>LV_SIGNAL_DRAG_END</name></decl>,

<decl><name>LV_SIGNAL_FOCUS</name></decl>,

<decl><name>LV_SIGNAL_DEFOCUS</name></decl>,

<decl><name>LV_SIGNAL_CONTROL</name></decl>,

<decl><name>LV_SIGNAL_GET_EDITABLE</name></decl>,

}</block>;</enum>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_signal_t</name>;</typedef>

<typedef>typedef <function_decl><type><name>lv_res_t</name></type> (<modifier>*</modifier><name>lv_signal_cb_t</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_obj_t</name></name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<enum>enum <block>{

<decl><name>LV_ALIGN_CENTER</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>LV_ALIGN_IN_TOP_LEFT</name></decl>,

<decl><name>LV_ALIGN_IN_TOP_MID</name></decl>,

<decl><name>LV_ALIGN_IN_TOP_RIGHT</name></decl>,

<decl><name>LV_ALIGN_IN_BOTTOM_LEFT</name></decl>,

<decl><name>LV_ALIGN_IN_BOTTOM_MID</name></decl>,

<decl><name>LV_ALIGN_IN_BOTTOM_RIGHT</name></decl>,

<decl><name>LV_ALIGN_IN_LEFT_MID</name></decl>,

<decl><name>LV_ALIGN_IN_RIGHT_MID</name></decl>,

<decl><name>LV_ALIGN_OUT_TOP_LEFT</name></decl>,

<decl><name>LV_ALIGN_OUT_TOP_MID</name></decl>,

<decl><name>LV_ALIGN_OUT_TOP_RIGHT</name></decl>,

<decl><name>LV_ALIGN_OUT_BOTTOM_LEFT</name></decl>,

<decl><name>LV_ALIGN_OUT_BOTTOM_MID</name></decl>,

<decl><name>LV_ALIGN_OUT_BOTTOM_RIGHT</name></decl>,

<decl><name>LV_ALIGN_OUT_LEFT_TOP</name></decl>,

<decl><name>LV_ALIGN_OUT_LEFT_MID</name></decl>,

<decl><name>LV_ALIGN_OUT_LEFT_BOTTOM</name></decl>,

<decl><name>LV_ALIGN_OUT_RIGHT_TOP</name></decl>,

<decl><name>LV_ALIGN_OUT_RIGHT_MID</name></decl>,

<decl><name>LV_ALIGN_OUT_RIGHT_BOTTOM</name></decl>,

}</block>;</enum>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_align_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_OBJ_REALIGN</name></expr></cpp:if>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_lv_obj_t</name></name> <modifier>*</modifier></type> <name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>xofs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>yofs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_align_t</name></type> <name>align</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>auto_realign</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>origo_align</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

}</block></struct></type> <name>lv_reailgn_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <block>{

<decl><name>LV_DRAG_DIR_HOR</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>, 

<decl><name>LV_DRAG_DIR_VER</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>, 

<decl><name>LV_DRAG_DIR_ALL</name> <init>= <expr><literal type="number">0x3</literal></expr></init></decl>, 

}</block>;</enum>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_drag_dir_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_lv_obj_t</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>_lv_obj_t</name></name> <modifier>*</modifier></type> <name>par</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_ll_t</name></type> <name>child_ll</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>coords</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_event_cb_t</name></type> <name>event_cb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_signal_cb_t</name></type> <name>signal_cb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_design_cb_t</name></type> <name>design_cb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>ext_attr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_p</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>group_p</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_EXT_CLICK_AREA</name> <operator>==</operator> <name>LV_EXT_CLICK_AREA_TINY</name></expr></cpp:if>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ext_click_pad_hor</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ext_click_pad_ver</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_EXT_CLICK_AREA</name> <operator>==</operator> <name>LV_EXT_CLICK_AREA_FULL</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>ext_click_pad</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>click</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>drag</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>drag_throw</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>drag_parent</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>hidden</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>top</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>opa_scale_en</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>parent_event</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_drag_dir_t</name></type> <name>drag_dir</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_bidi_dir_t</name></type> <name>base_dir</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>reserved</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>protect</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>ext_draw_pad</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_OBJ_REALIGN</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_reailgn_t</name></type> <name>realign</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_USER_DATA</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_obj_user_data_t</name></type> <name>user_data</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>lv_obj_t</name>;</typedef>

<enum>enum <block>{

<decl><name>LV_PROTECT_NONE</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,

<decl><name>LV_PROTECT_CHILD_CHG</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>, 

<decl><name>LV_PROTECT_PARENT</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>, 

<decl><name>LV_PROTECT_POS</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>, 

<decl><name>LV_PROTECT_FOLLOW</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>, 

<decl><name>LV_PROTECT_PRESS_LOST</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>, 

<decl><name>LV_PROTECT_CLICK_FOCUS</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>, 

}</block>;</enum>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_protect_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>type</name><index>[<expr><name>LV_MAX_ANCESTOR_NUM</name></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>lv_obj_type_t</name>;</typedef>

<function_decl><type><name>void</name></type> <name>lv_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ENABLE_GC</name> <operator>||</operator> <operator>!</operator><name>LV_MEM_CUSTOM</name></expr></cpp:if>

<function_decl><type><name>void</name></type> <name>lv_deinit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_obj_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_res_t</name></type> <name>lv_obj_del</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_del_async</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_obj_t</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_clean</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_invalidate_area</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>area</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_invalidate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_parent</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>parent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_move_foreground</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_move_background</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_pos</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_x</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_y</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_size</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_width</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_height</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_align</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>lv_align_t</name></type> <name>align</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x_mod</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y_mod</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_align_origo</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>lv_align_t</name></type> <name>align</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x_mod</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y_mod</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_realign</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_auto_realign</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_ext_click_area</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>bottom</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_refresh_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_report_style_mod</name><parameter_list>(<parameter><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_hidden</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_click</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_top</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_drag</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_drag_dir</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_drag_dir_t</name></type> <name>drag_dir</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_drag_throw</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_drag_parent</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_parent_event</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_base_dir</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_bidi_dir_t</name></type> <name>dir</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_opa_scale_enable</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_opa_scale</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_protect</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>prot</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_clear_protect</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>prot</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_event_cb</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_event_cb_t</name></type> <name>event_cb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_res_t</name></type> <name>lv_event_send</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_event_t</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_res_t</name></type> <name>lv_event_send_func</name><parameter_list>(<parameter><decl><type><name>lv_event_cb_t</name></type> <name>event_xcb</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_event_t</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>lv_event_get_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_signal_cb</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_signal_cb_t</name></type> <name>signal_cb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_signal_send</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>signal</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_design_cb</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_design_cb_t</name></type> <name>design_cb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type> <name>lv_obj_allocate_ext_attr</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>ext_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_refresh_ext_draw_pad</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_obj_get_screen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>lv_obj_get_disp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_obj_get_parent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_obj_get_child</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>child</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_obj_get_child_back</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>child</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint16_t</name></type> <name>lv_obj_count_children</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint16_t</name></type> <name>lv_obj_count_children_recursive</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_get_coords</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_area_t</name> <modifier>*</modifier></type> <name>cords_p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_get_inner_coords</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_area_t</name> <modifier>*</modifier></type> <name>coords_p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_coord_t</name></type> <name>lv_obj_get_x</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_coord_t</name></type> <name>lv_obj_get_y</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_coord_t</name></type> <name>lv_obj_get_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_coord_t</name></type> <name>lv_obj_get_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_coord_t</name></type> <name>lv_obj_get_width_fit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_coord_t</name></type> <name>lv_obj_get_height_fit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>lv_obj_get_auto_realign</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_coord_t</name></type> <name>lv_obj_get_ext_click_pad_left</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_coord_t</name></type> <name>lv_obj_get_ext_click_pad_right</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_coord_t</name></type> <name>lv_obj_get_ext_click_pad_top</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_coord_t</name></type> <name>lv_obj_get_ext_click_pad_bottom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_coord_t</name></type> <name>lv_obj_get_ext_draw_pad</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>lv_obj_get_style</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>lv_obj_get_hidden</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>lv_obj_get_click</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>lv_obj_get_top</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>lv_obj_get_drag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_drag_dir_t</name></type> <name>lv_obj_get_drag_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>lv_obj_get_drag_throw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>lv_obj_get_drag_parent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>lv_obj_get_parent_event</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_bidi_dir_t</name></type> <name>lv_obj_get_base_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_opa_t</name></type> <name>lv_obj_get_opa_scale_enable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_opa_t</name></type> <name>lv_obj_get_opa_scale</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint8_t</name></type> <name>lv_obj_get_protect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>lv_obj_is_protected</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>prot</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_signal_cb_t</name></type> <name>lv_obj_get_signal_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_design_cb_t</name></type> <name>lv_obj_get_design_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_event_cb_t</name></type> <name>lv_obj_get_event_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type> <name>lv_obj_get_ext_attr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_get_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_obj_type_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_USER_DATA</name></expr></cpp:if>

<function_decl><type><name>lv_obj_user_data_t</name></type> <name>lv_obj_get_user_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_obj_user_data_t</name> <modifier>*</modifier></type> <name>lv_obj_get_user_data_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_obj_set_user_data</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_obj_user_data_t</name></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<function_decl><type><name>void</name> <modifier>*</modifier></type> <name>lv_obj_get_group</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>lv_obj_is_focused</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>lv_res_t</name></type> <name>lv_obj_handle_get_type_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_type_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_EVENT_CB_DECLARE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void name(lv_obj_t * obj, lv_event_t e)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
