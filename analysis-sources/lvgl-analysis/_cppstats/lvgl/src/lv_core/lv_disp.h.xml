<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_core\lv_disp.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_hal/lv_hal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_obj.h"</cpp:file></cpp:include>

<function_decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_disp_get_scr_act</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_disp_load_scr</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>scr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_disp_get_layer_top</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_disp_get_layer_sys</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_disp_assign_screen</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>scr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>lv_disp_get_refr_task</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>lv_disp_get_inactive_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_disp_trig_activity</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_scr_act</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>lv_disp_get_scr_act</name><argument_list>(<argument><expr><call><name>lv_disp_get_default</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_layer_top</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>lv_disp_get_layer_top</name><argument_list>(<argument><expr><call><name>lv_disp_get_default</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_layer_sys</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>lv_disp_get_layer_sys</name><argument_list>(<argument><expr><call><name>lv_disp_get_default</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_scr_load</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>scr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lv_disp_load_scr</name><argument_list>(<argument><expr><name>scr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_HOR_RES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_HOR_RES</name></cpp:macro> <cpp:value>lv_disp_get_hor_res(lv_disp_get_default())</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_VER_RES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_VER_RES</name></cpp:macro> <cpp:value>lv_disp_get_ver_res(lv_disp_get_default())</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
