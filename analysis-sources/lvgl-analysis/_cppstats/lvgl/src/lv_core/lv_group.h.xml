<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_core\lv_group.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_CONF_INCLUDE_SIMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_conf.h"</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../lv_conf.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_obj.h"</cpp:file></cpp:include>

<enum>enum <block>{

<decl><name>LV_KEY_UP</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>, 

<decl><name>LV_KEY_DOWN</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>, 

<decl><name>LV_KEY_RIGHT</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>, 

<decl><name>LV_KEY_LEFT</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>, 

<decl><name>LV_KEY_ESC</name> <init>= <expr><literal type="number">27</literal></expr></init></decl>, 

<decl><name>LV_KEY_DEL</name> <init>= <expr><literal type="number">127</literal></expr></init></decl>, 

<decl><name>LV_KEY_BACKSPACE</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, 

<decl><name>LV_KEY_ENTER</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>, 

<decl><name>LV_KEY_NEXT</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>, 

<decl><name>LV_KEY_PREV</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>, 

<decl><name>LV_KEY_HOME</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

<decl><name>LV_KEY_END</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 

}</block>;</enum>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_key_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<struct_decl>struct <name>_lv_group_t</name>;</struct_decl>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>lv_group_style_mod_cb_t</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_group_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>lv_style_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>lv_group_focus_cb_t</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_group_t</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>_lv_group_t</name>

<block>{

<decl_stmt><decl><type><name>lv_ll_t</name></type> <name>obj_ll</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>obj_focus</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_group_style_mod_cb_t</name></type> <name>style_mod_cb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_group_style_mod_cb_t</name></type> <name>style_mod_edit_cb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_group_focus_cb_t</name></type> <name>focus_cb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_style_t</name></type> <name>style_tmp</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_USER_DATA</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_group_user_data_t</name></type> <name>user_data</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>frozen</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>editing</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>click_focus</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>refocus_policy</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>wrap</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

}</block></struct></type> <name>lv_group_t</name>;</typedef>

<enum>enum <block>{ <decl><name>LV_GROUP_REFOCUS_POLICY_NEXT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>LV_GROUP_REFOCUS_POLICY_PREV</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> }</block>;</enum>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_group_refocus_policy_t</name>;</typedef>

<function_decl><type><name>void</name></type> <name>lv_group_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>lv_group_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_group_del</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_group_add_obj</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_group_remove_obj</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_group_remove_all_objs</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_group_focus_obj</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_group_focus_next</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_group_focus_prev</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_group_focus_freeze</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_res_t</name></type> <name>lv_group_send_data</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_group_set_style_mod_cb</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>lv_group_style_mod_cb_t</name></type> <name>style_mod_cb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_group_set_style_mod_edit_cb</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>lv_group_style_mod_cb_t</name></type> <name>style_mod_edit_cb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_group_set_focus_cb</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>lv_group_focus_cb_t</name></type> <name>focus_cb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_group_set_refocus_policy</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>lv_group_refocus_policy_t</name></type> <name>policy</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_group_set_editing</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>edit</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_group_set_click_focus</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_group_set_wrap</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>lv_group_mod_style</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_group_get_focused</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_USER_DATA</name></expr></cpp:if>

<function_decl><type><name>lv_group_user_data_t</name> <modifier>*</modifier></type> <name>lv_group_get_user_data</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>lv_group_style_mod_cb_t</name></type> <name>lv_group_get_style_mod_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_group_style_mod_cb_t</name></type> <name>lv_group_get_style_mod_edit_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_group_focus_cb_t</name></type> <name>lv_group_get_focus_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>lv_group_get_editing</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>lv_group_get_click_focus</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>lv_group_get_wrap</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_group_report_style_mod</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
