<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_core\lv_group.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_group.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_themes/lv_theme.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_gc.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_GC_INCLUDE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> LV_GC_INCLUDE</cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>style_mod_def</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>style_mod_edit_def</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>refresh_theme</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>th</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>focus_next_core</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>begin</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_ll_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>move</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_ll_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_group_refocus</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>g</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>obj_to_foreground</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>lv_group_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lv_ll_init</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_group_ll</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_group_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>lv_group_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name> <init>= <expr><call><name>lv_ll_ins_head</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_group_ll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>group</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_ll_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>obj_ll</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_obj_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>frozen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>focus_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>click_focus</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>editing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>refocus_policy</name></name> <operator>=</operator> <name>LV_GROUP_REFOCUS_POLICY_PREV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>wrap</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_USER_DATA</name></expr></cpp:if>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_group_user_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>refresh_theme</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><call><name>lv_theme_get_current</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>group</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_group_del</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name><operator>)</operator><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><operator>*</operator><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name></expr></argument>, <argument><expr><name>LV_SIGNAL_DEFOCUS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><operator>*</operator><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>obj</name></decl>;</decl_stmt>

<macro><name>LV_LL_READ</name><argument_list>(<argument>group-&gt;obj_ll</argument>, <argument>obj</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>obj</name><operator>)</operator><operator>-&gt;</operator><name>group_p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>lv_ll_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>group</name><operator>-&gt;</operator><name>obj_ll</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_ll_rem</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_group_ll</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_group_add_obj</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>group</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>obj_i</name></decl>;</decl_stmt>

<macro><name>LV_LL_READ</name><argument_list>(<argument>group-&gt;obj_ll</argument>, <argument>obj_i</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>*</operator><name>obj_i</name><operator>)</operator> <operator>==</operator> <name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"lv_group_add_obj: the object is already added to this group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if<condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>group_p</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_is_focused</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_group_refocus</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>group_p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"lv_group_add_obj: assign object to an other group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>group_p</name></name> <operator>=</operator> <name>group</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>next</name> <init>= <expr><call><name>lv_ll_ins_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>obj_ll</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>next</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_ll_get_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>obj_ll</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>next</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_group_refocus</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_group_remove_obj</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>g</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>group_p</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>g</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>obj_focus</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><operator>*</operator><name><name>g</name><operator>-&gt;</operator><name>obj_focus</name></name> <operator>==</operator> <name>obj</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_ll_get_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>obj_ll</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>g</name><operator>-&gt;</operator><name>obj_focus</name></name> <operator>&amp;&amp;</operator> <call><name>lv_ll_get_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>obj_ll</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>g</name><operator>-&gt;</operator><name>obj_focus</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>g</name><operator>-&gt;</operator><name>obj_focus</name></name><operator>)</operator><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><operator>*</operator><name><name>g</name><operator>-&gt;</operator><name>obj_focus</name></name></expr></argument>, <argument><expr><name>LV_SIGNAL_DEFOCUS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_group_refocus</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name><name>g</name><operator>-&gt;</operator><name>obj_focus</name></name> <operator>==</operator> <name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>obj_focus</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>i</name></decl>;</decl_stmt>

<macro><name>LV_LL_READ</name><argument_list>(<argument>g-&gt;obj_ll</argument>, <argument>i</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>i</name> <operator>==</operator> <name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_ll_rem</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>obj_ll</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>group_p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_group_remove_all_objs</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name><operator>)</operator><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><operator>*</operator><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name></expr></argument>, <argument><expr><name>LV_SIGNAL_DEFOCUS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><operator>*</operator><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>obj</name></decl>;</decl_stmt>

<macro><name>LV_LL_READ</name><argument_list>(<argument>group-&gt;obj_ll</argument>, <argument>obj</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>obj</name><operator>)</operator><operator>-&gt;</operator><name>group_p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>lv_ll_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>group</name><operator>-&gt;</operator><name>obj_ll</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_group_focus_obj</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>g</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>group_p</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>g</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>frozen</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_group_set_editing</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>i</name></decl>;</decl_stmt>

<macro><name>LV_LL_READ</name><argument_list>(<argument>g-&gt;obj_ll</argument>, <argument>i</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>i</name> <operator>==</operator> <name>obj</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>obj_focus</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>g</name><operator>-&gt;</operator><name>obj_focus</name></name><operator>)</operator><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><operator>*</operator><name><name>g</name><operator>-&gt;</operator><name>obj_focus</name></name></expr></argument>, <argument><expr><name>LV_SIGNAL_DEFOCUS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name> <init>= <expr><call><name>lv_event_send</name><argument_list>(<argument><expr><operator>*</operator><name><name>g</name><operator>-&gt;</operator><name>obj_focus</name></name></expr></argument>, <argument><expr><name>LV_EVENT_DEFOCUSED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><operator>*</operator><name><name>g</name><operator>-&gt;</operator><name>obj_focus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>obj_focus</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>obj_focus</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>g</name><operator>-&gt;</operator><name>obj_focus</name></name><operator>)</operator><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><operator>*</operator><name><name>g</name><operator>-&gt;</operator><name>obj_focus</name></name></expr></argument>, <argument><expr><name>LV_SIGNAL_FOCUS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>focus_cb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>g</name><operator>-&gt;</operator><name>focus_cb</name></name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name> <init>= <expr><call><name>lv_event_send</name><argument_list>(<argument><expr><operator>*</operator><name><name>g</name><operator>-&gt;</operator><name>obj_focus</name></name></expr></argument>, <argument><expr><name>LV_EVENT_FOCUSED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><operator>*</operator><name><name>g</name><operator>-&gt;</operator><name>obj_focus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obj_to_foreground</name><argument_list>(<argument><expr><operator>*</operator><name><name>g</name><operator>-&gt;</operator><name>obj_focus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_group_focus_next</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>focus_next_core</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>lv_ll_get_head</name></expr></argument>, <argument><expr><name>lv_ll_get_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_group_focus_prev</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>focus_next_core</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>lv_ll_get_tail</name></expr></argument>, <argument><expr><name>lv_ll_get_prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_group_focus_freeze</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>en</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>frozen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>frozen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>lv_res_t</name></type> <name>lv_group_send_data</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>act</name> <init>= <expr><call><name>lv_group_get_focused</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>act</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_RES_OK</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>act</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><name>LV_SIGNAL_CONTROL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_event_send</name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><name>LV_EVENT_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_group_set_style_mod_cb</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>lv_group_style_mod_cb_t</name></type> <name>style_mod_cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>style_mod_cb</name></name> <operator>=</operator> <name>style_mod_cb</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><operator>*</operator><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_group_set_style_mod_edit_cb</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>lv_group_style_mod_cb_t</name></type> <name>style_mod_edit_cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>style_mod_edit_cb</name></name> <operator>=</operator> <name>style_mod_edit_cb</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><operator>*</operator><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_group_set_focus_cb</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>lv_group_focus_cb_t</name></type> <name>focus_cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>focus_cb</name></name> <operator>=</operator> <name>focus_cb</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_group_set_editing</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>edit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>en_val</name> <init>= <expr><ternary><condition><expr><name>edit</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>en_val</name> <operator>==</operator> <name><name>group</name><operator>-&gt;</operator><name>editing</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>editing</name></name> <operator>=</operator> <name>en_val</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>focused</name> <init>= <expr><call><name>lv_group_get_focused</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>focused</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>focused</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>focused</name></expr></argument>, <argument><expr><name>LV_SIGNAL_FOCUS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name> <init>= <expr><call><name>lv_event_send</name><argument_list>(<argument><expr><operator>*</operator><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name></expr></argument>, <argument><expr><name>LV_EVENT_FOCUSED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>focused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_group_set_click_focus</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>click_focus</name></name> <operator>=</operator> <ternary><condition><expr><name>en</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_group_set_refocus_policy</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>lv_group_refocus_policy_t</name></type> <name>policy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>refocus_policy</name></name> <operator>=</operator> <name>policy</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_group_set_wrap</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>wrap</name></name> <operator>=</operator> <ternary><condition><expr><name>en</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>lv_group_mod_style</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>style_tmp</name></name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>editing</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>style_mod_edit_cb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>group</name><operator>-&gt;</operator><name>style_mod_edit_cb</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>style_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>style_mod_cb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>group</name><operator>-&gt;</operator><name>style_mod_cb</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>style_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>style_tmp</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_group_get_focused</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>group</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>*</operator><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_USER_DATA</name></expr></cpp:if>

<function><type><name>lv_group_user_data_t</name> <modifier>*</modifier></type> <name>lv_group_get_user_data</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>user_data</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>lv_group_style_mod_cb_t</name></type> <name>lv_group_get_style_mod_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>group</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>group</name><operator>-&gt;</operator><name>style_mod_cb</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_group_style_mod_cb_t</name></type> <name>lv_group_get_style_mod_edit_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>group</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>group</name><operator>-&gt;</operator><name>style_mod_edit_cb</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_group_focus_cb_t</name></type> <name>lv_group_get_focus_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>group</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>group</name><operator>-&gt;</operator><name>focus_cb</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_group_get_editing</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>group</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>group</name><operator>-&gt;</operator><name>editing</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_group_get_click_focus</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>group</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>group</name><operator>-&gt;</operator><name>click_focus</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_group_get_wrap</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>group</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>group</name><operator>-&gt;</operator><name>wrap</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_group_report_style_mod</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>th</name> <init>= <expr><call><name>lv_theme_get_current</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>group</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>refresh_theme</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>i</name></decl>;</decl_stmt>

<macro><name>LV_LL_READ</name><argument_list>(<argument>LV_GC_ROOT(_lv_group_ll)</argument>, <argument>i</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>refresh_theme</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_group_refocus</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>g</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>temp_wrap</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>wrap</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>wrap</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>refocus_policy</name></name> <operator>==</operator> <name>LV_GROUP_REFOCUS_POLICY_NEXT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_group_focus_next</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>refocus_policy</name></name> <operator>==</operator> <name>LV_GROUP_REFOCUS_POLICY_PREV</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_group_focus_prev</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>wrap</name></name> <operator>=</operator> <name>temp_wrap</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>style_mod_def</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>group</name></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>!=</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>opa</name></name> <operator>=</operator> <name>LV_OPA_COVER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>LV_COLOR_ORANGE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>opa</name></name> <operator>!=</operator> <name>LV_OPA_TRANSP</name> <operator>||</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>LV_DPI</name> <operator>/</operator> <literal type="number">20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>main_color</name></name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>main_color</name></name></expr></argument>, <argument><expr><name>LV_COLOR_ORANGE</name></expr></argument>, <argument><expr><name>LV_OPA_70</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>grad_color</name></name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>grad_color</name></name></expr></argument>, <argument><expr><name>LV_COLOR_ORANGE</name></expr></argument>, <argument><expr><name>LV_OPA_70</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>color</name></name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>LV_COLOR_ORANGE</name></expr></argument>, <argument><expr><name>LV_OPA_60</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>color</name></name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>LV_COLOR_ORANGE</name></expr></argument>, <argument><expr><name>LV_OPA_70</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>intense</name></name> <operator>&lt;</operator> <name>LV_OPA_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>LV_COLOR_ORANGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>intense</name></name> <operator>=</operator> <name>LV_OPA_40</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>opa</name></name> <operator>=</operator> <name>LV_OPA_COVER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>LV_COLOR_BLACK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>style_mod_edit_def</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>group</name></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>!=</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>opa</name></name> <operator>=</operator> <name>LV_OPA_COVER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>LV_COLOR_GREEN</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>opa</name></name> <operator>!=</operator> <name>LV_OPA_TRANSP</name> <operator>||</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>LV_DPI</name> <operator>/</operator> <literal type="number">20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>main_color</name></name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>main_color</name></name></expr></argument>, <argument><expr><name>LV_COLOR_GREEN</name></expr></argument>, <argument><expr><name>LV_OPA_70</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>grad_color</name></name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>grad_color</name></name></expr></argument>, <argument><expr><name>LV_COLOR_GREEN</name></expr></argument>, <argument><expr><name>LV_OPA_70</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>color</name></name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>LV_COLOR_GREEN</name></expr></argument>, <argument><expr><name>LV_OPA_60</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>color</name></name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>LV_COLOR_GREEN</name></expr></argument>, <argument><expr><name>LV_OPA_70</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>intense</name></name> <operator>&lt;</operator> <name>LV_OPA_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>LV_COLOR_GREEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>intense</name></name> <operator>=</operator> <name>LV_OPA_40</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>opa</name></name> <operator>=</operator> <name>LV_OPA_COVER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>LV_COLOR_BLACK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>refresh_theme</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>th</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>style_mod_cb</name></name> <operator>=</operator> <name>style_mod_def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>style_mod_edit_cb</name></name> <operator>=</operator> <name>style_mod_edit_def</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>th</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>group</name><operator>.</operator><name>style_mod_xcb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>style_mod_cb</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>group</name><operator>.</operator><name>style_mod_xcb</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>group</name><operator>.</operator><name>style_mod_edit_xcb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>style_mod_edit_cb</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>group</name><operator>.</operator><name>style_mod_edit_xcb</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>focus_next_core</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>begin</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_ll_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>move</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_ll_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>frozen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>obj_next</name> <init>= <expr><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>obj_sentinel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>can_move</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>can_begin</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>obj_next</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>wrap</name></name> <operator>||</operator> <name>obj_sentinel</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>can_begin</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>obj_next</name> <operator>=</operator> <call><name>begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>obj_ll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>can_move</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>can_begin</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>obj_sentinel</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>obj_sentinel</name> <operator>=</operator> <name>obj_next</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>obj_sentinel</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>can_move</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>obj_next</name> <operator>=</operator> <call><name>move</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>obj_ll</name></name></expr></argument>, <argument><expr><name>obj_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>obj_next</name> <operator>==</operator> <name>obj_sentinel</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>can_move</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>obj_next</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>lv_obj_get_hidden</name><argument_list>(<argument><expr><operator>*</operator><name>obj_next</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>obj_next</name> <operator>==</operator> <name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name><operator>)</operator><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><operator>*</operator><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name></expr></argument>, <argument><expr><name>LV_SIGNAL_DEFOCUS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name> <init>= <expr><call><name>lv_event_send</name><argument_list>(<argument><expr><operator>*</operator><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name></expr></argument>, <argument><expr><name>LV_EVENT_DEFOCUSED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><operator>*</operator><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name> <operator>=</operator> <name>obj_next</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name><operator>)</operator><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><operator>*</operator><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name></expr></argument>, <argument><expr><name>LV_SIGNAL_FOCUS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name> <init>= <expr><call><name>lv_event_send</name><argument_list>(<argument><expr><operator>*</operator><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name></expr></argument>, <argument><expr><name>LV_EVENT_FOCUSED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obj_to_foreground</name><argument_list>(<argument><expr><operator>*</operator><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><operator>*</operator><name><name>group</name><operator>-&gt;</operator><name>obj_focus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>focus_cb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>group</name><operator>-&gt;</operator><name>focus_cb</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obj_to_foreground</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>i</name> <init>= <expr><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>last_top</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>i</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>top</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>last_top</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>last_top</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_move_foreground</name><argument_list>(<argument><expr><name>last_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
