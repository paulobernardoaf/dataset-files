<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_core\lv_obj.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_obj.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_indev.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_refr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_group.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_disp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_themes/lv_theme.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_draw/lv_draw.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_anim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_task.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_async.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_fs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_hal/lv_hal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_gc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_math.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_GC_INCLUDE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> LV_GC_INCLUDE</cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_OBJX_NAME</name></cpp:macro> <cpp:value>"lv_obj"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_OBJ_DEF_WIDTH</name></cpp:macro> <cpp:value>(LV_DPI)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_OBJ_DEF_HEIGHT</name></cpp:macro> <cpp:value>(2 * LV_DPI / 3)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_lv_event_temp_data</name>

<block>{

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>deleted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>_lv_event_temp_data</name></name> <modifier>*</modifier></type> <name>prev</name></decl>;</decl_stmt>

}</block></struct></type> <name>lv_event_temp_data_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>refresh_children_position</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x_diff</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y_diff</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>report_style_mod_core</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>style_p</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>refresh_children_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>delete_children</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>base_dir_refr_children</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_event_mark_deleted</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_obj_del_async_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lv_obj_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask_p</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_obj_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>lv_initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_event_temp_data_t</name> <modifier>*</modifier></type> <name>event_temp_data_head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>event_act_data</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>lv_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>lv_initialized</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_init: already inited"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"lv_init started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_mem_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_task_core_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_FILESYSTEM</name></expr></cpp:if>

<expr_stmt><expr><call><name>lv_fs_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<expr_stmt><expr><call><name>lv_anim_core_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<expr_stmt><expr><call><name>lv_group_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>lv_style_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_refr_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_ll_init</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_disp_ll</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_disp_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_ll_init</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_indev_ll</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_indev_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_indev_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_img_decoder_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_img_cache_set_size</name><argument_list>(<argument><expr><name>LV_IMG_CACHE_DEF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lv_initialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"lv_init ready"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ENABLE_GC</name> <operator>||</operator> <operator>!</operator><name>LV_MEM_CUSTOM</name></expr></cpp:if>

<function><type><name>void</name></type> <name>lv_deinit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lv_gc_clear_roots</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_LOG</name></expr></cpp:if>

<expr_stmt><expr><call><name>lv_log_register_print_cb</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>lv_disp_set_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_mem_deinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lv_initialized</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"lv_deinit done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_obj_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>new_obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>parent</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"Screen create started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name> <init>= <expr><call><name>lv_disp_get_default</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>disp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_obj_create: not display created to so far. No place to assign the new screen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>new_obj</name> <operator>=</operator> <call><name>lv_ll_ins_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>scr_ll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>new_obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>par</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>lv_ll_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>new_obj</name><operator>-&gt;</operator><name>child_ll</name></name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_obj_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>signal_cb</name></name> <operator>=</operator> <name>lv_obj_signal</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>design_cb</name></name> <operator>=</operator> <name>lv_obj_design</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>event_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <call><name>lv_disp_get_hor_res</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <call><name>lv_disp_get_ver_res</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>ext_draw_pad</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_EXT_CLICK_AREA</name> <operator>==</operator> <name>LV_EXT_CLICK_AREA_FULL</name></expr></cpp:if>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_obj</name><operator>-&gt;</operator><name>ext_click_pad</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>new_obj</name><operator>-&gt;</operator><name>ext_click_pad</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_EXT_CLICK_AREA</name> <operator>==</operator> <name>LV_EXT_CLICK_AREA_TINY</name></expr></cpp:if>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>ext_click_pad_hor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>ext_click_pad_ver</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_OBJ_REALIGN</name></expr></cpp:if>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>align</name></name> <operator>=</operator> <name>LV_ALIGN_CENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>xofs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>yofs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>auto_realign</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>th</name> <init>= <expr><call><name>lv_theme_get_current</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>th</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>style_p</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>scr</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>style_p</name></name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_scr</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_USER_DATA</name></expr></cpp:if>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_obj</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_obj_user_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>group_p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>click</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>drag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>drag_throw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>drag_parent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>hidden</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>protect</name></name> <operator>=</operator> <name>LV_PROTECT_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>opa_scale_en</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>opa_scale</name></name> <operator>=</operator> <name>LV_OPA_COVER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>parent_event</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_BIDI</name></expr></cpp:if>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>base_dir</name></name> <operator>=</operator> <name>LV_BIDI_BASE_DIR_DEF</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>base_dir</name></name> <operator>=</operator> <name>LV_BIDI_DIR_LTR</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>reserved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>ext_attr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"Screen create ready"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"Object create started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_obj</name> <operator>=</operator> <call><name>lv_ll_ins_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>child_ll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>new_obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>par</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>lv_ll_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>new_obj</name><operator>-&gt;</operator><name>child_ll</name></name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_obj_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>signal_cb</name></name> <operator>=</operator> <name>lv_obj_signal</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>design_cb</name></name> <operator>=</operator> <name>lv_obj_design</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>event_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_BIDI</name></expr></cpp:if>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>base_dir</name></name> <operator>=</operator> <name>LV_BIDI_DIR_INHERIT</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>base_dir</name></name> <operator>=</operator> <name>LV_BIDI_DIR_LTR</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <name>LV_OBJ_DEF_HEIGHT</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name>new_obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LV_BIDI_DIR_RTL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x2</name></name> <operator>-</operator> <name>LV_OBJ_DEF_WIDTH</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name>LV_OBJ_DEF_WIDTH</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>ext_draw_pad</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_EXT_CLICK_AREA</name> <operator>==</operator> <name>LV_EXT_CLICK_AREA_FULL</name></expr></cpp:if>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_obj</name><operator>-&gt;</operator><name>ext_click_pad</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>new_obj</name><operator>-&gt;</operator><name>ext_click_pad</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_EXT_CLICK_AREA</name> <operator>==</operator> <name>LV_EXT_CLICK_AREA_TINY</name></expr></cpp:if>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>ext_click_pad_hor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>ext_click_pad_ver</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_OBJ_REALIGN</name></expr></cpp:if>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>align</name></name> <operator>=</operator> <name>LV_ALIGN_CENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>xofs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>yofs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>auto_realign</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>th</name> <init>= <expr><call><name>lv_theme_get_current</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>th</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>style_p</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>panel</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>style_p</name></name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_plain_color</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_EXT_CLICK_AREA</name> <operator>==</operator> <name>LV_EXT_CLICK_AREA_FULL</name></expr></cpp:if>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_obj</name><operator>-&gt;</operator><name>ext_click_pad</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>new_obj</name><operator>-&gt;</operator><name>ext_click_pad</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_EXT_CLICK_AREA</name> <operator>==</operator> <name>LV_EXT_CLICK_AREA_TINY</name></expr></cpp:if>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>ext_click_pad_hor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>ext_click_pad_ver</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_USER_DATA</name></expr></cpp:if>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_obj</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_obj_user_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>group_p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>click</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>drag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>drag_dir</name></name> <operator>=</operator> <name>LV_DRAG_DIR_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>drag_throw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>drag_parent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>hidden</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>protect</name></name> <operator>=</operator> <name>LV_PROTECT_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>opa_scale</name></name> <operator>=</operator> <name>LV_OPA_COVER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>opa_scale_en</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>parent_event</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>reserved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>ext_attr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_obj</name><operator>-&gt;</operator><name>coords</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>copy</name><operator>-&gt;</operator><name>coords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>ext_draw_pad</name></name> <operator>=</operator> <name><name>copy</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_EXT_CLICK_AREA</name> <operator>==</operator> <name>LV_EXT_CLICK_AREA_FULL</name></expr></cpp:if>

<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_obj</name><operator>-&gt;</operator><name>ext_click_pad</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>copy</name><operator>-&gt;</operator><name>ext_click_pad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_EXT_CLICK_AREA</name> <operator>==</operator> <name>LV_EXT_CLICK_AREA_TINY</name></expr></cpp:if>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>ext_click_pad_hor</name></name> <operator>=</operator> <name><name>copy</name><operator>-&gt;</operator><name>ext_click_pad_hor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>ext_click_pad_ver</name></name> <operator>=</operator> <name><name>copy</name><operator>-&gt;</operator><name>ext_click_pad_ver</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_USER_DATA</name></expr></cpp:if>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_obj</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>copy</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_obj_user_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_OBJ_REALIGN</name></expr></cpp:if>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>align</name></name> <operator>=</operator> <name><name>copy</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>align</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>xofs</name></name> <operator>=</operator> <name><name>copy</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>xofs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>yofs</name></name> <operator>=</operator> <name><name>copy</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>yofs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name><name>copy</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>auto_realign</name></name> <operator>=</operator> <name><name>copy</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>auto_realign</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>event_cb</name></name> <operator>=</operator> <name><name>copy</name><operator>-&gt;</operator><name>event_cb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>click</name></name> <operator>=</operator> <name><name>copy</name><operator>-&gt;</operator><name>click</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>drag</name></name> <operator>=</operator> <name><name>copy</name><operator>-&gt;</operator><name>drag</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>drag_dir</name></name> <operator>=</operator> <name><name>copy</name><operator>-&gt;</operator><name>drag_dir</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>drag_throw</name></name> <operator>=</operator> <name><name>copy</name><operator>-&gt;</operator><name>drag_throw</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>drag_parent</name></name> <operator>=</operator> <name><name>copy</name><operator>-&gt;</operator><name>drag_parent</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>hidden</name></name> <operator>=</operator> <name><name>copy</name><operator>-&gt;</operator><name>hidden</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>copy</name><operator>-&gt;</operator><name>top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>parent_event</name></name> <operator>=</operator> <name><name>copy</name><operator>-&gt;</operator><name>parent_event</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>opa_scale_en</name></name> <operator>=</operator> <name><name>copy</name><operator>-&gt;</operator><name>opa_scale_en</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>protect</name></name> <operator>=</operator> <name><name>copy</name><operator>-&gt;</operator><name>protect</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>opa_scale</name></name> <operator>=</operator> <name><name>copy</name><operator>-&gt;</operator><name>opa_scale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_obj</name><operator>-&gt;</operator><name>style_p</name></name> <operator>=</operator> <name><name>copy</name><operator>-&gt;</operator><name>style_p</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>copy</name><operator>-&gt;</operator><name>group_p</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_group_add_obj</name><argument_list>(<argument><expr><name><name>copy</name><operator>-&gt;</operator><name>group_p</name></name></expr></argument>, <argument><expr><name>new_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>parent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_set_pos</name><argument_list>(<argument><expr><name>new_obj</name></expr></argument>, <argument><expr><call><name>lv_obj_get_x</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>lv_obj_get_y</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_set_pos</name><argument_list>(<argument><expr><name>new_obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"Object create ready"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>parent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>parent</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>LV_SIGNAL_CHILD_CHG</name></expr></argument>, <argument><expr><name>new_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>new_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>new_obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_res_t</name></type> <name>lv_obj_del</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name> <init>= <expr><call><name>lv_obj_get_group</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>group</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_group_remove_obj</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<expr_stmt><expr><call><name>lv_anim_del</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>i_next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>lv_ll_get_head</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>child_ll</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>i</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i_next</name> <operator>=</operator> <call><name>lv_ll_get_next</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>child_ll</name></name><operator>)</operator></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>delete_children</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>i_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_EVENT_DELETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_event_mark_deleted</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name> <init>= <expr><call><name>lv_indev_get_next</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>indev</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_obj</name></name> <operator>==</operator> <name>obj</name> <operator>||</operator> <name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_obj</name></name> <operator>==</operator> <name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_indev_reset</name><argument_list>(<argument><expr><name>indev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_pressed</name></name> <operator>==</operator> <name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_pressed</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>indev</name><operator>-&gt;</operator><name>group</name></name> <operator>==</operator> <name>group</name> <operator>&amp;&amp;</operator> <name>obj</name> <operator>==</operator> <call><name>lv_indev_get_obj_act</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_indev_reset</name><argument_list>(<argument><expr><name>indev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>indev</name> <operator>=</operator> <call><name>lv_indev_get_next</name><argument_list>(<argument><expr><name>indev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name><name>obj</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_SIGNAL_CLEANUP</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>par</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>d</name> <init>= <expr><call><name>lv_obj_get_disp</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_ll_rem</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>scr_ll</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_ll_rem</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>par</name><operator>-&gt;</operator><name>child_ll</name></name><operator>)</operator></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>ext_attr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>ext_attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>par</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>par</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>LV_SIGNAL_CHILD_CHG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>LV_RES_INV</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_del_async</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_async_call</name><argument_list>(<argument><expr><name>lv_obj_del_async_cb</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_clean</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>child</name> <init>= <expr><call><name>lv_obj_get_child</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>child_next</name></decl>;</decl_stmt>

<while>while<condition>(<expr><name>child</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>child_next</name> <operator>=</operator> <call><name>lv_obj_get_child</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_del</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>child</name> <operator>=</operator> <name>child_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_invalidate_area</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>area</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_hidden</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj_scr</name> <init>= <expr><call><name>lv_obj_get_screen</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name> <init>= <expr><call><name>lv_obj_get_disp</name><argument_list>(<argument><expr><name>obj_scr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>obj_scr</name> <operator>==</operator> <call><name>lv_disp_get_scr_act</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>obj_scr</name> <operator>==</operator> <call><name>lv_disp_get_layer_top</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call> <operator>||</operator>

<name>obj_scr</name> <operator>==</operator> <call><name>lv_disp_get_layer_sys</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>obj_coords</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>ext_size</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj_coords</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>coords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj_coords</name><operator>.</operator><name>x1</name></name> <operator>-=</operator> <name>ext_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj_coords</name><operator>.</operator><name>y1</name></name> <operator>-=</operator> <name>ext_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj_coords</name><operator>.</operator><name>x2</name></name> <operator>+=</operator> <name>ext_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj_coords</name><operator>.</operator><name>y2</name></name> <operator>+=</operator> <name>ext_size</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_common</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>area_trunc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>is_common</name> <operator>=</operator> <call><name>lv_area_intersect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area_trunc</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj_coords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>is_common</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>par</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_common</name> <operator>=</operator> <call><name>lv_area_intersect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area_trunc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area_trunc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>par</name><operator>-&gt;</operator><name>coords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>is_common</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_hidden</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>par</name> <operator>=</operator> <call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>is_common</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_inv_area</name><argument_list>(<argument><expr><name>disp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area_trunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_invalidate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>obj_coords</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>ext_size</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj_coords</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>coords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj_coords</name><operator>.</operator><name>x1</name></name> <operator>-=</operator> <name>ext_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj_coords</name><operator>.</operator><name>y1</name></name> <operator>-=</operator> <name>ext_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj_coords</name><operator>.</operator><name>x2</name></name> <operator>+=</operator> <name>ext_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj_coords</name><operator>.</operator><name>y2</name></name> <operator>+=</operator> <name>ext_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate_area</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj_coords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_parent</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>parent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>par</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Can't set the parent of a screen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>parent</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Can't set parent == NULL to an object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>old_pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>old_pos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>lv_obj_get_x</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>old_pos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>lv_obj_get_y</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>old_par</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>par</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_ll_chg_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>child_ll</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>child_ll</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>par</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_pos</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>old_pos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>old_pos</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>old_par</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>old_par</name></expr></argument>, <argument><expr><name>LV_SIGNAL_CHILD_CHG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>parent</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>LV_SIGNAL_CHILD_CHG</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_move_foreground</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>parent</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_ll_get_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>child_ll</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>obj</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_ll_chg_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>child_ll</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>child_ll</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>parent</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>LV_SIGNAL_CHILD_CHG</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_move_background</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>parent</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_ll_get_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>child_ll</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>obj</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_ll_chg_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>child_ll</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>child_ll</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>parent</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>LV_SIGNAL_CHILD_CHG</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_pos</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>par</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name><name>par</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name> <operator>+</operator> <name><name>par</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>diff</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>diff</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name> <operator>-</operator> <name><name>obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>diff</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name> <operator>-</operator> <name><name>obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>diff</name><operator>.</operator><name>x</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>diff</name><operator>.</operator><name>y</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>ori</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ori</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>+=</operator> <name><name>diff</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>+=</operator> <name><name>diff</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x2</name></name> <operator>+=</operator> <name><name>diff</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y2</name></name> <operator>+=</operator> <name><name>diff</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>refresh_children_position</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>diff</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>diff</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>obj</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_SIGNAL_CORD_CHG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ori</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>par</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>LV_SIGNAL_CHILD_CHG</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_x</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_pos</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>lv_obj_get_y</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_y</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_pos</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>lv_obj_get_x</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_size</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>w</name> <operator>&amp;&amp;</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>h</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>ori</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ori</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LV_BIDI_DIR_RTL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x2</name></name> <operator>-</operator> <name>w</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>obj</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_SIGNAL_CORD_CHG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ori</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>par</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>par</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>LV_SIGNAL_CHILD_CHG</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>i</name></decl>;</decl_stmt>

<macro><name>LV_LL_READ</name><argument_list>(<argument>obj-&gt;child_ll</argument>, <argument>i</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name><name>i</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>LV_SIGNAL_PARENT_SIZE_CHG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_OBJ_REALIGN</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>auto_realign</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_obj_realign</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_width</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>w</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_size</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_height</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_size</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_align</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>lv_align_t</name></type> <name>align</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x_mod</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y_mod</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>new_x</name> <init>= <expr><call><name>lv_obj_get_x</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>new_y</name> <init>= <expr><call><name>lv_obj_get_y</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>base</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>align</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_ALIGN_CENTER</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_IN_TOP_LEFT</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_IN_TOP_MID</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_IN_TOP_RIGHT</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_IN_BOTTOM_LEFT</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_IN_BOTTOM_MID</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_IN_BOTTOM_RIGHT</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_IN_LEFT_MID</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_IN_RIGHT_MID</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_OUT_TOP_LEFT</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <operator>-</operator><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_OUT_TOP_MID</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <operator>-</operator><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_OUT_TOP_RIGHT</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <operator>-</operator><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_OUT_BOTTOM_LEFT</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_OUT_BOTTOM_MID</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_OUT_BOTTOM_RIGHT</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_OUT_LEFT_TOP</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <operator>-</operator><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_OUT_LEFT_MID</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <operator>-</operator><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_OUT_LEFT_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <operator>-</operator><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_OUT_RIGHT_TOP</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_OUT_RIGHT_MID</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_OUT_RIGHT_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>base_abs_x</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>base_abs_y</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>par_abs_x</name> <init>= <expr><name><name>par</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>par_abs_y</name> <init>= <expr><name><name>par</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>new_x</name> <operator>+=</operator> <name>x_mod</name> <operator>+</operator> <name>base_abs_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>+=</operator> <name>y_mod</name> <operator>+</operator> <name>base_abs_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_x</name> <operator>-=</operator> <name>par_abs_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>-=</operator> <name>par_abs_y</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_pos</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>new_x</name></expr></argument>, <argument><expr><name>new_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_OBJ_REALIGN</name></expr></cpp:if>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>align</name></name> <operator>=</operator> <name>align</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>xofs</name></name> <operator>=</operator> <name>x_mod</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>yofs</name></name> <operator>=</operator> <name>y_mod</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>origo_align</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_align_origo</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>lv_align_t</name></type> <name>align</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x_mod</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y_mod</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>new_x</name> <init>= <expr><call><name>lv_obj_get_x</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>new_y</name> <init>= <expr><call><name>lv_obj_get_y</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>obj_w_half</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>obj_h_half</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>base</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>align</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_ALIGN_CENTER</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>obj_w_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>obj_h_half</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_IN_TOP_LEFT</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <operator>-</operator><name>obj_w_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <operator>-</operator><name>obj_h_half</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_IN_TOP_MID</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>obj_w_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <operator>-</operator><name>obj_h_half</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_IN_TOP_RIGHT</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>obj_w_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <operator>-</operator><name>obj_h_half</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_IN_BOTTOM_LEFT</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <operator>-</operator><name>obj_w_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>obj_h_half</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_IN_BOTTOM_MID</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>obj_w_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>obj_h_half</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_IN_BOTTOM_RIGHT</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>obj_w_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>obj_h_half</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_IN_LEFT_MID</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <operator>-</operator><name>obj_w_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>obj_h_half</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_IN_RIGHT_MID</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>obj_w_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>obj_h_half</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_OUT_TOP_LEFT</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <operator>-</operator><name>obj_w_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <operator>-</operator><name>obj_h_half</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_OUT_TOP_MID</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>obj_w_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <operator>-</operator><name>obj_h_half</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_OUT_TOP_RIGHT</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>obj_w_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <operator>-</operator><name>obj_h_half</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_OUT_BOTTOM_LEFT</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <operator>-</operator><name>obj_w_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>obj_h_half</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_OUT_BOTTOM_MID</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>obj_w_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>obj_h_half</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_OUT_BOTTOM_RIGHT</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>obj_w_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>obj_h_half</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_OUT_LEFT_TOP</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <operator>-</operator><name>obj_w_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <operator>-</operator><name>obj_h_half</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_OUT_LEFT_MID</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <operator>-</operator><name>obj_w_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>obj_h_half</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_OUT_LEFT_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <operator>-</operator><name>obj_w_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>obj_h_half</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_OUT_RIGHT_TOP</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>obj_w_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <operator>-</operator><name>obj_h_half</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_OUT_RIGHT_MID</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>obj_w_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>obj_h_half</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_ALIGN_OUT_RIGHT_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>obj_w_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>obj_h_half</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>base_abs_x</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>base_abs_y</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>par_abs_x</name> <init>= <expr><name><name>par</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>par_abs_y</name> <init>= <expr><name><name>par</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>new_x</name> <operator>+=</operator> <name>x_mod</name> <operator>+</operator> <name>base_abs_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>+=</operator> <name>y_mod</name> <operator>+</operator> <name>base_abs_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_x</name> <operator>-=</operator> <name>par_abs_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>-=</operator> <name>par_abs_y</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_pos</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>new_x</name></expr></argument>, <argument><expr><name>new_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_OBJ_REALIGN</name></expr></cpp:if>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>align</name></name> <operator>=</operator> <name>align</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>xofs</name></name> <operator>=</operator> <name>x_mod</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>yofs</name></name> <operator>=</operator> <name>y_mod</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>origo_align</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_realign</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_OBJ_REALIGN</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>origo_align</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_obj_align_origo</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>align</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>xofs</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>yofs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>align</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>xofs</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>yofs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>obj</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_obj_realaign: no effect because LV_USE_OBJ_REALIGN = 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_auto_realign</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_OBJ_REALIGN</name></expr></cpp:if>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>auto_realign</name></name> <operator>=</operator> <ternary><condition><expr><name>en</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>obj</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>en</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_obj_set_auto_realign: no effect because LV_USE_OBJ_REALIGN = 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_ext_click_area</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>bottom</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_EXT_CLICK_AREA</name> <operator>==</operator> <name>LV_EXT_CLICK_AREA_FULL</name></expr></cpp:if>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>ext_click_pad</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>ext_click_pad</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>ext_click_pad</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>ext_click_pad</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name>bottom</name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_USE_EXT_CLICK_AREA</name> <operator>==</operator> <name>LV_EXT_CLICK_AREA_TINY</name></expr></cpp:elif>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>ext_click_pad_hor</name></name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>ext_click_pad_ver</name></name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>obj</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>left</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>right</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>top</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>bottom</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_STYLE</name><argument_list>(<argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>style_p</name></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>refresh_children_style</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_refresh_style</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_refresh_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>obj</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_SIGNAL_STYLE_CHG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_report_style_mod</name><parameter_list>(<parameter><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_STYLE</name><argument_list>(<argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>d</name> <init>= <expr><call><name>lv_disp_get_next</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>d</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>i</name></decl>;</decl_stmt>

<macro><name>LV_LL_READ</name><argument_list>(<argument>d-&gt;scr_ll</argument>, <argument>i</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>style_p</name></name> <operator>==</operator> <name>style</name> <operator>||</operator> <name>style</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_refresh_style</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>report_style_mod_core</name><argument_list>(<argument><expr><name>style</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>lv_disp_get_next</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_hidden</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>hidden</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>hidden</name></name> <operator>=</operator> <ternary><condition><expr><name>en</name> <operator>==</operator> <name>false</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>hidden</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>par</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>LV_SIGNAL_CHILD_CHG</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_click</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>click</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>en</name> <operator>==</operator> <name>true</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_top</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>en</name> <operator>==</operator> <name>true</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_drag</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>en</name> <operator>==</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_obj_set_click</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>drag</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>en</name> <operator>==</operator> <name>true</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_drag_dir</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_drag_dir_t</name></type> <name>drag_dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>drag_dir</name></name> <operator>=</operator> <name>drag_dir</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>drag_dir</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_obj_set_drag</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_drag_throw</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>drag_throw</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>en</name> <operator>==</operator> <name>true</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_drag_parent</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>drag_parent</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>en</name> <operator>==</operator> <name>true</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_parent_event</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>parent_event</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>en</name> <operator>==</operator> <name>true</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_base_dir</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_bidi_dir_t</name></type> <name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>dir</name> <operator>!=</operator> <name>LV_BIDI_DIR_LTR</name> <operator>&amp;&amp;</operator> <name>dir</name> <operator>!=</operator> <name>LV_BIDI_DIR_RTL</name> <operator>&amp;&amp;</operator>

<name>dir</name> <operator>!=</operator> <name>LV_BIDI_DIR_AUTO</name> <operator>&amp;&amp;</operator> <name>dir</name> <operator>!=</operator> <name>LV_BIDI_DIR_INHERIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_obj_set_base_dir: invalid base dir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>base_dir</name></name> <operator>=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_signal_send</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_SIGNAL_BASE_DIR_CHG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>base_dir_refr_children</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_opa_scale_enable</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>opa_scale_en</name></name> <operator>=</operator> <ternary><condition><expr><name>en</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_opa_scale</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>opa_scale</name></name> <operator>=</operator> <name>opa_scale</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_protect</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>prot</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>protect</name></name> <operator>|=</operator> <name>prot</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_clear_protect</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>prot</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prot</name> <operator>=</operator> <operator>(</operator><operator>~</operator><name>prot</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>protect</name></name> <operator>&amp;=</operator> <name>prot</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_event_cb</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_event_cb_t</name></type> <name>event_cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>event_cb</name></name> <operator>=</operator> <name>event_cb</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>lv_res_t</name></type> <name>lv_event_send</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_event_t</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_RES_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_event_send_func</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>event_cb</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_res_t</name></type> <name>lv_event_send_func</name><parameter_list>(<parameter><decl><type><name>lv_event_cb_t</name></type> <name>event_xcb</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_event_t</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>obj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_event_temp_data_t</name></type> <name>event_temp_data</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>event_temp_data</name><operator>.</operator><name>obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event_temp_data</name><operator>.</operator><name>deleted</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event_temp_data</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>event_temp_data_head</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>event_temp_data</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <name>event_temp_data_head</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>event_temp_data_head</name> <operator>=</operator> <operator>&amp;</operator><name>event_temp_data</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>event_act_data_save</name> <init>= <expr><name>event_act_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>event_act_data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev_act</name> <init>= <expr><call><name>lv_indev_get_act</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>indev_act</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>indev_act</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>feedback_cb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>indev_act</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>feedback_cb</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>indev_act</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>event_xcb</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>event_xcb</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>event_act_data</name> <operator>=</operator> <name>event_act_data_save</name></expr>;</expr_stmt>

<expr_stmt><expr><name>event_temp_data_head</name> <operator>=</operator> <name><name>event_temp_data_head</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>event_temp_data</name><operator>.</operator><name>deleted</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>LV_RES_INV</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>parent_event</name></name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>par</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name> <init>= <expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>par</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>LV_RES_INV</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>LV_RES_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>lv_event_get_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>event_act_data</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_signal_cb</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_signal_cb_t</name></type> <name>signal_cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>signal_cb</name></name> <operator>=</operator> <name>signal_cb</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_signal_send</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>signal</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>signal_cb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>obj</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>signal</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_design_cb</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_design_cb_t</name></type> <name>design_cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>design_cb</name></name> <operator>=</operator> <name>design_cb</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type> <name>lv_obj_allocate_ext_attr</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>ext_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>ext_attr</name></name> <operator>=</operator> <call><name>lv_mem_realloc</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>ext_attr</name></name></expr></argument>, <argument><expr><name>ext_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>obj</name><operator>-&gt;</operator><name>ext_attr</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_refresh_ext_draw_pad</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>ext_draw_pad</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>obj</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_SIGNAL_REFR_EXT_DRAW_PAD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_obj_get_screen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name> <init>= <expr><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>act_p</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>act_p</name> <operator>=</operator> <name>par</name></expr>;</expr_stmt>

<expr_stmt><expr><name>par</name> <operator>=</operator> <call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>act_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><name>par</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

<return>return <expr><operator>(</operator><name>lv_obj_t</name> <operator>*</operator><operator>)</operator><name>act_p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>lv_obj_get_disp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>scr</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>par</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>scr</name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>scr</name> <operator>=</operator> <call><name>lv_obj_get_screen</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<decl_stmt><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>d</name></decl>;</decl_stmt>

<macro><name>LV_LL_READ</name><argument_list>(<argument>LV_GC_ROOT(_lv_disp_ll)</argument>, <argument>d</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>s</name></decl>;</decl_stmt>

<macro><name>LV_LL_READ</name><argument_list>(<argument>d-&gt;scr_ll</argument>, <argument>s</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>s</name> <operator>==</operator> <name>scr</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>d</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

</block_content>}</block>

<macro><name>LV_LOG_WARN</name><argument_list>(<argument><literal type="string">"lv_scr_get_disp: screen not found"</literal></argument>)</argument_list></macro>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_obj_get_parent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>par</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_obj_get_child</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>child</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>child</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>lv_ll_get_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>child_ll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>lv_ll_get_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>child_ll</name></name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_obj_get_child_back</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>child</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>child</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>lv_ll_get_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>child_ll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>lv_ll_get_prev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>child_ll</name></name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>lv_obj_count_children</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>LV_LL_READ</name><argument_list>(<argument>obj-&gt;child_ll</argument>, <argument>i</argument>)</argument_list></macro> <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>cnt</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>lv_obj_count_children_recursive</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>LV_LL_READ</name><argument_list>(<argument>obj-&gt;child_ll</argument>, <argument>i</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <call><name>lv_obj_count_children_recursive</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block>

<return>return <expr><name>cnt</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_get_coords</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_area_t</name> <modifier>*</modifier></type> <name>cords_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><name>cords_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>coords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_get_inner_coords</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_area_t</name> <modifier>*</modifier></type> <name>coords_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>part</name></name> <operator>&amp;</operator> <name>LV_BORDER_LEFT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>coords_p</name><operator>-&gt;</operator><name>x1</name></name> <operator>+=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>part</name></name> <operator>&amp;</operator> <name>LV_BORDER_RIGHT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>coords_p</name><operator>-&gt;</operator><name>x2</name></name> <operator>-=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>part</name></name> <operator>&amp;</operator> <name>LV_BORDER_TOP</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>coords_p</name><operator>-&gt;</operator><name>y1</name></name> <operator>+=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>part</name></name> <operator>&amp;</operator> <name>LV_BORDER_BOTTOM</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>coords_p</name><operator>-&gt;</operator><name>y2</name></name> <operator>-=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>lv_coord_t</name></type> <name>lv_obj_get_x</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>rel_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>parent</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>parent</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rel_x</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>-</operator> <name><name>parent</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>rel_x</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>rel_x</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_coord_t</name></type> <name>lv_obj_get_y</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>rel_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>parent</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>parent</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rel_y</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>-</operator> <name><name>parent</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>rel_y</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>rel_y</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_coord_t</name></type> <name>lv_obj_get_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>coords</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_coord_t</name></type> <name>lv_obj_get_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>lv_area_get_height</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>coords</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_coord_t</name></type> <name>lv_obj_get_width_fit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name> <operator>-</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_coord_t</name></type> <name>lv_obj_get_height_fit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_obj_get_auto_realign</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_OBJ_REALIGN</name></expr></cpp:if>

<return>return <expr><ternary><condition><expr><name><name>obj</name><operator>-&gt;</operator><name>realign</name><operator>.</operator><name>auto_realign</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>obj</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>lv_coord_t</name></type> <name>lv_obj_get_ext_click_pad_left</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_EXT_CLICK_AREA</name> <operator>==</operator> <name>LV_EXT_CLICK_AREA_TINY</name></expr></cpp:if>

<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>ext_click_pad_hor</name></name></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_USE_EXT_CLICK_AREA</name> <operator>==</operator> <name>LV_EXT_CLICK_AREA_FULL</name></expr></cpp:elif>

<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>ext_click_pad</name><operator>.</operator><name>x1</name></name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>obj</name></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>lv_coord_t</name></type> <name>lv_obj_get_ext_click_pad_right</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_EXT_CLICK_AREA</name> <operator>==</operator> <name>LV_EXT_CLICK_AREA_TINY</name></expr></cpp:if>

<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>ext_click_pad_hor</name></name></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_USE_EXT_CLICK_AREA</name> <operator>==</operator> <name>LV_EXT_CLICK_AREA_FULL</name></expr></cpp:elif>

<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>ext_click_pad</name><operator>.</operator><name>x2</name></name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>obj</name></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>lv_coord_t</name></type> <name>lv_obj_get_ext_click_pad_top</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_EXT_CLICK_AREA</name> <operator>==</operator> <name>LV_EXT_CLICK_AREA_TINY</name></expr></cpp:if>

<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>ext_click_pad_ver</name></name></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_USE_EXT_CLICK_AREA</name> <operator>==</operator> <name>LV_EXT_CLICK_AREA_FULL</name></expr></cpp:elif>

<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>ext_click_pad</name><operator>.</operator><name>y1</name></name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>obj</name></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>lv_coord_t</name></type> <name>lv_obj_get_ext_click_pad_bottom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_EXT_CLICK_AREA</name> <operator>==</operator> <name>LV_EXT_CLICK_AREA_TINY</name></expr></cpp:if>

<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>ext_click_pad_ver</name></name></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_USE_EXT_CLICK_AREA</name> <operator>==</operator> <name>LV_EXT_CLICK_AREA_FULL</name></expr></cpp:elif>

<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>ext_click_pad</name><operator>.</operator><name>y2</name></name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>obj</name></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>lv_coord_t</name></type> <name>lv_obj_get_ext_draw_pad</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>lv_obj_get_style</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_act</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>style_p</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>style_act</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>par</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>par</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>style_p</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>style_p</name><operator>-&gt;</operator><name>glass</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name>style_act</name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>style_p</name></name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>g</name> <init>= <expr><call><name>lv_obj_get_group</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_group_get_focused</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>par</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>style_act</name> <operator>=</operator> <call><name>lv_group_mod_style</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>style_p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>style_act</name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>style_p</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>par</name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>par</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>group_p</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_group_get_focused</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>group_p</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>style_act</name> <operator>=</operator> <call><name>lv_group_mod_style</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>group_p</name></name></expr></argument>, <argument><expr><name>style_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>style_act</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>style_act</name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_plain</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>style_act</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_obj_get_hidden</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>obj</name><operator>-&gt;</operator><name>hidden</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_obj_get_click</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>obj</name><operator>-&gt;</operator><name>click</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_obj_get_top</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>obj</name><operator>-&gt;</operator><name>top</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_obj_get_drag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>obj</name><operator>-&gt;</operator><name>drag</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_drag_dir_t</name></type> <name>lv_obj_get_drag_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>drag_dir</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_obj_get_drag_throw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>obj</name><operator>-&gt;</operator><name>drag_throw</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_obj_get_drag_parent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>obj</name><operator>-&gt;</operator><name>drag_parent</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_obj_get_parent_event</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>obj</name><operator>-&gt;</operator><name>parent_event</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_bidi_dir_t</name></type> <name>lv_obj_get_base_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_BIDI</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>parent</name> <init>= <expr><name>obj</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>parent</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>base_dir</name></name> <operator>!=</operator> <name>LV_BIDI_DIR_INHERIT</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>parent</name><operator>-&gt;</operator><name>base_dir</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>LV_BIDI_BASE_DIR_DEF</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>obj</name></expr>;</expr_stmt> 

<return>return <expr><name>LV_BIDI_DIR_LTR</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>lv_opa_t</name></type> <name>lv_obj_get_opa_scale_enable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>obj</name><operator>-&gt;</operator><name>opa_scale_en</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_opa_t</name></type> <name>lv_obj_get_opa_scale</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>parent</name> <init>= <expr><name>obj</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>parent</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>opa_scale_en</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>parent</name><operator>-&gt;</operator><name>opa_scale</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>LV_OPA_COVER</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint8_t</name></type> <name>lv_obj_get_protect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>protect</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_obj_is_protected</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>prot</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>protect</name></name> <operator>&amp;</operator> <name>prot</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_signal_cb_t</name></type> <name>lv_obj_get_signal_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>signal_cb</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_design_cb_t</name></type> <name>lv_obj_get_design_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>design_cb</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_event_cb_t</name></type> <name>lv_obj_get_event_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>event_cb</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type> <name>lv_obj_get_ext_attr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>ext_attr</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_get_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_obj_type_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_type_t</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_obj_type_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_obj_type_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>obj</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><operator>(</operator><name>lv_obj_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></argument>, <argument><expr><name>LV_SIGNAL_GET_TYPE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>cnt</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;</operator> <name>LV_MAX_ANCESTOR_NUM</name></expr>;</condition> <incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>tmp</name><operator>.</operator><name>type</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>type</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>type</name><index>[<expr><name>cnt</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_USER_DATA</name></expr></cpp:if>

<function><type><name>lv_obj_user_data_t</name></type> <name>lv_obj_get_user_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>user_data</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_obj_user_data_t</name> <modifier>*</modifier></type> <name>lv_obj_get_user_data_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>lv_obj_user_data_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>user_data</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_obj_set_user_data</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_obj_user_data_t</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_obj_user_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<function><type><name>void</name> <modifier>*</modifier></type> <name>lv_obj_get_group</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>group_p</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_obj_is_focused</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>group_p</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_group_get_focused</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>group_p</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>obj</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>lv_res_t</name></type> <name>lv_obj_handle_get_type_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_type_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LV_MAX_ANCESTOR_NUM</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 

<if_stmt><if>if<condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>type</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>type</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<return>return <expr><name>LV_RES_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_obj_del_async_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_del</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>lv_obj_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask_p</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_COVER_CHK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_area_is_in</name><argument_list>(<argument><expr><name>mask_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>coords</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>opa</name></name> <operator>&lt;</operator> <name>LV_OPA_MAX</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>r</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>radius</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>r</name> <operator>==</operator> <name>LV_RADIUS_CIRCLE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>area_tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>x1</name></name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>x2</name></name> <operator>-=</operator> <name>r</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_area_is_in</name><argument_list>(<argument><expr><name>mask_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area_tmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>y1</name></name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>y2</name></name> <operator>-=</operator> <name>r</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_area_is_in</name><argument_list>(<argument><expr><name>mask_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area_tmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_DRAW_MAIN</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>coords</name></name></expr></argument>, <argument><expr><name>mask_p</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_obj_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_obj_handle_get_type_signal</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name> <init>= <expr><name>LV_RES_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CHILD_CHG</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_is_protected</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_PROTECT_CHILD_CHG</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>LV_RES_INV</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_REFR_EXT_DRAW_PAD</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>width</name></name> <operator>&gt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>ext_draw_pad</name></name> <operator>=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_STYLE_CHG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_refresh_ext_draw_pad</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>refresh_children_position</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x_diff</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y_diff</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>i</name></decl>;</decl_stmt>

<macro><name>LV_LL_READ</name><argument_list>(<argument>obj-&gt;child_ll</argument>, <argument>i</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>+=</operator> <name>x_diff</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>+=</operator> <name>y_diff</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x2</name></name> <operator>+=</operator> <name>x_diff</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y2</name></name> <operator>+=</operator> <name>y_diff</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>refresh_children_position</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x_diff</name></expr></argument>, <argument><expr><name>y_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>report_style_mod_core</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>style_p</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>i</name></decl>;</decl_stmt>

<macro><name>LV_LL_READ</name><argument_list>(<argument>obj-&gt;child_ll</argument>, <argument>i</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>style_p</name></name> <operator>==</operator> <name>style_p</name> <operator>||</operator> <name>style_p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>refresh_children_style</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_refresh_style</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>report_style_mod_core</name><argument_list>(<argument><expr><name>style_p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>refresh_children_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>child</name> <init>= <expr><call><name>lv_obj_get_child</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>child</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>style_p</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>refresh_children_style</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>lv_obj_refresh_style</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>style_p</name><operator>-&gt;</operator><name>glass</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>refresh_children_style</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>lv_obj_get_child</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>delete_children</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>i_next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>lv_ll_get_head</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>child_ll</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name> <init>= <expr><call><name>lv_obj_get_group</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>group</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_group_remove_obj</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while<condition>(<expr><name>i</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i_next</name> <operator>=</operator> <call><name>lv_ll_get_next</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>child_ll</name></name><operator>)</operator></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>delete_children</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>i_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_EVENT_DELETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_event_mark_deleted</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<expr_stmt><expr><call><name>lv_anim_del</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name> <init>= <expr><call><name>lv_indev_get_next</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>indev</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_obj</name></name> <operator>==</operator> <name>obj</name> <operator>||</operator> <name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_obj</name></name> <operator>==</operator> <name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_indev_reset</name><argument_list>(<argument><expr><name>indev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_pressed</name></name> <operator>==</operator> <name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_pressed</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>indev</name><operator>-&gt;</operator><name>group</name></name> <operator>==</operator> <name>group</name> <operator>&amp;&amp;</operator> <name>obj</name> <operator>==</operator> <call><name>lv_indev_get_obj_act</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_indev_reset</name><argument_list>(<argument><expr><name>indev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>indev</name> <operator>=</operator> <call><name>lv_indev_get_next</name><argument_list>(<argument><expr><name>indev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name><name>obj</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>LV_SIGNAL_CLEANUP</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_ll_rem</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>par</name><operator>-&gt;</operator><name>child_ll</name></name><operator>)</operator></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>ext_attr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>ext_attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>base_dir_refr_children</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>child</name></decl>;</decl_stmt>

<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>lv_obj_get_child</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>child</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>base_dir</name></name> <operator>==</operator> <name>LV_BIDI_DIR_INHERIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_signal_send</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>LV_SIGNAL_BASE_DIR_CHG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>base_dir_refr_children</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>lv_obj_get_child</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_event_mark_deleted</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_event_temp_data_t</name> <modifier>*</modifier></type> <name>t</name> <init>= <expr><name>event_temp_data_head</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>obj</name></name> <operator>==</operator> <name>obj</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>deleted</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

</unit>
