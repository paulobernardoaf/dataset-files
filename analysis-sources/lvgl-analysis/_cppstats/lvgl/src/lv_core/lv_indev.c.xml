<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_core\lv_indev.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_indev.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_disp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_obj.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_hal/lv_hal_tick.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_group.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_refr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_task.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_math.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_INDEV_DEF_DRAG_THROW</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:warning>#<cpp:directive>warning</cpp:directive> <cpp:literal>"LV_INDEV_DRAG_THROW must be greater than 0"</cpp:literal></cpp:warning>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>indev_pointer_proc</name><parameter_list>(<parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>lv_indev_data_t</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>indev_keypad_proc</name><parameter_list>(<parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>lv_indev_data_t</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>indev_encoder_proc</name><parameter_list>(<parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>lv_indev_data_t</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>indev_button_proc</name><parameter_list>(<parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>lv_indev_data_t</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>indev_proc_press</name><parameter_list>(<parameter><decl><type><name>lv_indev_proc_t</name> <modifier>*</modifier></type> <name>proc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>indev_proc_release</name><parameter_list>(<parameter><decl><type><name>lv_indev_proc_t</name> <modifier>*</modifier></type> <name>proc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>indev_proc_reset_query_handler</name><parameter_list>(<parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>indev_search_obj</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_indev_proc_t</name> <modifier>*</modifier></type> <name>proc</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>indev_drag</name><parameter_list>(<parameter><decl><type><name>lv_indev_proc_t</name> <modifier>*</modifier></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>indev_drag_throw</name><parameter_list>(<parameter><decl><type><name>lv_indev_proc_t</name> <modifier>*</modifier></type> <name>proc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>indev_reset_check</name><parameter_list>(<parameter><decl><type><name>lv_indev_proc_t</name> <modifier>*</modifier></type> <name>proc</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev_act</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>indev_obj_act</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>lv_indev_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lv_indev_reset</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_indev_read_task</name><parameter_list>(<parameter><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>task</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"indev read task started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_indev_data_t</name></type> <name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>indev_act</name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>user_data</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>indev_act</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>disp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>indev_proc_reset_query_handler</name><argument_list>(<argument><expr><name>indev_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>indev_act</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>disabled</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>more_to_read</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>more_to_read</name> <operator>=</operator> <call><name>lv_indev_read</name><argument_list>(<argument><expr><name>indev_act</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indev_proc_reset_query_handler</name><argument_list>(<argument><expr><name>indev_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>indev_obj_act</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>indev_act</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>state</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>indev_act</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>LV_INDEV_STATE_PR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>indev_act</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>disp</name><operator>-&gt;</operator><name>last_activity_time</name></name> <operator>=</operator> <call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>indev_act</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>LV_INDEV_TYPE_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>.</operator><name>enc_diff</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>indev_act</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>disp</name><operator>-&gt;</operator><name>last_activity_time</name></name> <operator>=</operator> <call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>indev_act</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>LV_INDEV_TYPE_POINTER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>indev_pointer_proc</name><argument_list>(<argument><expr><name>indev_act</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>indev_act</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>LV_INDEV_TYPE_KEYPAD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>indev_keypad_proc</name><argument_list>(<argument><expr><name>indev_act</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>indev_act</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>LV_INDEV_TYPE_ENCODER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>indev_encoder_proc</name><argument_list>(<argument><expr><name>indev_act</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>indev_act</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>LV_INDEV_TYPE_BUTTON</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>indev_button_proc</name><argument_list>(<argument><expr><name>indev_act</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>indev_proc_reset_query_handler</name><argument_list>(<argument><expr><name>indev_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><name>more_to_read</name></expr>)</condition>;</do>

<expr_stmt><expr><name>indev_act</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>indev_obj_act</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"indev read task finished"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>lv_indev_get_act</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>indev_act</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_indev_type_t</name></type> <name>lv_indev_get_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>indev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_INDEV_TYPE_NONE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>type</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_indev_reset</name><parameter_list>(<parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>indev</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>reset_query</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>i</name> <init>= <expr><call><name>lv_indev_get_next</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>reset_query</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>lv_indev_get_next</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_indev_reset_long_press</name><parameter_list>(<parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>long_pr_sent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>longpr_rep_timestamp</name></name> <operator>=</operator> <call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>pr_timestamp</name></name> <operator>=</operator> <call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_indev_enable</name><parameter_list>(<parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>indev</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>disabled</name></name> <operator>=</operator> <ternary><condition><expr><name>en</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_indev_set_cursor</name><parameter_list>(<parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cur_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>LV_INDEV_TYPE_POINTER</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name>cur_obj</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_parent</name><argument_list>(<argument><expr><name><name>indev</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><call><name>lv_disp_get_layer_sys</name><argument_list>(<argument><expr><name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>disp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_pos</name><argument_list>(<argument><expr><name><name>indev</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_point</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_point</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<function><type><name>void</name></type> <name>lv_indev_set_group</name><parameter_list>(<parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name></decl></parameter>, <parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>LV_INDEV_TYPE_KEYPAD</name> <operator>||</operator> <name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>LV_INDEV_TYPE_ENCODER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <name>group</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>lv_indev_set_button_points</name><parameter_list>(<parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_point_t</name> <modifier>*</modifier></type> <name>points</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>LV_INDEV_TYPE_BUTTON</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>btn_points</name></name> <operator>=</operator> <name>points</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_indev_get_point</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name></decl></parameter>, <parameter><decl><type><name>lv_point_t</name> <modifier>*</modifier></type> <name>point</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>LV_INDEV_TYPE_POINTER</name> <operator>&amp;&amp;</operator> <name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>LV_INDEV_TYPE_BUTTON</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>point</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>point</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_point</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_point</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>lv_indev_get_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>LV_INDEV_TYPE_KEYPAD</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>keypad</name><operator>.</operator><name>last_key</name></name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_indev_is_dragging</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>indev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>LV_INDEV_TYPE_POINTER</name> <operator>&amp;&amp;</operator> <name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>LV_INDEV_TYPE_BUTTON</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_in_prog</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_indev_get_vect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name></decl></parameter>, <parameter><decl><type><name>lv_point_t</name> <modifier>*</modifier></type> <name>point</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>indev</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>point</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>LV_INDEV_TYPE_POINTER</name> <operator>&amp;&amp;</operator> <name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>LV_INDEV_TYPE_BUTTON</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>point</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>point</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>vect</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>vect</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_indev_wait_release</name><parameter_list>(<parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>indev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content><return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>wait_until_release</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>lv_indev_get_read_task</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>indev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>indev</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_indev_get_read_task: indev was NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>indev</name><operator>-&gt;</operator><name>refr_task</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_indev_get_obj_act</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>indev_obj_act</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>indev_pointer_proc</name><parameter_list>(<parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>lv_indev_data_t</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>cursor</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_point</name><operator>.</operator><name>x</name></name> <operator>!=</operator> <name><name>data</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>x</name></name> <operator>||</operator> <name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_point</name><operator>.</operator><name>y</name></name> <operator>!=</operator> <name><name>data</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_set_pos</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_point</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_point</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>LV_INDEV_STATE_PR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>indev_proc_press</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>indev_proc_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_point</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_point</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_point</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_point</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>indev_keypad_proc</name><parameter_list>(<parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>lv_indev_data_t</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LV_INDEV_STATE_PR</name> <operator>&amp;&amp;</operator> <name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>wait_until_release</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>wait_until_release</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>wait_until_release</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>pr_timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>long_pr_sent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>keypad</name><operator>.</operator><name>last_state</name></name> <operator>=</operator> <name>LV_INDEV_STATE_REL</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>g</name> <init>= <expr><name><name>i</name><operator>-&gt;</operator><name>group</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>g</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>indev_obj_act</name> <operator>=</operator> <call><name>lv_group_get_focused</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>indev_obj_act</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>prev_key</name> <init>= <expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>keypad</name><operator>.</operator><name>last_key</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>keypad</name><operator>.</operator><name>last_key</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>prev_state</name> <init>= <expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>keypad</name><operator>.</operator><name>last_state</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>keypad</name><operator>.</operator><name>last_state</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LV_INDEV_STATE_PR</name> <operator>&amp;&amp;</operator> <name>prev_state</name> <operator>==</operator> <name>LV_INDEV_STATE_REL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>pr_timestamp</name></name> <operator>=</operator> <call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>LV_KEY_ENTER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_group_send_data</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>LV_KEY_ENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>indev_obj_act</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_SIGNAL_PRESSED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_PRESSED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>LV_KEY_ESC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_group_send_data</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>LV_KEY_ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_CANCEL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>LV_KEY_NEXT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_group_set_editing</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>lv_group_focus_next</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>LV_KEY_PREV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_group_set_editing</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>lv_group_focus_prev</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_group_send_data</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LV_INDEV_STATE_PR</name> <operator>&amp;&amp;</operator> <name>prev_state</name> <operator>==</operator> <name>LV_INDEV_STATE_PR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>long_pr_sent</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>lv_tick_elaps</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>pr_timestamp</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>i</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>long_press_time</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>long_pr_sent</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>LV_KEY_ENTER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>longpr_rep_timestamp</name></name> <operator>=</operator> <call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>indev_obj_act</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_SIGNAL_LONG_PRESS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_LONG_PRESSED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>long_pr_sent</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>lv_tick_elaps</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>longpr_rep_timestamp</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>i</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>long_press_rep_time</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>longpr_rep_timestamp</name></name> <operator>=</operator> <call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>LV_KEY_ENTER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>indev_obj_act</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_SIGNAL_LONG_PRESS_REP</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_LONG_PRESSED_REPEAT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>LV_KEY_NEXT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_group_set_editing</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>lv_group_focus_next</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>LV_KEY_PREV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_group_set_editing</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>lv_group_focus_prev</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_group_send_data</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LV_INDEV_STATE_REL</name> <operator>&amp;&amp;</operator> <name>prev_state</name> <operator>==</operator> <name>LV_INDEV_STATE_PR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>prev_key</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>LV_KEY_ENTER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>indev_obj_act</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_SIGNAL_RELEASED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>long_pr_sent</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_SHORT_CLICKED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_CLICKED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_RELEASED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>pr_timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>long_pr_sent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>indev_obj_act</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>i</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>indev_encoder_proc</name><parameter_list>(<parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>lv_indev_data_t</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LV_INDEV_STATE_PR</name> <operator>&amp;&amp;</operator> <name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>wait_until_release</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>wait_until_release</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>wait_until_release</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>pr_timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>long_pr_sent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>keypad</name><operator>.</operator><name>last_state</name></name> <operator>=</operator> <name>LV_INDEV_STATE_REL</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_indev_state_t</name></type> <name>last_state</name> <init>= <expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>keypad</name><operator>.</operator><name>last_state</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>keypad</name><operator>.</operator><name>last_state</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>keypad</name><operator>.</operator><name>last_key</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>g</name> <init>= <expr><name><name>i</name><operator>-&gt;</operator><name>group</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>g</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>indev_obj_act</name> <operator>=</operator> <call><name>lv_group_get_focused</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>indev_obj_act</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LV_INDEV_STATE_REL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_group_get_editing</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>s</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>enc_diff</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <operator>-</operator><name><name>data</name><operator>-&gt;</operator><name>enc_diff</name></name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_group_send_data</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>LV_KEY_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>enc_diff</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>enc_diff</name></name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_group_send_data</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>LV_KEY_RIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>s</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>enc_diff</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <operator>-</operator><name><name>data</name><operator>-&gt;</operator><name>enc_diff</name></name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_group_focus_prev</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>enc_diff</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>enc_diff</name></name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_group_focus_next</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>indev_obj_act</name> <operator>=</operator> <call><name>lv_group_get_focused</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>indev_obj_act</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LV_INDEV_STATE_PR</name> <operator>&amp;&amp;</operator> <name>last_state</name> <operator>==</operator> <name>LV_INDEV_STATE_REL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>editable</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>indev_obj_act</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_SIGNAL_GET_EDITABLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>editable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>pr_timestamp</name></name> <operator>=</operator> <call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_group_get_editing</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name> <operator>||</operator> <name>editable</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>indev_obj_act</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_SIGNAL_PRESSED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_PRESSED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LV_INDEV_STATE_PR</name> <operator>&amp;&amp;</operator> <name>last_state</name> <operator>==</operator> <name>LV_INDEV_STATE_PR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>long_pr_sent</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>lv_tick_elaps</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>pr_timestamp</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>i</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>long_press_time</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>editable</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>indev_obj_act</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_SIGNAL_GET_EDITABLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>editable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>editable</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_ll_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>obj_ll</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_group_set_editing</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>lv_group_get_editing</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>indev_obj_act</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_SIGNAL_LONG_PRESS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_LONG_PRESSED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>long_pr_sent</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LV_INDEV_STATE_REL</name> <operator>&amp;&amp;</operator> <name>last_state</name> <operator>==</operator> <name>LV_INDEV_STATE_PR</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>editable</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>indev_obj_act</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_SIGNAL_GET_EDITABLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>editable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>editable</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>indev_obj_act</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_SIGNAL_RELEASED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>long_pr_sent</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_SHORT_CLICKED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_CLICKED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_RELEASED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>editing</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>long_pr_sent</name></name> <operator>||</operator> <call><name>lv_ll_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>obj_ll</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>indev_obj_act</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_SIGNAL_RELEASED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_SHORT_CLICKED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_CLICKED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_RELEASED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_group_send_data</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>LV_KEY_ENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>editable</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>editing</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>long_pr_sent</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_group_set_editing</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>pr_timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>long_pr_sent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>indev_obj_act</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>i</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>indev_button_proc</name><parameter_list>(<parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>lv_indev_data_t</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_point</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>btn_points</name><index>[<expr><name><name>data</name><operator>-&gt;</operator><name>btn_id</name></name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_point</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>btn_points</name><index>[<expr><name><name>data</name><operator>-&gt;</operator><name>btn_id</name></name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_point</name><operator>.</operator><name>x</name></name> <operator>==</operator> <name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_point</name><operator>.</operator><name>x</name></name> <operator>&amp;&amp;</operator>

<name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_point</name><operator>.</operator><name>y</name></name> <operator>==</operator> <name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_point</name><operator>.</operator><name>y</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LV_INDEV_STATE_PR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>indev_proc_press</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>indev_proc_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_point</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_point</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_point</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_point</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>indev_proc_press</name><parameter_list>(<parameter><decl><type><name>lv_indev_proc_t</name> <modifier>*</modifier></type> <name>proc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>indev_obj_act</name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_obj</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>wait_until_release</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name> <init>= <expr><name><name>indev_act</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>disp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>new_obj_searched</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>indev_obj_act</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>indev_obj_act</name> <operator>=</operator> <call><name>indev_search_obj</name><argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><call><name>lv_disp_get_layer_sys</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>indev_obj_act</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>indev_obj_act</name> <operator>=</operator> <call><name>indev_search_obj</name><argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><call><name>lv_disp_get_layer_top</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>indev_obj_act</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>indev_obj_act</name> <operator>=</operator> <call><name>indev_search_obj</name><argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><call><name>lv_disp_get_scr_act</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_obj_searched</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_in_prog</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>lv_obj_is_protected</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_PROTECT_PRESS_LOST</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>indev_obj_act</name> <operator>=</operator> <call><name>indev_search_obj</name><argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><call><name>lv_disp_get_layer_sys</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>indev_obj_act</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>indev_obj_act</name> <operator>=</operator> <call><name>indev_search_obj</name><argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><call><name>lv_disp_get_layer_top</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>indev_obj_act</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>indev_obj_act</name> <operator>=</operator> <call><name>indev_search_obj</name><argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><call><name>lv_disp_get_scr_act</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_obj_searched</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>new_obj_searched</name> <operator>&amp;&amp;</operator> <name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_obj</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indev_drag_throw</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>indev_obj_act</name> <operator>!=</operator> <name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_obj</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_point</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_point</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_point</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_point</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_obj</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>last_obj</name> <init>= <expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_obj</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>last_obj</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>last_obj</name></expr></argument>, <argument><expr><name>LV_SIGNAL_PRESS_LOST</name></expr></argument>, <argument><expr><name>indev_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>last_obj</name></expr></argument>, <argument><expr><name>LV_EVENT_PRESS_LOST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_obj</name></name> <operator>=</operator> <name>indev_obj_act</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_obj</name></name> <operator>=</operator> <name>indev_obj_act</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>indev_obj_act</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>pr_timestamp</name></name> <operator>=</operator> <call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>long_pr_sent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_limit_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_in_prog</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_sum</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_sum</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>vect</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>vect</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>i</name> <init>= <expr><name>indev_obj_act</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>last_top</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>i</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>top</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>last_top</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>last_top</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_move_foreground</name><argument_list>(<argument><expr><name>last_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>indev_obj_act</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_SIGNAL_PRESSED</name></expr></argument>, <argument><expr><name>indev_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_PRESSED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>vect</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_point</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_point</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>vect</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_point</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_point</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>x</name></name> <operator>*</operator> <literal type="number">5</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>y</name></name> <operator>*</operator> <literal type="number">5</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>x</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>x</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>y</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>y</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <operator>(</operator><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>vect</name><operator>.</operator><name>x</name></name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <operator>(</operator><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>vect</name><operator>.</operator><name>y</name></name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>indev_obj_act</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>indev_obj_act</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_SIGNAL_PRESSING</name></expr></argument>, <argument><expr><name>indev_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_PRESSING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>indev_drag</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_in_prog</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>proc</name><operator>-&gt;</operator><name>long_pr_sent</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_tick_elaps</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>pr_timestamp</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>indev_act</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>long_press_time</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>indev_obj_act</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_SIGNAL_LONG_PRESS</name></expr></argument>, <argument><expr><name>indev_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_LONG_PRESSED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>long_pr_sent</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>longpr_rep_timestamp</name></name> <operator>=</operator> <call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_in_prog</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>proc</name><operator>-&gt;</operator><name>long_pr_sent</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_tick_elaps</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>longpr_rep_timestamp</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>indev_act</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>long_press_rep_time</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>indev_obj_act</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_SIGNAL_LONG_PRESS_REP</name></expr></argument>, <argument><expr><name>indev_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_LONG_PRESSED_REPEAT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>longpr_rep_timestamp</name></name> <operator>=</operator> <call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>indev_proc_release</name><parameter_list>(<parameter><decl><type><name>lv_indev_proc_t</name> <modifier>*</modifier></type> <name>proc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>wait_until_release</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_obj</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_obj</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>pr_timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>longpr_rep_timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>wait_until_release</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>indev_obj_act</name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_obj</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>indev_obj_act</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_is_protected</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_PROTECT_PRESS_LOST</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>indev_obj_act</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_SIGNAL_RELEASED</name></expr></argument>, <argument><expr><name>indev_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_in_prog</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>long_pr_sent</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_SHORT_CLICKED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_CLICKED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_RELEASED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>indev_obj_act</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_SIGNAL_RELEASED</name></expr></argument>, <argument><expr><name>indev_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>long_pr_sent</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_in_prog</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_SHORT_CLICKED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_in_prog</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_CLICKED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_EVENT_RELEASED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>click_focus_sent</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>g</name> <init>= <expr><call><name>lv_obj_get_group</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_is_protected</name><argument_list>(<argument><expr><name>indev_obj_act</name></expr></argument>, <argument><expr><name>LV_PROTECT_CLICK_FOCUS</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>parent</name> <init>= <expr><name>indev_obj_act</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>g</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>parent</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_is_protected</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>LV_PROTECT_CLICK_FOCUS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>lv_obj_get_group</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>g</name> <operator>&amp;&amp;</operator> <name>parent</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_group_get_click_focus</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>click_focus_sent</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_group_focus_obj</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_pressed</name></name> <operator>!=</operator> <name>indev_obj_act</name> <operator>&amp;&amp;</operator> <name>click_focus_sent</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_pressed</name></name></expr></argument>, <argument><expr><name>LV_EVENT_DEFOCUSED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_obj</name></name></expr></argument>, <argument><expr><name>LV_EVENT_FOCUSED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_pressed</name></name> <operator>=</operator> <name>indev_obj_act</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>drag_obj</name> <init>= <expr><name>indev_obj_act</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><call><name>lv_obj_get_drag_parent</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name> <operator>&amp;&amp;</operator> <name>drag_obj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>drag_obj</name> <operator>=</operator> <call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>drag_obj</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_drag_throw</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_in_prog</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>, <argument><expr><name>LV_EVENT_DRAG_THROW_BEGIN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_obj</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>pr_timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>longpr_rep_timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_obj</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>proc</name><operator>-&gt;</operator><name>reset_query</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>indev_drag_throw</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>indev_proc_reset_query_handler</name><parameter_list>(<parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>reset_query</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_obj</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_obj</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_pressed</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_limit_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_in_prog</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>long_pr_sent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>pr_timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>longpr_rep_timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_sum</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_sum</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>reset_query</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>indev_obj_act</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>indev_search_obj</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_indev_proc_t</name> <modifier>*</modifier></type> <name>proc</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>found_p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_EXT_CLICK_AREA</name> <operator>==</operator> <name>LV_EXT_CLICK_AREA_TINY</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>ext_area</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>-</operator> <name><name>obj</name><operator>-&gt;</operator><name>ext_click_pad_hor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x2</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>ext_click_pad_hor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>-</operator> <name><name>obj</name><operator>-&gt;</operator><name>ext_click_pad_ver</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y2</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>ext_click_pad_ver</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_area_is_point_on</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ext_area</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_point</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_USE_EXT_CLICK_AREA</name> <operator>==</operator> <name>LV_EXT_CLICK_AREA_FULL</name></expr></cpp:elif>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>ext_area</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>-</operator> <name><name>obj</name><operator>-&gt;</operator><name>ext_click_pad</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x2</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>ext_click_pad</name><operator>.</operator><name>x2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>-</operator> <name><name>obj</name><operator>-&gt;</operator><name>ext_click_pad</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y2</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>ext_click_pad</name><operator>.</operator><name>y2</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_area_is_point_on</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ext_area</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_point</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>(<expr><call><name>lv_area_is_point_on</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>coords</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_point</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>i</name></decl>;</decl_stmt>

<macro><name>LV_LL_READ</name><argument_list>(<argument>obj-&gt;child_ll</argument>, <argument>i</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name>found_p</name> <operator>=</operator> <call><name>indev_search_obj</name><argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>found_p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if<condition>(<expr><name>found_p</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>lv_obj_get_click</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>hidden_i</name> <init>= <expr><name>obj</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>hidden_i</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_hidden</name><argument_list>(<argument><expr><name>hidden_i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hidden_i</name> <operator>=</operator> <call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>hidden_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>hidden_i</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>found_p</name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>found_p</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>indev_drag</name><parameter_list>(<parameter><decl><type><name>lv_indev_proc_t</name> <modifier>*</modifier></type> <name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>drag_obj</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_obj</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>drag_just_started</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><call><name>lv_obj_get_drag_parent</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name> <operator>&amp;&amp;</operator> <name>drag_obj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>drag_obj</name> <operator>=</operator> <call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>drag_obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_drag</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_drag_dir_t</name></type> <name>allowed_dirs</name> <init>= <expr><call><name>lv_obj_get_drag_dir</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_sum</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>vect</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_sum</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>vect</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_limit_out</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>allowed_dirs</name> <operator>&amp;</operator> <name>LV_DRAG_DIR_HOR</name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_sum</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>indev_act</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>drag_limit</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>allowed_dirs</name> <operator>&amp;</operator> <name>LV_DRAG_DIR_VER</name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_sum</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>indev_act</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>drag_limit</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_limit_out</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>drag_just_started</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_limit_out</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>vect</name><operator>.</operator><name>x</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>state</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>vect</name><operator>.</operator><name>y</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>inv_buf_size</name> <init>=

<expr><call><name>lv_disp_get_inv_buf_size</name><argument_list>(<argument><expr><name><name>indev_act</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>disp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>prev_x</name> <init>= <expr><name><name>drag_obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>prev_y</name> <init>= <expr><name><name>drag_obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>prev_par_w</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>prev_par_h</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>act_x</name> <init>= <expr><call><name>lv_obj_get_x</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>act_y</name> <init>= <expr><call><name>lv_obj_get_y</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>allowed_dirs</name> <operator>==</operator> <name>LV_DRAG_DIR_ALL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>drag_just_started</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>act_x</name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_sum</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>act_y</name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_sum</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_set_pos</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>, <argument><expr><name>act_x</name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>vect</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>act_y</name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>vect</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>allowed_dirs</name> <operator>&amp;</operator> <name>LV_DRAG_DIR_HOR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>drag_just_started</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>act_x</name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_sum</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_set_x</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>, <argument><expr><name>act_x</name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>vect</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>allowed_dirs</name> <operator>&amp;</operator> <name>LV_DRAG_DIR_VER</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>drag_just_started</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>act_y</name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_sum</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_set_y</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>, <argument><expr><name>act_y</name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>vect</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>drag_obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>==</operator> <name>prev_x</name> <operator>&amp;&amp;</operator> <name><name>drag_obj</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>==</operator> <name>prev_y</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>act_par_w</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>act_par_h</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>act_par_w</name> <operator>==</operator> <name>prev_par_w</name> <operator>&amp;&amp;</operator> <name>act_par_h</name> <operator>==</operator> <name>prev_par_h</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>new_inv_buf_size</name> <init>= <expr><call><name>lv_disp_get_inv_buf_size</name><argument_list>(<argument><expr><name><name>indev_act</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>disp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_disp_pop_from_inv_buf</name><argument_list>(<argument><expr><name><name>indev_act</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>disp</name></name></expr></argument>, <argument><expr><name>new_inv_buf_size</name> <operator>-</operator> <name>inv_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_in_prog</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>drag_just_started</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>drag_obj</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>, <argument><expr><name>LV_SIGNAL_DRAG_BEGIN</name></expr></argument>, <argument><expr><name>indev_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>, <argument><expr><name>LV_EVENT_DRAG_BEGIN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>indev_drag_throw</name><parameter_list>(<parameter><decl><type><name>lv_indev_proc_t</name> <modifier>*</modifier></type> <name>proc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_in_prog</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>drag_obj</name> <init>= <expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>last_obj</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><call><name>lv_obj_get_drag_parent</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name> <operator>&amp;&amp;</operator> <name>drag_obj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>drag_obj</name> <operator>=</operator> <call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>drag_obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_drag_throw</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_in_prog</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>drag_obj</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>, <argument><expr><name>LV_SIGNAL_DRAG_END</name></expr></argument>, <argument><expr><name>indev_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>, <argument><expr><name>LV_EVENT_DRAG_END</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>, <argument><expr><name>LV_EVENT_DRAG_END</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_drag_dir_t</name></type> <name>allowed_dirs</name> <init>= <expr><call><name>lv_obj_get_drag_dir</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>x</name></name> <operator>=</operator>

<name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>x</name></name> <operator>*</operator> <operator>(</operator><literal type="number">100</literal> <operator>-</operator> <name><name>indev_act</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>drag_throw</name></name><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>y</name></name> <operator>=</operator>

<name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>y</name></name> <operator>*</operator> <operator>(</operator><literal type="number">100</literal> <operator>-</operator> <name><name>indev_act</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>drag_throw</name></name><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>x</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>y</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>coords_ori</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>coords_ori</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>act_x</name> <init>= <expr><call><name>lv_obj_get_x</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>act_y</name> <init>= <expr><call><name>lv_obj_get_y</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>allowed_dirs</name> <operator>==</operator> <name>LV_DRAG_DIR_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_obj_set_pos</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>, <argument><expr><name>act_x</name></expr></argument>, <argument><expr><name>act_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>allowed_dirs</name> <operator>&amp;</operator> <name>LV_DRAG_DIR_HOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_obj_set_x</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>, <argument><expr><name>act_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>allowed_dirs</name> <operator>&amp;</operator> <name>LV_DRAG_DIR_VER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_obj_set_y</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>, <argument><expr><name>act_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>coord_new</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>coord_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>coords_ori</name><operator>.</operator><name>x1</name></name> <operator>==</operator> <name><name>coord_new</name><operator>.</operator><name>x1</name></name> <operator>||</operator> <name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>x</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>coords_ori</name><operator>.</operator><name>y1</name></name> <operator>==</operator> <name><name>coord_new</name><operator>.</operator><name>y1</name></name> <operator>||</operator> <name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>y</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_in_prog</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>vect</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>vect</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_throw_vect</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>drag_obj</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>, <argument><expr><name>LV_SIGNAL_DRAG_END</name></expr></argument>, <argument><expr><name>indev_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>, <argument><expr><name>LV_EVENT_DRAG_END</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>drag_in_prog</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>drag_obj</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>, <argument><expr><name>LV_SIGNAL_DRAG_END</name></expr></argument>, <argument><expr><name>indev_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>drag_obj</name></expr></argument>, <argument><expr><name>LV_EVENT_DRAG_END</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>indev_reset_check</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>indev_reset_check</name><parameter_list>(<parameter><decl><type><name>lv_indev_proc_t</name> <modifier>*</modifier></type> <name>proc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>reset_query</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>indev_obj_act</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>proc</name><operator>-&gt;</operator><name>reset_query</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function></block_content></block></if></if_stmt></block_content></block></function>

</unit>
