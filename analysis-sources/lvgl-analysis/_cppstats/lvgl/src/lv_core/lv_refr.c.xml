<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_core\lv_refr.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_refr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_disp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_hal/lv_hal_tick.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_hal/lv_hal_disp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_task.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_gc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_draw/lv_draw.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_GC_INCLUDE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> LV_GC_INCLUDE</cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK_AREA_DEBUG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_refr_join_area</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_refr_areas</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_refr_area</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>area_p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_refr_area_part</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>area_p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_refr_get_top_obj</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>area_p</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_refr_obj_and_children</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>top_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask_p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_refr_obj</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask_ori_p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_refr_vdb_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>px_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp_refr</name></decl>;</decl_stmt> 

<function><type><name>void</name></type> <name>lv_refr_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_refr_now</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>disp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_disp_refr_task</name><argument_list>(<argument><expr><name><name>disp</name><operator>-&gt;</operator><name>refr_task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>lv_disp_get_next</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>d</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_disp_refr_task</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>refr_task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>lv_disp_get_next</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_inv_area</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>area_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>disp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>lv_disp_get_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>disp</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>area_p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>inv_p</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>scr_area</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>scr_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scr_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scr_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <call><name>lv_disp_get_hor_res</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scr_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <call><name>lv_disp_get_ver_res</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>com_area</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>suc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>suc</name> <operator>=</operator> <call><name>lv_area_intersect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>com_area</name></expr></argument>, <argument><expr><name>area_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scr_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>suc</name> <operator>!=</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>rounder_cb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>rounder_cb</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>com_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>disp</name><operator>-&gt;</operator><name>inv_p</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_area_is_in</name><argument_list>(<argument><expr><operator>&amp;</operator><name>com_area</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>inv_areas</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>inv_p</name></name> <operator>&lt;</operator> <name>LV_INV_BUF_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>inv_areas</name><index>[<expr><name><name>disp</name><operator>-&gt;</operator><name>inv_p</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>com_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>inv_p</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>inv_areas</name><index>[<expr><name><name>disp</name><operator>-&gt;</operator><name>inv_p</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scr_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>inv_p</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>lv_refr_get_disp_refreshing</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>disp_refr</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_refr_set_disp_refreshing</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>disp_refr</name> <operator>=</operator> <name>disp</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_disp_refr_task</name><parameter_list>(<parameter><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>task</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"lv_refr_task: started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>start</name> <init>= <expr><call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>disp_refr</name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>user_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_refr_join_area</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_refr_areas</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>disp_refr</name><operator>-&gt;</operator><name>inv_p</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_disp_is_true_double_buf</name><argument_list>(<argument><expr><name>disp_refr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>disp_refr</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>set_px_cb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_disp_buf_t</name> <modifier>*</modifier></type> <name>vdb</name> <init>= <expr><call><name>lv_disp_get_buf</name><argument_list>(<argument><expr><name>disp_refr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_refr_vdb_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>flushing</name></name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf_act</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>vdb</name><operator>-&gt;</operator><name>buf_act</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf_ina</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>vdb</name><operator>-&gt;</operator><name>buf_act</name></name> <operator>==</operator> <name><name>vdb</name><operator>-&gt;</operator><name>buf1</name></name></expr> ?</condition><then> <expr><name><name>vdb</name><operator>-&gt;</operator><name>buf2</name></name></expr> </then><else>: <expr><name><name>vdb</name><operator>-&gt;</operator><name>buf1</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>hres</name> <init>= <expr><call><name>lv_disp_get_hor_res</name><argument_list>(<argument><expr><name>disp_refr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>a</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <name><name>disp_refr</name><operator>-&gt;</operator><name>inv_p</name></name></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>disp_refr</name><operator>-&gt;</operator><name>inv_area_joined</name><index>[<expr><name>a</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>start_offs</name> <init>=

<expr><operator>(</operator><name>hres</name> <operator>*</operator> <name><name>disp_refr</name><operator>-&gt;</operator><name>inv_areas</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>y1</name> <operator>+</operator> <name><name>disp_refr</name><operator>-&gt;</operator><name>inv_areas</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>x1</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_color_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>line_length</name> <init>= <expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp_refr</name><operator>-&gt;</operator><name>inv_areas</name><index>[<expr><name>a</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_color_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>y</name> <operator>=</operator> <name><name>disp_refr</name><operator>-&gt;</operator><name>inv_areas</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>y1</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name><name>disp_refr</name><operator>-&gt;</operator><name>inv_areas</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>y2</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf_act</name> <operator>+</operator> <name>start_offs</name></expr></argument>, <argument><expr><name>buf_ina</name> <operator>+</operator> <name>start_offs</name></expr></argument>, <argument><expr><name>line_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start_offs</name> <operator>+=</operator> <name>hres</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_color_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt> 

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>disp_refr</name><operator>-&gt;</operator><name>inv_areas</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>disp_refr</name><operator>-&gt;</operator><name>inv_areas</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>disp_refr</name><operator>-&gt;</operator><name>inv_area_joined</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>disp_refr</name><operator>-&gt;</operator><name>inv_area_joined</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>disp_refr</name><operator>-&gt;</operator><name>inv_p</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>disp_refr</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>monitor_cb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>disp_refr</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>monitor_cb</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp_refr</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><call><name>lv_tick_elaps</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>px_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_draw_free_buf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"lv_refr_task: ready"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_refr_join_area</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>join_from</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>join_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>joined_area</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>join_in</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>join_in</name> <operator>&lt;</operator> <name><name>disp_refr</name><operator>-&gt;</operator><name>inv_p</name></name></expr>;</condition> <incr><expr><name>join_in</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>disp_refr</name><operator>-&gt;</operator><name>inv_area_joined</name><index>[<expr><name>join_in</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>join_from</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>join_from</name> <operator>&lt;</operator> <name><name>disp_refr</name><operator>-&gt;</operator><name>inv_p</name></name></expr>;</condition> <incr><expr><name>join_from</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>disp_refr</name><operator>-&gt;</operator><name>inv_area_joined</name><index>[<expr><name>join_from</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>join_in</name> <operator>==</operator> <name>join_from</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_area_is_on</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp_refr</name><operator>-&gt;</operator><name>inv_areas</name><index>[<expr><name>join_in</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>disp_refr</name><operator>-&gt;</operator><name>inv_areas</name><index>[<expr><name>join_from</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_area_join</name><argument_list>(<argument><expr><operator>&amp;</operator><name>joined_area</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>disp_refr</name><operator>-&gt;</operator><name>inv_areas</name><index>[<expr><name>join_in</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>disp_refr</name><operator>-&gt;</operator><name>inv_areas</name><index>[<expr><name>join_from</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_area_get_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>joined_area</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><call><name>lv_area_get_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp_refr</name><operator>-&gt;</operator><name>inv_areas</name><index>[<expr><name>join_in</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>lv_area_get_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp_refr</name><operator>-&gt;</operator><name>inv_areas</name><index>[<expr><name>join_from</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp_refr</name><operator>-&gt;</operator><name>inv_areas</name><index>[<expr><name>join_in</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>joined_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>disp_refr</name><operator>-&gt;</operator><name>inv_area_joined</name><index>[<expr><name>join_from</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_refr_areas</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>px_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>disp_refr</name><operator>-&gt;</operator><name>inv_p</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>disp_refr</name><operator>-&gt;</operator><name>inv_area_joined</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_refr_area</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp_refr</name><operator>-&gt;</operator><name>inv_areas</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>disp_refr</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>monitor_cb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>px_num</name> <operator>+=</operator> <call><name>lv_area_get_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp_refr</name><operator>-&gt;</operator><name>inv_areas</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_refr_area</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>area_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_disp_is_true_double_buf</name><argument_list>(<argument><expr><name>disp_refr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_disp_buf_t</name> <modifier>*</modifier></type> <name>vdb</name> <init>= <expr><call><name>lv_disp_get_buf</name><argument_list>(<argument><expr><name>disp_refr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <call><name>lv_disp_get_hor_res</name><argument_list>(<argument><expr><name>disp_refr</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <call><name>lv_disp_get_ver_res</name><argument_list>(<argument><expr><name>disp_refr</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_refr_area_part</name><argument_list>(<argument><expr><name>area_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_disp_buf_t</name> <modifier>*</modifier></type> <name>vdb</name> <init>= <expr><call><name>lv_disp_get_buf</name><argument_list>(<argument><expr><name>disp_refr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w</name> <init>= <expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>area_p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h</name> <init>= <expr><call><name>lv_area_get_height</name><argument_list>(<argument><expr><name>area_p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y2</name> <init>=

<expr><ternary><condition><expr><name><name>area_p</name><operator>-&gt;</operator><name>y2</name></name> <operator>&gt;=</operator> <call><name>lv_disp_get_ver_res</name><argument_list>(<argument><expr><name>disp_refr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>y2</name> <operator>=</operator> <call><name>lv_disp_get_ver_res</name><argument_list>(<argument><expr><name>disp_refr</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name><name>area_p</name><operator>-&gt;</operator><name>y2</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>max_row</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>vdb</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <name>w</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>max_row</name> <operator>&gt;</operator> <name>h</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>max_row</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>disp_refr</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>rounder_cb</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h_tmp</name> <init>= <expr><name>max_row</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name>h_tmp</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>disp_refr</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>rounder_cb</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp_refr</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_area_get_height</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>max_row</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>h_tmp</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><name>h_tmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>h_tmp</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Can't set VDB height using the round function. (Wrong round_cb or to "</literal>

<literal type="string">"small VDB)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>max_row</name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>y2</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>row_last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>row</name> <operator>=</operator> <name><name>area_p</name><operator>-&gt;</operator><name>y1</name></name></expr>;</init> <condition><expr><name>row</name> <operator>+</operator> <name>max_row</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>y2</name></expr>;</condition> <incr><expr><name>row</name> <operator>+=</operator> <name>max_row</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>area_p</name><operator>-&gt;</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>area_p</name><operator>-&gt;</operator><name>x2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name>row</name> <operator>+</operator> <name>max_row</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>y2</name></name> <operator>&gt;</operator> <name>y2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name>y2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>row_last</name> <operator>=</operator> <name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>y2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_refr_area_part</name><argument_list>(<argument><expr><name>area_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>y2</name> <operator>!=</operator> <name>row_last</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>area_p</name><operator>-&gt;</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>area_p</name><operator>-&gt;</operator><name>x2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name>y2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_refr_area_part</name><argument_list>(<argument><expr><name>area_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_refr_area_part</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>area_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_disp_buf_t</name> <modifier>*</modifier></type> <name>vdb</name> <init>= <expr><call><name>lv_disp_get_buf</name><argument_list>(<argument><expr><name>disp_refr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_disp_is_double_buf</name><argument_list>(<argument><expr><name>disp_refr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>flushing</name></name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>top_p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>start_mask</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_area_intersect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_mask</name></expr></argument>, <argument><expr><name>area_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vdb</name><operator>-&gt;</operator><name>area</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>top_p</name> <operator>=</operator> <call><name>lv_refr_get_top_obj</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_mask</name></expr></argument>, <argument><expr><call><name>lv_disp_get_scr_act</name><argument_list>(<argument><expr><name>disp_refr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_refr_obj_and_children</name><argument_list>(<argument><expr><name>top_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_refr_obj_and_children</name><argument_list>(<argument><expr><call><name>lv_disp_get_layer_top</name><argument_list>(<argument><expr><name>disp_refr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_refr_obj_and_children</name><argument_list>(<argument><expr><call><name>lv_disp_get_layer_sys</name><argument_list>(<argument><expr><name>disp_refr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_disp_is_true_double_buf</name><argument_list>(<argument><expr><name>disp_refr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_refr_vdb_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_refr_get_top_obj</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>area_p</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>found_p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_area_is_in</name><argument_list>(<argument><expr><name>area_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>coords</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>hidden</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>i</name></decl>;</decl_stmt>

<macro><name>LV_LL_READ</name><argument_list>(<argument>obj-&gt;child_ll</argument>, <argument>i</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name>found_p</name> <operator>=</operator> <call><name>lv_refr_get_top_obj</name><argument_list>(<argument><expr><name>area_p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>found_p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if<condition>(<expr><name>found_p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>opa</name></name> <operator>==</operator> <name>LV_OPA_COVER</name> <operator>&amp;&amp;</operator> <call><name><name>obj</name><operator>-&gt;</operator><name>design_cb</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>area_p</name></expr></argument>, <argument><expr><name>LV_DESIGN_COVER_CHK</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name> <operator>&amp;&amp;</operator>

<call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LV_OPA_COVER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found_p</name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>found_p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_refr_obj_and_children</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>top_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>top_p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>top_p</name> <operator>=</operator> <call><name>lv_disp_get_scr_act</name><argument_list>(<argument><expr><name>disp_refr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_refr_obj</name><argument_list>(<argument><expr><name>top_p</name></expr></argument>, <argument><expr><name>mask_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>border_p</name> <init>= <expr><name>top_p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>par</name> <operator>=</operator> <call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>top_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>par</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>i</name> <init>= <expr><call><name>lv_ll_get_prev</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>par</name><operator>-&gt;</operator><name>child_ll</name></name><operator>)</operator></expr></argument>, <argument><expr><name>border_p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>i</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_refr_obj</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>mask_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>lv_ll_get_prev</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>par</name><operator>-&gt;</operator><name>child_ll</name></name><operator>)</operator></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name><name>par</name><operator>-&gt;</operator><name>design_cb</name></name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>mask_p</name></expr></argument>, <argument><expr><name>LV_DESIGN_DRAW_POST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>border_p</name> <operator>=</operator> <name>par</name></expr>;</expr_stmt>

<expr_stmt><expr><name>par</name> <operator>=</operator> <call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_refr_obj</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask_ori_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>hidden</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>union_ok</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>obj_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>obj_ext_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>obj_area</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>ext_size</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj_area</name><operator>.</operator><name>x1</name></name> <operator>-=</operator> <name>ext_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj_area</name><operator>.</operator><name>y1</name></name> <operator>-=</operator> <name>ext_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj_area</name><operator>.</operator><name>x2</name></name> <operator>+=</operator> <name>ext_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj_area</name><operator>.</operator><name>y2</name></name> <operator>+=</operator> <name>ext_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>union_ok</name> <operator>=</operator> <call><name>lv_area_intersect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj_ext_mask</name></expr></argument>, <argument><expr><name>mask_ori_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>union_ok</name> <operator>!=</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>obj</name><operator>-&gt;</operator><name>design_cb</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj_ext_mask</name></expr></argument>, <argument><expr><name>LV_DESIGN_DRAW_MAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MASK_AREA_DEBUG</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_color_t</name></type> <name>debug_color</name> <init>= <expr><name>LV_COLOR_RED</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj_ext_mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj_ext_mask</name></expr></argument>, <argument><expr><name>debug_color</name></expr></argument>, <argument><expr><name>LV_OPA_50</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>debug_color</name><operator>.</operator><name>full</name></name> <operator>*=</operator> <literal type="number">17</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>debug_color</name><operator>.</operator><name>full</name></name> <operator>+=</operator> <literal type="number">0xA1</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>union_ok</name> <operator>=</operator> <call><name>lv_area_intersect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj_mask</name></expr></argument>, <argument><expr><name>mask_ori_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>union_ok</name> <operator>!=</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>mask_child</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>child_p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>child_area</name></decl>;</decl_stmt>

<macro><name>LV_LL_READ_BACK</name><argument_list>(<argument>obj-&gt;child_ll</argument>, <argument>child_p</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>child_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ext_size</name> <operator>=</operator> <name><name>child_p</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child_area</name><operator>.</operator><name>x1</name></name> <operator>-=</operator> <name>ext_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child_area</name><operator>.</operator><name>y1</name></name> <operator>-=</operator> <name>ext_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child_area</name><operator>.</operator><name>x2</name></name> <operator>+=</operator> <name>ext_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child_area</name><operator>.</operator><name>y2</name></name> <operator>+=</operator> <name>ext_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>union_ok</name> <operator>=</operator> <call><name>lv_area_intersect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mask_child</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj_mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>union_ok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_refr_obj</name><argument_list>(<argument><expr><name>child_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>obj</name><operator>-&gt;</operator><name>design_cb</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj_ext_mask</name></expr></argument>, <argument><expr><name>LV_DESIGN_DRAW_POST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_refr_vdb_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_disp_buf_t</name> <modifier>*</modifier></type> <name>vdb</name> <init>= <expr><call><name>lv_disp_get_buf</name><argument_list>(<argument><expr><name>disp_refr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_disp_is_double_buf</name><argument_list>(<argument><expr><name>disp_refr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>flushing</name></name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>flushing</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name> <init>= <expr><call><name>lv_refr_get_disp_refreshing</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>flush_cb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>flush_cb</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vdb</name><operator>-&gt;</operator><name>area</name></name></expr></argument>, <argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>buf_act</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>buf1</name></name> <operator>&amp;&amp;</operator> <name><name>vdb</name><operator>-&gt;</operator><name>buf2</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>buf_act</name></name> <operator>==</operator> <name><name>vdb</name><operator>-&gt;</operator><name>buf1</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>buf_act</name></name> <operator>=</operator> <name><name>vdb</name><operator>-&gt;</operator><name>buf2</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>buf_act</name></name> <operator>=</operator> <name><name>vdb</name><operator>-&gt;</operator><name>buf1</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
