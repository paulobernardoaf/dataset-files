<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_misc\lv_task.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_task.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_hal/lv_hal_tick.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_gc.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_GC_INCLUDE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> LV_GC_INCLUDE</cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDLE_MEAS_PERIOD</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_PRIO</name></cpp:macro> <cpp:value>LV_TASK_PRIO_MID</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_PERIOD</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lv_task_exec</name><parameter_list>(<parameter><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>task</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>lv_task_run</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name>idle_last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>task_deleted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>task_created</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>lv_task_core_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lv_ll_init</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_ll</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_task_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_task_enable</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>LV_ATTRIBUTE_TASK_HANDLER</name> <name>void</name></type> <name>lv_task_handler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"lv_task_handler started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>already_running</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>already_running</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>already_running</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>idle_period_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>handler_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>busy_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>lv_task_run</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>already_running</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>handler_start</name> <operator>=</operator> <call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>task_interrupter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>end_flag</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>end_flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>task_deleted</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>task_created</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_act</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>lv_ll_get_head</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_ll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_act</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>lv_ll_get_next</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_ll</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_act</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>lv_task_t</name> <operator>*</operator><operator>)</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_act</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>prio</name> <operator>==</operator> <name>LV_TASK_PRIO_OFF</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_act</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>task_interrupter</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>task_interrupter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_act</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<continue>continue;</continue> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>lv_task_t</name> <operator>*</operator><operator>)</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_act</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>prio</name> <operator>==</operator> <name>LV_TASK_PRIO_HIGHEST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_task_exec</name><argument_list>(<argument><expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_act</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>task_interrupter</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>lv_task_t</name> <operator>*</operator><operator>)</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_act</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>prio</name> <operator>&gt;</operator> <name><name>task_interrupter</name><operator>-&gt;</operator><name>prio</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_task_exec</name><argument_list>(<argument><expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_act</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>task_created</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>task_deleted</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>task_interrupter</name> <operator>=</operator> <call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end_flag</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_task_exec</name><argument_list>(<argument><expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_act</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>task_created</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>task_deleted</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>task_interrupter</name> <operator>=</operator> <call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>end_flag</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>task_created</name> <operator>||</operator> <name>task_deleted</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>task_interrupter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_act</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>next</name></expr>;</expr_stmt> 

</block_content>}</block></while>

</block_content>}</block> while<condition>(<expr><operator>!</operator><name>end_flag</name></expr>)</condition>;</do>

<expr_stmt><expr><name>busy_time</name> <operator>+=</operator> <call><name>lv_tick_elaps</name><argument_list>(<argument><expr><name>handler_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>idle_period_time</name> <init>= <expr><call><name>lv_tick_elaps</name><argument_list>(<argument><expr><name>idle_period_start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>idle_period_time</name> <operator>&gt;=</operator> <name>IDLE_MEAS_PERIOD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idle_last</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>busy_time</name> <operator>*</operator> <literal type="number">100</literal><operator>)</operator> <operator>/</operator> <name>IDLE_MEAS_PERIOD</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>idle_last</name> <operator>=</operator> <ternary><condition><expr><name>idle_last</name> <operator>&gt;</operator> <literal type="number">100</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">100</literal> <operator>-</operator> <name>idle_last</name></expr></else></ternary></expr>;</expr_stmt> 

<expr_stmt><expr><name>busy_time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idle_period_start</name> <operator>=</operator> <call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>already_running</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"lv_task_handler ready"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>lv_task_create_basic</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>new_task</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>lv_ll_get_head</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_ll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_task</name> <operator>=</operator> <call><name>lv_ll_ins_head</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_ll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>new_task</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<do>do <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>prio</name></name> <operator>&lt;=</operator> <name>DEF_PRIO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_task</name> <operator>=</operator> <call><name>lv_ll_ins_prev</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_ll</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>new_task</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>lv_ll_get_next</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_ll</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><name>tmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_task</name> <operator>=</operator> <call><name>lv_ll_ins_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_ll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>new_task</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>new_task</name><operator>-&gt;</operator><name>period</name></name> <operator>=</operator> <name>DEF_PERIOD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_task</name><operator>-&gt;</operator><name>task_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_task</name><operator>-&gt;</operator><name>prio</name></name> <operator>=</operator> <name>DEF_PRIO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_task</name><operator>-&gt;</operator><name>once</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_task</name><operator>-&gt;</operator><name>last_run</name></name> <operator>=</operator> <call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_task</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>task_created</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>new_task</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>lv_task_create</name><parameter_list>(<parameter><decl><type><name>lv_task_cb_t</name></type> <name>task_cb</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>period</name></decl></parameter>, <parameter><decl><type><name>lv_task_prio_t</name></type> <name>prio</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>new_task</name> <init>= <expr><call><name>lv_task_create_basic</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>new_task</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_task_set_cb</name><argument_list>(<argument><expr><name>new_task</name></expr></argument>, <argument><expr><name>task_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_task_set_period</name><argument_list>(<argument><expr><name>new_task</name></expr></argument>, <argument><expr><name>period</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_task_set_prio</name><argument_list>(<argument><expr><name>new_task</name></expr></argument>, <argument><expr><name>prio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_task</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>user_data</name></expr>;</expr_stmt>

<return>return <expr><name>new_task</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_task_set_cb</name><parameter_list>(<parameter><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>task</name></decl></parameter>, <parameter><decl><type><name>lv_task_cb_t</name></type> <name>task_cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>task_cb</name></name> <operator>=</operator> <name>task_cb</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_task_del</name><parameter_list>(<parameter><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>task</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lv_ll_rem</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_ll</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_act</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>task</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>task_deleted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_task_set_prio</name><parameter_list>(<parameter><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>task</name></decl></parameter>, <parameter><decl><type><name>lv_task_prio_t</name></type> <name>prio</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>prio</name></name> <operator>==</operator> <name>prio</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>i</name></decl>;</decl_stmt>

<macro><name>LV_LL_READ</name><argument_list>(<argument>LV_GC_ROOT(_lv_task_ll)</argument>, <argument>i</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>prio</name></name> <operator>&lt;=</operator> <name>prio</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>!=</operator> <name>task</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_ll_move_before</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_ll</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_ll_move_before</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_task_ll</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>prio</name></name> <operator>=</operator> <name>prio</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_task_set_period</name><parameter_list>(<parameter><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>task</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>period</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>period</name></name> <operator>=</operator> <name>period</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_task_ready</name><parameter_list>(<parameter><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>task</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>last_run</name></name> <operator>=</operator> <call><name>lv_tick_get</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>task</name><operator>-&gt;</operator><name>period</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_task_once</name><parameter_list>(<parameter><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>task</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>once</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_task_reset</name><parameter_list>(<parameter><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>task</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>last_run</name></name> <operator>=</operator> <call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_task_enable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>lv_task_run</name> <operator>=</operator> <name>en</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>uint8_t</name></type> <name>lv_task_get_idle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>idle_last</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>lv_task_exec</name><parameter_list>(<parameter><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>task</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>exec</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>elp</name> <init>= <expr><call><name>lv_tick_elaps</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>last_run</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>elp</name> <operator>&gt;=</operator> <name><name>task</name><operator>-&gt;</operator><name>period</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>last_run</name></name> <operator>=</operator> <call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>task_deleted</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>task_created</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>task_cb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>task</name><operator>-&gt;</operator><name>task_cb</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>task_deleted</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if<condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>once</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_task_del</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>exec</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>exec</name></expr>;</return>

</block_content>}</block></function>

</unit>
