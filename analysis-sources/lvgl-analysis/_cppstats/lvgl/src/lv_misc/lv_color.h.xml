<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_misc\lv_color.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_CONF_INCLUDE_SIMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_conf.h"</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../lv_conf.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">24</literal></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"LV_COLOR_DEPTH 24 is deprecated. Use LV_COLOR_DEPTH 32 instead (lv_conf.h)"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>!=</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>LV_COLOR_SCREEN_TRANSP</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"LV_COLOR_SCREEN_TRANSP requires LV_COLOR_DEPTH == 32. Set it in lv_conf.h"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>!=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>LV_COLOR_16_SWAP</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"LV_COLOR_16_SWAP requires LV_COLOR_DEPTH == 16. Set it in lv_conf.h"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_WHITE</name></cpp:macro> <cpp:value>LV_COLOR_MAKE(0xFF, 0xFF, 0xFF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SILVER</name></cpp:macro> <cpp:value>LV_COLOR_MAKE(0xC0, 0xC0, 0xC0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GRAY</name></cpp:macro> <cpp:value>LV_COLOR_MAKE(0x80, 0x80, 0x80)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_BLACK</name></cpp:macro> <cpp:value>LV_COLOR_MAKE(0x00, 0x00, 0x00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_RED</name></cpp:macro> <cpp:value>LV_COLOR_MAKE(0xFF, 0x00, 0x00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_MAROON</name></cpp:macro> <cpp:value>LV_COLOR_MAKE(0x80, 0x00, 0x00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_YELLOW</name></cpp:macro> <cpp:value>LV_COLOR_MAKE(0xFF, 0xFF, 0x00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_OLIVE</name></cpp:macro> <cpp:value>LV_COLOR_MAKE(0x80, 0x80, 0x00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_LIME</name></cpp:macro> <cpp:value>LV_COLOR_MAKE(0x00, 0xFF, 0x00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GREEN</name></cpp:macro> <cpp:value>LV_COLOR_MAKE(0x00, 0x80, 0x00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_CYAN</name></cpp:macro> <cpp:value>LV_COLOR_MAKE(0x00, 0xFF, 0xFF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_AQUA</name></cpp:macro> <cpp:value>LV_COLOR_CYAN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_TEAL</name></cpp:macro> <cpp:value>LV_COLOR_MAKE(0x00, 0x80, 0x80)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_BLUE</name></cpp:macro> <cpp:value>LV_COLOR_MAKE(0x00, 0x00, 0xFF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_NAVY</name></cpp:macro> <cpp:value>LV_COLOR_MAKE(0x00, 0x00, 0x80)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_MAGENTA</name></cpp:macro> <cpp:value>LV_COLOR_MAKE(0xFF, 0x00, 0xFF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_PURPLE</name></cpp:macro> <cpp:value>LV_COLOR_MAKE(0x80, 0x00, 0x80)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_ORANGE</name></cpp:macro> <cpp:value>LV_COLOR_MAKE(0xFF, 0xA5, 0x00)</cpp:value></cpp:define>

<enum>enum <block>{

<decl><name>LV_OPA_TRANSP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>LV_OPA_0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>LV_OPA_10</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>,

<decl><name>LV_OPA_20</name> <init>= <expr><literal type="number">51</literal></expr></init></decl>,

<decl><name>LV_OPA_30</name> <init>= <expr><literal type="number">76</literal></expr></init></decl>,

<decl><name>LV_OPA_40</name> <init>= <expr><literal type="number">102</literal></expr></init></decl>,

<decl><name>LV_OPA_50</name> <init>= <expr><literal type="number">127</literal></expr></init></decl>,

<decl><name>LV_OPA_60</name> <init>= <expr><literal type="number">153</literal></expr></init></decl>,

<decl><name>LV_OPA_70</name> <init>= <expr><literal type="number">178</literal></expr></init></decl>,

<decl><name>LV_OPA_80</name> <init>= <expr><literal type="number">204</literal></expr></init></decl>,

<decl><name>LV_OPA_90</name> <init>= <expr><literal type="number">229</literal></expr></init></decl>,

<decl><name>LV_OPA_100</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>,

<decl><name>LV_OPA_COVER</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>,

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_OPA_MIN</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_OPA_MAX</name></cpp:macro> <cpp:value>251</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">16</literal></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Invalid LV_COLOR_DEPTH in lv_conf.h! Set it to 1, 8, 16 or 32!"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_R1</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.red = (uint8_t)((v) &amp; 0x1);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_G1</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.green = (uint8_t)((v) &amp; 0x1);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_B1</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.blue = (uint8_t)((v) &amp; 0x1);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_A1</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_R1</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.red</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_G1</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.green</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_B1</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.blue</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_A1</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_R8</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.red = (uint8_t)(v) &amp; 0x7U;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_G8</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.green = (uint8_t)(v) &amp; 0x7U;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_B8</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.blue = (uint8_t)(v) &amp; 0x3U;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_A8</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {} while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_R8</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.red</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_G8</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.green</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_B8</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.blue</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_A8</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0xFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_R16</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.red = (uint8_t)(v) &amp; 0x1FU;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_G16</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.green = (uint8_t)(v) &amp; 0x3FU;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_G16_SWAP</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{(c).ch.green_h = (uint8_t)(((v) &gt;&gt; 3) &amp; 0x7); (c).ch.green_l = (uint8_t)((v) &amp; 0x7);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_B16</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.blue = (uint8_t)(v) &amp; 0x1FU;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_A16</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {} while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_R16</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.red</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_G16</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.green</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_G16_SWAP</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((c).ch.green_h &lt;&lt; 3) + (c).ch.green_l)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_B16</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.blue</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_A16</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0xFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_R32</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.red = (uint32_t)((v) &amp; 0xFF);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_G32</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.green = (uint32_t)((v) &amp; 0xFF);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_B32</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.blue = (uint32_t)((v) &amp; 0xFF);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_A32</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.alpha = (uint32_t)((v) &amp; 0xFF);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_R32</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.red</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_G32</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.green</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_B32</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.blue</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_A32</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).ch.alpha</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_R</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_SET_R1(c,v)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_G</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_SET_G1(c,v)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_B</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_SET_B1(c,v)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_A</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_SET_A1(c,v)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_R</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_GET_R1(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_G</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_GET_G1(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_B</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_GET_B1(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_A</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_GET_A1(c)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_R</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_SET_R8(c,v)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_G</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_SET_G8(c,v)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_B</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_SET_B8(c,v)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_A</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_SET_A8(c,v)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_R</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_GET_R8(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_G</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_GET_G8(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_B</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_GET_B8(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_A</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_GET_A8(c)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">16</literal></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_R</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_SET_R16(c,v)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_16_SWAP</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_G</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_SET_G16(c,v)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_G</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_SET_G16_SWAP(c,v)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_B</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_SET_B16(c,v)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_A</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_SET_A16(c,v)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_R</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_GET_R16(c)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_16_SWAP</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_G</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_GET_G16(c)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_G</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_GET_G16_SWAP(c)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_B</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_GET_B16(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_A</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_GET_A16(c)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_R</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_SET_R32(c,v)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_G</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_SET_G32(c,v)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_B</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_SET_B32(c,v)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_SET_A</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_SET_A32(c,v)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_R</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_GET_R32(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_G</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_GET_G32(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_B</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_GET_B32(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_GET_A</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LV_COLOR_GET_A32(c)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><union>union

<block>{

<struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>blue</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>green</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>red</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

}</block> <decl><name>ch</name></decl>;</struct>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>full</name></decl>;</decl_stmt>

}</block></union></type> <name>lv_color1_t</name>;</typedef>

<typedef>typedef <type><union>union

<block>{

<struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>blue</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>green</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>red</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>

}</block> <decl><name>ch</name></decl>;</struct>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>full</name></decl>;</decl_stmt>

}</block></union></type> <name>lv_color8_t</name>;</typedef>

<typedef>typedef <type><union>union

<block>{

<struct>struct

<block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_16_SWAP</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>blue</name> <range>: <expr><literal type="number">5</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>green</name> <range>: <expr><literal type="number">6</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>red</name> <range>: <expr><literal type="number">5</literal></expr></range></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>green_h</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>red</name> <range>: <expr><literal type="number">5</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>blue</name> <range>: <expr><literal type="number">5</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>green_l</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block> <decl><name>ch</name></decl>;</struct>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>full</name></decl>;</decl_stmt>

}</block></union></type> <name>lv_color16_t</name>;</typedef>

<typedef>typedef <type><union>union

<block>{

<struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>blue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>green</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>red</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>alpha</name></decl>;</decl_stmt>

}</block> <decl><name>ch</name></decl>;</struct>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>full</name></decl>;</decl_stmt>

}</block></union></type> <name>lv_color32_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_color_int_t</name>;</typedef>

<typedef>typedef <type><name>lv_color1_t</name></type> <name>lv_color_t</name>;</typedef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:elif>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_color_int_t</name>;</typedef>

<typedef>typedef <type><name>lv_color8_t</name></type> <name>lv_color_t</name>;</typedef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">16</literal></expr></cpp:elif>

<typedef>typedef <type><name>uint16_t</name></type> <name>lv_color_int_t</name>;</typedef>

<typedef>typedef <type><name>lv_color16_t</name></type> <name>lv_color_t</name>;</typedef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:elif>

<typedef>typedef <type><name>uint32_t</name></type> <name>lv_color_int_t</name>;</typedef>

<typedef>typedef <type><name>lv_color32_t</name></type> <name>lv_color_t</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Invalid LV_COLOR_DEPTH in lv_conf.h! Set it to 1, 8, 16 or 32!"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_opa_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>v</name></decl>;</decl_stmt>

}</block></struct></type> <name>lv_color_hsv_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>lv_color_to1</name><parameter_list>(<parameter><decl><type><name>lv_color_t</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<return>return <expr><name><name>color</name><operator>.</operator><name>full</name></name></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:elif>

<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>LV_COLOR_GET_R</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x4</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>LV_COLOR_GET_G</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x4</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>LV_COLOR_GET_B</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">16</literal></expr></cpp:elif>

<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>LV_COLOR_GET_R</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>LV_COLOR_GET_G</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>LV_COLOR_GET_B</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:elif>

<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>LV_COLOR_GET_R</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>LV_COLOR_GET_G</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>LV_COLOR_GET_B</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>lv_color_to8</name><parameter_list>(<parameter><decl><type><name>lv_color_t</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>color</name><operator>.</operator><name>full</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0xFF</literal></expr>;</return></block_content></block></else></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:elif>

<return>return <expr><name><name>color</name><operator>.</operator><name>full</name></name></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">16</literal></expr></cpp:elif>

<decl_stmt><decl><type><name>lv_color8_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_COLOR_SET_R8</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>LV_COLOR_GET_R</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>LV_COLOR_SET_G8</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>LV_COLOR_GET_G</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>LV_COLOR_SET_B8</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>LV_COLOR_GET_B</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name><name>ret</name><operator>.</operator><name>full</name></name></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:elif>

<decl_stmt><decl><type><name>lv_color8_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_COLOR_SET_R8</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>LV_COLOR_GET_R</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>LV_COLOR_SET_G8</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>LV_COLOR_GET_G</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>LV_COLOR_SET_B8</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>LV_COLOR_GET_B</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name><name>ret</name><operator>.</operator><name>full</name></name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type> <name>lv_color_to16</name><parameter_list>(<parameter><decl><type><name>lv_color_t</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>color</name><operator>.</operator><name>full</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0xFFFF</literal></expr>;</return></block_content></block></else></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:elif>

<decl_stmt><decl><type><name>lv_color16_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_COLOR_SET_R16</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>LV_COLOR_GET_R</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_16_SWAP</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><call><name>LV_COLOR_SET_G16</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>LV_COLOR_GET_G</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>LV_COLOR_SET_G16_SWAP</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>(</operator><call><name>LV_COLOR_GET_G</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">9</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>LV_COLOR_SET_B16</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>LV_COLOR_GET_B</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name><name>ret</name><operator>.</operator><name>full</name></name></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">16</literal></expr></cpp:elif>

<return>return <expr><name><name>color</name><operator>.</operator><name>full</name></name></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:elif>

<decl_stmt><decl><type><name>lv_color16_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_COLOR_SET_R16</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>LV_COLOR_GET_R</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_16_SWAP</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><call><name>LV_COLOR_SET_G16</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>LV_COLOR_GET_G</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<macro><name>LV_COLOR_SET_G16_SWAP</name><argument_list>(<argument>ret</argument>, <argument>ret.ch.green_h = (LV_COLOR_GET_G(color) &gt;&gt; <literal type="number">2</literal>); 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

LV_COLOR_SET_B16(ret, LV_COLOR_GET_B(color) &gt;&gt; <literal type="number">3</literal>); 

return ret.full;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

}

static inline uint32_t lv_color_to32(lv_color_t color)

{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

if(color.full == <literal type="number">0</literal>)

return <literal type="number">0</literal>;

else

return <literal type="number">0xFFFFFFFF</literal>;

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:elif>

lv_color32_t ret;

LV_COLOR_SET_R32(ret, LV_COLOR_GET_R(color) * <literal type="number">36</literal>); 

LV_COLOR_SET_G32(ret, LV_COLOR_GET_G(color) * <literal type="number">36</literal>); 

LV_COLOR_SET_B32(ret, LV_COLOR_GET_B(color) * <literal type="number">85</literal>); 

LV_COLOR_SET_A32(ret, <literal type="number">0xFF</literal>);

return ret.full;

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">16</literal></expr></cpp:elif>

lv_color32_t ret;

LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * <literal type="number">263</literal> + <literal type="number">7</literal> ) &gt;&gt; <literal type="number">5</literal>);

LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * <literal type="number">259</literal> + <literal type="number">3</literal> ) &gt;&gt; <literal type="number">6</literal>);

LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * <literal type="number">263</literal> + <literal type="number">7</literal> ) &gt;&gt; <literal type="number">5</literal>);

LV_COLOR_SET_A32(ret, <literal type="number">0xFF</literal>);

return ret.full;

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:elif>

return color.full;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}

static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)

{

lv_color_t ret;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>!=</operator> <literal type="number">1</literal></expr></cpp:if>

LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (<literal type="number">255</literal> - mix)) &gt;&gt; <literal type="number">8</literal>);

LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (<literal type="number">255</literal> - mix)) &gt;&gt; <literal type="number">8</literal>);

LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (<literal type="number">255</literal> - mix)) &gt;&gt; <literal type="number">8</literal>);

LV_COLOR_SET_A(ret, <literal type="number">0xFF</literal>);

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

ret.full = mix &gt; LV_OPA_50 ? c1.full : c2.full;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

return ret;

}

static inline uint8_t lv_color_brightness(lv_color_t color)

{

lv_color32_t c32;

c32.full = lv_color_to32(color);

uint16_t bright = (uint16_t)(<literal type="number">3u</literal> * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + <literal type="number">4u</literal> * LV_COLOR_GET_G32(c32));

return (uint8_t)(bright &gt;&gt; <literal type="number">3</literal>);

}

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_MAKE</name><parameter_list>(<parameter><type><name>r8</name></type></parameter>, <parameter><type><name>g8</name></type></parameter>, <parameter><type><name>b8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((lv_color_t){.full = (uint8_t)((b8 &gt;&gt; 7) | (g8 &gt;&gt; 7) | (r8 &gt;&gt; 7))})</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_MAKE</name><parameter_list>(<parameter><type><name>r8</name></type></parameter>, <parameter><type><name>g8</name></type></parameter>, <parameter><type><name>b8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((lv_color_t){{(uint8_t)((b8 &gt;&gt; 6) &amp; 0x3U), (uint8_t)((g8 &gt;&gt; 5) &amp; 0x7U), (uint8_t)((r8 &gt;&gt; 5) &amp; 0x7U)}})</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">16</literal></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_16_SWAP</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_MAKE</name><parameter_list>(<parameter><type><name>r8</name></type></parameter>, <parameter><type><name>g8</name></type></parameter>, <parameter><type><name>b8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((lv_color_t){{(uint16_t)((b8 &gt;&gt; 3) &amp; 0x1FU), (uint16_t)((g8 &gt;&gt; 2) &amp; 0x3FU), (uint16_t)((r8 &gt;&gt; 3) &amp; 0x1FU)}})</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_MAKE</name><parameter_list>(<parameter><type><name>r8</name></type></parameter>, <parameter><type><name>g8</name></type></parameter>, <parameter><type><name>b8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((lv_color_t){{(uint16_t)((g8 &gt;&gt; 5) &amp; 0x7U), (uint16_t)((r8 &gt;&gt; 3) &amp; 0x1FU), (uint16_t)((b8 &gt;&gt; 3) &amp; 0x1FU), (uint16_t)((g8 &gt;&gt; 2) &amp; 0x7U)}})</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COLOR_MAKE</name><parameter_list>(<parameter><type><name>r8</name></type></parameter>, <parameter><type><name>g8</name></type></parameter>, <parameter><type><name>b8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((lv_color_t){{b8, g8, r8, 0xff}})</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)

{

return LV_COLOR_MAKE(r, g, b);

}

static inline lv_color_t lv_color_hex(uint32_t c)

{

return lv_color_make((uint8_t)((c &gt;&gt; <literal type="number">16</literal>) &amp; <literal type="number">0xFF</literal>), (uint8_t)((c &gt;&gt; <literal type="number">8</literal>) &amp; <literal type="number">0xFF</literal>), (uint8_t)(c &amp; <literal type="number">0xFF</literal>));

}

static inline lv_color_t lv_color_hex3(uint32_t c)

{

return lv_color_make((uint8_t)(((c &gt;&gt; <literal type="number">4</literal>) &amp; <literal type="number">0xF0</literal>) | ((c &gt;&gt; <literal type="number">8</literal>) &amp; <literal type="number">0xF</literal>)), (uint8_t)((c &amp; <literal type="number">0xF0</literal>) | ((c &amp; <literal type="number">0xF0</literal>) &gt;&gt; <literal type="number">4</literal>)),

(uint8_t)((c &amp; <literal type="number">0xF</literal>) | ((c &amp; <literal type="number">0xF</literal>) &lt;&lt; <literal type="number">4</literal>)));

}

lv_color_t lv_color_hsv_to_rgb(uint16_t h, uint8_t s, uint8_t v);

lv_color_hsv_t lv_color_rgb_to_hsv(uint8_t r8, uint8_t g8, uint8_t b8);

lv_color_hsv_t lv_color_to_hsv(lv_color_t color);

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</argument></argument_list></macro></block_content></block></function></block_content></block></extern> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
