<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_misc\lv_ll.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_ll.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_mem.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_NODE_META_SIZE</name></cpp:macro> <cpp:value>(sizeof(lv_ll_node_t *) + sizeof(lv_ll_node_t *))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_PREV_P_OFFSET</name><parameter_list>(<parameter><type><name>ll_p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ll_p-&gt;n_size)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_NEXT_P_OFFSET</name><parameter_list>(<parameter><type><name>ll_p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ll_p-&gt;n_size + sizeof(lv_ll_node_t *))</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>node_set_prev</name><parameter_list>(<parameter><decl><type><name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>, <parameter><decl><type><name>lv_ll_node_t</name> <modifier>*</modifier></type> <name>act</name></decl></parameter>, <parameter><decl><type><name>lv_ll_node_t</name> <modifier>*</modifier></type> <name>prev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>node_set_next</name><parameter_list>(<parameter><decl><type><name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>, <parameter><decl><type><name>lv_ll_node_t</name> <modifier>*</modifier></type> <name>act</name></decl></parameter>, <parameter><decl><type><name>lv_ll_node_t</name> <modifier>*</modifier></type> <name>next</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>lv_ll_init</name><parameter_list>(<parameter><decl><type><name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>node_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ll_p</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ll_p</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_MEM_ENV64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>node_size</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>node_size</name> <operator>=</operator> <name>node_size</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">0x7</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>node_size</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>(<expr><name>node_size</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>node_size</name> <operator>=</operator> <name>node_size</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">0x3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>node_size</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>ll_p</name><operator>-&gt;</operator><name>n_size</name></name> <operator>=</operator> <name>node_size</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type> <name>lv_ll_ins_head</name><parameter_list>(<parameter><decl><type><name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_ll_node_t</name> <modifier>*</modifier></type> <name>n_new</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n_new</name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><name><name>ll_p</name><operator>-&gt;</operator><name>n_size</name></name> <operator>+</operator> <name>LL_NODE_META_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>n_new</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>node_set_prev</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name>n_new</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>node_set_next</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name>n_new</name></expr></argument>, <argument><expr><name><name>ll_p</name><operator>-&gt;</operator><name>head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>ll_p</name><operator>-&gt;</operator><name>head</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>node_set_prev</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name><name>ll_p</name><operator>-&gt;</operator><name>head</name></name></expr></argument>, <argument><expr><name>n_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ll_p</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>n_new</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>ll_p</name><operator>-&gt;</operator><name>tail</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>ll_p</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>n_new</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>n_new</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type> <name>lv_ll_ins_prev</name><parameter_list>(<parameter><decl><type><name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>n_act</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_ll_node_t</name> <modifier>*</modifier></type> <name>n_new</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_ll_node_t</name> <modifier>*</modifier></type> <name>n_prev</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>ll_p</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>n_act</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_ll_get_head</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>n_act</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n_new</name> <operator>=</operator> <call><name>lv_ll_ins_head</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>n_new</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n_new</name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><name><name>ll_p</name><operator>-&gt;</operator><name>n_size</name></name> <operator>+</operator> <name>LL_NODE_META_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>n_new</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n_prev</name> <operator>=</operator> <call><name>lv_ll_get_prev</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name>n_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>node_set_next</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name>n_prev</name></expr></argument>, <argument><expr><name>n_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>node_set_prev</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name>n_new</name></expr></argument>, <argument><expr><name>n_prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>node_set_prev</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name>n_act</name></expr></argument>, <argument><expr><name>n_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>node_set_next</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name>n_new</name></expr></argument>, <argument><expr><name>n_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>n_new</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type> <name>lv_ll_ins_tail</name><parameter_list>(<parameter><decl><type><name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_ll_node_t</name> <modifier>*</modifier></type> <name>n_new</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n_new</name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><name><name>ll_p</name><operator>-&gt;</operator><name>n_size</name></name> <operator>+</operator> <name>LL_NODE_META_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>n_new</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>n_new</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>node_set_next</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name>n_new</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>node_set_prev</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name>n_new</name></expr></argument>, <argument><expr><name><name>ll_p</name><operator>-&gt;</operator><name>tail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>ll_p</name><operator>-&gt;</operator><name>tail</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>node_set_next</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name><name>ll_p</name><operator>-&gt;</operator><name>tail</name></name></expr></argument>, <argument><expr><name>n_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ll_p</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>n_new</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>ll_p</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>ll_p</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>n_new</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>n_new</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_ll_rem</name><parameter_list>(<parameter><decl><type><name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>node_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_ll_get_head</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>node_p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ll_p</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <call><name>lv_ll_get_next</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name>node_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ll_p</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ll_p</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>node_set_prev</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name><name>ll_p</name><operator>-&gt;</operator><name>head</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>lv_ll_get_tail</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>node_p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ll_p</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <call><name>lv_ll_get_prev</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name>node_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ll_p</name><operator>-&gt;</operator><name>tail</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ll_p</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>node_set_next</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name><name>ll_p</name><operator>-&gt;</operator><name>tail</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_ll_node_t</name> <modifier>*</modifier></type> <name>n_prev</name> <init>= <expr><call><name>lv_ll_get_prev</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name>node_p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_ll_node_t</name> <modifier>*</modifier></type> <name>n_next</name> <init>= <expr><call><name>lv_ll_get_next</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name>node_p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>node_set_next</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name>n_prev</name></expr></argument>, <argument><expr><name>n_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>node_set_prev</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name>n_next</name></expr></argument>, <argument><expr><name>n_prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_ll_clear</name><parameter_list>(<parameter><decl><type><name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>i_next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>lv_ll_get_head</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>i</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i_next</name> <operator>=</operator> <call><name>lv_ll_get_next</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_ll_rem</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>i_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_ll_chg_list</name><parameter_list>(<parameter><decl><type><name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_ori_p</name></decl></parameter>, <parameter><decl><type><name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_new_p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>head</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lv_ll_rem</name><argument_list>(<argument><expr><name>ll_ori_p</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>head</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>node_set_prev</name><argument_list>(<argument><expr><name>ll_new_p</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>node_set_next</name><argument_list>(<argument><expr><name>ll_new_p</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>ll_new_p</name><operator>-&gt;</operator><name>head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ll_new_p</name><operator>-&gt;</operator><name>head</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>node_set_prev</name><argument_list>(<argument><expr><name>ll_new_p</name></expr></argument>, <argument><expr><name><name>ll_new_p</name><operator>-&gt;</operator><name>head</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ll_new_p</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>ll_new_p</name><operator>-&gt;</operator><name>tail</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>ll_new_p</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>node_set_prev</name><argument_list>(<argument><expr><name>ll_new_p</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>ll_new_p</name><operator>-&gt;</operator><name>tail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>node_set_next</name><argument_list>(<argument><expr><name>ll_new_p</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ll_new_p</name><operator>-&gt;</operator><name>tail</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>node_set_next</name><argument_list>(<argument><expr><name>ll_new_p</name></expr></argument>, <argument><expr><name><name>ll_new_p</name><operator>-&gt;</operator><name>tail</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ll_new_p</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>ll_new_p</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>ll_new_p</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type> <name>lv_ll_get_head</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>head</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ll_p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>head</name> <operator>=</operator> <name><name>ll_p</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>head</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type> <name>lv_ll_get_tail</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>tail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ll_p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name><name>ll_p</name><operator>-&gt;</operator><name>tail</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>tail</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type> <name>lv_ll_get_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>n_act</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>next</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ll_p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_ll_node_t</name> <modifier>*</modifier></type> <name>n_act_d</name> <init>= <expr><name>n_act</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>next</name></expr></argument>, <argument><expr><name>n_act_d</name> <operator>+</operator> <call><name>LL_NEXT_P_OFFSET</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>next</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type> <name>lv_ll_get_prev</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>n_act</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ll_p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_ll_node_t</name> <modifier>*</modifier></type> <name>n_act_d</name> <init>= <expr><name>n_act</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prev</name></expr></argument>, <argument><expr><name>n_act_d</name> <operator>+</operator> <call><name>LL_PREV_P_OFFSET</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>prev</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>lv_ll_get_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>node</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>node</name> <operator>=</operator> <call><name>lv_ll_get_head</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>node</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>node</name> <operator>=</operator> <call><name>lv_ll_get_next</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_ll_move_before</name><parameter_list>(<parameter><decl><type><name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>n_act</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>n_after</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>n_act</name> <operator>==</operator> <name>n_after</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>n_before</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>n_after</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n_before</name> <operator>=</operator> <call><name>lv_ll_get_prev</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name>n_after</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>n_before</name> <operator>=</operator> <call><name>lv_ll_get_tail</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if<condition>(<expr><name>n_act</name> <operator>==</operator> <name>n_before</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>lv_ll_rem</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name>n_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>node_set_next</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name>n_before</name></expr></argument>, <argument><expr><name>n_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>node_set_prev</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name>n_act</name></expr></argument>, <argument><expr><name>n_before</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>node_set_prev</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name>n_after</name></expr></argument>, <argument><expr><name>n_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>node_set_next</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>, <argument><expr><name>n_act</name></expr></argument>, <argument><expr><name>n_after</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>n_after</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ll_p</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>n_act</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>n_before</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ll_p</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>n_act</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_ll_is_empty</name><parameter_list>(<parameter><decl><type><name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>ll_p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ll_p</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ll_p</name><operator>-&gt;</operator><name>tail</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>node_set_prev</name><parameter_list>(<parameter><decl><type><name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>, <parameter><decl><type><name>lv_ll_node_t</name> <modifier>*</modifier></type> <name>act</name></decl></parameter>, <parameter><decl><type><name>lv_ll_node_t</name> <modifier>*</modifier></type> <name>prev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>act</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>node_p_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_ll_node_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>act</name> <operator>+</operator> <call><name>LL_PREV_P_OFFSET</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>prev</name></expr></argument>, <argument><expr><name>node_p_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>act</name> <operator>+</operator> <call><name>LL_PREV_P_OFFSET</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>node_p_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>node_set_next</name><parameter_list>(<parameter><decl><type><name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>, <parameter><decl><type><name>lv_ll_node_t</name> <modifier>*</modifier></type> <name>act</name></decl></parameter>, <parameter><decl><type><name>lv_ll_node_t</name> <modifier>*</modifier></type> <name>next</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>act</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>node_p_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_ll_node_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>act</name> <operator>+</operator> <call><name>LL_NEXT_P_OFFSET</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>, <argument><expr><name>node_p_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>act</name> <operator>+</operator> <call><name>LL_NEXT_P_OFFSET</name><argument_list>(<argument><expr><name>ll_p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>node_p_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

</unit>
