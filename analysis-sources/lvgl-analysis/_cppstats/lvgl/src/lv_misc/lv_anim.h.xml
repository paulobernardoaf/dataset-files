<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_misc\lv_anim.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_CONF_INCLUDE_SIMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_conf.h"</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../lv_conf.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<enum>enum <block>{

<decl><name>LV_ANIM_OFF</name></decl>,

<decl><name>LV_ANIM_ON</name></decl>,

}</block>;</enum>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_anim_enable_t</name>;</typedef>

<typedef>typedef <type><name>lv_coord_t</name></type> <name>lv_anim_value_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<struct_decl>struct <name>_lv_anim_t</name>;</struct_decl>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>lv_anim_exec_xcb_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>lv_anim_value_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>lv_anim_custom_exec_cb_t</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_anim_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>lv_anim_value_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>lv_anim_value_t</name></type> (<modifier>*</modifier><name>lv_anim_path_cb_t</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_lv_anim_t</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>lv_anim_ready_cb_t</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_anim_t</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>_lv_anim_t</name>

<block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>var</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_anim_exec_xcb_t</name></type> <name>exec_cb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_anim_path_cb_t</name></type> <name>path_cb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_anim_ready_cb_t</name></type> <name>ready_cb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name>start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name>end</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>time</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name>act_time</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>playback_pause</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>repeat_pause</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_USER_DATA</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_anim_user_data_t</name></type> <name>user_data</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>playback</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>repeat</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>playback_now</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>has_run</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

}</block></struct></type> <name>lv_anim_t</name>;</typedef>

<function_decl><type><name>void</name></type> <name>lv_anim_core_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_anim_init</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_anim_set_exec_cb</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>var</name></decl></parameter>, <parameter><decl><type><name>lv_anim_exec_xcb_t</name></type> <name>exec_cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>var</name></name> <operator>=</operator> <name>var</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>exec_cb</name></name> <operator>=</operator> <name>exec_cb</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_anim_set_time</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>duration</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>delay</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>act_time</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><operator>-</operator><name>delay</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_anim_set_values</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>lv_anim_value_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>lv_anim_value_t</name></type> <name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_anim_set_custom_exec_cb</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>lv_anim_custom_exec_cb_t</name></type> <name>exec_cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>var</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>exec_cb</name></name> <operator>=</operator> <operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>exec_cb</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_anim_set_path_cb</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>lv_anim_path_cb_t</name></type> <name>path_cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>path_cb</name></name> <operator>=</operator> <name>path_cb</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_anim_set_ready_cb</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>lv_anim_ready_cb_t</name></type> <name>ready_cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>ready_cb</name></name> <operator>=</operator> <name>ready_cb</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_anim_set_playback</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>wait_time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>playback</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>playback_pause</name></name> <operator>=</operator> <name>wait_time</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_anim_clear_playback</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>playback</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_anim_set_repeat</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>wait_time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>repeat</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>repeat_pause</name></name> <operator>=</operator> <name>wait_time</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_anim_clear_repeat</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>repeat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>lv_anim_create</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>lv_anim_del</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>var</name></decl></parameter>, <parameter><decl><type><name>lv_anim_exec_xcb_t</name></type> <name>exec_cb</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>lv_anim_custom_del</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>lv_anim_custom_exec_cb_t</name></type> <name>exec_cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>lv_anim_del</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>exec_cb</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>uint16_t</name></type> <name>lv_anim_count_running</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint16_t</name></type> <name>lv_anim_speed_to_time</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>speed</name></decl></parameter>, <parameter><decl><type><name>lv_anim_value_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>lv_anim_value_t</name></type> <name>end</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_anim_value_t</name></type> <name>lv_anim_path_linear</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_anim_value_t</name></type> <name>lv_anim_path_ease_in</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_anim_value_t</name></type> <name>lv_anim_path_ease_out</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_anim_value_t</name></type> <name>lv_anim_path_ease_in_out</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_anim_value_t</name></type> <name>lv_anim_path_overshoot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_anim_value_t</name></type> <name>lv_anim_path_bounce</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_anim_value_t</name></type> <name>lv_anim_path_step</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
