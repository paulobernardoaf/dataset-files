<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_misc\lv_area.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_CONF_INCLUDE_SIMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_conf.h"</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../lv_conf.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COORD_MAX</name></cpp:macro> <cpp:value>((lv_coord_t)((uint32_t)((uint32_t)1 &lt;&lt; (8 * sizeof(lv_coord_t) - 1)) - 1000))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_COORD_MIN</name></cpp:macro> <cpp:value>(-LV_COORD_MAX)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>LV_EXPORT_CONST_INT</name><argument_list>(<argument><expr><name>LV_COORD_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_EXPORT_CONST_INT</name><argument_list>(<argument><expr><name>LV_COORD_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y</name></decl>;</decl_stmt>

}</block></struct></type> <name>lv_point_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y2</name></decl>;</decl_stmt>

}</block></struct></type> <name>lv_area_t</name>;</typedef>

<function_decl><type><name>void</name></type> <name>lv_area_set</name><parameter_list>(<parameter><decl><type><name>lv_area_t</name> <modifier>*</modifier></type> <name>area_p</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y2</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type> <name>lv_area_copy</name><parameter_list>(<parameter><decl><type><name>lv_area_t</name> <modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_area_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>lv_coord_t</name></type> <name>lv_area_get_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>area_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>lv_coord_t</name><operator>)</operator><operator>(</operator><name><name>area_p</name><operator>-&gt;</operator><name>x2</name></name> <operator>-</operator> <name><name>area_p</name><operator>-&gt;</operator><name>x1</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>lv_coord_t</name></type> <name>lv_area_get_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>area_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>lv_coord_t</name><operator>)</operator><operator>(</operator><name><name>area_p</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name><name>area_p</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>lv_area_set_width</name><parameter_list>(<parameter><decl><type><name>lv_area_t</name> <modifier>*</modifier></type> <name>area_p</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_area_set_height</name><parameter_list>(<parameter><decl><type><name>lv_area_t</name> <modifier>*</modifier></type> <name>area_p</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_area_set_pos</name><parameter_list>(<parameter><decl><type><name>lv_area_t</name> <modifier>*</modifier></type> <name>area_p</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>lv_area_get_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>area_p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>lv_area_intersect</name><parameter_list>(<parameter><decl><type><name>lv_area_t</name> <modifier>*</modifier></type> <name>res_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>a1_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>a2_p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_area_join</name><parameter_list>(<parameter><decl><type><name>lv_area_t</name> <modifier>*</modifier></type> <name>a_res_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>a1_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>a2_p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>lv_area_is_point_on</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>a_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_point_t</name> <modifier>*</modifier></type> <name>p_p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>lv_area_is_on</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>a1_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>a2_p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>lv_area_is_in</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>ain_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>aholder_p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_area_increment</name><parameter_list>(<parameter><decl><type><name>lv_area_t</name> <modifier>*</modifier></type> <name>a_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_coord_t</name></type> <name>amount</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
