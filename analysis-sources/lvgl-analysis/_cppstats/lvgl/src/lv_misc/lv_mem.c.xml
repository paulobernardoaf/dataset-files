<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_misc\lv_mem.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_math.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_MEM_CUSTOM</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> LV_MEM_CUSTOM_INCLUDE</cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_MEM_ADD_JUNK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_MEM_ADD_JUNK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_ARCH_64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_UNIT</name></cpp:macro> <cpp:value>uint64_t</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_UNIT</name></cpp:macro> <cpp:value>uint32_t</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ENABLE_GC</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if> 

<typedef>typedef <type><union>union

<block>{

<struct>struct

<block>{

<decl_stmt><decl><type><name>MEM_UNIT</name></type> <name>used</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>MEM_UNIT</name></type> <name>d_size</name> <range>: <expr><literal type="number">31</literal></expr></range></decl>;</decl_stmt> 

}</block> <decl><name>s</name></decl>;</struct>

<decl_stmt><decl><type><name>MEM_UNIT</name></type> <name>header</name></decl>;</decl_stmt> 

}</block></union></type> <name>lv_mem_header_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>lv_mem_header_t</name></type> <name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>first_data</name></decl>;</decl_stmt> 

}</block></struct></type> <name>lv_mem_ent_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_MEM_CUSTOM</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>lv_mem_ent_t</name> <modifier>*</modifier></type> <name>ent_get_next</name><parameter_list>(<parameter><decl><type><name>lv_mem_ent_t</name> <modifier>*</modifier></type> <name>act_e</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type> <name>ent_alloc</name><parameter_list>(<parameter><decl><type><name>lv_mem_ent_t</name> <modifier>*</modifier></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ent_trunc</name><parameter_list>(<parameter><decl><type><name>lv_mem_ent_t</name> <modifier>*</modifier></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_MEM_CUSTOM</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>work_mem</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>zero_mem</name></decl>;</decl_stmt> 

<function><type><name>void</name></type> <name>lv_mem_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_MEM_CUSTOM</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_MEM_ADR</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>LV_MEM_ATTR</name> <name>MEM_UNIT</name></type> <name><name>work_mem_int</name><index>[<expr><name>LV_MEM_SIZE</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MEM_UNIT</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>work_mem</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>work_mem_int</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>work_mem</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>LV_MEM_ADR</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_mem_ent_t</name> <modifier>*</modifier></type> <name>full</name> <init>= <expr><operator>(</operator><name>lv_mem_ent_t</name> <operator>*</operator><operator>)</operator><name>work_mem</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>full</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>full</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>d_size</name></name> <operator>=</operator> <name>LV_MEM_SIZE</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_mem_header_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_mem_deinit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_MEM_CUSTOM</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>work_mem</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><operator>(</operator><name>LV_MEM_SIZE</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MEM_UNIT</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MEM_UNIT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_mem_ent_t</name> <modifier>*</modifier></type> <name>full</name> <init>= <expr><operator>(</operator><name>lv_mem_ent_t</name> <operator>*</operator><operator>)</operator><name>work_mem</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>full</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>full</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>d_size</name></name> <operator>=</operator> <name>LV_MEM_SIZE</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_mem_header_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type> <name>lv_mem_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>zero_mem</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_ARCH_64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>size</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">0x7</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>size</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">0x3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>alloc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_MEM_CUSTOM</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<decl_stmt><decl><type><name>lv_mem_ent_t</name> <modifier>*</modifier></type> <name>e</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>ent_get_next</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>alloc</name> <operator>=</operator> <call><name>ent_alloc</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><name>e</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>alloc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>;</do>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ENABLE_GC</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if> 

<expr_stmt><expr><name>alloc</name> <operator>=</operator> <call><name>LV_MEM_CUSTOM_ALLOC</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<expr_stmt><expr><name>alloc</name> <operator>=</operator> <call><name>LV_MEM_CUSTOM_ALLOC</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_mem_header_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>alloc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>lv_mem_ent_t</name> <operator>*</operator><operator>)</operator><name>alloc</name><operator>)</operator><operator>-&gt;</operator><name><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>d_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>lv_mem_ent_t</name> <operator>*</operator><operator>)</operator><name>alloc</name><operator>)</operator><operator>-&gt;</operator><name><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>used</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>alloc</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><name>lv_mem_ent_t</name> <operator>*</operator><operator>)</operator><name>alloc</name><operator>)</operator><operator>-&gt;</operator><name>first_data</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_MEM_ADD_JUNK</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>alloc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>alloc</name></expr></argument>, <argument><expr><literal type="number">0xaa</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>alloc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Couldn't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>alloc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_mem_free</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>data</name> <operator>==</operator> <operator>&amp;</operator><name>zero_mem</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_MEM_ADD_JUNK</name></expr></cpp:if>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">0xbb</literal></expr></argument>, <argument><expr><call><name>lv_mem_get_size</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ENABLE_GC</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<decl_stmt><decl><type><name>lv_mem_ent_t</name> <modifier>*</modifier></type> <name>e</name> <init>= <expr><operator>(</operator><name>lv_mem_ent_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_mem_header_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_MEM_CUSTOM</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_MEM_AUTO_DEFRAG</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_mem_ent_t</name> <modifier>*</modifier></type> <name>e_next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>e_next</name> <operator>=</operator> <call><name>ent_get_next</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>e_next</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>e_next</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>used</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>d_size</name></name> <operator>+=</operator> <name><name>e_next</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>d_size</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>e_next</name> <operator>=</operator> <call><name>ent_get_next</name><argument_list>(<argument><expr><name>e_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ENABLE_GC</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><call><name>LV_MEM_CUSTOM_FREE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>LV_MEM_CUSTOM_FREE</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ENABLE_GC</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<function><type><name>void</name> <modifier>*</modifier></type> <name>lv_mem_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>data_p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>new_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>data_p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_mem_ent_t</name> <modifier>*</modifier></type> <name>e</name> <init>= <expr><operator>(</operator><name>lv_mem_ent_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>data_p</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_mem_header_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>used</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data_p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>old_size</name> <init>= <expr><call><name>lv_mem_get_size</name><argument_list>(<argument><expr><name>data_p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>old_size</name> <operator>==</operator> <name>new_size</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>data_p</name></expr>;</return></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_MEM_CUSTOM</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>new_size</name> <operator>&lt;</operator> <name>old_size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_mem_ent_t</name> <modifier>*</modifier></type> <name>e</name> <init>= <expr><operator>(</operator><name>lv_mem_ent_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>data_p</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_mem_header_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ent_trunc</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>first_data</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>new_p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>new_p</name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>new_p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>data_p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>old_size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_p</name></expr></argument>, <argument><expr><name>data_p</name></expr></argument>, <argument><expr><call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><name>new_size</name></expr></argument>, <argument><expr><name>old_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name>data_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>new_p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Couldn't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>new_p</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<function><type><name>void</name> <modifier>*</modifier></type> <name>lv_mem_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>data_p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>new_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>new_p</name> <init>= <expr><call><name>LV_MEM_CUSTOM_REALLOC</name><argument_list>(<argument><expr><name>data_p</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>new_p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Couldn't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>new_p</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type> <name>lv_mem_defrag</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_MEM_CUSTOM</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<decl_stmt><decl><type><name>lv_mem_ent_t</name> <modifier>*</modifier></type> <name>e_free</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_mem_ent_t</name> <modifier>*</modifier></type> <name>e_next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>e_free</name> <operator>=</operator> <call><name>ent_get_next</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><name>e_free</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>e_free</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>used</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>e_free</name> <operator>=</operator> <call><name>ent_get_next</name><argument_list>(<argument><expr><name>e_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>e_free</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>e_next</name> <operator>=</operator> <call><name>ent_get_next</name><argument_list>(<argument><expr><name>e_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>e_next</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>e_next</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>used</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>e_free</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>d_size</name></name> <operator>+=</operator> <name><name>e_next</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>d_size</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>e_next</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>e_next</name> <operator>=</operator> <call><name>ent_get_next</name><argument_list>(<argument><expr><name>e_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>e_next</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>e_free</name> <operator>=</operator> <name>e_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_mem_monitor</name><parameter_list>(<parameter><decl><type><name>lv_mem_monitor_t</name> <modifier>*</modifier></type> <name>mon_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mon_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_mem_monitor_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_MEM_CUSTOM</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<decl_stmt><decl><type><name>lv_mem_ent_t</name> <modifier>*</modifier></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>ent_get_next</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>used</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mon_p</name><operator>-&gt;</operator><name>free_cnt</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mon_p</name><operator>-&gt;</operator><name>free_size</name></name> <operator>+=</operator> <name><name>e</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>d_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>d_size</name></name> <operator>&gt;</operator> <name><name>mon_p</name><operator>-&gt;</operator><name>free_biggest_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mon_p</name><operator>-&gt;</operator><name>free_biggest_size</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>d_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>mon_p</name><operator>-&gt;</operator><name>used_cnt</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>ent_get_next</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>mon_p</name><operator>-&gt;</operator><name>total_size</name></name> <operator>=</operator> <name>LV_MEM_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mon_p</name><operator>-&gt;</operator><name>used_pct</name></name> <operator>=</operator> <literal type="number">100</literal> <operator>-</operator> <operator>(</operator><literal type="number">100U</literal> <operator>*</operator> <name><name>mon_p</name><operator>-&gt;</operator><name>free_size</name></name><operator>)</operator> <operator>/</operator> <name><name>mon_p</name><operator>-&gt;</operator><name>total_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>mon_p</name><operator>-&gt;</operator><name>free_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mon_p</name><operator>-&gt;</operator><name>frag_pct</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>mon_p</name><operator>-&gt;</operator><name>free_biggest_size</name></name> <operator>*</operator> <literal type="number">100U</literal> <operator>/</operator> <name><name>mon_p</name><operator>-&gt;</operator><name>free_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mon_p</name><operator>-&gt;</operator><name>frag_pct</name></name> <operator>=</operator> <literal type="number">100</literal> <operator>-</operator> <name><name>mon_p</name><operator>-&gt;</operator><name>frag_pct</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>mon_p</name><operator>-&gt;</operator><name>frag_pct</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ENABLE_GC</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<function><type><name>uint32_t</name></type> <name>lv_mem_get_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>data</name> <operator>==</operator> <operator>&amp;</operator><name>zero_mem</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_mem_ent_t</name> <modifier>*</modifier></type> <name>e</name> <init>= <expr><operator>(</operator><name>lv_mem_ent_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_mem_header_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>e</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>d_size</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<function><type><name>uint32_t</name></type> <name>lv_mem_get_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>LV_MEM_CUSTOM_GET_SIZE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_MEM_CUSTOM</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<function><type><specifier>static</specifier> <name>lv_mem_ent_t</name> <modifier>*</modifier></type> <name>ent_get_next</name><parameter_list>(<parameter><decl><type><name>lv_mem_ent_t</name> <modifier>*</modifier></type> <name>act_e</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_mem_ent_t</name> <modifier>*</modifier></type> <name>next_e</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>act_e</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>next_e</name> <operator>=</operator> <operator>(</operator><name>lv_mem_ent_t</name> <operator>*</operator><operator>)</operator><name>work_mem</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>data</name> <init>= <expr><operator>&amp;</operator><name><name>act_e</name><operator>-&gt;</operator><name>first_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>next_e</name> <operator>=</operator> <operator>(</operator><name>lv_mem_ent_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>data</name><index>[<expr><name><name>act_e</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>d_size</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>&amp;</operator><name><name>next_e</name><operator>-&gt;</operator><name>first_data</name></name> <operator>&gt;=</operator> <operator>&amp;</operator><name><name>work_mem</name><index>[<expr><name>LV_MEM_SIZE</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>next_e</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>next_e</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type> <name>ent_alloc</name><parameter_list>(<parameter><decl><type><name>lv_mem_ent_t</name> <modifier>*</modifier></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>alloc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>used</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>d_size</name></name> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ent_trunc</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr><operator>,</operator>

<expr><name><name>e</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>used</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>alloc</name> <operator>=</operator> <operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>first_data</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>alloc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ent_trunc</name><parameter_list>(<parameter><decl><type><name>lv_mem_ent_t</name> <modifier>*</modifier></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_ARCH_64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>size</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">0x7</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>size</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">0x3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>d_size</name></name> <operator>==</operator> <name>size</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_mem_header_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>d_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>d_size</name></name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>e_data</name> <init>= <expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>first_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_mem_ent_t</name> <modifier>*</modifier></type> <name>after_new_e</name> <init>= <expr><operator>(</operator><name>lv_mem_ent_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>e_data</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>after_new_e</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>after_new_e</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>d_size</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>e</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>d_size</name></name> <operator>-</operator> <name>size</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_mem_header_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>s</name><operator>.</operator><name>d_size</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>size</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
