<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_misc\lv_txt.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_CONF_INCLUDE_SIMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_conf.h"</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../lv_conf.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_area.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_area.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_font/lv_font.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_TXT_COLOR_CMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_TXT_COLOR_CMD</name></cpp:macro> <cpp:value>"#"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_TXT_ENC_UTF8</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_TXT_ENC_ASCII</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<enum>enum <block>{

<decl><name>LV_TXT_FLAG_NONE</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,

<decl><name>LV_TXT_FLAG_RECOLOR</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>, 

<decl><name>LV_TXT_FLAG_EXPAND</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>, 

<decl><name>LV_TXT_FLAG_CENTER</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>, 

<decl><name>LV_TXT_FLAG_RIGHT</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>, 

}</block>;</enum>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_txt_flag_t</name>;</typedef>

<enum>enum <block>{

<decl><name>LV_TXT_CMD_STATE_WAIT</name></decl>, 

<decl><name>LV_TXT_CMD_STATE_PAR</name></decl>, 

<decl><name>LV_TXT_CMD_STATE_IN</name></decl>, 

}</block>;</enum>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_txt_cmd_state_t</name>;</typedef>

<function_decl><type><name>void</name></type> <name>lv_txt_get_size</name><parameter_list>(<parameter><decl><type><name>lv_point_t</name> <modifier>*</modifier></type> <name>size_res</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>letter_space</name></decl></parameter>,

<parameter><decl><type><name>lv_coord_t</name></type> <name>line_space</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>max_width</name></decl></parameter>, <parameter><decl><type><name>lv_txt_flag_t</name></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint16_t</name></type> <name>lv_txt_get_next_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>letter_space</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>max_width</name></decl></parameter>,

<parameter><decl><type><name>lv_txt_flag_t</name></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_coord_t</name></type> <name>lv_txt_get_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>letter_space</name></decl></parameter>,

<parameter><decl><type><name>lv_txt_flag_t</name></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>lv_txt_is_cmd</name><parameter_list>(<parameter><decl><type><name>lv_txt_cmd_state_t</name> <modifier>*</modifier></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_txt_ins</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>txt_buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>ins_txt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_txt_cut</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>uint8_t</name></type> (<modifier>*</modifier><name>lv_txt_encoded_size</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>uint32_t</name></type> (<modifier>*</modifier><name>lv_txt_unicode_to_encoded</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>uint32_t</name></type> (<modifier>*</modifier><name>lv_txt_encoded_conv_wc</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>uint32_t</name></type> (<modifier>*</modifier><name>lv_txt_encoded_next</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>uint32_t</name></type> (<modifier>*</modifier><name>lv_txt_encoded_prev</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>uint32_t</name></type> (<modifier>*</modifier><name>lv_txt_encoded_get_byte_id</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>uint32_t</name></type> (<modifier>*</modifier><name>lv_txt_encoded_get_char_id</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>uint32_t</name></type> (<modifier>*</modifier><name>lv_txt_get_encoded_length</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
