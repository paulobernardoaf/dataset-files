<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_misc\lv_txt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_txt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_math.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_log.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_BREAK_FOUND</name></cpp:macro> <cpp:value>UINT32_MAX</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_break_char</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>letter</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_TXT_ENC</name> <operator>==</operator> <name>LV_TXT_ENC_UTF8</name></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name>lv_txt_utf8_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_unicode_to_utf8</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>letter_uni</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_utf8_conv_wc</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_utf8_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_utf8_prev</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>i_start</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_utf8_get_byte_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>utf8_id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_utf8_get_char_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>byte_id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_utf8_get_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_TXT_ENC</name> <operator>==</operator> <name>LV_TXT_ENC_ASCII</name></expr></cpp:elif>

<function_decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name>lv_txt_iso8859_1_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_unicode_to_iso8859_1</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>letter_uni</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_iso8859_1_conv_wc</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_iso8859_1_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_iso8859_1_prev</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>i_start</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_iso8859_1_get_byte_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>utf8_id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_iso8859_1_get_char_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>byte_id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_iso8859_1_get_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_TXT_ENC</name> <operator>==</operator> <name>LV_TXT_ENC_UTF8</name></expr></cpp:if>

<function_decl><type><name>uint8_t</name></type> (<modifier>*</modifier><name>lv_txt_encoded_size</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>lv_txt_utf8_size</name></expr></init>;</function_decl>

<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>lv_txt_unicode_to_encoded</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>lv_txt_unicode_to_utf8</name></expr></init>;</function_decl>

<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>lv_txt_encoded_conv_wc</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>lv_txt_utf8_conv_wc</name></expr></init>;</function_decl>

<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>lv_txt_encoded_next</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>lv_txt_utf8_next</name></expr></init>;</function_decl>

<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>lv_txt_encoded_prev</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>lv_txt_utf8_prev</name></expr></init>;</function_decl>

<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>lv_txt_encoded_get_byte_id</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>lv_txt_utf8_get_byte_id</name></expr></init>;</function_decl>

<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>lv_txt_encoded_get_char_id</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>lv_txt_utf8_get_char_id</name></expr></init>;</function_decl>

<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>lv_txt_get_encoded_length</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>lv_txt_utf8_get_length</name></expr></init>;</function_decl>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_TXT_ENC</name> <operator>==</operator> <name>LV_TXT_ENC_ASCII</name></expr></cpp:elif>

<function_decl><type><name>uint8_t</name></type> (<modifier>*</modifier><name>lv_txt_encoded_size</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>lv_txt_iso8859_1_size</name></expr></init>;</function_decl>

<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>lv_txt_unicode_to_encoded</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>lv_txt_unicode_to_iso8859_1</name></expr></init>;</function_decl>

<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>lv_txt_encoded_conv_wc</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>lv_txt_iso8859_1_conv_wc</name></expr></init>;</function_decl>

<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>lv_txt_encoded_next</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>lv_txt_iso8859_1_next</name></expr></init>;</function_decl>

<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>lv_txt_encoded_prev</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>lv_txt_iso8859_1_prev</name></expr></init>;</function_decl>

<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>lv_txt_encoded_get_byte_id</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>lv_txt_iso8859_1_get_byte_id</name></expr></init>;</function_decl>

<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>lv_txt_encoded_get_char_id</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>lv_txt_iso8859_1_get_char_id</name></expr></init>;</function_decl>

<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>lv_txt_get_encoded_length</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>lv_txt_iso8859_1_get_length</name></expr></init>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>lv_txt_get_size</name><parameter_list>(<parameter><decl><type><name>lv_point_t</name> <modifier>*</modifier></type> <name>size_res</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>letter_space</name></decl></parameter>,

<parameter><decl><type><name>lv_coord_t</name></type> <name>line_space</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>max_width</name></decl></parameter>, <parameter><decl><type><name>lv_txt_flag_t</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>size_res</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>size_res</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>text</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>font</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>LV_TXT_FLAG_EXPAND</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>max_width</name> <operator>=</operator> <name>LV_COORD_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>line_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_line_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>act_line_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>letter_height</name> <init>= <expr><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>text</name><index>[<expr><name>line_start</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_line_start</name> <operator>+=</operator> <call><name>lv_txt_get_next_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>line_start</name></expr>]</index></name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name>letter_space</name></expr></argument>, <argument><expr><name>max_width</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>size_res</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>letter_height</name> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>line_space</name> <operator>&gt;</operator> <call><name>LV_MAX_OF</name><argument_list>(<argument><expr><name>lv_coord_t</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_txt_get_size: integer overflow while calculating text height"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>size_res</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <name>letter_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>size_res</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <name>line_space</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>act_line_length</name> <operator>=</operator> <call><name>lv_txt_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>line_start</name></expr>]</index></name></expr></argument>, <argument><expr><name>new_line_start</name> <operator>-</operator> <name>line_start</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name>letter_space</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>size_res</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name>act_line_length</name></expr></argument>, <argument><expr><name><name>size_res</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>line_start</name> <operator>=</operator> <name>new_line_start</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>line_start</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>text</name><index>[<expr><name>line_start</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name><name>text</name><index>[<expr><name>line_start</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>size_res</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <name>letter_height</name> <operator>+</operator> <name>line_space</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>size_res</name><operator>-&gt;</operator><name>y</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>size_res</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>letter_height</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>size_res</name><operator>-&gt;</operator><name>y</name></name> <operator>-=</operator> <name>line_space</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint16_t</name></type> <name>lv_txt_get_next_word</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name></decl></parameter>,

<parameter><decl><type><name>lv_coord_t</name></type> <name>letter_space</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>max_width</name></decl></parameter>,

<parameter><decl><type><name>lv_txt_flag_t</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>word_w_ptr</name></decl></parameter>, <parameter><decl><type><name>lv_txt_cmd_state_t</name> <modifier>*</modifier></type> <name>cmd_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>txt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>txt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>font</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>LV_TXT_FLAG_EXPAND</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>max_width</name> <operator>=</operator> <name>LV_COORD_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_next</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_next_next</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>letter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>letter_next</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>letter_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>cur_w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>word_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>break_index</name> <init>= <expr><name>NO_BREAK_FOUND</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>break_letter_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>letter</name> <operator>=</operator> <call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_next_next</name> <operator>=</operator> <name>i_next</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>letter_next</name> <operator>=</operator> <call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_next_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>word_len</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>LV_TXT_FLAG_RECOLOR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_txt_is_cmd</name><argument_list>(<argument><expr><name>cmd_state</name></expr></argument>, <argument><expr><name>letter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>i_next</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_next</name> <operator>=</operator> <name>i_next_next</name></expr>;</expr_stmt>

<expr_stmt><expr><name>letter</name> <operator>=</operator> <name>letter_next</name></expr>;</expr_stmt>

<continue>continue;</continue> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>letter_w</name> <operator>=</operator> <call><name>lv_font_get_glyph_width</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>letter</name></expr></argument>, <argument><expr><name>letter_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_w</name> <operator>+=</operator> <name>letter_w</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>letter_w</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur_w</name> <operator>+=</operator> <name>letter_space</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>break_index</name> <operator>==</operator> <name>NO_BREAK_FOUND</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>cur_w</name> <operator>-</operator> <name>letter_space</name><operator>)</operator> <operator>&gt;</operator> <name>max_width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>break_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>break_letter_count</name> <operator>=</operator> <name>word_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>letter</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>letter</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <call><name>is_break_char</name><argument_list>(<argument><expr><name>letter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>break_index</name> <operator>==</operator> <name>NO_BREAK_FOUND</name> <operator>&amp;&amp;</operator> <name>word_w_ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>word_w_ptr</name> <operator>=</operator> <name>cur_w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>word_len</name><operator>--</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>word_w_ptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>break_index</name> <operator>==</operator> <name>NO_BREAK_FOUND</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>word_w_ptr</name> <operator>=</operator> <name>cur_w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>i_next</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_next</name> <operator>=</operator> <name>i_next_next</name></expr>;</expr_stmt>

<expr_stmt><expr><name>letter</name> <operator>=</operator> <name>letter_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>break_index</name> <operator>==</operator> <name>NO_BREAK_FOUND</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>word_len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>letter</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name>letter_next</name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <name>i_next</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_TXT_LINE_BREAK_LONG_LEN</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>word_len</name> <operator>&lt;</operator> <name>LV_TXT_LINE_BREAK_LONG_LEN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>force</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>break_index</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>word_w_ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>word_w_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>break_letter_count</name> <operator>&lt;</operator> <name>LV_TXT_LINE_BREAK_LONG_PRE_MIN_LEN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>force</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>break_index</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>word_w_ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>word_w_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>break_index</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>n_move</name> <init>= <expr><name>LV_TXT_LINE_BREAK_LONG_POST_MIN_LEN</name> <operator>-</operator> <operator>(</operator><name>word_len</name> <operator>-</operator> <name>break_letter_count</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for<control>(<init>;</init><condition><expr><name>n_move</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>n_move</name><operator>--</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>lv_txt_encoded_prev</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block>

<return>return <expr><name>i</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>( <expr><name>force</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>break_index</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>word_w_ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>word_w_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>break_letter_count</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>lv_txt_get_next_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name></decl></parameter>,

<parameter><decl><type><name>lv_coord_t</name></type> <name>letter_space</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>max_width</name></decl></parameter>, <parameter><decl><type><name>lv_txt_flag_t</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>txt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>font</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>LV_TXT_FLAG_EXPAND</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>max_width</name> <operator>=</operator> <name>LV_COORD_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_txt_cmd_state_t</name></type> <name>cmd_state</name> <init>= <expr><name>LV_TXT_CMD_STATE_WAIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<while>while<condition>(<expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>max_width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>word_w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>advance</name> <init>= <expr><call><name>lv_txt_get_next_word</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name>letter_space</name></expr></argument>, <argument><expr><name>max_width</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>word_w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd_state</name></expr></argument>, <argument><expr><name>i</name><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>max_width</name> <operator>-=</operator> <name>word_w</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>advance</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>advance</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>txt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name><name>txt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_coord_t</name></type> <name>lv_txt_get_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>letter_space</name></decl></parameter>,

<parameter><decl><type><name>lv_txt_flag_t</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>txt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>font</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_txt_cmd_state_t</name></type> <name>cmd_state</name> <init>= <expr><name>LV_TXT_CMD_STATE_WAIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>letter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>letter_next</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>length</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>letter</name> <operator>=</operator> <call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>letter_next</name> <operator>=</operator> <call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>LV_TXT_FLAG_RECOLOR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_txt_is_cmd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd_state</name></expr></argument>, <argument><expr><name>letter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>char_width</name> <init>= <expr><call><name>lv_font_get_glyph_width</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>letter</name></expr></argument>, <argument><expr><name>letter_next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>char_width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>+=</operator> <name>char_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>+=</operator> <name>letter_space</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>-=</operator> <name>letter_space</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>width</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_txt_is_cmd</name><parameter_list>(<parameter><decl><type><name>lv_txt_cmd_state_t</name> <modifier>*</modifier></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>LV_TXT_COLOR_CMD</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>state</name> <operator>==</operator> <name>LV_TXT_CMD_STATE_WAIT</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name>LV_TXT_CMD_STATE_PAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>*</operator><name>state</name> <operator>==</operator> <name>LV_TXT_CMD_STATE_PAR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name>LV_TXT_CMD_STATE_WAIT</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>*</operator><name>state</name> <operator>==</operator> <name>LV_TXT_CMD_STATE_IN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name>LV_TXT_CMD_STATE_WAIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>state</name> <operator>==</operator> <name>LV_TXT_CMD_STATE_PAR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name>LV_TXT_CMD_STATE_IN</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_txt_ins</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>txt_buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>ins_txt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>old_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>txt_buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ins_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>ins_txt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>new_len</name> <init>= <expr><name>ins_len</name> <operator>+</operator> <name>old_len</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>lv_txt_encoded_get_byte_id</name><argument_list>(<argument><expr><name>txt_buf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>new_len</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>pos</name> <operator>+</operator> <name>ins_len</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>txt_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>txt_buf</name><index>[<expr><name>i</name> <operator>-</operator> <name>ins_len</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>txt_buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>ins_txt</name></expr></argument>, <argument><expr><name>ins_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_txt_cut</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>old_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>lv_txt_encoded_get_byte_id</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>lv_txt_encoded_get_byte_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>pos</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>old_len</name> <operator>-</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>txt</name><index>[<expr><name>i</name> <operator>+</operator> <name>len</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_TXT_ENC</name> <operator>==</operator> <name>LV_TXT_ENC_UTF8</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>lv_txt_utf8_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xE0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xC0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xE0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_unicode_to_utf8</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>letter_uni</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>letter_uni</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>letter_uni</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bytes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>letter_uni</name> <operator>&lt;</operator> <literal type="number">0x0800</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>letter_uni</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xC0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>letter_uni</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>letter_uni</name> <operator>&lt;</operator> <literal type="number">0x010000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>letter_uni</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xE0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>letter_uni</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>letter_uni</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>letter_uni</name> <operator>&lt;</operator> <literal type="number">0x110000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>letter_uni</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xF0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>letter_uni</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>letter_uni</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>letter_uni</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>res_p</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>bytes</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>*</operator><name>res_p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_utf8_conv_wc</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>swapped</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>c8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>c8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>swapped</name> <operator>=</operator> <operator>(</operator><name><name>c8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>c8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>c8</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>c8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>swapped</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>swapped</name> <operator>=</operator> <operator>(</operator><name>swapped</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>swapped</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_utf8_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>&amp;</operator><name>i_tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>txt</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>txt</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>txt</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xE0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xC0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>txt</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>txt</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>result</name> <operator>+=</operator> <operator>(</operator><name><name>txt</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>txt</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xE0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>txt</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>txt</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>result</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>txt</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>txt</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>result</name> <operator>+=</operator> <operator>(</operator><name><name>txt</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>txt</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>txt</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>txt</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>result</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>txt</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>txt</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>result</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>txt</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>txt</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>result</name> <operator>+=</operator> <name><name>txt</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_utf8_prev</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>c_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>cnt</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>c_size</name> <operator>=</operator> <call><name>lv_txt_encoded_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>c_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><name>c_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_tmp</name> <init>= <expr><operator>*</operator><name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>letter</name> <init>= <expr><call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<return>return <expr><name>letter</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_utf8_get_byte_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>utf8_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>byte_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>utf8_id</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>c_size</name> <init>= <expr><call><name>lv_txt_encoded_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name>byte_cnt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>byte_cnt</name> <operator>+=</operator> <ternary><condition><expr><name>c_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>c_size</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>byte_cnt</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_utf8_get_char_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>byte_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>char_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>byte_id</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>char_cnt</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>char_cnt</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_utf8_get_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_TXT_ENC</name> <operator>==</operator> <name>LV_TXT_ENC_ASCII</name></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>lv_txt_iso8859_1_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>str</name></expr>;</expr_stmt> 

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_unicode_to_iso8859_1</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>letter_uni</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>letter_uni</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>letter_uni</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="char">' '</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_iso8859_1_conv_wc</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_iso8859_1_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>txt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>letter</name> <init>= <expr><name><name>txt</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>letter</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_iso8859_1_prev</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>*</operator><operator>(</operator><name>txt</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>letter</name> <init>= <expr><name><name>txt</name><index>[<expr><operator>*</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>letter</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_iso8859_1_get_byte_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>utf8_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>txt</name></expr>;</expr_stmt> 

<return>return <expr><name>utf8_id</name></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_iso8859_1_get_char_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>byte_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>txt</name></expr>;</expr_stmt> 

<return>return <expr><name>byte_id</name></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lv_txt_iso8859_1_get_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>strlen</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Invalid character encoding. See `LV_TXT_ENC` in `lv_conf.h`"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_break_char</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>letter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>LV_TXT_BREAK_CHARS</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>letter</name> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>LV_TXT_BREAK_CHARS</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
