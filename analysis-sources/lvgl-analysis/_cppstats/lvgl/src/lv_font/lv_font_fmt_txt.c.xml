<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_font\lv_font_fmt_txt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_font.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_font_fmt_txt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_draw/lv_draw.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_mem.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{

<decl><name>RLE_STATE_SINGLE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>RLE_STATE_REPEATE</name></decl>,

<decl><name>RLE_STATE_COUNTER</name></decl>,

}</block></enum></type><name>rle_state_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>get_glyph_dsc_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>letter</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int8_t</name></type> <name>get_kern_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>gid_left</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>gid_right</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>unicode_list_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>ref</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>element</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>kern_pair_8_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>ref</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>element</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>kern_pair_16_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>ref</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>element</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>decompress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>bpp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>decompress_line</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name>get_bits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>bit_pos</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bits_write</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>bit_pos</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>rle_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>bpp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name>rle_next</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>rle_rdp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>rle_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name>rle_bpp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name>rle_prev_v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name>rle_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>rle_state_t</name></type> <name>rle_state</name></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>lv_font_get_bitmap_fmt_txt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>unicode_letter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_font_fmt_txt_dsc_t</name> <modifier>*</modifier></type> <name>fdsc</name> <init>= <expr><operator>(</operator><name>lv_font_fmt_txt_dsc_t</name> <operator>*</operator><operator>)</operator> <name><name>font</name><operator>-&gt;</operator><name>dsc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>gid</name> <init>= <expr><call><name>get_glyph_dsc_id</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>unicode_letter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>gid</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_font_fmt_txt_glyph_dsc_t</name> <modifier>*</modifier></type> <name>gdsc</name> <init>= <expr><operator>&amp;</operator><name><name>fdsc</name><operator>-&gt;</operator><name>glyph_dsc</name><index>[<expr><name>gid</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>fdsc</name><operator>-&gt;</operator><name>bitmap_format</name></name> <operator>==</operator> <name>LV_FONT_FMT_TXT_PLAIN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>gdsc</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>&amp;</operator><name><name>fdsc</name><operator>-&gt;</operator><name>glyph_bitmap</name><index>[<expr><name><name>gdsc</name><operator>-&gt;</operator><name>bitmap_index</name></name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>gsize</name> <init>= <expr><name><name>gdsc</name><operator>-&gt;</operator><name>box_w</name></name> <operator>*</operator> <name><name>gdsc</name><operator>-&gt;</operator><name>box_h</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>gsize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>buf_size</name> <init>= <expr><name>gsize</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>fdsc</name><operator>-&gt;</operator><name>bpp</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name>gsize</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name>gsize</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name>gsize</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name>gsize</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><call><name>lv_mem_get_size</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>buf_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>lv_mem_realloc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>decompress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fdsc</name><operator>-&gt;</operator><name>glyph_bitmap</name><index>[<expr><name><name>gdsc</name><operator>-&gt;</operator><name>bitmap_index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>gdsc</name><operator>-&gt;</operator><name>box_w</name></name></expr></argument> , <argument><expr><name><name>gdsc</name><operator>-&gt;</operator><name>box_h</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>fdsc</name><operator>-&gt;</operator><name>bpp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_font_get_glyph_dsc_fmt_txt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>lv_font_glyph_dsc_t</name> <modifier>*</modifier></type> <name>dsc_out</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>unicode_letter</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>unicode_letter_next</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_font_fmt_txt_dsc_t</name> <modifier>*</modifier></type> <name>fdsc</name> <init>= <expr><operator>(</operator><name>lv_font_fmt_txt_dsc_t</name> <operator>*</operator><operator>)</operator> <name><name>font</name><operator>-&gt;</operator><name>dsc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>gid</name> <init>= <expr><call><name>get_glyph_dsc_id</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>unicode_letter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>gid</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>kvalue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>fdsc</name><operator>-&gt;</operator><name>kern_dsc</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>gid_next</name> <init>= <expr><call><name>get_glyph_dsc_id</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>unicode_letter_next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>gid_next</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>kvalue</name> <operator>=</operator> <call><name>get_kern_value</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>gid_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_font_fmt_txt_glyph_dsc_t</name> <modifier>*</modifier></type> <name>gdsc</name> <init>= <expr><operator>&amp;</operator><name><name>fdsc</name><operator>-&gt;</operator><name>glyph_dsc</name><index>[<expr><name>gid</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>kv</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>kvalue</name> <operator>*</operator> <name><name>fdsc</name><operator>-&gt;</operator><name>kern_scale</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>adv_w</name> <init>= <expr><name><name>gdsc</name><operator>-&gt;</operator><name>adv_w</name></name> <operator>+</operator> <name>kv</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>adv_w</name> <operator>=</operator> <operator>(</operator><name>adv_w</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc_out</name><operator>-&gt;</operator><name>adv_w</name></name> <operator>=</operator> <name>adv_w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc_out</name><operator>-&gt;</operator><name>box_h</name></name> <operator>=</operator> <name><name>gdsc</name><operator>-&gt;</operator><name>box_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc_out</name><operator>-&gt;</operator><name>box_w</name></name> <operator>=</operator> <name><name>gdsc</name><operator>-&gt;</operator><name>box_w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc_out</name><operator>-&gt;</operator><name>ofs_x</name></name> <operator>=</operator> <name><name>gdsc</name><operator>-&gt;</operator><name>ofs_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc_out</name><operator>-&gt;</operator><name>ofs_y</name></name> <operator>=</operator> <name><name>gdsc</name><operator>-&gt;</operator><name>ofs_y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc_out</name><operator>-&gt;</operator><name>bpp</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>fdsc</name><operator>-&gt;</operator><name>bpp</name></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>get_glyph_dsc_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>letter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>letter</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_font_fmt_txt_dsc_t</name> <modifier>*</modifier></type> <name>fdsc</name> <init>= <expr><operator>(</operator><name>lv_font_fmt_txt_dsc_t</name> <operator>*</operator><operator>)</operator> <name><name>font</name><operator>-&gt;</operator><name>dsc</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>letter</name> <operator>==</operator> <name><name>fdsc</name><operator>-&gt;</operator><name>last_letter</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>fdsc</name><operator>-&gt;</operator><name>last_glyph_id</name></name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fdsc</name><operator>-&gt;</operator><name>cmap_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>rcp</name> <init>= <expr><name>letter</name> <operator>-</operator> <name><name>fdsc</name><operator>-&gt;</operator><name>cmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>range_start</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>rcp</name> <operator>&gt;</operator> <name><name>fdsc</name><operator>-&gt;</operator><name>cmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>range_length</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>glyph_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>fdsc</name><operator>-&gt;</operator><name>cmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>glyph_id</name> <operator>=</operator> <name><name>fdsc</name><operator>-&gt;</operator><name>cmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>glyph_id_start</name> <operator>+</operator> <name>rcp</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>fdsc</name><operator>-&gt;</operator><name>cmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>gid_ofs_8</name> <init>= <expr><name><name>fdsc</name><operator>-&gt;</operator><name>cmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>glyph_id_ofs_list</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>glyph_id</name> <operator>=</operator> <name><name>fdsc</name><operator>-&gt;</operator><name>cmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>glyph_id_start</name> <operator>+</operator> <name><name>gid_ofs_8</name><index>[<expr><name>rcp</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>fdsc</name><operator>-&gt;</operator><name>cmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>LV_FONT_FMT_TXT_CMAP_SPARSE_TINY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>lv_utils_bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rcp</name></expr></argument>, <argument><expr><name><name>fdsc</name><operator>-&gt;</operator><name>cmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>unicode_list</name></expr></argument>, <argument><expr><name><name>fdsc</name><operator>-&gt;</operator><name>cmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>list_length</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>fdsc</name><operator>-&gt;</operator><name>cmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>unicode_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>unicode_list_compare</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_uintptr_t</name></type> <name>ofs</name> <init>= <expr><operator>(</operator><name>lv_uintptr_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name><name>fdsc</name><operator>-&gt;</operator><name>cmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>unicode_list</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ofs</name> <operator>=</operator> <name>ofs</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>glyph_id</name> <operator>=</operator> <name><name>fdsc</name><operator>-&gt;</operator><name>cmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>glyph_id_start</name> <operator>+</operator> <name>ofs</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>fdsc</name><operator>-&gt;</operator><name>cmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>LV_FONT_FMT_TXT_CMAP_SPARSE_FULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>lv_utils_bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rcp</name></expr></argument>, <argument><expr><name><name>fdsc</name><operator>-&gt;</operator><name>cmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>unicode_list</name></expr></argument>, <argument><expr><name><name>fdsc</name><operator>-&gt;</operator><name>cmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>list_length</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>fdsc</name><operator>-&gt;</operator><name>cmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>unicode_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>unicode_list_compare</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_uintptr_t</name></type> <name>ofs</name> <init>= <expr><operator>(</operator><name>lv_uintptr_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name><name>fdsc</name><operator>-&gt;</operator><name>cmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>unicode_list</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ofs</name> <operator>=</operator> <name>ofs</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>gid_ofs_16</name> <init>= <expr><name><name>fdsc</name><operator>-&gt;</operator><name>cmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>glyph_id_ofs_list</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>glyph_id</name> <operator>=</operator> <name><name>fdsc</name><operator>-&gt;</operator><name>cmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>glyph_id_start</name> <operator>+</operator> <name><name>gid_ofs_16</name><index>[<expr><name>ofs</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fdsc</name><operator>-&gt;</operator><name>last_letter</name></name> <operator>=</operator> <name>letter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fdsc</name><operator>-&gt;</operator><name>last_glyph_id</name></name> <operator>=</operator> <name>glyph_id</name></expr>;</expr_stmt>

<return>return <expr><name>glyph_id</name></expr>;</return>

</block_content>}</block></for>

<expr_stmt><expr><name><name>fdsc</name><operator>-&gt;</operator><name>last_letter</name></name> <operator>=</operator> <name>letter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fdsc</name><operator>-&gt;</operator><name>last_glyph_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int8_t</name></type> <name>get_kern_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>gid_left</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>gid_right</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_font_fmt_txt_dsc_t</name> <modifier>*</modifier></type> <name>fdsc</name> <init>= <expr><operator>(</operator><name>lv_font_fmt_txt_dsc_t</name> <operator>*</operator><operator>)</operator> <name><name>font</name><operator>-&gt;</operator><name>dsc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>fdsc</name><operator>-&gt;</operator><name>kern_classes</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_font_fmt_txt_kern_pair_t</name> <modifier>*</modifier></type> <name>kdsc</name> <init>= <expr><name><name>fdsc</name><operator>-&gt;</operator><name>kern_dsc</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>kdsc</name><operator>-&gt;</operator><name>glyph_ids_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>g_ids</name> <init>= <expr><name><name>kdsc</name><operator>-&gt;</operator><name>glyph_ids</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>g_id_both</name> <init>= <expr><operator>(</operator><name>gid_right</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>gid_left</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>kid_p</name> <init>= <expr><call><name>lv_utils_bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_id_both</name></expr></argument>, <argument><expr><name>g_ids</name></expr></argument>, <argument><expr><name><name>kdsc</name><operator>-&gt;</operator><name>pair_cnt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>kern_pair_8_compare</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>kid_p</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_uintptr_t</name></type> <name>ofs</name> <init>= <expr><operator>(</operator><name>lv_uintptr_t</name><operator>)</operator><operator>(</operator><name>kid_p</name> <operator>-</operator> <name>g_ids</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ofs</name> <operator>=</operator> <name>ofs</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>kdsc</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>ofs</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>kdsc</name><operator>-&gt;</operator><name>glyph_ids_size</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type> <name>g_ids</name> <init>= <expr><name><name>kdsc</name><operator>-&gt;</operator><name>glyph_ids</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_uintptr_t</name></type> <name>g_id_both</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>gid_right</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>gid_left</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>kid_p</name> <init>= <expr><call><name>lv_utils_bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_id_both</name></expr></argument>, <argument><expr><name>g_ids</name></expr></argument>, <argument><expr><name><name>kdsc</name><operator>-&gt;</operator><name>pair_cnt</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>kern_pair_16_compare</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>kid_p</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_uintptr_t</name></type> <name>ofs</name> <init>= <expr><operator>(</operator><name>lv_uintptr_t</name><operator>)</operator> <operator>(</operator><name>kid_p</name> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>g_ids</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ofs</name> <operator>=</operator> <name>ofs</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>kdsc</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>ofs</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_font_fmt_txt_kern_classes_t</name> <modifier>*</modifier></type> <name>kdsc</name> <init>= <expr><name><name>fdsc</name><operator>-&gt;</operator><name>kern_dsc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>left_class</name> <init>= <expr><name><name>kdsc</name><operator>-&gt;</operator><name>left_class_mapping</name><index>[<expr><name>gid_left</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>right_class</name> <init>= <expr><name><name>kdsc</name><operator>-&gt;</operator><name>right_class_mapping</name><index>[<expr><name>gid_right</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>left_class</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>right_class</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>kdsc</name><operator>-&gt;</operator><name>class_pair_values</name><index>[<expr><operator>(</operator><name>left_class</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator> <name><name>kdsc</name><operator>-&gt;</operator><name>right_class_cnt</name></name> <operator>+</operator> <operator>(</operator><name>right_class</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>value</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>kern_pair_8_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>ref</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>element</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>ref8_p</name> <init>= <expr><name>ref</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>element8_p</name> <init>= <expr><name>element</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ref8_p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>element8_p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>ref8_p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>element8_p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator> <name><name>ref8_p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>element8_p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>kern_pair_16_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>ref</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>element</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type> <name>ref16_p</name> <init>= <expr><name>ref</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type> <name>element16_p</name> <init>= <expr><name>element</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ref16_p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>element16_p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>ref16_p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>element16_p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator> <name><name>ref16_p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>element16_p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decompress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>bpp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>wrp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>wr_size</name> <init>= <expr><name>bpp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>bpp</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>wr_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rle_init</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>line_buf</name> <init>= <expr><call><name>lv_draw_get_buf</name><argument_list>(<argument><expr><name>w</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>line_buf1</name> <init>= <expr><name>line_buf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>line_buf2</name> <init>= <expr><name>line_buf</name> <operator>+</operator> <name>w</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decompress_line</name><argument_list>(<argument><expr><name>line_buf1</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>bits_write</name><argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr><name>wrp</name></expr></argument>, <argument><expr><name><name>line_buf1</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wrp</name> <operator>+=</operator> <name>wr_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>decompress_line</name><argument_list>(<argument><expr><name>line_buf2</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>line_buf1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>line_buf2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^</operator> <name><name>line_buf1</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr><name>wrp</name></expr></argument>, <argument><expr><name><name>line_buf1</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wrp</name> <operator>+=</operator> <name>wr_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decompress_line</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>w</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rle_next</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>get_bits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>bit_pos</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>byte_pos</name> <init>= <expr><name>bit_pos</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bit_pos</name> <operator>=</operator> <name>bit_pos</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bit_mask</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>len</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>in16</name> <init>= <expr><operator>(</operator><name><name>in</name><index>[<expr><name>byte_pos</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>in</name><index>[<expr><name>byte_pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>in16</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>bit_pos</name> <operator>-</operator> <name>len</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>bit_mask</name></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bits_write</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>bit_pos</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>byte_pos</name> <init>= <expr><name>bit_pos</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bit_pos</name> <operator>=</operator> <name>bit_pos</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bit_pos</name> <operator>=</operator> <literal type="number">8</literal> <operator>-</operator> <name>bit_pos</name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bit_mask</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>len</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>byte_pos</name></expr>]</index></name> <operator>&amp;=</operator> <operator>(</operator><operator>(</operator><operator>~</operator><name>bit_mask</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>bit_pos</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>byte_pos</name></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <name>bit_pos</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rle_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>bpp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>rle_in</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rle_bpp</name> <operator>=</operator> <name>bpp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rle_state</name> <operator>=</operator> <name>RLE_STATE_SINGLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rle_rdp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rle_prev_v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rle_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>rle_next</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>rle_state</name> <operator>==</operator> <name>RLE_STATE_SINGLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>rle_in</name></expr></argument>, <argument><expr><name>rle_rdp</name></expr></argument>, <argument><expr><name>rle_bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rle_rdp</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>rle_prev_v</name> <operator>==</operator> <name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rle_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rle_state</name> <operator>=</operator> <name>RLE_STATE_REPEATE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rle_prev_v</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rle_rdp</name> <operator>+=</operator> <name>rle_bpp</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rle_state</name> <operator>==</operator> <name>RLE_STATE_REPEATE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>rle_in</name></expr></argument>, <argument><expr><name>rle_rdp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rle_cnt</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>rle_rdp</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>rle_prev_v</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rle_cnt</name> <operator>==</operator> <literal type="number">11</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rle_cnt</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>rle_in</name></expr></argument>, <argument><expr><name>rle_rdp</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rle_rdp</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rle_cnt</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rle_state</name> <operator>=</operator> <name>RLE_STATE_COUNTER</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>rle_in</name></expr></argument>, <argument><expr><name>rle_rdp</name></expr></argument>, <argument><expr><name>rle_bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rle_prev_v</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rle_rdp</name> <operator>+=</operator> <name>rle_bpp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rle_state</name> <operator>=</operator> <name>RLE_STATE_SINGLE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>rle_in</name></expr></argument>, <argument><expr><name>rle_rdp</name></expr></argument>, <argument><expr><name>rle_bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rle_prev_v</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rle_rdp</name> <operator>+=</operator> <name>rle_bpp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rle_state</name> <operator>=</operator> <name>RLE_STATE_SINGLE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rle_state</name> <operator>==</operator> <name>RLE_STATE_COUNTER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>rle_prev_v</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rle_cnt</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rle_cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>rle_in</name></expr></argument>, <argument><expr><name>rle_rdp</name></expr></argument>, <argument><expr><name>rle_bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rle_prev_v</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rle_rdp</name> <operator>+=</operator> <name>rle_bpp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rle_state</name> <operator>=</operator> <name>RLE_STATE_SINGLE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>unicode_list_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>ref</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>element</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>ref</name><operator>)</operator><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>element</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

</unit>
