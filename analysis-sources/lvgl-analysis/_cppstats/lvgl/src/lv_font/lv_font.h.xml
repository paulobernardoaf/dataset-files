<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_font\lv_font.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_CONF_INCLUDE_SIMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_conf.h"</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../lv_conf.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_symbol_def.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_FONT_WIDTH_FRACT_DIGIT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_FONT_KERN_POSITIVE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_FONT_KERN_NEGATIVE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>adv_w</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>box_w</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>box_h</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int8_t</name></type> <name>ofs_x</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int8_t</name></type> <name>ofs_y</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bpp</name></decl>;</decl_stmt> 

}</block></struct></type><name>lv_font_glyph_dsc_t</name>;</typedef>

<enum>enum <block>{

<decl><name>LV_FONT_SUBPX_NONE</name></decl>,

<decl><name>LV_FONT_SUBPX_HOR</name></decl>,

<decl><name>LV_FONT_SUBPX_VER</name></decl>,

<decl><name>LV_FONT_SUBPX_BOTH</name></decl>,

}</block>;</enum>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_font_subpx_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_lv_font_struct</name>

<block>{

<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>get_glyph_dsc</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_lv_font_struct</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>lv_font_glyph_dsc_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>letter</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>letter_next</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>get_glyph_bitmap</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_lv_font_struct</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>line_height</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int8_t</name></type> <name>base_line</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>subpx</name> <range>:<expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>dsc</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_USER_DATA</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_font_user_data_t</name></type> <name>user_data</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>lv_font_t</name>;</typedef>

<function_decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>lv_font_get_glyph_bitmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font_p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>letter</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>lv_font_get_glyph_dsc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font_p</name></decl></parameter>, <parameter><decl><type><name>lv_font_glyph_dsc_t</name> <modifier>*</modifier></type> <name>dsc_out</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>letter</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>letter_next</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint16_t</name></type> <name>lv_font_get_glyph_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>letter</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>letter_next</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>lv_font_get_line_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>font_p</name><operator>-&gt;</operator><name>line_height</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_FONT_DECLARE</name><parameter_list>(<parameter><type><name>font_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern lv_font_t font_name;</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_FONT_ROBOTO_12</name></expr></cpp:if>

<macro><name>LV_FONT_DECLARE</name><argument_list>(<argument>lv_font_roboto_12</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_FONT_ROBOTO_16</name></expr></cpp:if>

<macro><name>LV_FONT_DECLARE</name><argument_list>(<argument>lv_font_roboto_16</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_FONT_ROBOTO_22</name></expr></cpp:if>

<macro><name>LV_FONT_DECLARE</name><argument_list>(<argument>lv_font_roboto_22</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_FONT_ROBOTO_28</name></expr></cpp:if>

<macro><name>LV_FONT_DECLARE</name><argument_list>(<argument>lv_font_roboto_28</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_FONT_UNSCII_8</name></expr></cpp:if>

<macro><name>LV_FONT_DECLARE</name><argument_list>(<argument>lv_font_unscii_8</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_FONT_CUSTOM_DECLARE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>LV_FONT_CUSTOM_DECLARE</name></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
