<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_font\lv_font_fmt_txt.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_CONF_INCLUDE_SIMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_conf.h"</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../lv_conf.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_font.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct

<block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_FONT_FMT_TXT_LARGE</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bitmap_index</name> <range>: <expr><literal type="number">20</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>adv_w</name> <range>:<expr><literal type="number">12</literal></expr></range></decl>;</decl_stmt> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bitmap_index</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>adv_w</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>box_w</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>box_h</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int8_t</name></type> <name>ofs_x</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int8_t</name></type> <name>ofs_y</name></decl>;</decl_stmt> 

}</block></struct></type><name>lv_font_fmt_txt_glyph_dsc_t</name>;</typedef>

<enum>enum <block>{

<decl><name>LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY</name></decl>,

<decl><name>LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL</name></decl>,

<decl><name>LV_FONT_FMT_TXT_CMAP_SPARSE_TINY</name></decl>,

<decl><name>LV_FONT_FMT_TXT_CMAP_SPARSE_FULL</name></decl>,

}</block>;</enum>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_font_fmt_txt_cmap_type_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>range_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>range_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>glyph_id_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type> <name>unicode_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>glyph_id_ofs_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>list_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_font_fmt_txt_cmap_type_t</name></type> <name>type</name></decl>;</decl_stmt>

}</block></struct></type><name>lv_font_fmt_txt_cmap_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>glyph_ids</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type> <name>values</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pair_cnt</name> <range>:<expr><literal type="number">24</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>glyph_ids_size</name> <range>:<expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt> 

}</block></struct></type><name>lv_font_fmt_txt_kern_pair_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type> <name>class_pair_values</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>left_class_mapping</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>right_class_mapping</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>left_class_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>right_class_cnt</name></decl>;</decl_stmt>

}</block></struct></type><name>lv_font_fmt_txt_kern_classes_t</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>LV_FONT_FMT_TXT_PLAIN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>LV_FONT_FMT_TXT_COMPRESSED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

}</block></enum></type><name>lv_font_fmt_txt_bitmap_format_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>glyph_bitmap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_font_fmt_txt_glyph_dsc_t</name> <modifier>*</modifier></type> <name>glyph_dsc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_font_fmt_txt_cmap_t</name> <modifier>*</modifier></type> <name>cmaps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>kern_dsc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>kern_scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>cmap_num</name> <range>:<expr><literal type="number">10</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>bpp</name> <range>:<expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>kern_classes</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>bitmap_format</name> <range>:<expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>last_letter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>last_glyph_id</name></decl>;</decl_stmt>

}</block></struct></type><name>lv_font_fmt_txt_dsc_t</name>;</typedef>

<function_decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>lv_font_get_bitmap_fmt_txt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>letter</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>lv_font_get_glyph_dsc_fmt_txt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>lv_font_glyph_dsc_t</name> <modifier>*</modifier></type> <name>dsc_out</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>unicode_letter</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>unicode_letter_next</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
