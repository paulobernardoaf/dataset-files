<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_objx\lv_btnm.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_btnm.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_BTNM</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_group.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_draw/lv_draw.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_refr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_themes/lv_theme.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_txt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_OBJX_NAME</name></cpp:macro> <cpp:value>"lv_btnm"</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_btnm_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lv_btnm_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name>get_button_width</name><parameter_list>(<parameter><decl><type><name>lv_btnm_ctrl_t</name></type> <name>ctrl_bits</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>button_is_hidden</name><parameter_list>(<parameter><decl><type><name>lv_btnm_ctrl_t</name></type> <name>ctrl_bits</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>button_is_repeat_disabled</name><parameter_list>(<parameter><decl><type><name>lv_btnm_ctrl_t</name></type> <name>ctrl_bits</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>button_is_inactive</name><parameter_list>(<parameter><decl><type><name>lv_btnm_ctrl_t</name></type> <name>ctrl_bits</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>button_is_click_trig</name><parameter_list>(<parameter><decl><type><name>lv_btnm_ctrl_t</name></type> <name>ctrl_bits</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>button_is_tgl_enabled</name><parameter_list>(<parameter><decl><type><name>lv_btnm_ctrl_t</name></type> <name>ctrl_bits</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>button_get_tgl_state</name><parameter_list>(<parameter><decl><type><name>lv_btnm_ctrl_t</name></type> <name>ctrl_bits</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint16_t</name></type> <name>get_button_from_point</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><name>lv_point_t</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>allocate_btn_areas_and_controls</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>map</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>invalidate_button_area</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>btn_idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>maps_are_identical</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>map1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>map2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>make_one_button_toggled</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>btn_idx</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>lv_btnm_def_map</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"Btn1"</literal></expr>, <expr><literal type="string">"Btn2"</literal></expr>, <expr><literal type="string">"Btn3"</literal></expr>, <expr><literal type="string">"\n"</literal></expr>, <expr><literal type="string">"Btn4"</literal></expr>, <expr><literal type="string">"Btn5"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_design_cb_t</name></type> <name>ancestor_design_f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>ancestor_signal</name></decl>;</decl_stmt>

<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_btnm_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"button matrix create started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>new_btnm</name> <init>= <expr><call><name>lv_obj_create</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_btnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>new_btnm</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ancestor_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><name>new_btnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_allocate_ext_attr</name><argument_list>(<argument><expr><name>new_btnm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_btnm_ext_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>=</operator> <name>LV_BTNM_BTN_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name> <operator>=</operator> <name>LV_BTNM_BTN_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>button_areas</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>map_p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>recolor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>one_toggle</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_REL</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_btn_rel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_PR</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_btn_pr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_TGL_REL</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_btn_tgl_rel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_TGL_PR</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_btn_tgl_pr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_INA</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_btn_ina</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ancestor_design_f</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_design_f</name> <operator>=</operator> <call><name>lv_obj_get_design_cb</name><argument_list>(<argument><expr><name>new_btnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><name>new_btnm</name></expr></argument>, <argument><expr><name>lv_btnm_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_design_cb</name><argument_list>(<argument><expr><name>new_btnm</name></expr></argument>, <argument><expr><name>lv_btnm_design</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_btnm_set_map</name><argument_list>(<argument><expr><name>new_btnm</name></expr></argument>, <argument><expr><name>lv_btnm_def_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_size</name><argument_list>(<argument><expr><name>new_btnm</name></expr></argument>, <argument><expr><name>LV_DPI</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>LV_DPI</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>th</name> <init>= <expr><call><name>lv_theme_get_current</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>th</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_btnm_set_style</name><argument_list>(<argument><expr><name>new_btnm</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BG</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>btnm</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btnm_set_style</name><argument_list>(<argument><expr><name>new_btnm</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_REL</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>btnm</name><operator>.</operator><name>btn</name><operator>.</operator><name>rel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btnm_set_style</name><argument_list>(<argument><expr><name>new_btnm</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_PR</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>btnm</name><operator>.</operator><name>btn</name><operator>.</operator><name>pr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btnm_set_style</name><argument_list>(<argument><expr><name>new_btnm</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_TGL_REL</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>btnm</name><operator>.</operator><name>btn</name><operator>.</operator><name>tgl_rel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btnm_set_style</name><argument_list>(<argument><expr><name>new_btnm</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_TGL_PR</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>btnm</name><operator>.</operator><name>btn</name><operator>.</operator><name>tgl_pr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btnm_set_style</name><argument_list>(<argument><expr><name>new_btnm</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_INA</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>btnm</name><operator>.</operator><name>btn</name><operator>.</operator><name>ina</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_set_style</name><argument_list>(<argument><expr><name>new_btnm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>copy_ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name></name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>styles_btn</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btnm_set_map</name><argument_list>(<argument><expr><name>new_btnm</name></expr></argument>, <argument><expr><call><name>lv_btnm_get_map_array</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"button matrix created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_btnm</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_btnm_set_map</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>map</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>maps_are_identical</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>map_p</name></name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>allocate_btn_areas_and_controls</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>map_p</name></name> <operator>=</operator> <name>map</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_bg</name> <init>= <expr><call><name>lv_btnm_get_style</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>max_w</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>style_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name> <operator>-</operator> <name><name>style_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>max_h</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>style_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>style_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>act_y</name> <init>= <expr><name><name>style_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>line_cnt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>li</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>li</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>map</name><index>[<expr><name>li</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>li</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>map</name><index>[<expr><name>li</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>line_cnt</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>btn_h</name> <init>= <expr><name>max_h</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>line_cnt</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>style_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>btn_h</name> <operator>=</operator> <name>btn_h</name> <operator>/</operator> <name>line_cnt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>btn_h</name><operator>--</operator></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>unit_cnt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>unit_act_cnt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>btn_cnt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_tot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>btn_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>map_p_tmp</name> <init>= <expr><name>map</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>unit_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>btn_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>map_p_tmp</name><index>[<expr><name>btn_cnt</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>map_p_tmp</name><index>[<expr><name>btn_cnt</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>unit_cnt</name> <operator>+=</operator> <call><name>get_button_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name>btn_i</name> <operator>+</operator> <name>btn_cnt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>btn_cnt</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name><name>map_p_tmp</name><index>[<expr><name>btn_cnt</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>btn_h</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call><operator>-</operator> <name>act_y</name> <operator>-</operator> <name><name>style_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_bidi_dir_t</name></type> <name>base_dir</name> <init>= <expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>btn_cnt</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>all_unit_w</name> <init>= <expr><name>max_w</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>btn_cnt</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>style_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>act_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>act_unit_w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>unit_act_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>btn_cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>act_unit_w</name> <operator>=</operator> <operator>(</operator><name>all_unit_w</name> <operator>*</operator> <call><name>get_button_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name>btn_i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <name>unit_cnt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>act_unit_w</name><operator>--</operator></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>base_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_RTL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>act_x</name> <operator>=</operator> <operator>(</operator><name>unit_act_cnt</name> <operator>*</operator> <name>all_unit_w</name><operator>)</operator> <operator>/</operator> <name>unit_cnt</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>style_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>act_x</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>style_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name>act_x</name> <operator>-</operator> <name>act_unit_w</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>act_x</name> <operator>=</operator> <operator>(</operator><name>unit_act_cnt</name> <operator>*</operator> <name>all_unit_w</name><operator>)</operator> <operator>/</operator> <name>unit_cnt</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>style_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name> <operator>+</operator>

<name><name>style_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>act_x</name> <operator>!=</operator> <name><name>style_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_area_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>button_areas</name><index>[<expr><name>btn_i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>button_areas</name><index>[<expr><name>btn_i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x2</name></expr></argument>, <argument><expr><name>act_y</name></expr></argument>, <argument><expr><name>act_x</name> <operator>+</operator> <name>act_unit_w</name></expr></argument>,

<argument><expr><name>act_y</name> <operator>+</operator> <name>btn_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_area_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>button_areas</name><index>[<expr><name>btn_i</name></expr>]</index></name></expr></argument>, <argument><expr><name>act_x</name></expr></argument>, <argument><expr><name>act_y</name></expr></argument>, <argument><expr><name>act_x</name> <operator>+</operator> <name>act_unit_w</name></expr></argument>, <argument><expr><name>act_y</name> <operator>+</operator> <name>btn_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>unit_act_cnt</name> <operator>+=</operator> <call><name>get_button_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name>btn_i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_tot</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>btn_i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>act_y</name> <operator>+=</operator> <name>btn_h</name> <operator>+</operator> <name><name>style_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>map_p_tmp</name><index>[<expr><name>btn_cnt</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>map_p_tmp</name> <operator>=</operator> <operator>&amp;</operator><name><name>map_p_tmp</name><index>[<expr><name>btn_cnt</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>i_tot</name><operator>++</operator></expr>;</expr_stmt> 

</block_content>}</block></while>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_btnm_set_ctrl_map</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_btnm_ctrl_t</name></type> <name><name>ctrl_map</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name></name></expr></argument>, <argument><expr><name>ctrl_map</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_btnm_ctrl_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btnm_set_map</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>map_p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_btnm_set_pressed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>id</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_cnt</name></name> <operator>&amp;&amp;</operator> <name>id</name> <operator>!=</operator> <name>LV_BTNM_BTN_NONE</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>id</name> <operator>==</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_btnm_set_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><name>lv_btnm_style_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_BTNM_STYLE_BG</name></expr>:</case> <expr_stmt><expr><call><name>lv_obj_set_style</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_BTNM_STYLE_BTN_REL</name></expr>:</case>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_REL</name></expr>]</index></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_BTNM_STYLE_BTN_PR</name></expr>:</case>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_PR</name></expr>]</index></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_BTNM_STYLE_BTN_TGL_REL</name></expr>:</case>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_TGL_REL</name></expr>]</index></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_BTNM_STYLE_BTN_TGL_PR</name></expr>:</case>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_TGL_PR</name></expr>]</index></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_BTNM_STYLE_BTN_INA</name></expr>:</case>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_INA</name></expr>]</index></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_btnm_set_recolor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>recolor</name></name> <operator>=</operator> <name>en</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_btnm_set_btn_ctrl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>btn_id</name></decl></parameter>, <parameter><decl><type><name>lv_btnm_ctrl_t</name></type> <name>ctrl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>btn_id</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_cnt</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name>btn_id</name></expr>]</index></name> <operator>|=</operator> <name>ctrl</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invalidate_button_area</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>btn_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_btnm_clear_btn_ctrl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>btn_id</name></decl></parameter>, <parameter><decl><type><name>lv_btnm_ctrl_t</name></type> <name>ctrl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>btn_id</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_cnt</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name>btn_id</name></expr>]</index></name> <operator>&amp;=</operator> <operator>(</operator><operator>~</operator><name>ctrl</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invalidate_button_area</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>btn_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_btnm_set_btn_ctrl_all</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><name>lv_btnm_ctrl_t</name></type> <name>ctrl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>lv_btnm_set_btn_ctrl</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>ctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_btnm_clear_btn_ctrl_all</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><name>lv_btnm_ctrl_t</name></type> <name>ctrl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>lv_btnm_clear_btn_ctrl</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>ctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_btnm_set_btn_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>btn_id</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>btn_id</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_cnt</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name>btn_id</name></expr>]</index></name> <operator>&amp;=</operator> <operator>(</operator><operator>~</operator><name>LV_BTNM_WIDTH_MASK</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name>btn_id</name></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>LV_BTNM_WIDTH_MASK</name> <operator>&amp;</operator> <name>width</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btnm_set_map</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>map_p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_btnm_set_one_toggle</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>one_toggle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>one_toggle</name></name> <operator>=</operator> <name>one_toggle</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>make_one_button_toggled</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>lv_btnm_get_map_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>map_p</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_btnm_get_recolor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>recolor</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>lv_btnm_get_active_btn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>lv_btnm_get_active_btn_text</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name> <operator>!=</operator> <name>LV_BTNM_BTN_NONE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>lv_btnm_get_btn_text</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>lv_btnm_get_pressed_btn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>lv_btnm_get_btn_text</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>btn_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>btn_id</name> <operator>&gt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_cnt</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>txt_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>btn_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>btn_i</name> <operator>!=</operator> <name>btn_id</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>btn_i</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>txt_i</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>map_p</name><index>[<expr><name>txt_i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>txt_i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>btn_i</name> <operator>==</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_cnt</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>map_p</name><index>[<expr><name>txt_i</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_btnm_get_btn_ctrl</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>btn_id</name></decl></parameter>, <parameter><decl><type><name>lv_btnm_ctrl_t</name></type> <name>ctrl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>btn_id</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_cnt</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name>btn_id</name></expr>]</index></name> <operator>&amp;</operator> <name>ctrl</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>lv_btnm_get_style</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><name>lv_btnm_style_t</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_BTNM_STYLE_BG</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_BTNM_STYLE_BTN_REL</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_REL</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_BTNM_STYLE_BTN_PR</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_PR</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_BTNM_STYLE_BTN_TGL_REL</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_TGL_REL</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_BTNM_STYLE_BTN_TGL_PR</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_TGL_PR</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_BTNM_STYLE_BTN_INA</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_INA</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>style</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>style</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_btnm_get_one_toggle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>one_toggle</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>lv_btnm_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_COVER_CHK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>ancestor_design_f</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_DRAW_MAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ancestor_design_f</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>bg_style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>btn_style</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name> <init>= <expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>area_btnm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area_btnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>area_tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>btn_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>btn_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>btn_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>txt_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_style_t</name></type> <name>style_tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_txt_flag_t</name></type> <name>txt_flag</name> <init>= <expr><name>LV_TXT_FLAG_NONE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>recolor</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>txt_flag</name> <operator>=</operator> <name>LV_TXT_FLAG_RECOLOR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>btn_i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>btn_i</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_cnt</name></name></expr>;</condition> <incr><expr><name>btn_i</name><operator>++</operator></expr><operator>,</operator> <expr><name>txt_i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<while>while<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>map_p</name><index>[<expr><name>txt_i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>txt_i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><call><name>button_is_hidden</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name>btn_i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area_tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>button_areas</name><index>[<expr><name>btn_i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>x1</name></name> <operator>+=</operator> <name><name>area_btnm</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>y1</name></name> <operator>+=</operator> <name><name>area_btnm</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>x2</name></name> <operator>+=</operator> <name><name>area_btnm</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>y2</name></name> <operator>+=</operator> <name><name>area_btnm</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>btn_w</name> <operator>=</operator> <call><name>lv_area_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>btn_h</name> <operator>=</operator> <call><name>lv_area_get_height</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>tgl_state</name> <init>= <expr><call><name>button_get_tgl_state</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name>btn_i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>button_is_inactive</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name>btn_i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>btn_style</name> <operator>=</operator> <call><name>lv_btnm_get_style</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_INA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>btn_i</name> <operator>!=</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>&amp;&amp;</operator> <name>tgl_state</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>btn_style</name> <operator>=</operator> <call><name>lv_btnm_get_style</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>btn_i</name> <operator>==</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>&amp;&amp;</operator> <name>tgl_state</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>btn_style</name> <operator>=</operator> <call><name>lv_btnm_get_style</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_PR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>btn_i</name> <operator>!=</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>&amp;&amp;</operator> <name>tgl_state</name> <operator>==</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>btn_style</name> <operator>=</operator> <call><name>lv_btnm_get_style</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_TGL_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>btn_i</name> <operator>==</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>&amp;&amp;</operator> <name>tgl_state</name> <operator>==</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>btn_style</name> <operator>=</operator> <call><name>lv_btnm_get_style</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_TGL_PR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>btn_style</name> <operator>=</operator> <call><name>lv_btnm_get_style</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>style_tmp</name></expr></argument>, <argument><expr><name>btn_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style_tmp</name><operator>.</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>part</name></name> <operator>&amp;</operator> <name>LV_BORDER_INTERNAL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>area_tmp</name><operator>.</operator><name>y1</name></name> <operator>==</operator> <name><name>btnm</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <name><name>bg_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>style_tmp</name><operator>.</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>part</name></name> <operator>&amp;=</operator> <operator>~</operator><name>LV_BORDER_TOP</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>area_tmp</name><operator>.</operator><name>y2</name></name> <operator>==</operator> <name><name>btnm</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y2</name></name> <operator>-</operator> <name><name>bg_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>style_tmp</name><operator>.</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>part</name></name> <operator>&amp;=</operator> <operator>~</operator><name>LV_BORDER_BOTTOM</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>txt_i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>style_tmp</name><operator>.</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>part</name></name> <operator>&amp;=</operator> <operator>~</operator><name>LV_BORDER_LEFT</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>map_p</name><index>[<expr><name>txt_i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>style_tmp</name><operator>.</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>part</name></name> <operator>&amp;=</operator> <operator>~</operator><name>LV_BORDER_LEFT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>map_p</name><index>[<expr><name>txt_i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>map_p</name><index>[<expr><name>txt_i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>style_tmp</name><operator>.</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>part</name></name> <operator>&amp;=</operator> <operator>~</operator><name>LV_BORDER_RIGHT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area_tmp</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>style_tmp</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>btn_style</name><operator>-&gt;</operator><name>glass</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>btn_style</name> <operator>=</operator> <name>bg_style</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name> <init>= <expr><name><name>btn_style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>txt_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_txt_get_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txt_size</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>map_p</name><index>[<expr><name>txt_i</name></expr>]</index></name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>btn_style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>,

<argument><expr><name><name>btn_style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name></expr></argument>, <argument><expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area_btnm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>txt_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>x1</name></name> <operator>+=</operator> <operator>(</operator><name>btn_w</name> <operator>-</operator> <name><name>txt_size</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>y1</name></name> <operator>+=</operator> <operator>(</operator><name>btn_h</name> <operator>-</operator> <name><name>txt_size</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>area_tmp</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name><name>txt_size</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>area_tmp</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <name><name>txt_size</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_label</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area_tmp</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>btn_style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>map_p</name><index>[<expr><name>txt_i</name></expr>]</index></name></expr></argument>, <argument><expr><name>txt_flag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_btnm_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ancestor_signal</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_obj_handle_get_type_signal</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CLEANUP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>button_areas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_STYLE_CHG</name> <operator>||</operator> <name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CORD_CHG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_btnm_set_map</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>map_p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESSED</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name> <init>= <expr><call><name>lv_indev_get_act</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_indev_get_type</name><argument_list>(<argument><expr><name>indev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LV_INDEV_TYPE_POINTER</name> <operator>||</operator> <call><name>lv_indev_get_type</name><argument_list>(<argument><expr><name>indev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LV_INDEV_TYPE_BUTTON</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>btn_pr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_indev_get_point</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>btn_pr</name> <operator>=</operator> <call><name>get_button_from_point</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invalidate_button_area</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>=</operator> <name>btn_pr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name> <operator>=</operator> <name>btn_pr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invalidate_button_area</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name> <operator>!=</operator> <name>LV_BTNM_BTN_NONE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>button_is_click_trig</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator>

<call><name>button_is_inactive</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator>

<call><name>button_is_hidden</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_event_send</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_EVENT_VALUE_CHANGED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESSING</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>btn_pr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_indev_get_point</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>btn_pr</name> <operator>=</operator> <call><name>get_button_from_point</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<empty_stmt>;</empty_stmt>

<if_stmt><if>if<condition>(<expr><name>btn_pr</name> <operator>!=</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_indev_reset_long_press</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>!=</operator> <name>LV_BTNM_BTN_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>invalidate_button_area</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>btn_pr</name> <operator>!=</operator> <name>LV_BTNM_BTN_NONE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_event_send</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_EVENT_VALUE_CHANGED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>LV_RES_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>invalidate_button_area</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>btn_pr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>=</operator> <name>btn_pr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name> <operator>=</operator> <name>btn_pr</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_RELEASED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>!=</operator> <name>LV_BTNM_BTN_NONE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>button_is_tgl_enabled</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>button_is_inactive</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>button_get_tgl_state</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr>]</index></name> <operator>&amp;=</operator> <operator>(</operator><operator>~</operator><name>LV_BTNM_CTRL_TGL_STATE</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr>]</index></name> <operator>|=</operator> <name>LV_BTNM_CTRL_TGL_STATE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>one_toggle</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>make_one_button_toggled</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>invalidate_button_area</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>g</name> <init>= <expr><call><name>lv_obj_get_group</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_group_get_focused</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>btnm</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>=</operator> <name>LV_BTNM_BTN_NONE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>=</operator> <name>LV_BTNM_BTN_NONE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>button_is_click_trig</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator>

<call><name>button_is_inactive</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator>

<call><name>button_is_hidden</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_event_send</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_EVENT_VALUE_CHANGED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_LONG_PRESS_REP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name> <operator>!=</operator> <name>LV_BTNM_BTN_NONE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>button_is_repeat_disabled</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator>

<call><name>button_is_inactive</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator>

<call><name>button_is_hidden</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_event_send</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_EVENT_VALUE_CHANGED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESS_LOST</name> <operator>||</operator> <name>sign</name> <operator>==</operator> <name>LV_SIGNAL_DEFOCUS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>=</operator> <name>LV_BTNM_BTN_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name> <operator>=</operator> <name>LV_BTNM_BTN_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_FOCUS</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name> <init>= <expr><call><name>lv_indev_get_act</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_indev_type_t</name></type> <name>indev_type</name> <init>= <expr><call><name>lv_indev_get_type</name><argument_list>(<argument><expr><name>indev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>indev</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>indev</name> <operator>=</operator> <call><name>lv_indev_get_next</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>indev_type</name> <operator>=</operator> <call><name>lv_indev_get_type</name><argument_list>(<argument><expr><name>indev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>indev_type</name> <operator>==</operator> <name>LV_INDEV_TYPE_POINTER</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p1</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_indev_get_point</name><argument_list>(<argument><expr><name>indev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>btn_i</name> <init>= <expr><call><name>get_button_from_point</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>=</operator> <name>btn_i</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>indev_type</name> <operator>==</operator> <name>LV_INDEV_TYPE_ENCODER</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_group_get_editing</name><argument_list>(<argument><expr><call><name>lv_obj_get_group</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>=</operator> <name>LV_BTNM_BTN_NONE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CONTROL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>param</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_RIGHT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>==</operator> <name>LV_BTNM_BTN_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_LEFT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>==</operator> <name>LV_BTNM_BTN_NONE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_DOWN</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_btnm_get_style</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>==</operator> <name>LV_BTNM_BTN_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>area_below</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>pr_center</name> <init>=

<expr><name><name>ext</name><operator>-&gt;</operator><name>button_areas</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr>]</index></name><operator>.</operator><name>x1</name> <operator>+</operator> <operator>(</operator><call><name>lv_area_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>button_areas</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>area_below</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr>;</init> <condition><expr><name>area_below</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_cnt</name></name></expr>;</condition> <incr><expr><name>area_below</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>button_areas</name><index>[<expr><name>area_below</name></expr>]</index></name><operator>.</operator><name>y1</name> <operator>&gt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>button_areas</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr>]</index></name><operator>.</operator><name>y1</name> <operator>&amp;&amp;</operator>

<name>pr_center</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>button_areas</name><index>[<expr><name>area_below</name></expr>]</index></name><operator>.</operator><name>x1</name> <operator>&amp;&amp;</operator>

<name>pr_center</name> <operator>&lt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>button_areas</name><index>[<expr><name>area_below</name></expr>]</index></name><operator>.</operator><name>x2</name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>area_below</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_cnt</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>=</operator> <name>area_below</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_UP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_btnm_get_style</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>==</operator> <name>LV_BTNM_BTN_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>area_above</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>pr_center</name> <init>=

<expr><name><name>ext</name><operator>-&gt;</operator><name>button_areas</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr>]</index></name><operator>.</operator><name>x1</name> <operator>+</operator> <operator>(</operator><call><name>lv_area_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>button_areas</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>area_above</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr>;</init> <condition><expr><name>area_above</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>area_above</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>button_areas</name><index>[<expr><name>area_above</name></expr>]</index></name><operator>.</operator><name>y1</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>button_areas</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr>]</index></name><operator>.</operator><name>y1</name> <operator>&amp;&amp;</operator>

<name>pr_center</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>button_areas</name><index>[<expr><name>area_above</name></expr>]</index></name><operator>.</operator><name>x1</name> <operator>-</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name> <operator>&amp;&amp;</operator>

<name>pr_center</name> <operator>&lt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>button_areas</name><index>[<expr><name>area_above</name></expr>]</index></name><operator>.</operator><name>x2</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>area_above</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name> <operator>=</operator> <name>area_above</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_id_act</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_id_pr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_EDITABLE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type> <name>editable</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>editable</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>allocate_btn_areas_and_controls</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>map</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>btn_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>btn_cnt</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>button_areas</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>button_areas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>button_areas</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>button_areas</name></name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_area_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>btn_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>button_areas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name></name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_btnm_ctrl_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>btn_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>button_areas</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>btn_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ctrl_bits</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_btnm_ctrl_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>btn_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_cnt</name></name> <operator>=</operator> <name>btn_cnt</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>get_button_width</name><parameter_list>(<parameter><decl><type><name>lv_btnm_ctrl_t</name></type> <name>ctrl_bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>w</name> <init>= <expr><name>ctrl_bits</name> <operator>&amp;</operator> <name>LV_BTNM_WIDTH_MASK</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>w</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>w</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>button_is_hidden</name><parameter_list>(<parameter><decl><type><name>lv_btnm_ctrl_t</name></type> <name>ctrl_bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>ctrl_bits</name> <operator>&amp;</operator> <name>LV_BTNM_CTRL_HIDDEN</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>button_is_repeat_disabled</name><parameter_list>(<parameter><decl><type><name>lv_btnm_ctrl_t</name></type> <name>ctrl_bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>ctrl_bits</name> <operator>&amp;</operator> <name>LV_BTNM_CTRL_NO_REPEAT</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>button_is_inactive</name><parameter_list>(<parameter><decl><type><name>lv_btnm_ctrl_t</name></type> <name>ctrl_bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>ctrl_bits</name> <operator>&amp;</operator> <name>LV_BTNM_CTRL_INACTIVE</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>button_is_click_trig</name><parameter_list>(<parameter><decl><type><name>lv_btnm_ctrl_t</name></type> <name>ctrl_bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>ctrl_bits</name> <operator>&amp;</operator> <name>LV_BTNM_CTRL_CLICK_TRIG</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>button_is_tgl_enabled</name><parameter_list>(<parameter><decl><type><name>lv_btnm_ctrl_t</name></type> <name>ctrl_bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>ctrl_bits</name> <operator>&amp;</operator> <name>LV_BTNM_CTRL_TGL_ENABLE</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>button_get_tgl_state</name><parameter_list>(<parameter><decl><type><name>lv_btnm_ctrl_t</name></type> <name>ctrl_bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>ctrl_bits</name> <operator>&amp;</operator> <name>LV_BTNM_CTRL_TGL_STATE</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint16_t</name></type> <name>get_button_from_point</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><name>lv_point_t</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>btnm_cords</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>btn_area</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>btnm_cords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btn_area</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>button_areas</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>btn_area</name><operator>.</operator><name>x1</name></name> <operator>+=</operator> <name><name>btnm_cords</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>btn_area</name><operator>.</operator><name>y1</name></name> <operator>+=</operator> <name><name>btnm_cords</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>btn_area</name><operator>.</operator><name>x2</name></name> <operator>+=</operator> <name><name>btnm_cords</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>btn_area</name><operator>.</operator><name>y2</name></name> <operator>+=</operator> <name><name>btnm_cords</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_area_is_point_on</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btn_area</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <name><name>ext</name><operator>-&gt;</operator><name>btn_cnt</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <name>LV_BTNM_BTN_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>invalidate_button_area</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>btn_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>btn_idx</name> <operator>==</operator> <name>LV_BTNM_BTN_NONE</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>btn_area</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>btnm_area</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btn_area</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>button_areas</name><index>[<expr><name>btn_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>btnm_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>btn_area</name><operator>.</operator><name>x1</name></name> <operator>+=</operator> <name><name>btnm_area</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>btn_area</name><operator>.</operator><name>y1</name></name> <operator>+=</operator> <name><name>btnm_area</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>btn_area</name><operator>.</operator><name>x2</name></name> <operator>+=</operator> <name><name>btnm_area</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>btn_area</name><operator>.</operator><name>y2</name></name> <operator>+=</operator> <name><name>btnm_area</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate_area</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>btn_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>maps_are_identical</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>map1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>map2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>map1</name> <operator>==</operator> <name>map2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>map1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>map2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>map1</name> <operator>==</operator> <name>map2</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>map1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>map2</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>map1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>map2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name><name>map1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>map2</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_one_button_toggled</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btnm</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>btn_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>was_toggled</name> <init>= <expr><call><name>lv_btnm_get_btn_ctrl</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>btn_idx</name></expr></argument>, <argument><expr><name>LV_BTNM_CTRL_TGL_STATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_btnm_clear_btn_ctrl_all</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>LV_BTNM_CTRL_TGL_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>was_toggled</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_btnm_set_btn_ctrl</name><argument_list>(<argument><expr><name>btnm</name></expr></argument>, <argument><expr><name>btn_idx</name></expr></argument>, <argument><expr><name>LV_BTNM_CTRL_TGL_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
