<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_objx\lv_spinbox.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_CONF_INCLUDE_SIMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_conf.h"</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../lv_conf.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_SPINBOX</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_TA</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"lv_spinbox: lv_ta is required. Enable it in lv_conf.h (LV_USE_TA 1) "</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_obj.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_objx/lv_ta.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_SPINBOX_MAX_DIGIT_COUNT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>lv_ta_ext_t</name></type> <name>ta</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>range_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>range_min</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>step</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>digit_count</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>dec_point_pos</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>digit_padding_left</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>

}</block></struct></type> <name>lv_spinbox_ext_t</name>;</typedef>

<enum>enum <block>{

<decl><name>LV_SPINBOX_STYLE_BG</name></decl>,

<decl><name>LV_SPINBOX_STYLE_SB</name></decl>,

<decl><name>LV_SPINBOX_STYLE_CURSOR</name></decl>,

}</block>;</enum>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_spinbox_style_t</name>;</typedef>

<function_decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_spinbox_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_spinbox_set_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>, <parameter><decl><type><name>lv_spinbox_style_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lv_ta_set_style</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>lv_spinbox_set_value</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_spinbox_set_digit_format</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>digit_count</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>separator_position</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_spinbox_set_step</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>step</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_spinbox_set_range</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>range_min</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>range_max</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_spinbox_set_padding_left</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>padding</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>lv_spinbox_get_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>, <parameter><decl><type><name>lv_spinbox_style_t</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>lv_ta_get_style</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>int32_t</name></type> <name>lv_spinbox_get_value</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_spinbox_step_next</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_spinbox_step_prev</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_spinbox_increment</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_spinbox_decrement</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
