<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_objx\lv_bar.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_CONF_INCLUDE_SIMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_conf.h"</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../lv_conf.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_BAR</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_obj.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_anim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_cont.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_btn.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_label.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_BAR_ANIM_STATE_START</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_BAR_ANIM_STATE_END</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_BAR_ANIM_STATE_INV</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_BAR_ANIM_STATE_NORM</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<expr_stmt><expr><call><name>LV_EXPORT_CONST_INT</name><argument_list>(<argument><expr><name>LV_BAR_ANIM_STATE_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_EXPORT_CONST_INT</name><argument_list>(<argument><expr><name>LV_BAR_ANIM_STATE_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_EXPORT_CONST_INT</name><argument_list>(<argument><expr><name>LV_BAR_ANIM_STATE_INV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_EXPORT_CONST_INT</name><argument_list>(<argument><expr><name>LV_BAR_ANIM_STATE_NORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int16_t</name></type> <name>cur_value</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name>min_value</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name>max_value</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_anim_value_t</name></type> <name>anim_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_anim_value_t</name></type> <name>anim_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_anim_value_t</name></type> <name>anim_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_anim_value_t</name></type> <name>anim_time</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>sym</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_indic</name></decl>;</decl_stmt> 

}</block></struct></type> <name>lv_bar_ext_t</name>;</typedef>

<enum>enum <block>{

<decl><name>LV_BAR_STYLE_BG</name></decl>, 

<decl><name>LV_BAR_STYLE_INDIC</name></decl>, 

}</block>;</enum>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_bar_style_t</name>;</typedef>

<function_decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_bar_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_bar_set_value</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>bar</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>lv_anim_enable_t</name></type> <name>anim</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_bar_set_range</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>bar</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>max</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_bar_set_sym</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>bar</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_bar_set_anim_time</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>bar</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>anim_time</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_bar_set_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>bar</name></decl></parameter>, <parameter><decl><type><name>lv_bar_style_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int16_t</name></type> <name>lv_bar_get_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>bar</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int16_t</name></type> <name>lv_bar_get_min_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>bar</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int16_t</name></type> <name>lv_bar_get_max_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>bar</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>lv_bar_get_sym</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>bar</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint16_t</name></type> <name>lv_bar_get_anim_time</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>bar</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>lv_bar_get_style</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>bar</name></decl></parameter>, <parameter><decl><type><name>lv_bar_style_t</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
