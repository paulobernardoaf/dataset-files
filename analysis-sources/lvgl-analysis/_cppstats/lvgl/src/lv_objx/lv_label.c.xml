<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_objx\lv_label.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_label.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_LABEL</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_obj.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_group.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_color.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_math.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_bidi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_printf.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_OBJX_NAME</name></cpp:macro> <cpp:value>"lv_label"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_LABEL_DEF_SCROLL_SPEED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LABEL_DEF_SCROLL_SPEED</name></cpp:macro> <cpp:value>(25)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LABEL_DOT_END_INV</name></cpp:macro> <cpp:value>0xFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LABEL_HINT_HEIGHT_LIMIT</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define> 

<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_label_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lv_label_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_label_refr_text</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_label_revert_dots</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_label_set_offset_x</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_label_set_offset_y</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lv_label_set_dot_tmp</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>lv_label_get_dot_tmp</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_label_dot_tmp_free</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>ancestor_signal</name></decl>;</decl_stmt>

<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_label_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"label create started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>new_label</name> <init>= <expr><call><name>lv_obj_create</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>new_label</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ancestor_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><name>new_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_allocate_ext_attr</name><argument_list>(<argument><expr><name>new_label</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_label_ext_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>new_label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>static_txt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>recolor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>body_draw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>LV_LABEL_ALIGN_AUTO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dot_end</name></name> <operator>=</operator> <name>LV_LABEL_DOT_END_INV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>long_mode</name></name> <operator>=</operator> <name>LV_LABEL_LONG_EXPAND</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>anim_speed</name></name> <operator>=</operator> <name>LV_LABEL_DEF_SCROLL_SPEED</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_LABEL_LONG_TXT_HINT</name></expr></cpp:if>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>hint</name><operator>.</operator><name>line_start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>hint</name><operator>.</operator><name>coord_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>hint</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_LABEL_TEXT_SEL</name></expr></cpp:if>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>txt_sel_start</name></name> <operator>=</operator> <name>LV_DRAW_LABEL_NO_TXT_SEL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>txt_sel_end</name></name> <operator>=</operator> <name>LV_DRAW_LABEL_NO_TXT_SEL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dot</name><operator>.</operator><name>tmp_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dot_tmp_alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_design_cb</name><argument_list>(<argument><expr><name>new_label</name></expr></argument>, <argument><expr><name>lv_label_design</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><name>new_label</name></expr></argument>, <argument><expr><name>lv_label_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_set_click</name><argument_list>(<argument><expr><name>new_label</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_label_set_long_mode</name><argument_list>(<argument><expr><name>new_label</name></expr></argument>, <argument><expr><name>LV_LABEL_LONG_EXPAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_label_set_text</name><argument_list>(<argument><expr><name>new_label</name></expr></argument>, <argument><expr><literal type="string">"Text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_label_set_style</name><argument_list>(<argument><expr><name>new_label</name></expr></argument>, <argument><expr><name>LV_LABEL_STYLE_MAIN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>copy_ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_label_set_long_mode</name><argument_list>(<argument><expr><name>new_label</name></expr></argument>, <argument><expr><call><name>lv_label_get_long_mode</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_label_set_recolor</name><argument_list>(<argument><expr><name>new_label</name></expr></argument>, <argument><expr><call><name>lv_label_get_recolor</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_label_set_body_draw</name><argument_list>(<argument><expr><name>new_label</name></expr></argument>, <argument><expr><call><name>lv_label_get_body_draw</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_label_set_align</name><argument_list>(<argument><expr><name>new_label</name></expr></argument>, <argument><expr><call><name>lv_label_get_align</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>copy_ext</name><operator>-&gt;</operator><name>static_txt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_label_set_text</name><argument_list>(<argument><expr><name>new_label</name></expr></argument>, <argument><expr><call><name>lv_label_get_text</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_label_set_static_text</name><argument_list>(<argument><expr><name>new_label</name></expr></argument>, <argument><expr><call><name>lv_label_get_text</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>copy_ext</name><operator>-&gt;</operator><name>long_mode</name></name> <operator>==</operator> <name>LV_LABEL_LONG_DOT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <call><name>lv_mem_realloc</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><call><name>lv_mem_get_size</name><argument_list>(<argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><call><name>lv_mem_get_size</name><argument_list>(<argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>copy_ext</name><operator>-&gt;</operator><name>dot_tmp_alloc</name></name> <operator>&amp;&amp;</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>dot</name><operator>.</operator><name>tmp_ptr</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>dot</name><operator>.</operator><name>tmp_ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_label_set_dot_tmp</name><argument_list>(<argument><expr><name>new_label</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>dot</name><operator>.</operator><name>tmp_ptr</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>dot</name><operator>.</operator><name>tmp</name></name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>dot</name><operator>.</operator><name>tmp</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>dot</name><operator>.</operator><name>tmp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dot_tmp_alloc</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>dot_tmp_alloc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dot_end</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>dot_end</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_refresh_style</name><argument_list>(<argument><expr><name>new_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"label created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_label</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_label_set_text</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>text</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_label_refr_text</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_STR</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>==</operator> <name>text</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <call><name>lv_mem_realloc</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>static_txt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>static_txt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lv_label_refr_text</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_label_set_text_fmt</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_STR</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>fmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_label_refr_text</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>static_txt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>, <decl><type ref="prev"/><name>ap2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name> <init>= <expr><call><name>lv_vsnprintf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>lv_vsnprintf</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>static_txt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>lv_label_refr_text</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_label_set_array_text</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>array</name> <operator>==</operator> <name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>||</operator> <name>array</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_label_refr_text</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>static_txt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>static_txt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>lv_label_refr_text</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_label_set_static_text</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>static_txt</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>static_txt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>text</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_label_refr_text</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_label_set_long_mode</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>lv_label_long_mode_t</name></type> <name>long_mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<expr_stmt><expr><call><name>lv_anim_del</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_obj_set_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_anim_del</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_obj_set_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_anim_del</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_label_set_offset_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_anim_del</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_label_set_offset_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>long_mode</name> <operator>==</operator> <name>LV_LABEL_LONG_SROLL</name> <operator>||</operator> <name>long_mode</name> <operator>==</operator> <name>LV_LABEL_LONG_SROLL_CIRC</name> <operator>||</operator> <name>long_mode</name> <operator>==</operator> <name>LV_LABEL_LONG_CROP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>expand</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>expand</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>long_mode</name></name> <operator>==</operator> <name>LV_LABEL_LONG_DOT</name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>dot_end</name></name> <operator>!=</operator> <name>LV_LABEL_DOT_END_INV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_label_revert_dots</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>long_mode</name></name> <operator>=</operator> <name>long_mode</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_label_refr_text</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_label_set_align</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>lv_label_align_t</name></type> <name>align</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>align</name></name> <operator>==</operator> <name>align</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>align</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_label_set_recolor</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>recolor</name></name> <operator>==</operator> <name>en</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>recolor</name></name> <operator>=</operator> <ternary><condition><expr><name>en</name> <operator>==</operator> <name>false</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_label_refr_text</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_label_set_body_draw</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>body_draw</name></name> <operator>==</operator> <name>en</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>body_draw</name></name> <operator>=</operator> <ternary><condition><expr><name>en</name> <operator>==</operator> <name>false</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_refresh_ext_draw_pad</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_label_set_anim_speed</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>anim_speed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>anim_speed</name></name> <operator>==</operator> <name>anim_speed</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>anim_speed</name></name> <operator>=</operator> <name>anim_speed</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>long_mode</name></name> <operator>==</operator> <name>LV_LABEL_LONG_SROLL</name> <operator>||</operator> <name><name>ext</name><operator>-&gt;</operator><name>long_mode</name></name> <operator>==</operator> <name>LV_LABEL_LONG_SROLL_CIRC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_label_refr_text</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>label</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>anim_speed</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_label_set_text_sel_start</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_LABEL_TEXT_SEL</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>txt_sel_start</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>label</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>index</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_label_set_text_sel_end</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_LABEL_TEXT_SEL</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>txt_sel_end</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>label</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>index</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type> <name>lv_label_get_text</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_label_long_mode_t</name></type> <name>lv_label_get_long_mode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>long_mode</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_label_align_t</name></type> <name>lv_label_get_align</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_label_align_t</name></type> <name>align</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>align</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>align</name> <operator>==</operator> <name>LV_LABEL_ALIGN_AUTO</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_BIDI</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_bidi_dir_t</name></type> <name>base_dir</name> <init>= <expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>base_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_AUTO</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>base_dir</name> <operator>=</operator> <call><name>lv_bidi_detect_base_dir</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>base_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_LTR</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>align</name> <operator>=</operator> <name>LV_LABEL_ALIGN_LEFT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>base_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_RTL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>align</name> <operator>=</operator> <name>LV_LABEL_ALIGN_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>align</name> <operator>=</operator> <name>LV_LABEL_ALIGN_LEFT</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>align</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_label_get_recolor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name><name>ext</name><operator>-&gt;</operator><name>recolor</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_label_get_body_draw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name><name>ext</name><operator>-&gt;</operator><name>body_draw</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>lv_label_get_anim_speed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>anim_speed</name></name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>label</name></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_label_get_letter_pos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>char_id</name></decl></parameter>, <parameter><decl><type><name>lv_point_t</name> <modifier>*</modifier></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name> <init>= <expr><call><name>lv_label_get_text</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>line_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_line_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>max_w</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>letter_height</name> <init>= <expr><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_txt_flag_t</name></type> <name>flag</name> <init>= <expr><name>LV_TXT_FLAG_NONE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>recolor</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>LV_TXT_FLAG_RECOLOR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>expand</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>LV_TXT_FLAG_EXPAND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_label_align_t</name></type> <name>align</name> <init>= <expr><call><name>lv_label_get_align</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>align</name> <operator>==</operator> <name>LV_LABEL_ALIGN_CENTER</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>LV_TXT_FLAG_CENTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>align</name> <operator>==</operator> <name>LV_LABEL_ALIGN_RIGHT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>LV_TXT_FLAG_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>long_mode</name></name> <operator>==</operator> <name>LV_LABEL_LONG_EXPAND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max_w</name> <operator>=</operator> <name>LV_COORD_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>byte_id</name> <init>= <expr><call><name>lv_txt_encoded_get_byte_id</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name>char_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<empty_stmt>;</empty_stmt>

<while>while<condition>(<expr><name><name>txt</name><index>[<expr><name>new_line_start</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_line_start</name> <operator>+=</operator> <call><name>lv_txt_get_next_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name>line_start</name></expr>]</index></name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name>max_w</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>byte_id</name> <operator>&lt;</operator> <name>new_line_start</name> <operator>||</operator> <name><name>txt</name><index>[<expr><name>new_line_start</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>letter_height</name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>line_start</name> <operator>=</operator> <name>new_line_start</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>byte_id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>txt</name><index>[<expr><name>byte_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name><name>txt</name><index>[<expr><name>byte_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>txt</name><index>[<expr><name>byte_id</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>letter_height</name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>line_start</name> <operator>=</operator> <name>byte_id</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bidi_txt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>visual_byte_pos</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_BIDI</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>new_line_start</name> <operator>==</operator> <name>byte_id</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>visual_byte_pos</name> <operator>=</operator> <name>byte_id</name> <operator>-</operator> <name>line_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bidi_txt</name> <operator>=</operator> <operator>&amp;</operator><name><name>txt</name><index>[<expr><name>line_start</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>line_char_id</name> <init>= <expr><call><name>lv_txt_encoded_get_char_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name>line_start</name></expr>]</index></name></expr></argument>, <argument><expr><name>byte_id</name> <operator>-</operator> <name>line_start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_rtl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mutable_bidi_txt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>visual_char_pos</name> <init>= <expr><call><name>lv_bidi_get_visual_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name>line_start</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mutable_bidi_txt</name></expr></argument>, <argument><expr><name>new_line_start</name> <operator>-</operator> <name>line_start</name></expr></argument>, <argument><expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line_char_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_rtl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bidi_txt</name> <operator>=</operator> <name>mutable_bidi_txt</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_rtl</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>visual_char_pos</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>visual_byte_pos</name> <operator>=</operator> <call><name>lv_txt_encoded_get_byte_id</name><argument_list>(<argument><expr><name>bidi_txt</name></expr></argument>, <argument><expr><name>visual_char_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>bidi_txt</name> <operator>=</operator> <operator>&amp;</operator><name><name>txt</name><index>[<expr><name>line_start</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>visual_byte_pos</name> <operator>=</operator> <name>byte_id</name> <operator>-</operator> <name>line_start</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x</name> <init>= <expr><call><name>lv_txt_get_width</name><argument_list>(<argument><expr><name>bidi_txt</name></expr></argument>, <argument><expr><name>visual_byte_pos</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>char_id</name> <operator>!=</operator> <name>line_start</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>align</name> <operator>==</operator> <name>LV_LABEL_ALIGN_CENTER</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>line_w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line_w</name> <operator>=</operator> <call><name>lv_txt_get_width</name><argument_list>(<argument><expr><name>bidi_txt</name></expr></argument>, <argument><expr><name>new_line_start</name> <operator>-</operator> <name>line_start</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>line_w</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>align</name> <operator>==</operator> <name>LV_LABEL_ALIGN_RIGHT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>line_w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line_w</name> <operator>=</operator> <call><name>lv_txt_get_width</name><argument_list>(<argument><expr><name>bidi_txt</name></expr></argument>, <argument><expr><name>new_line_start</name> <operator>-</operator> <name>line_start</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>line_w</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>lv_label_get_letter_on</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>lv_point_t</name> <modifier>*</modifier></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name> <init>= <expr><call><name>lv_label_get_text</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>line_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_line_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>max_w</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>letter_height</name> <init>= <expr><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_txt_flag_t</name></type> <name>flag</name> <init>= <expr><name>LV_TXT_FLAG_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>logical_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bidi_txt</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>recolor</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>LV_TXT_FLAG_RECOLOR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>expand</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>LV_TXT_FLAG_EXPAND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_label_align_t</name></type> <name>align</name> <init>= <expr><call><name>lv_label_get_align</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>align</name> <operator>==</operator> <name>LV_LABEL_ALIGN_CENTER</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>LV_TXT_FLAG_CENTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>align</name> <operator>==</operator> <name>LV_LABEL_ALIGN_RIGHT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>LV_TXT_FLAG_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>long_mode</name></name> <operator>==</operator> <name>LV_LABEL_LONG_EXPAND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max_w</name> <operator>=</operator> <name>LV_COORD_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<empty_stmt>;</empty_stmt>

<while>while<condition>(<expr><name><name>txt</name><index>[<expr><name>line_start</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_line_start</name> <operator>+=</operator> <call><name>lv_txt_get_next_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name>line_start</name></expr>]</index></name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name>max_w</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>y</name></name> <operator>&lt;=</operator> <name>y</name> <operator>+</operator> <name>letter_height</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><name>new_line_start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>letter</name></decl>;</decl_stmt>

<expr_stmt><expr><name>letter</name> <operator>=</operator> <call><name>lv_txt_encoded_prev</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>letter</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name><name>txt</name><index>[<expr><name>new_line_start</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>new_line_start</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>letter_height</name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>line_start</name> <operator>=</operator> <name>new_line_start</name></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_BIDI</name></expr></cpp:if>

<expr_stmt><expr><name>bidi_txt</name> <operator>=</operator> <call><name>lv_draw_get_buf</name><argument_list>(<argument><expr><name>new_line_start</name> <operator>-</operator> <name>line_start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>txt_len</name> <init>= <expr><name>new_line_start</name> <operator>-</operator> <name>line_start</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>bidi_txt</name><index>[<expr><name>new_line_start</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>txt_len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_bidi_process_paragraph</name><argument_list>(<argument><expr><name>txt</name> <operator>+</operator> <name>line_start</name></expr></argument>, <argument><expr><name>bidi_txt</name></expr></argument>, <argument><expr><name>txt_len</name></expr></argument>, <argument><expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>bidi_txt</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>txt</name> <operator>+</operator> <name>line_start</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>align</name> <operator>==</operator> <name>LV_LABEL_ALIGN_CENTER</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>line_w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line_w</name> <operator>=</operator> <call><name>lv_txt_get_width</name><argument_list>(<argument><expr><name>bidi_txt</name></expr></argument>, <argument><expr><name>new_line_start</name> <operator>-</operator> <name>line_start</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>line_w</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>align</name> <operator>==</operator> <name>LV_LABEL_ALIGN_RIGHT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>line_w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line_w</name> <operator>=</operator> <call><name>lv_txt_get_width</name><argument_list>(<argument><expr><name>bidi_txt</name></expr></argument>, <argument><expr><name>new_line_start</name> <operator>-</operator> <name>line_start</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>line_w</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_txt_cmd_state_t</name></type> <name>cmd_state</name> <init>= <expr><name>LV_TXT_CMD_STATE_WAIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_act</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>letter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>letter_next</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>new_line_start</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><name>i</name> <operator>+</operator> <name>line_start</name> <operator>&lt;</operator> <name>new_line_start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>letter</name> <operator>=</operator> <call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name>bidi_txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>letter_next</name> <operator>=</operator> <call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bidi_txt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>LV_TXT_FLAG_RECOLOR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_txt_is_cmd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd_state</name></expr></argument>, <argument><expr><name><name>bidi_txt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>lv_font_get_glyph_width</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>letter</name></expr></argument>, <argument><expr><name>letter_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;</operator> <name>x</name> <operator>||</operator> <name>i</name> <operator>+</operator> <name>line_start</name> <operator>==</operator> <name>new_line_start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>i_act</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_act</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_BIDI</name></expr></cpp:if>

<decl_stmt><decl><type><name>bool</name></type> <name>is_rtl</name></decl>;</decl_stmt>

<expr_stmt><expr><name>logical_pos</name> <operator>=</operator> <call><name>lv_bidi_get_logical_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name>line_start</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>txt_len</name></expr></argument>, <argument><expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>lv_txt_encoded_get_char_id</name><argument_list>(<argument><expr><name>bidi_txt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_rtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_rtl</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>logical_pos</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>logical_pos</name> <operator>=</operator> <call><name>lv_txt_encoded_get_char_id</name><argument_list>(<argument><expr><name>bidi_txt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>logical_pos</name> <operator>+</operator> <call><name>lv_txt_encoded_get_char_id</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name>line_start</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>lv_label_get_text_sel_start</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_LABEL_TEXT_SEL</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>txt_sel_start</name></name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>label</name></expr>;</expr_stmt> 

<return>return <expr><name>LV_LABEL_TEXT_SEL_OFF</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>lv_label_get_text_sel_end</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_LABEL_TEXT_SEL</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>txt_sel_end</name></name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>label</name></expr>;</expr_stmt> 

<return>return <expr><name>LV_LABEL_TEXT_SEL_OFF</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_label_is_char_under_pos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>lv_point_t</name> <modifier>*</modifier></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name> <init>= <expr><call><name>lv_label_get_text</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>line_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_line_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>max_w</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>letter_height</name> <init>= <expr><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_txt_flag_t</name></type> <name>flag</name> <init>= <expr><name>LV_TXT_FLAG_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_label_align_t</name></type> <name>align</name> <init>= <expr><call><name>lv_label_get_align</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>recolor</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>LV_TXT_FLAG_RECOLOR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>expand</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>LV_TXT_FLAG_EXPAND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>align</name> <operator>==</operator> <name>LV_LABEL_ALIGN_CENTER</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>LV_TXT_FLAG_CENTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>long_mode</name></name> <operator>==</operator> <name>LV_LABEL_LONG_EXPAND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max_w</name> <operator>=</operator> <name>LV_COORD_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<empty_stmt>;</empty_stmt>

<while>while<condition>(<expr><name><name>txt</name><index>[<expr><name>line_start</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_line_start</name> <operator>+=</operator> <call><name>lv_txt_get_next_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name>line_start</name></expr>]</index></name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name>max_w</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>y</name></name> <operator>&lt;=</operator> <name>y</name> <operator>+</operator> <name>letter_height</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>letter_height</name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>line_start</name> <operator>=</operator> <name>new_line_start</name></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>last_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>align</name> <operator>==</operator> <name>LV_LABEL_ALIGN_CENTER</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>line_w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line_w</name> <operator>=</operator> <call><name>lv_txt_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name>line_start</name></expr>]</index></name></expr></argument>, <argument><expr><name>new_line_start</name> <operator>-</operator> <name>line_start</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>line_w</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>align</name> <operator>==</operator> <name>LV_LABEL_ALIGN_RIGHT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>line_w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line_w</name> <operator>=</operator> <call><name>lv_txt_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name>line_start</name></expr>]</index></name></expr></argument>, <argument><expr><name>new_line_start</name> <operator>-</operator> <name>line_start</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>line_w</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_txt_cmd_state_t</name></type> <name>cmd_state</name> <init>= <expr><name>LV_TXT_CMD_STATE_WAIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><name>line_start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_current</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>letter</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>letter_next</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>new_line_start</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>new_line_start</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>letter</name> <operator>=</operator> <call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>letter_next</name> <operator>=</operator> <call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>LV_TXT_FLAG_RECOLOR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_txt_is_cmd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd_state</name></expr></argument>, <argument><expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>lv_font_get_glyph_width</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>letter</name></expr></argument>, <argument><expr><name>letter_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;</operator> <name>x</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>i_current</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_current</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>max_diff</name> <init>= <expr><call><name>lv_font_get_glyph_width</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>letter</name></expr></argument>, <argument><expr><name>letter_next</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name><name>pos</name><operator>-&gt;</operator><name>x</name></name> <operator>&gt;=</operator> <operator>(</operator><name>last_x</name> <operator>-</operator> <name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>pos</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;=</operator> <operator>(</operator><name>last_x</name> <operator>+</operator> <name>max_diff</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_label_ins_text</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_STR</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>static_txt</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>old_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ins_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>new_len</name> <init>= <expr><name>ins_len</name> <operator>+</operator> <name>old_len</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <call><name>lv_mem_realloc</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>new_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pos</name> <operator>==</operator> <name>LV_LABEL_POS_LAST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>lv_txt_get_encoded_length</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_txt_ins</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_label_refr_text</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_label_cut_text</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cnt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>static_txt</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>label_txt</name> <init>= <expr><call><name>lv_label_get_text</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_txt_cut</name><argument_list>(<argument><expr><name>label_txt</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_label_refr_text</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>lv_label_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_COVER_CHK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_DRAW_MAIN</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>coords</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name> <init>= <expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>coords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>g</name> <init>= <expr><call><name>lv_obj_get_group</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_group_get_focused</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>label</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coords</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>body_draw</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>bg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bg</name><operator>.</operator><name>x1</name></name> <operator>-=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bg</name><operator>.</operator><name>x2</name></name> <operator>+=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bg</name><operator>.</operator><name>y1</name></name> <operator>-=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bg</name><operator>.</operator><name>y2</name></name> <operator>+=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bg</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_label_align_t</name></type> <name>align</name> <init>= <expr><call><name>lv_label_get_align</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_txt_flag_t</name></type> <name>flag</name> <init>= <expr><name>LV_TXT_FLAG_NONE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>recolor</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>LV_TXT_FLAG_RECOLOR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>expand</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>LV_TXT_FLAG_EXPAND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>align</name> <operator>==</operator> <name>LV_LABEL_ALIGN_CENTER</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>LV_TXT_FLAG_CENTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>align</name> <operator>==</operator> <name>LV_LABEL_ALIGN_RIGHT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>LV_TXT_FLAG_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>long_mode</name></name> <operator>==</operator> <name>LV_LABEL_LONG_SROLL</name> <operator>||</operator> <name><name>ext</name><operator>-&gt;</operator><name>long_mode</name></name> <operator>==</operator> <name>LV_LABEL_LONG_SROLL_CIRC</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>align</name></name> <operator>==</operator> <name>LV_LABEL_ALIGN_CENTER</name> <operator>||</operator> <name><name>ext</name><operator>-&gt;</operator><name>align</name></name> <operator>==</operator> <name>LV_LABEL_ALIGN_RIGHT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_txt_get_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name></expr></argument>,

<argument><expr><name>LV_COORD_MAX</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>size</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flag</name> <operator>&amp;=</operator> <operator>~</operator><name>LV_TXT_FLAG_RIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flag</name> <operator>&amp;=</operator> <operator>~</operator><name>LV_TXT_FLAG_CENTER</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_LABEL_LONG_TXT_HINT</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_draw_label_hint_t</name> <modifier>*</modifier></type> <name>hint</name> <init>= <expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>hint</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>long_mode</name></name> <operator>==</operator> <name>LV_LABEL_LONG_SROLL_CIRC</name> <operator>||</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>LV_LABEL_HINT_HEIGHT_LIMIT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hint</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>lv_draw_label_hint_t</name> <modifier>*</modifier></type> <name>hint</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_draw_label_txt_sel_t</name></type> <name>sel</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sel</name><operator>.</operator><name>start</name></name> <operator>=</operator> <call><name>lv_label_get_text_sel_start</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sel</name><operator>.</operator><name>end</name></name> <operator>=</operator> <call><name>lv_label_get_text_sel_end</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_label</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coords</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sel</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>, <argument><expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>long_mode</name></name> <operator>==</operator> <name>LV_LABEL_LONG_SROLL_CIRC</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_txt_get_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name></expr></argument>,

<argument><expr><name>LV_COORD_MAX</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>ofs</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>size</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ofs</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>size</name><operator>.</operator><name>x</name></name> <operator>+</operator>

<call><name>lv_font_get_glyph_width</name><argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>LV_LABEL_WAIT_CHAR_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ofs</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_label</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coords</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ofs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sel</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>size</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ofs</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ofs</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>size</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_label</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coords</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ofs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sel</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_label_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ancestor_signal</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_obj_handle_get_type_signal</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CLEANUP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>static_txt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_label_dot_tmp_free</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_STYLE_CHG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_label_revert_dots</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_label_refr_text</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CORD_CHG</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>label</name><operator>-&gt;</operator><name>coords</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>lv_area_get_height</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>label</name><operator>-&gt;</operator><name>coords</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>lv_area_get_height</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_label_revert_dots</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_label_refr_text</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_REFR_EXT_DRAW_PAD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>body_draw</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_label_get_style</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_LABEL_STYLE_MAIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>ext_draw_pad</name></name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>label</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>ext_draw_pad</name></name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>label</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>ext_draw_pad</name></name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>label</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>ext_draw_pad</name></name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>label</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_BASE_DIR_CHG</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_BIDI</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>static_txt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_label_set_text</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_type_t</name> <modifier>*</modifier></type> <name>buf</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LV_MAX_ANCESTOR_NUM</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 

<if_stmt><if>if<condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>type</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>type</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="string">"lv_label"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_label_refr_text</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_LABEL_LONG_TXT_HINT</name></expr></cpp:if>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>hint</name><operator>.</operator><name>line_start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>max_w</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>long_mode</name></name> <operator>==</operator> <name>LV_LABEL_LONG_EXPAND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max_w</name> <operator>=</operator> <name>LV_COORD_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_txt_flag_t</name></type> <name>flag</name> <init>= <expr><name>LV_TXT_FLAG_NONE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>recolor</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>LV_TXT_FLAG_RECOLOR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>expand</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>LV_TXT_FLAG_EXPAND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_txt_get_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name></expr></argument>, <argument><expr><name>max_w</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>long_mode</name></name> <operator>==</operator> <name>LV_LABEL_LONG_EXPAND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_set_size</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>long_mode</name></name> <operator>==</operator> <name>LV_LABEL_LONG_SROLL</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_anim_t</name></type> <name>anim</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>var</name></name> <operator>=</operator> <name>label</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>playback</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>ready_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>path_cb</name></name> <operator>=</operator> <name>lv_anim_path_linear</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>playback_pause</name></name> <operator>=</operator>

<operator>(</operator><operator>(</operator><operator>(</operator><call><name>lv_font_get_glyph_width</name><argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>/</operator>

<name><name>ext</name><operator>-&gt;</operator><name>anim_speed</name></name><operator>)</operator> <operator>*</operator>

<name>LV_LABEL_WAIT_CHAR_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>repeat_pause</name></name> <operator>=</operator> <name><name>anim</name><operator>.</operator><name>playback_pause</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>act_time</name></name> <operator>=</operator> <operator>-</operator><name><name>anim</name><operator>.</operator><name>playback_pause</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hor_anim</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>size</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>end</name></name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>size</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>exec_cb</name></name> <operator>=</operator> <operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_label_set_offset_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>time</name></name> <operator>=</operator> <call><name>lv_anim_speed_to_time</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>anim_speed</name></name></expr></argument>, <argument><expr><name><name>anim</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>anim</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_anim_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>anim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hor_anim</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_anim_del</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_label_set_offset_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>size</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>hor_anim</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>end</name></name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>size</name><operator>.</operator><name>y</name></name> <operator>-</operator> <operator>(</operator><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>exec_cb</name></name> <operator>=</operator> <operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_label_set_offset_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>time</name></name> <operator>=</operator> <call><name>lv_anim_speed_to_time</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>anim_speed</name></name></expr></argument>, <argument><expr><name><name>anim</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>anim</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_anim_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>anim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_anim_del</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_label_set_offset_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>long_mode</name></name> <operator>==</operator> <name>LV_LABEL_LONG_SROLL_CIRC</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_label_align_t</name></type> <name>align</name> <init>= <expr><call><name>lv_label_get_align</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_anim_t</name></type> <name>anim</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>var</name></name> <operator>=</operator> <name>label</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>playback</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>act_time</name></name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><operator>(</operator><call><name>lv_font_get_glyph_width</name><argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>/</operator>

<name><name>ext</name><operator>-&gt;</operator><name>anim_speed</name></name><operator>)</operator> <operator>*</operator>

<name>LV_LABEL_WAIT_CHAR_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>ready_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>path_cb</name></name> <operator>=</operator> <name>lv_anim_path_linear</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>playback_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>repeat_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hor_anim</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>size</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>align</name> <operator>==</operator> <name>LV_LABEL_ALIGN_RIGHT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>start</name></name> <operator>=</operator> <operator>-</operator><name><name>size</name><operator>.</operator><name>x</name></name> <operator>-</operator> <call><name>lv_font_get_glyph_width</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>LV_LABEL_WAIT_CHAR_COUNT</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>end</name></name> <operator>=</operator> <operator>-</operator><name><name>size</name><operator>.</operator><name>x</name></name> <operator>-</operator> <call><name>lv_font_get_glyph_width</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>LV_LABEL_WAIT_CHAR_COUNT</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>exec_cb</name></name> <operator>=</operator> <operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_label_set_offset_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>time</name></name> <operator>=</operator> <call><name>lv_anim_speed_to_time</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>anim_speed</name></name></expr></argument>, <argument><expr><name><name>anim</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>anim</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_anim_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>anim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hor_anim</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_anim_del</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_label_set_offset_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>size</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>hor_anim</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>align</name> <operator>==</operator> <name>LV_LABEL_ALIGN_RIGHT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>start</name></name> <operator>=</operator> <operator>-</operator><name><name>size</name><operator>.</operator><name>y</name></name> <operator>-</operator> <operator>(</operator><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>end</name></name> <operator>=</operator> <operator>-</operator><name><name>size</name><operator>.</operator><name>y</name></name> <operator>-</operator> <operator>(</operator><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>exec_cb</name></name> <operator>=</operator> <operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_label_set_offset_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>.</operator><name>time</name></name> <operator>=</operator> <call><name>lv_anim_speed_to_time</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>anim_speed</name></name></expr></argument>, <argument><expr><name><name>anim</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>anim</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_anim_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>anim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_anim_del</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_label_set_offset_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>long_mode</name></name> <operator>==</operator> <name>LV_LABEL_LONG_DOT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>size</name><operator>.</operator><name>y</name></name> <operator>&lt;=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dot_end</name></name> <operator>=</operator> <name>LV_LABEL_DOT_END_INV</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>lv_txt_get_encoded_length</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>LV_LABEL_DOT_NUM</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dot_end</name></name> <operator>=</operator> <name>LV_LABEL_DOT_END_INV</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call> <operator>-</operator>

<operator>(</operator><call><name>lv_font_get_glyph_width</name><argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name><operator>)</operator> <operator>*</operator>

<name>LV_LABEL_DOT_NUM</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name><name>p</name><operator>.</operator><name>y</name></name> <operator>%</operator>

<operator>(</operator><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>letter_id</name> <init>= <expr><call><name>lv_label_get_letter_on</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>txt_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>byte_id</name> <init>= <expr><call><name>lv_txt_encoded_get_byte_id</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>letter_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>byte_id</name> <operator>+</operator> <name>LV_LABEL_DOT_NUM</name> <operator>&gt;</operator> <name>txt_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>byte_id</name> <operator>-=</operator> <call><name>lv_txt_encoded_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>text</name><index>[<expr><name>byte_id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>letter_id</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>byte_id_ori</name> <init>= <expr><name>byte_id</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>LV_LABEL_DOT_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>lv_txt_encoded_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>text</name><index>[<expr><name>byte_id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>byte_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><call><name>lv_label_set_dot_tmp</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>text</name><index>[<expr><name>byte_id_ori</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LV_LABEL_DOT_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name><index>[<expr><name>byte_id_ori</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name><index>[<expr><name>byte_id_ori</name> <operator>+</operator> <name>LV_LABEL_DOT_NUM</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dot_end</name></name> <operator>=</operator> <name>letter_id</name> <operator>+</operator> <name>LV_LABEL_DOT_NUM</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>long_mode</name></name> <operator>==</operator> <name>LV_LABEL_LONG_BREAK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_set_height</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>long_mode</name></name> <operator>==</operator> <name>LV_LABEL_LONG_CROP</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_label_revert_dots</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>long_mode</name></name> <operator>!=</operator> <name>LV_LABEL_LONG_DOT</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>dot_end</name></name> <operator>==</operator> <name>LV_LABEL_DOT_END_INV</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>letter_i</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>dot_end</name></name> <operator>-</operator> <name>LV_LABEL_DOT_NUM</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>byte_i</name> <init>= <expr><call><name>lv_txt_encoded_get_byte_id</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>letter_i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>dot_tmp</name> <init>= <expr><call><name>lv_label_get_dot_tmp</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>text</name><index>[<expr><name>byte_i</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name><index>[<expr><name>byte_i</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dot_tmp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>text</name><index>[<expr><name>byte_i</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dot_tmp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_label_dot_tmp_free</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dot_end</name></name> <operator>=</operator> <name>LV_LABEL_DOT_END_INV</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_label_set_offset_x</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_label_set_offset_y</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>lv_label_set_dot_tmp</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_label_dot_tmp_free</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dot</name><operator>.</operator><name>tmp_ptr</name></name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>dot</name><operator>.</operator><name>tmp_ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to allocate memory for dot_tmp_ptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>dot</name><operator>.</operator><name>tmp_ptr</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dot</name><operator>.</operator><name>tmp_ptr</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dot_tmp_alloc</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dot_tmp_alloc</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>dot</name><operator>.</operator><name>tmp</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>lv_label_get_dot_tmp</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>dot_tmp_alloc</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>dot</name><operator>.</operator><name>tmp_ptr</name></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>dot</name><operator>.</operator><name>tmp</name></name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_label_dot_tmp_free</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>dot_tmp_alloc</name></name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>dot</name><operator>.</operator><name>tmp_ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>dot</name><operator>.</operator><name>tmp_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dot_tmp_alloc</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dot</name><operator>.</operator><name>tmp_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
