<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_objx\lv_cont.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_CONF_INCLUDE_SIMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_conf.h"</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../lv_conf.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_CONT</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_obj.h"</cpp:file></cpp:include>

<enum>enum <block>{

<decl><name>LV_LAYOUT_OFF</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>LV_LAYOUT_CENTER</name></decl>, 

<decl><name>LV_LAYOUT_COL_L</name></decl>, 

<decl><name>LV_LAYOUT_COL_M</name></decl>, 

<decl><name>LV_LAYOUT_COL_R</name></decl>, 

<decl><name>LV_LAYOUT_ROW_T</name></decl>, 

<decl><name>LV_LAYOUT_ROW_M</name></decl>, 

<decl><name>LV_LAYOUT_ROW_B</name></decl>, 

<decl><name>LV_LAYOUT_PRETTY</name></decl>, 

<decl><name>LV_LAYOUT_GRID</name></decl>, 

<decl><name>_LV_LAYOUT_NUM</name></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_layout_t</name>;</typedef>

<enum>enum <block>{

<decl><name>LV_FIT_NONE</name></decl>, 

<decl><name>LV_FIT_TIGHT</name></decl>, 

<decl><name>LV_FIT_FLOOD</name></decl>, 

<decl><name>LV_FIT_FILL</name></decl>, 

<decl><name>_LV_FIT_NUM</name></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_fit_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>layout</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>fit_left</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>fit_right</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>fit_top</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>fit_bottom</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt> 

}</block></struct></type> <name>lv_cont_ext_t</name>;</typedef>

<enum>enum <block>{

<decl><name>LV_CONT_STYLE_MAIN</name></decl>,

}</block>;</enum>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_cont_style_t</name>;</typedef>

<function_decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_cont_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_cont_set_layout</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>, <parameter><decl><type><name>lv_layout_t</name></type> <name>layout</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lv_cont_set_fit4</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>, <parameter><decl><type><name>lv_fit_t</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>lv_fit_t</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>lv_fit_t</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>lv_fit_t</name></type> <name>bottom</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_cont_set_fit2</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>, <parameter><decl><type><name>lv_fit_t</name></type> <name>hor</name></decl></parameter>, <parameter><decl><type><name>lv_fit_t</name></type> <name>ver</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lv_cont_set_fit4</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>hor</name></expr></argument>, <argument><expr><name>hor</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_cont_set_fit</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>, <parameter><decl><type><name>lv_fit_t</name></type> <name>fit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lv_cont_set_fit4</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>fit</name></expr></argument>, <argument><expr><name>fit</name></expr></argument>, <argument><expr><name>fit</name></expr></argument>, <argument><expr><name>fit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_cont_set_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>, <parameter><decl><type><name>lv_cont_style_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>type</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>lv_obj_set_style</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><name>lv_layout_t</name></type> <name>lv_cont_get_layout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_fit_t</name></type> <name>lv_cont_get_fit_left</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_fit_t</name></type> <name>lv_cont_get_fit_right</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_fit_t</name></type> <name>lv_cont_get_fit_top</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_fit_t</name></type> <name>lv_cont_get_fit_bottom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>lv_cont_get_style</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>, <parameter><decl><type><name>lv_cont_style_t</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>type</name></expr>;</expr_stmt> 

<return>return <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
