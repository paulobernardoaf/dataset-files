<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_objx\lv_kb.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_kb.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_KB</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_themes/lv_theme.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_ta.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_OBJX_NAME</name></cpp:macro> <cpp:value>"lv_kb"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_KB_CTRL_BTN_FLAGS</name></cpp:macro> <cpp:value>(LV_BTNM_CTRL_NO_REPEAT | LV_BTNM_CTRL_CLICK_TRIG)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_kb_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>kb</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>ancestor_signal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>kb_map_lc</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"1#"</literal></expr>, <expr><literal type="string">"q"</literal></expr>, <expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"t"</literal></expr>, <expr><literal type="string">"y"</literal></expr>, <expr><literal type="string">"u"</literal></expr>, <expr><literal type="string">"i"</literal></expr>, <expr><literal type="string">"o"</literal></expr>, <expr><literal type="string">"p"</literal></expr>, <expr><name>LV_SYMBOL_BACKSPACE</name></expr>, <expr><literal type="string">"\n"</literal></expr>,

<expr><literal type="string">"ABC"</literal></expr>, <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"j"</literal></expr>, <expr><literal type="string">"k"</literal></expr>, <expr><literal type="string">"l"</literal></expr>, <expr><name>LV_SYMBOL_NEW_LINE</name></expr>, <expr><literal type="string">"\n"</literal></expr>,

<expr><literal type="string">"_"</literal></expr>, <expr><literal type="string">"-"</literal></expr>, <expr><literal type="string">"z"</literal></expr>, <expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"v"</literal></expr>, <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"."</literal></expr>, <expr><literal type="string">","</literal></expr>, <expr><literal type="string">":"</literal></expr>, <expr><literal type="string">"\n"</literal></expr>,

<expr><name>LV_SYMBOL_CLOSE</name></expr>, <expr><name>LV_SYMBOL_LEFT</name></expr>, <expr><literal type="string">" "</literal></expr>, <expr><name>LV_SYMBOL_RIGHT</name></expr>, <expr><name>LV_SYMBOL_OK</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>lv_btnm_ctrl_t</name></type> <name><name>kb_ctrl_lc_map</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>LV_KB_CTRL_BTN_FLAGS</name> <operator>|</operator> <literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>,

<expr><name>LV_KB_CTRL_BTN_FLAGS</name> <operator>|</operator> <literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><name>LV_KB_CTRL_BTN_FLAGS</name> <operator>|</operator> <literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>LV_KB_CTRL_BTN_FLAGS</name> <operator>|</operator> <literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>kb_map_uc</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"1#"</literal></expr>, <expr><literal type="string">"Q"</literal></expr>, <expr><literal type="string">"W"</literal></expr>, <expr><literal type="string">"E"</literal></expr>, <expr><literal type="string">"R"</literal></expr>, <expr><literal type="string">"T"</literal></expr>, <expr><literal type="string">"Y"</literal></expr>, <expr><literal type="string">"U"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><literal type="string">"O"</literal></expr>, <expr><literal type="string">"P"</literal></expr>, <expr><name>LV_SYMBOL_BACKSPACE</name></expr>, <expr><literal type="string">"\n"</literal></expr>,

<expr><literal type="string">"abc"</literal></expr>, <expr><literal type="string">"A"</literal></expr>, <expr><literal type="string">"S"</literal></expr>, <expr><literal type="string">"D"</literal></expr>, <expr><literal type="string">"F"</literal></expr>, <expr><literal type="string">"G"</literal></expr>, <expr><literal type="string">"H"</literal></expr>, <expr><literal type="string">"J"</literal></expr>, <expr><literal type="string">"K"</literal></expr>, <expr><literal type="string">"L"</literal></expr>, <expr><name>LV_SYMBOL_NEW_LINE</name></expr>, <expr><literal type="string">"\n"</literal></expr>,

<expr><literal type="string">"_"</literal></expr>, <expr><literal type="string">"-"</literal></expr>, <expr><literal type="string">"Z"</literal></expr>, <expr><literal type="string">"X"</literal></expr>, <expr><literal type="string">"C"</literal></expr>, <expr><literal type="string">"V"</literal></expr>, <expr><literal type="string">"B"</literal></expr>, <expr><literal type="string">"N"</literal></expr>, <expr><literal type="string">"M"</literal></expr>, <expr><literal type="string">"."</literal></expr>, <expr><literal type="string">","</literal></expr>, <expr><literal type="string">":"</literal></expr>, <expr><literal type="string">"\n"</literal></expr>,

<expr><name>LV_SYMBOL_CLOSE</name></expr>, <expr><name>LV_SYMBOL_LEFT</name></expr>, <expr><literal type="string">" "</literal></expr>, <expr><name>LV_SYMBOL_RIGHT</name></expr>, <expr><name>LV_SYMBOL_OK</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>lv_btnm_ctrl_t</name></type> <name><name>kb_ctrl_uc_map</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>LV_KB_CTRL_BTN_FLAGS</name> <operator>|</operator> <literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>,

<expr><name>LV_KB_CTRL_BTN_FLAGS</name> <operator>|</operator> <literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><name>LV_KB_CTRL_BTN_FLAGS</name> <operator>|</operator> <literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>LV_KB_CTRL_BTN_FLAGS</name> <operator>|</operator> <literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>kb_map_spec</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"0"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"3"</literal></expr>, <expr><literal type="string">"4"</literal></expr> ,<expr><literal type="string">"5"</literal></expr>, <expr><literal type="string">"6"</literal></expr>, <expr><literal type="string">"7"</literal></expr>, <expr><literal type="string">"8"</literal></expr>, <expr><literal type="string">"9"</literal></expr>, <expr><name>LV_SYMBOL_BACKSPACE</name></expr>, <expr><literal type="string">"\n"</literal></expr>,

<expr><literal type="string">"abc"</literal></expr>, <expr><literal type="string">"+"</literal></expr>, <expr><literal type="string">"-"</literal></expr>, <expr><literal type="string">"/"</literal></expr>, <expr><literal type="string">"*"</literal></expr>, <expr><literal type="string">"="</literal></expr>, <expr><literal type="string">"%"</literal></expr>, <expr><literal type="string">"!"</literal></expr>, <expr><literal type="string">"?"</literal></expr>, <expr><literal type="string">"#"</literal></expr>, <expr><literal type="string">"&lt;"</literal></expr>, <expr><literal type="string">"&gt;"</literal></expr>, <expr><literal type="string">"\n"</literal></expr>,

<expr><literal type="string">"\\"</literal></expr>, <expr><literal type="string">"@"</literal></expr>, <expr><literal type="string">"$"</literal></expr>, <expr><literal type="string">"("</literal></expr>, <expr><literal type="string">")"</literal></expr>, <expr><literal type="string">"{"</literal></expr>, <expr><literal type="string">"}"</literal></expr>, <expr><literal type="string">"["</literal></expr>, <expr><literal type="string">"]"</literal></expr>, <expr><literal type="string">";"</literal></expr>, <expr><literal type="string">"\""</literal></expr>, <expr><literal type="string">"'"</literal></expr>, <expr><literal type="string">"\n"</literal></expr>,

<expr><name>LV_SYMBOL_CLOSE</name></expr>, <expr><name>LV_SYMBOL_LEFT</name></expr>, <expr><literal type="string">" "</literal></expr>, <expr><name>LV_SYMBOL_RIGHT</name></expr>, <expr><name>LV_SYMBOL_OK</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>lv_btnm_ctrl_t</name></type> <name><name>kb_ctrl_spec_map</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>LV_KB_CTRL_BTN_FLAGS</name> <operator>|</operator> <literal type="number">2</literal></expr>,

<expr><name>LV_KB_CTRL_BTN_FLAGS</name> <operator>|</operator> <literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><name>LV_KB_CTRL_BTN_FLAGS</name> <operator>|</operator> <literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>LV_KB_CTRL_BTN_FLAGS</name> <operator>|</operator> <literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>kb_map_num</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"3"</literal></expr>, <expr><name>LV_SYMBOL_CLOSE</name></expr>, <expr><literal type="string">"\n"</literal></expr>,

<expr><literal type="string">"4"</literal></expr>, <expr><literal type="string">"5"</literal></expr>, <expr><literal type="string">"6"</literal></expr>, <expr><name>LV_SYMBOL_OK</name></expr>, <expr><literal type="string">"\n"</literal></expr>,

<expr><literal type="string">"7"</literal></expr>, <expr><literal type="string">"8"</literal></expr>, <expr><literal type="string">"9"</literal></expr>, <expr><name>LV_SYMBOL_BACKSPACE</name></expr>, <expr><literal type="string">"\n"</literal></expr>,

<expr><literal type="string">"+/-"</literal></expr>, <expr><literal type="string">"0"</literal></expr>, <expr><literal type="string">"."</literal></expr>, <expr><name>LV_SYMBOL_LEFT</name></expr>, <expr><name>LV_SYMBOL_RIGHT</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>lv_btnm_ctrl_t</name></type> <name><name>kb_ctrl_num_map</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>LV_KB_CTRL_BTN_FLAGS</name> <operator>|</operator> <literal type="number">2</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>LV_KB_CTRL_BTN_FLAGS</name> <operator>|</operator> <literal type="number">2</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_kb_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"keyboard create started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>new_kb</name> <init>= <expr><call><name>lv_btnm_create</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_kb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>new_kb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ancestor_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><name>new_kb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_kb_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_allocate_ext_attr</name><argument_list>(<argument><expr><name>new_kb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_kb_ext_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>LV_KB_MODE_TEXT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor_mng</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><name>new_kb</name></expr></argument>, <argument><expr><name>lv_kb_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_set_size</name><argument_list>(<argument><expr><name>new_kb</name></expr></argument>, <argument><expr><call><name>lv_obj_get_width_fit</name><argument_list>(<argument><expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>new_kb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>lv_obj_get_height_fit</name><argument_list>(<argument><expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>new_kb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name>new_kb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_BOTTOM_MID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_event_cb</name><argument_list>(<argument><expr><name>new_kb</name></expr></argument>, <argument><expr><name>lv_kb_def_event_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btnm_set_map</name><argument_list>(<argument><expr><name>new_kb</name></expr></argument>, <argument><expr><name>kb_map_lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btnm_set_ctrl_map</name><argument_list>(<argument><expr><name>new_kb</name></expr></argument>, <argument><expr><name>kb_ctrl_lc_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_base_dir</name><argument_list>(<argument><expr><name>new_kb</name></expr></argument>, <argument><expr><name>LV_BIDI_DIR_LTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>th</name> <init>= <expr><call><name>lv_theme_get_current</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>th</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_kb_set_style</name><argument_list>(<argument><expr><name>new_kb</name></expr></argument>, <argument><expr><name>LV_KB_STYLE_BG</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>kb</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_kb_set_style</name><argument_list>(<argument><expr><name>new_kb</name></expr></argument>, <argument><expr><name>LV_KB_STYLE_BTN_REL</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>kb</name><operator>.</operator><name>btn</name><operator>.</operator><name>rel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_kb_set_style</name><argument_list>(<argument><expr><name>new_kb</name></expr></argument>, <argument><expr><name>LV_KB_STYLE_BTN_PR</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>kb</name><operator>.</operator><name>btn</name><operator>.</operator><name>pr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_kb_set_style</name><argument_list>(<argument><expr><name>new_kb</name></expr></argument>, <argument><expr><name>LV_KB_STYLE_BTN_TGL_REL</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>kb</name><operator>.</operator><name>btn</name><operator>.</operator><name>tgl_rel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_kb_set_style</name><argument_list>(<argument><expr><name>new_kb</name></expr></argument>, <argument><expr><name>LV_KB_STYLE_BTN_TGL_PR</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>kb</name><operator>.</operator><name>btn</name><operator>.</operator><name>tgl_pr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_kb_set_style</name><argument_list>(<argument><expr><name>new_kb</name></expr></argument>, <argument><expr><name>LV_KB_STYLE_BTN_INA</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>kb</name><operator>.</operator><name>btn</name><operator>.</operator><name>ina</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_kb_ext_t</name> <modifier>*</modifier></type> <name>copy_ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>ta</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor_mng</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>cursor_mng</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_refresh_style</name><argument_list>(<argument><expr><name>new_kb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"keyboard created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_kb</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_kb_set_ta</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>kb</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ta</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><literal type="string">"lv_ta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_kb_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_cursor_type_t</name></type> <name>cur_type</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>cursor_mng</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur_type</name> <operator>=</operator> <call><name>lv_ta_get_cursor_type</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_ta_set_cursor_type</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>, <argument><expr><name>cur_type</name> <operator>|</operator> <name>LV_CURSOR_HIDDEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name> <operator>=</operator> <name>ta</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>cursor_mng</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur_type</name> <operator>=</operator> <call><name>lv_ta_get_cursor_type</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_ta_set_cursor_type</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>, <argument><expr><name>cur_type</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>LV_CURSOR_HIDDEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_kb_set_mode</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>kb</name></decl></parameter>, <parameter><decl><type><name>lv_kb_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_kb_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>mode</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_KB_MODE_TEXT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_btnm_set_map</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>kb_map_lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btnm_set_ctrl_map</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>kb_ctrl_lc_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_KB_MODE_NUM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_btnm_set_map</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>kb_map_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btnm_set_ctrl_map</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>kb_ctrl_num_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_KB_MODE_TEXT_UPPER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_btnm_set_map</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>kb_map_uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btnm_set_ctrl_map</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>kb_ctrl_uc_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_kb_set_cursor_manage</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>kb</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_kb_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cursor_mng</name></name> <operator>==</operator> <name>en</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor_mng</name></name> <operator>=</operator> <ternary><condition><expr><name>en</name> <operator>==</operator> <name>false</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_cursor_type_t</name></type> <name>cur_type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cur_type</name> <operator>=</operator> <call><name>lv_ta_get_cursor_type</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cursor_mng</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_ta_set_cursor_type</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>, <argument><expr><name>cur_type</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>LV_CURSOR_HIDDEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_ta_set_cursor_type</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>, <argument><expr><name>cur_type</name> <operator>|</operator> <name>LV_CURSOR_HIDDEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_kb_set_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>kb</name></decl></parameter>, <parameter><decl><type><name>lv_kb_style_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_KB_STYLE_BG</name></expr>:</case> <expr_stmt><expr><call><name>lv_btnm_set_style</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BG</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_KB_STYLE_BTN_REL</name></expr>:</case> <expr_stmt><expr><call><name>lv_btnm_set_style</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_REL</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_KB_STYLE_BTN_PR</name></expr>:</case> <expr_stmt><expr><call><name>lv_btnm_set_style</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_PR</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_KB_STYLE_BTN_TGL_REL</name></expr>:</case> <expr_stmt><expr><call><name>lv_btnm_set_style</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_TGL_REL</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_KB_STYLE_BTN_TGL_PR</name></expr>:</case> <expr_stmt><expr><call><name>lv_btnm_set_style</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_TGL_PR</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_KB_STYLE_BTN_INA</name></expr>:</case> <expr_stmt><expr><call><name>lv_btnm_set_style</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_INA</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_kb_get_ta</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>kb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_kb_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_kb_mode_t</name></type> <name>lv_kb_get_mode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>kb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_kb_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>mode</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_kb_get_cursor_manage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>kb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_kb_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor_mng</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>lv_kb_get_style</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>kb</name></decl></parameter>, <parameter><decl><type><name>lv_kb_style_t</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_KB_STYLE_BG</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_btnm_get_style</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_KB_STYLE_BTN_REL</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_btnm_get_style</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_KB_STYLE_BTN_PR</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_btnm_get_style</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_PR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_KB_STYLE_BTN_TGL_REL</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_btnm_get_style</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_TGL_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_KB_STYLE_BTN_TGL_PR</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_btnm_get_style</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_TGL_PR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_KB_STYLE_BTN_INA</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_btnm_get_style</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_INA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>style</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>style</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_kb_def_event_cb</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>kb</name></decl></parameter>, <parameter><decl><type><name>lv_event_t</name></type> <name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>event</name> <operator>!=</operator> <name>LV_EVENT_VALUE_CHANGED</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_kb_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>btn_id</name> <init>= <expr><call><name>lv_btnm_get_active_btn</name><argument_list>(<argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>btn_id</name> <operator>==</operator> <name>LV_BTNM_BTN_NONE</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_btnm_get_btn_ctrl</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>btn_id</name></expr></argument>, <argument><expr><name>LV_BTNM_CTRL_HIDDEN</name> <operator>|</operator> <name>LV_BTNM_CTRL_INACTIVE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_btnm_get_btn_ctrl</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>btn_id</name></expr></argument>, <argument><expr><name>LV_BTNM_CTRL_NO_REPEAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>event</name> <operator>==</operator> <name>LV_EVENT_LONG_PRESSED_REPEAT</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name> <init>= <expr><call><name>lv_btnm_get_active_btn_text</name><argument_list>(<argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>txt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="string">"abc"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_btnm_set_map</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>kb_map_lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btnm_set_ctrl_map</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>kb_ctrl_lc_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="string">"ABC"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_btnm_set_map</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>kb_map_uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btnm_set_ctrl_map</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>kb_ctrl_uc_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="string">"1#"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_btnm_set_map</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>kb_map_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btnm_set_ctrl_map</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>kb_ctrl_spec_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name>LV_SYMBOL_CLOSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>kb</name><operator>-&gt;</operator><name>event_cb</name></name> <operator>!=</operator> <name>lv_kb_def_event_cb</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name> <init>= <expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>LV_EVENT_CANCEL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_kb_set_ta</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>lv_obj_del</name><argument_list>(<argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name>LV_SYMBOL_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>kb</name><operator>-&gt;</operator><name>event_cb</name></name> <operator>!=</operator> <name>lv_kb_def_event_cb</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name> <init>= <expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>LV_EVENT_APPLY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_kb_set_ta</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="string">"Enter"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name>LV_SYMBOL_NEW_LINE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_ta_add_char</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name>LV_SYMBOL_LEFT</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_ta_cursor_left</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name>LV_SYMBOL_RIGHT</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_ta_cursor_right</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name>LV_SYMBOL_BACKSPACE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_ta_del_char</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="string">"+/-"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>cur</name> <init>= <expr><call><name>lv_ta_get_cursor_pos</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>ta_txt</name> <init>= <expr><call><name>lv_ta_get_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ta_txt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_ta_set_cursor_pos</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_ta_del_char</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_ta_add_char</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_ta_set_cursor_pos</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ta_txt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_ta_set_cursor_pos</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_ta_del_char</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_ta_add_char</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_ta_set_cursor_pos</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_ta_set_cursor_pos</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_ta_add_char</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_ta_set_cursor_pos</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>, <argument><expr><name>cur</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_ta_add_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>, <argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_kb_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>kb</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ancestor_signal</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_obj_handle_get_type_signal</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CLEANUP</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_FOCUS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_kb_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>cursor_mng</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_cursor_type_t</name></type> <name>cur_type</name> <init>= <expr><call><name>lv_ta_get_cursor_type</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_ta_set_cursor_type</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>, <argument><expr><name>cur_type</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>LV_CURSOR_HIDDEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_DEFOCUS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_kb_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>cursor_mng</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_cursor_type_t</name></type> <name>cur_type</name> <init>= <expr><call><name>lv_ta_get_cursor_type</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_ta_set_cursor_type</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ta</name></name></expr></argument>, <argument><expr><name>cur_type</name> <operator>|</operator> <name>LV_CURSOR_HIDDEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
