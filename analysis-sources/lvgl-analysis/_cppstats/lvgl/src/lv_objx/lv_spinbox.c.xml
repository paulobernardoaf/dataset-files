<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_objx\lv_spinbox.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_spinbox.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_SPINBOX</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_themes/lv_theme.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_math.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_utils.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_OBJX_NAME</name></cpp:macro> <cpp:value>"lv_spinbox"</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_spinbox_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_spinbox_updatevalue</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>ancestor_signal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_design_cb_t</name></type> <name>ancestor_design</name></decl>;</decl_stmt>

<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_spinbox_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"spinbox create started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>new_spinbox</name> <init>= <expr><call><name>lv_ta_create</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_spinbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>new_spinbox</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_spinbox_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_allocate_ext_attr</name><argument_list>(<argument><expr><name>new_spinbox</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_spinbox_ext_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ancestor_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><name>new_spinbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ancestor_design</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_design</name> <operator>=</operator> <call><name>lv_obj_get_design_cb</name><argument_list>(<argument><expr><name>new_spinbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dec_point_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>digit_count</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>digit_padding_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>range_max</name></name> <operator>=</operator> <literal type="number">99999</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>range_min</name></name> <operator>=</operator> <operator>-</operator><literal type="number">99999</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_ta_set_cursor_type</name><argument_list>(<argument><expr><name>new_spinbox</name></expr></argument>, <argument><expr><name>LV_CURSOR_BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_ta_set_one_line</name><argument_list>(<argument><expr><name>new_spinbox</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_ta_set_cursor_click_pos</name><argument_list>(<argument><expr><name>new_spinbox</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><name>new_spinbox</name></expr></argument>, <argument><expr><name>lv_spinbox_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_design_cb</name><argument_list>(<argument><expr><name>new_spinbox</name></expr></argument>, <argument><expr><name>ancestor_design</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>th</name> <init>= <expr><call><name>lv_theme_get_current</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>th</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_spinbox_set_style</name><argument_list>(<argument><expr><name>new_spinbox</name></expr></argument>, <argument><expr><name>LV_SPINBOX_STYLE_BG</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>spinbox</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_spinbox_set_style</name><argument_list>(<argument><expr><name>new_spinbox</name></expr></argument>, <argument><expr><name>LV_SPINBOX_STYLE_CURSOR</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>spinbox</name><operator>.</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_spinbox_set_style</name><argument_list>(<argument><expr><name>new_spinbox</name></expr></argument>, <argument><expr><name>LV_SPINBOX_STYLE_SB</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>spinbox</name><operator>.</operator><name>sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_spinbox_ext_t</name> <modifier>*</modifier></type> <name>copy_ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_spinbox_set_value</name><argument_list>(<argument><expr><name>new_spinbox</name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_spinbox_set_digit_format</name><argument_list>(<argument><expr><name>new_spinbox</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>copy_ext</name><operator>-&gt;</operator><name>digit_count</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>copy_ext</name><operator>-&gt;</operator><name>dec_point_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_spinbox_set_range</name><argument_list>(<argument><expr><name>new_spinbox</name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>range_min</name></name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>range_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_spinbox_set_step</name><argument_list>(<argument><expr><name>new_spinbox</name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>step</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_refresh_style</name><argument_list>(<argument><expr><name>new_spinbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lv_spinbox_updatevalue</name><argument_list>(<argument><expr><name>new_spinbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"spinbox created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_spinbox</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_spinbox_set_value</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_spinbox_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>range_max</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>range_max</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>range_min</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>range_min</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_spinbox_updatevalue</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_spinbox_set_digit_format</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>digit_count</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>separator_position</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_spinbox_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>digit_count</name> <operator>&gt;</operator> <name>LV_SPINBOX_MAX_DIGIT_COUNT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>digit_count</name> <operator>=</operator> <name>LV_SPINBOX_MAX_DIGIT_COUNT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>separator_position</name> <operator>&gt;</operator> <name>LV_SPINBOX_MAX_DIGIT_COUNT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>separator_position</name> <operator>=</operator> <name>LV_SPINBOX_MAX_DIGIT_COUNT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>digit_count</name></name> <operator>=</operator> <name>digit_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dec_point_pos</name></name> <operator>=</operator> <name>separator_position</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_spinbox_updatevalue</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_spinbox_set_step</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>step</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_spinbox_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name>step</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_spinbox_set_range</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>range_min</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>range_max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_spinbox_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>range_max</name></name> <operator>=</operator> <name>range_max</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>range_min</name></name> <operator>=</operator> <name>range_min</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>value</name></name> <operator>&gt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>range_max</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>range_max</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>value</name></name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>range_min</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>range_min</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_spinbox_set_padding_left</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>padding</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_spinbox_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>digit_padding_left</name></name> <operator>=</operator> <name>padding</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_spinbox_updatevalue</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>lv_spinbox_get_value</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_spinbox_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>value</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_spinbox_step_next</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_spinbox_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>new_step</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>step</name></name> <operator>/</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>new_step</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name>new_step</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>lv_spinbox_updatevalue</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_spinbox_step_prev</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_spinbox_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>step_limit</name></decl>;</decl_stmt>

<expr_stmt><expr><name>step_limit</name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>range_max</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>ext</name><operator>-&gt;</operator><name>range_min</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>-</operator><name><name>ext</name><operator>-&gt;</operator><name>range_min</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>ext</name><operator>-&gt;</operator><name>range_min</name></name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>new_step</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>step</name></name> <operator>*</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>new_step</name> <operator>&lt;=</operator> <name>step_limit</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name>new_step</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_spinbox_updatevalue</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_spinbox_increment</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_spinbox_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>value</name></name> <operator>+</operator> <name><name>ext</name><operator>-&gt;</operator><name>step</name></name> <operator>&lt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>range_max</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>value</name></name> <operator>+</operator> <name><name>ext</name><operator>-&gt;</operator><name>step</name></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>value</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>-</operator><name><name>ext</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>value</name></name> <operator>+=</operator> <name><name>ext</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>range_max</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lv_spinbox_updatevalue</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_spinbox_decrement</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_spinbox_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>value</name></name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>step</name></name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>range_min</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>value</name></name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>step</name></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>value</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>-</operator><name><name>ext</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>value</name></name> <operator>-=</operator> <name><name>ext</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>range_min</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lv_spinbox_updatevalue</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_spinbox_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name> <init>= <expr><name>LV_RES_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>!=</operator> <name>LV_SIGNAL_CONTROL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ancestor_signal</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_obj_handle_get_type_signal</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_spinbox_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CLEANUP</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_type_t</name> <modifier>*</modifier></type> <name>buf</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LV_MAX_ANCESTOR_NUM</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 

<if_stmt><if>if<condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>type</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>type</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="string">"lv_spinbox"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_RELEASED</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name> <init>= <expr><call><name>lv_indev_get_act</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_indev_get_type</name><argument_list>(<argument><expr><name>indev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LV_INDEV_TYPE_ENCODER</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_group_get_editing</name><argument_list>(<argument><expr><call><name>lv_obj_get_group</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>step</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_spinbox_step_next</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>digit_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>new_step</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>step</name></name> <operator>*</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>new_step</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>range_max</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name>new_step</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>lv_spinbox_step_prev</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CONTROL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_indev_type_t</name></type> <name>indev_type</name> <init>= <expr><call><name>lv_indev_get_type</name><argument_list>(<argument><expr><call><name>lv_indev_get_act</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>param</name><operator>)</operator></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_RIGHT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>indev_type</name> <operator>==</operator> <name>LV_INDEV_TYPE_ENCODER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_spinbox_increment</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_spinbox_step_next</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_LEFT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>indev_type</name> <operator>==</operator> <name>LV_INDEV_TYPE_ENCODER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_spinbox_decrement</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_spinbox_step_prev</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_UP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_spinbox_increment</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_DOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_spinbox_decrement</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_ta_add_char</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_spinbox_updatevalue</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>spinbox</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_spinbox_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>LV_SPINBOX_MAX_DIGIT_COUNT</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>buf_p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>cur_shift_left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>range_min</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>buf_p</name><operator>)</operator> <operator>=</operator> <ternary><condition><expr><name><name>ext</name><operator>-&gt;</operator><name>value</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cur_shift_left</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>digit_padding_left</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>buf_p</name><operator>)</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>char</name></type> <name><name>digits</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_utils_num_to_str</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>ext</name><operator>-&gt;</operator><name>value</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name><name>ext</name><operator>-&gt;</operator><name>value</name></name></expr> </then><else>: <expr><name><name>ext</name><operator>-&gt;</operator><name>value</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>digits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lz_cnt</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>digit_count</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>digits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>lz_cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>digits</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>digits</name><index>[<expr><name>i</name> <operator>+</operator> <name>lz_cnt</name></expr>]</index></name> <operator>=</operator> <name><name>digits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lz_cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>digits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>intDigits</name></decl>;</decl_stmt>

<expr_stmt><expr><name>intDigits</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>dec_point_pos</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>ext</name><operator>-&gt;</operator><name>digit_count</name></name></expr> </then><else>: <expr><name><name>ext</name><operator>-&gt;</operator><name>dec_point_pos</name></name></expr></else></ternary></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>intDigits</name> <operator>&amp;&amp;</operator> <name><name>digits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>buf_p</name><operator>)</operator> <operator>=</operator> <name><name>digits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>dec_point_pos</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>buf_p</name><operator>)</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_p</name><operator>++</operator></expr>;</expr_stmt>

<for>for<control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>digit_count</name></name> <operator>&amp;&amp;</operator> <name><name>digits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>buf_p</name><operator>)</operator> <operator>=</operator> <name><name>digits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_ta_set_text</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>step</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>cur_pos</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>ext</name><operator>-&gt;</operator><name>digit_count</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>step</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>step</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_pos</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>cur_pos</name> <operator>&gt;</operator> <name>intDigits</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cur_pos</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>cur_pos</name> <operator>+=</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>digit_padding_left</name></name> <operator>-</operator> <name>cur_shift_left</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_ta_set_cursor_pos</name><argument_list>(<argument><expr><name>spinbox</name></expr></argument>, <argument><expr><name>cur_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
