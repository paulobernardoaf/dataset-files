<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_objx\lv_tabview.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_tabview.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_TABVIEW</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_btnm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_themes/lv_theme.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_anim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_disp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_OBJX_NAME</name></cpp:macro> <cpp:value>"lv_tabview"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_TABVIEW_DEF_ANIM_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_TABVIEW_DEF_ANIM_TIME</name></cpp:macro> <cpp:value>300</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LV_TABVIEW_DEF_ANIM_TIME</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_TABVIEW_DEF_ANIM_TIME</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_tabview_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>tabpage_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tab_page</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>tabpage_scrl_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tab_scrl</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>tabpage_pressed_handler</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabpage</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>tabpage_pressing_handler</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabpage</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>tabpage_press_lost_handler</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabpage</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>tab_btnm_event_cb</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tab_btnm</name></decl></parameter>, <parameter><decl><type><name>lv_event_t</name></type> <name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>tabview_realign</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>ancestor_signal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>page_signal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>page_scrl_signal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>tab_def</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_tabview_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"tab view create started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>new_tabview</name> <init>= <expr><call><name>lv_obj_create</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_tabview</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>new_tabview</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ancestor_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><name>new_tabview</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_tabview_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_allocate_ext_attr</name><argument_list>(<argument><expr><name>new_tabview</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_tabview_ext_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>drag_hor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>draging</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>scroll_ver</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>slide_enable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>point_last</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>point_last</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btns_pos</name></name> <operator>=</operator> <name>LV_TABVIEW_BTNS_POS_TOP</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>anim_time</name></name> <operator>=</operator> <name>LV_TABVIEW_DEF_ANIM_TIME</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btns_hide</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><name>new_tabview</name></expr></argument>, <argument><expr><name>lv_tabview_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name></name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>par</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>lv_obj_get_width_fit</name><argument_list>(<argument><expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>new_tabview</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>lv_obj_get_height_fit</name><argument_list>(<argument><expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>new_tabview</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>lv_disp_get_hor_res</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>lv_disp_get_ver_res</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lv_obj_set_size</name><argument_list>(<argument><expr><name>new_tabview</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name> <operator>=</operator> <call><name>lv_cont_create</name><argument_list>(<argument><expr><name>new_tabview</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name> <operator>=</operator> <call><name>lv_btnm_create</name><argument_list>(<argument><expr><name>new_tabview</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name> <operator>=</operator> <call><name>lv_obj_create</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>LV_DPI</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btnm_set_map</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>tab_def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_event_cb</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>tab_btnm_event_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name>LV_DPI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_BOTTOM_LEFT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_click</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_cont_set_fit2</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>LV_FIT_TIGHT</name></expr></argument>, <argument><expr><name>LV_FIT_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_cont_set_layout</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>LV_LAYOUT_ROW_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_cont_set_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>LV_CONT_STYLE_MAIN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_transp_tight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>new_tabview</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>LV_ALIGN_OUT_BOTTOM_LEFT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>th</name> <init>= <expr><call><name>lv_theme_get_current</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>th</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_tabview_set_style</name><argument_list>(<argument><expr><name>new_tabview</name></expr></argument>, <argument><expr><name>LV_TABVIEW_STYLE_BG</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>tabview</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_tabview_set_style</name><argument_list>(<argument><expr><name>new_tabview</name></expr></argument>, <argument><expr><name>LV_TABVIEW_STYLE_INDIC</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>tabview</name><operator>.</operator><name>indic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_tabview_set_style</name><argument_list>(<argument><expr><name>new_tabview</name></expr></argument>, <argument><expr><name>LV_TABVIEW_STYLE_BTN_BG</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>tabview</name><operator>.</operator><name>btn</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_tabview_set_style</name><argument_list>(<argument><expr><name>new_tabview</name></expr></argument>, <argument><expr><name>LV_TABVIEW_STYLE_BTN_REL</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>tabview</name><operator>.</operator><name>btn</name><operator>.</operator><name>rel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_tabview_set_style</name><argument_list>(<argument><expr><name>new_tabview</name></expr></argument>, <argument><expr><name>LV_TABVIEW_STYLE_BTN_PR</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>tabview</name><operator>.</operator><name>btn</name><operator>.</operator><name>pr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_tabview_set_style</name><argument_list>(<argument><expr><name>new_tabview</name></expr></argument>, <argument><expr><name>LV_TABVIEW_STYLE_BTN_TGL_REL</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>tabview</name><operator>.</operator><name>btn</name><operator>.</operator><name>tgl_rel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_tabview_set_style</name><argument_list>(<argument><expr><name>new_tabview</name></expr></argument>, <argument><expr><name>LV_TABVIEW_STYLE_BTN_TGL_PR</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>tabview</name><operator>.</operator><name>btn</name><operator>.</operator><name>tgl_pr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_tabview_set_style</name><argument_list>(<argument><expr><name>new_tabview</name></expr></argument>, <argument><expr><name>LV_TABVIEW_STYLE_BG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_tabview_set_style</name><argument_list>(<argument><expr><name>new_tabview</name></expr></argument>, <argument><expr><name>LV_TABVIEW_STYLE_BTN_BG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_tabview_set_style</name><argument_list>(<argument><expr><name>new_tabview</name></expr></argument>, <argument><expr><name>LV_TABVIEW_STYLE_INDIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_plain_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_tabview_ext_t</name> <modifier>*</modifier></type> <name>copy_ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>point_last</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>point_last</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name> <operator>=</operator> <call><name>lv_btnm_create</name><argument_list>(<argument><expr><name>new_tabview</name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name> <operator>=</operator> <call><name>lv_obj_create</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name> <operator>=</operator> <call><name>lv_cont_create</name><argument_list>(<argument><expr><name>new_tabview</name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>anim_time</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>anim_time</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name></name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btnm_set_map</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>new_tab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy_tab</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>tab_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>new_tab</name> <operator>=</operator> <call><name>lv_tabview_add_tab</name><argument_list>(<argument><expr><name>new_tabview</name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>tab_name_ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>copy_tab</name> <operator>=</operator> <call><name>lv_tabview_get_tab</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_page_set_style</name><argument_list>(<argument><expr><name>new_tab</name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_BG</name></expr></argument>, <argument><expr><call><name>lv_page_get_style</name><argument_list>(<argument><expr><name>copy_tab</name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_BG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_page_set_style</name><argument_list>(<argument><expr><name>new_tab</name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_SCRL</name></expr></argument>, <argument><expr><call><name>lv_page_get_style</name><argument_list>(<argument><expr><name>copy_tab</name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_SCRL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_page_set_style</name><argument_list>(<argument><expr><name>new_tab</name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_SB</name></expr></argument>, <argument><expr><call><name>lv_page_get_style</name><argument_list>(<argument><expr><name>copy_tab</name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_SB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>lv_obj_refresh_style</name><argument_list>(<argument><expr><name>new_tabview</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"tab view created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_tabview</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_tabview_clean</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>scrl</name> <init>= <expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_clean</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_tabview_add_tab</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_STR</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_tabview_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>h</name> <init>= <expr><call><name>lv_page_create</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_set_size</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_page_set_sb_mode</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>LV_SB_MODE_AUTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_page_set_style</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_BG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_transp_tight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_page_set_style</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_SCRL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_transp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>page_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>page_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>page_scrl_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>page_scrl_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>tabpage_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tabpage_scrl_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>name_dm</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name_dm</name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>name_dm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>name_dm</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>name_dm</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name><operator>++</operator></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btns_pos</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_TOP</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name></name> <operator>=</operator> <call><name>lv_mem_realloc</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_LEFT</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_RIGHT</name></expr>:</case>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name></name> <operator>=</operator> <call><name>lv_mem_realloc</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btns_pos</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_TOP</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>name_dm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name></expr>]</index></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_LEFT</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_RIGHT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>name_dm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>name_dm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>lv_btnm_ext_t</name> <modifier>*</modifier></type> <name>btnm_ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>btnm_ext</name><operator>-&gt;</operator><name>map_p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btnm_set_map</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btnm_set_btn_ctrl</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cur</name></name></expr></argument>, <argument><expr><name>LV_BTNM_CTRL_NO_REPEAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_tabs</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>indic_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>max_h</name></decl>, <decl><type ref="prev"/><name>btn_h</name></decl>, <decl><type ref="prev"/><name>act_y</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btns_pos</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_TOP</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name>indic_size</name> <operator>=</operator> <operator>(</operator><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>style_tabs</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name> <operator>*</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator>

<name><name>style_tabs</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name> <operator>-</operator> <name><name>style_tabs</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name><operator>)</operator> <operator>/</operator>

<name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name>indic_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_x</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name>indic_size</name> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>tab_cur</name></name> <operator>+</operator> <name><name>style_tabs</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>tab_cur</name></name> <operator>+</operator>

<name><name>style_tabs</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_LEFT</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_RIGHT</name></expr>:</case>

<expr_stmt><expr><name>max_h</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>style_tabs</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>style_tabs</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>btn_h</name> <operator>=</operator> <name>max_h</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>style_tabs</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>btn_h</name> <operator>=</operator> <name>btn_h</name> <operator>/</operator> <name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>btn_h</name><operator>--</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>act_y</name> <operator>=</operator> <name><name>style_tabs</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name><name>ext</name><operator>-&gt;</operator><name>tab_cur</name></name> <operator>*</operator> <operator>(</operator><name>btn_h</name> <operator>+</operator> <name><name>style_tabs</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name>btn_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_y</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name>act_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tabview_realign</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>lv_tabview_set_tab_act</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cur</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>h</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_tabview_set_tab_act</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>lv_anim_enable_t</name></type> <name>anim</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name>anim</name> <operator>=</operator> <name>LV_ANIM_OFF</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_tabview_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>id</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_btnm_clear_btn_ctrl</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cur</name></name></expr></argument>, <argument><expr><name>LV_BTNM_CTRL_TGL_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cur</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LV_BIDI_DIR_RTL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name> <operator>-</operator> <operator>(</operator><name>id</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>cont_x</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btns_pos</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_TOP</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name>cont_x</name> <operator>=</operator> <operator>-</operator><operator>(</operator><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>id</name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name> <operator>*</operator> <name>id</name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_LEFT</name></expr>:</case>

<expr_stmt><expr><name>cont_x</name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name>id</name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name> <operator>*</operator> <name>id</name> <operator>+</operator>

<name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name><operator>)</operator> <operator>+</operator>

<call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_RIGHT</name></expr>:</case>

<expr_stmt><expr><name>cont_x</name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name>id</name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name> <operator>*</operator> <name>id</name> <operator>+</operator>

<name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>anim</name> <operator>==</operator> <name>LV_ANIM_OFF</name> <operator>||</operator> <call><name>lv_tabview_get_anim_time</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_set_x</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>cont_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_anim_t</name></type> <name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>var</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>start</name></name> <operator>=</operator> <call><name>lv_obj_get_x</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>cont_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>exec_cb</name></name> <operator>=</operator> <operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_obj_set_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>path_cb</name></name> <operator>=</operator> <name>lv_anim_path_linear</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>ready_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>act_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>anim_time</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_anim_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>tabs_style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>indic_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>indic_pos</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btns_pos</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_TOP</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name>indic_size</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>indic_pos</name> <operator>=</operator> <name>indic_size</name> <operator>*</operator> <name>id</name> <operator>+</operator> <name><name>tabs_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name> <operator>*</operator> <name>id</name> <operator>+</operator> <name><name>tabs_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_LEFT</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_RIGHT</name></expr>:</case>

<expr_stmt><expr><name>indic_size</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_tabs</name> <init>= <expr><call><name>lv_tabview_get_style</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>LV_TABVIEW_STYLE_BTN_BG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>max_h</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>style_tabs</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>style_tabs</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>indic_pos</name> <operator>=</operator> <operator>(</operator><name>max_h</name> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>tab_cur</name></name><operator>)</operator> <operator>/</operator> <name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>indic_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>anim</name> <operator>==</operator> <name>LV_ANIM_OFF</name> <operator>||</operator> <name><name>ext</name><operator>-&gt;</operator><name>anim_time</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btns_pos</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_TOP</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_BOTTOM</name></expr>:</case> <expr_stmt><expr><call><name>lv_obj_set_x</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name>indic_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_LEFT</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_RIGHT</name></expr>:</case> <expr_stmt><expr><call><name>lv_obj_set_y</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name>indic_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_anim_t</name></type> <name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>var</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btns_pos</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_TOP</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>start</name></name> <operator>=</operator> <call><name>lv_obj_get_x</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>indic_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>exec_cb</name></name> <operator>=</operator> <operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_obj_set_x</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_LEFT</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_RIGHT</name></expr>:</case>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>start</name></name> <operator>=</operator> <call><name>lv_obj_get_y</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>indic_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>exec_cb</name></name> <operator>=</operator> <operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_obj_set_y</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>path_cb</name></name> <operator>=</operator> <name>lv_anim_path_linear</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>ready_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>act_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>anim_time</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_anim_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>lv_btnm_set_btn_ctrl</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cur</name></name></expr></argument>, <argument><expr><name>LV_BTNM_CTRL_TGL_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_tabview_set_sliding</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_tabview_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>slide_enable</name></name> <operator>=</operator> <ternary><condition><expr><name>en</name> <operator>==</operator> <name>false</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_tabview_set_anim_time</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>anim_time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_tabview_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>anim_time</name></name> <operator>=</operator> <name>anim_time</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>tabview</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>anim_time</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_tabview_set_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>, <parameter><decl><type><name>lv_tabview_style_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_tabview_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_TABVIEW_STYLE_BG</name></expr>:</case> <expr_stmt><expr><call><name>lv_obj_set_style</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_TABVIEW_STYLE_BTN_BG</name></expr>:</case>

<expr_stmt><expr><call><name>lv_btnm_set_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BG</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tabview_realign</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_TABVIEW_STYLE_BTN_REL</name></expr>:</case>

<expr_stmt><expr><call><name>lv_btnm_set_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_REL</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tabview_realign</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_TABVIEW_STYLE_BTN_PR</name></expr>:</case> <expr_stmt><expr><call><name>lv_btnm_set_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_PR</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_TABVIEW_STYLE_BTN_TGL_REL</name></expr>:</case> <expr_stmt><expr><call><name>lv_btnm_set_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_TGL_REL</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_TABVIEW_STYLE_BTN_TGL_PR</name></expr>:</case> <expr_stmt><expr><call><name>lv_btnm_set_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_TGL_PR</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_TABVIEW_STYLE_INDIC</name></expr>:</case>

<expr_stmt><expr><call><name>lv_obj_set_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btns_pos</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_TOP</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_BOTTOM</name></expr>:</case> <expr_stmt><expr><call><name>lv_obj_set_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_LEFT</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_RIGHT</name></expr>:</case> <expr_stmt><expr><call><name>lv_obj_set_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>tabview_realign</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_tabview_set_btns_pos</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>, <parameter><decl><type><name>lv_tabview_btns_pos_t</name></type> <name>btns_pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_tabview_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btns_pos</name></name> <operator>=</operator> <name>btns_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tabview_realign</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_tabview_set_btns_hidden</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_tabview_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btns_hide</name></name> <operator>=</operator> <name>en</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tabview_realign</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>lv_tabview_get_tab_act</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_tabview_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cur</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>lv_tabview_get_tab_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_tabview_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_tabview_get_tab</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_tabview_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>page</name> <init>= <expr><call><name>lv_obj_get_child_back</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>page</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>id</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>page</name> <operator>=</operator> <call><name>lv_obj_get_child_back</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>page</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_tabview_get_sliding</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_tabview_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name><name>ext</name><operator>-&gt;</operator><name>slide_enable</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>lv_tabview_get_anim_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_tabview_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>anim_time</name></name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>tabview</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>lv_tabview_get_style</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>, <parameter><decl><type><name>lv_tabview_style_t</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_tabview_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_TABVIEW_STYLE_BG</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_TABVIEW_STYLE_BTN_BG</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_btnm_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_TABVIEW_STYLE_BTN_REL</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_btnm_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_TABVIEW_STYLE_BTN_PR</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_btnm_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_PR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_TABVIEW_STYLE_BTN_TGL_REL</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_btnm_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_TGL_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_TABVIEW_STYLE_BTN_TGL_PR</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_btnm_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>LV_BTNM_STYLE_BTN_TGL_PR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>style</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>style</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_tabview_btns_pos_t</name></type> <name>lv_tabview_get_btns_pos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_tabview_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>btns_pos</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_tabview_get_btns_hidden</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_tabview_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>btns_hide</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_tabview_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ancestor_signal</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_obj_handle_get_type_signal</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_tabview_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CLEANUP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_name_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CORD_CHG</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>lv_area_get_height</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tabview_realign</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_RELEASED</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name> <init>= <expr><call><name>lv_indev_get_act</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_indev_type_t</name></type> <name>indev_type</name> <init>= <expr><call><name>lv_indev_get_type</name><argument_list>(<argument><expr><name>indev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>indev_type</name> <operator>==</operator> <name>LV_INDEV_TYPE_KEYPAD</name> <operator>||</operator>

<operator>(</operator><name>indev_type</name> <operator>==</operator> <name>LV_INDEV_TYPE_ENCODER</name> <operator>&amp;&amp;</operator> <call><name>lv_group_get_editing</name><argument_list>(<argument><expr><call><name>lv_obj_get_group</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>LV_EVENT_CLICKED</name></expr></argument>, <argument><expr><call><name>lv_event_get_data</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_FOCUS</name> <operator>||</operator> <name>sign</name> <operator>==</operator> <name>LV_SIGNAL_DEFOCUS</name> <operator>||</operator> <name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CONTROL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>ext</name><operator>-&gt;</operator><name>btns</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_FOCUS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_indev_type_t</name></type> <name>indev_type</name> <init>= <expr><call><name>lv_indev_get_type</name><argument_list>(<argument><expr><call><name>lv_indev_get_act</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>indev_type</name> <operator>==</operator> <name>LV_INDEV_TYPE_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>indev_type</name> <operator>=</operator> <call><name>lv_indev_get_type</name><argument_list>(<argument><expr><call><name>lv_indev_get_next</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>indev_type</name> <operator>==</operator> <name>LV_INDEV_TYPE_ENCODER</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>g</name> <init>= <expr><call><name>lv_obj_get_group</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_group_get_editing</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_btnm_set_pressed</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_btnm_set_pressed</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_EDITABLE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type> <name>editable</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>editable</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>tabpage_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tab_page</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>page_signal</name><argument_list>(<argument><expr><name>tab_page</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_obj_handle_get_type_signal</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>tab_page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_tabview_get_sliding</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESSED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tabpage_pressed_handler</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>tab_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESSING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tabpage_pressing_handler</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>tab_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_RELEASED</name> <operator>||</operator> <name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESS_LOST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tabpage_press_lost_handler</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>tab_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>tabpage_scrl_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tab_scrl</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>page_scrl_signal</name><argument_list>(<argument><expr><name>tab_scrl</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_obj_handle_get_type_signal</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tab_page</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>tab_scrl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>tab_page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_tabview_get_sliding</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESSED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tabpage_pressed_handler</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>tab_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESSING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tabpage_pressing_handler</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>tab_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_RELEASED</name> <operator>||</operator> <name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESS_LOST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tabpage_press_lost_handler</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>tab_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tabpage_pressed_handler</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabpage</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>tabpage</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_tabview_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name> <init>= <expr><call><name>lv_indev_get_act</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_indev_get_point</name><argument_list>(<argument><expr><name>indev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>point_last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tabpage_pressing_handler</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabpage</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_tabview_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name> <init>= <expr><call><name>lv_indev_get_act</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>point_act</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_indev_get_point</name><argument_list>(<argument><expr><name>indev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x_diff</name> <init>= <expr><name><name>point_act</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_last</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y_diff</name> <init>= <expr><name><name>point_act</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_last</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ext</name><operator>-&gt;</operator><name>scroll_ver</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>x_diff</name> <operator>&gt;=</operator> <name>LV_INDEV_DEF_DRAG_LIMIT</name> <operator>||</operator> <name>x_diff</name> <operator>&lt;=</operator> <operator>-</operator><name>LV_INDEV_DEF_DRAG_LIMIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>draging</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>lv_page_on_edge</name><argument_list>(<argument><expr><name>tabpage</name></expr></argument>, <argument><expr><name>LV_PAGE_EDGE_LEFT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>x_diff</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>lv_page_on_edge</name><argument_list>(<argument><expr><name>tabpage</name></expr></argument>, <argument><expr><name>LV_PAGE_EDGE_RIGHT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>x_diff</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>drag_hor</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>point_last</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>point_act</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>point_last</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>point_act</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>drag_hor</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_drag</name><argument_list>(<argument><expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>tabpage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>drag_hor</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>drag_hor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>y_diff</name> <operator>&gt;=</operator> <name>LV_INDEV_DEF_DRAG_LIMIT</name> <operator>||</operator> <name>y_diff</name> <operator>&lt;=</operator> <operator>-</operator><name>LV_INDEV_DEF_DRAG_LIMIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>drag_hor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>draging</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>scroll_ver</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>draging</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>drag_hor</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_set_x</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><call><name>lv_obj_get_x</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>point_act</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_last</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>point_last</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>point_act</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>point_last</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>point_act</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>tabs_style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>indic_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>indic_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>indic_style</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btns_pos</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_TOP</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name>indic_size</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>indic_style</name> <operator>=</operator> <call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>tabpage</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>-</operator> <name><name>tabview</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>indic_size</name> <operator>+</operator> <name><name>tabs_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name><operator>)</operator><operator>)</operator> <operator>/</operator>

<call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>id</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cur</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LV_BIDI_DIR_RTL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name> <operator>-</operator> <operator>(</operator><name>id</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_set_x</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name>indic_size</name> <operator>*</operator> <name>id</name> <operator>+</operator> <name><name>tabs_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name> <operator>*</operator> <name>id</name> <operator>+</operator>

<name><name>indic_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_LEFT</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_RIGHT</name></expr>:</case>

<expr_stmt><expr><name>indic_size</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>indic_y</name> <operator>=</operator> <name><name>tabs_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name><name>ext</name><operator>-&gt;</operator><name>tab_cur</name></name> <operator>*</operator> <operator>(</operator><name>indic_size</name> <operator>+</operator> <name><name>tabs_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_y</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name>indic_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tabpage_press_lost_handler</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabpage</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_tabview_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>drag_hor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>draging</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>scroll_ver</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_drag</name><argument_list>(<argument><expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>tabpage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name> <init>= <expr><call><name>lv_indev_get_act</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>point_act</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_indev_get_point</name><argument_list>(<argument><expr><name>indev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>vect</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_indev_get_vect</name><argument_list>(<argument><expr><name>indev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x_predict</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>vect</name><operator>.</operator><name>x</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x_predict</name> <operator>+=</operator> <name><name>vect</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vect</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>vect</name><operator>.</operator><name>x</name></name> <operator>*</operator> <operator>(</operator><literal type="number">100</literal> <operator>-</operator> <name>LV_INDEV_DEF_DRAG_THROW</name><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>page_x1</name> <init>= <expr><name><name>tabpage</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>-</operator> <name><name>tabview</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name>x_predict</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>page_x2</name> <init>= <expr><name>page_x1</name> <operator>+</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>tabpage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>treshold</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>tab_cur</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cur</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>page_x1</name> <operator>&gt;</operator> <name>treshold</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LV_BIDI_DIR_RTL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tab_cur</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>tab_cur</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>page_x2</name> <operator>&lt;</operator> <name>treshold</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LV_BIDI_DIR_RTL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tab_cur</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>tab_cur</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>tab_cur</name> <operator>&gt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tab_cur</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>tab_cur</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tab_cur</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>id_prev</name> <init>= <expr><call><name>lv_tabview_get_tab_act</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_tabview_set_tab_act</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>tab_cur</name></expr></argument>, <argument><expr><name>LV_ANIM_ON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>id_new</name> <init>= <expr><call><name>lv_tabview_get_tab_act</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name> <init>= <expr><name>LV_RES_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>id_prev</name> <operator>!=</operator> <name>id_new</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_event_send</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>LV_EVENT_VALUE_CHANGED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tab_btnm_event_cb</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tab_btnm</name></decl></parameter>, <parameter><decl><type><name>lv_event_t</name></type> <name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>event</name> <operator>!=</operator> <name>LV_EVENT_CLICKED</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>btn_id</name> <init>= <expr><call><name>lv_btnm_get_active_btn</name><argument_list>(<argument><expr><name>tab_btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>btn_id</name> <operator>==</operator> <name>LV_BTNM_BTN_NONE</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_btnm_clear_btn_ctrl_all</name><argument_list>(<argument><expr><name>tab_btnm</name></expr></argument>, <argument><expr><name>LV_BTNM_CTRL_TGL_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btnm_set_btn_ctrl</name><argument_list>(<argument><expr><name>tab_btnm</name></expr></argument>, <argument><expr><name>btn_id</name></expr></argument>, <argument><expr><name>LV_BTNM_CTRL_TGL_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>tab_btnm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>id_prev</name> <init>= <expr><call><name>lv_tabview_get_tab_act</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_tabview_set_tab_act</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>btn_id</name></expr></argument>, <argument><expr><name>LV_ANIM_ON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>id_new</name> <init>= <expr><call><name>lv_tabview_get_tab_act</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name> <init>= <expr><name>LV_RES_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>id_prev</name> <operator>!=</operator> <name>id_new</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_event_send</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>LV_EVENT_VALUE_CHANGED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tabview_realign</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tabview</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_tabview_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_set_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btns_hide</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_set_hidden</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_hidden</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_TOP_LEFT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_set_hidden</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_hidden</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_btn_bg</name> <init>= <expr><call><name>lv_tabview_get_style</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>LV_TABVIEW_STYLE_BTN_BG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_btn_rel</name> <init>= <expr><call><name>lv_tabview_get_style</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>LV_TABVIEW_STYLE_BTN_REL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>indic_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>max_h</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btns_pos</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_TOP</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name>indic_size</name> <operator>=</operator> <operator>(</operator><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>style_btn_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name> <operator>*</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator>

<name><name>style_btn_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name> <operator>-</operator> <name><name>style_btn_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name><operator>)</operator> <operator>/</operator>

<name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name>indic_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_LEFT</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_RIGHT</name></expr>:</case>

<expr_stmt><expr><call><name>lv_obj_set_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_h</name> <operator>=</operator>

<call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>style_btn_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>style_btn_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>indic_size</name> <operator>=</operator> <name>max_h</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>style_btn_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>indic_size</name> <operator>=</operator> <name>indic_size</name> <operator>/</operator> <name><name>ext</name><operator>-&gt;</operator><name>tab_cnt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>indic_size</name><operator>--</operator></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>lv_obj_set_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name>indic_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>btns_size</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btns_pos</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_TOP</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name>btns_size</name> <operator>=</operator> <call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name><name>style_btn_rel</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>style_btn_rel</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name> <operator>+</operator>

<name><name>style_btn_rel</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name> <operator>+</operator> <name><name>style_btn_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name> <operator>+</operator>

<name><name>style_btn_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>btns_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_LEFT</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_RIGHT</name></expr>:</case>

<expr_stmt><expr><name>btns_size</name> <operator>=</operator> <call><name>lv_font_get_glyph_width</name><argument_list>(<argument><expr><name><name>style_btn_rel</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call> <operator>+</operator>

<name><name>style_btn_rel</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name> <operator>+</operator> <name><name>style_btn_rel</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name> <operator>+</operator>

<name><name>style_btn_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name> <operator>+</operator> <name><name>style_btn_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>btns_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btns_pos</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_TOP</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_BOTTOM</name></expr>:</case>

<expr_stmt><expr><call><name>lv_obj_set_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_LEFT</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_RIGHT</name></expr>:</case> <expr_stmt><expr><call><name>lv_obj_set_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btns_pos</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_TOP</name></expr>:</case>

<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_TOP_LEFT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>LV_ALIGN_OUT_BOTTOM_LEFT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_BOTTOM_LEFT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_cont_set_fit2</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>LV_FIT_TIGHT</name></expr></argument>, <argument><expr><name>LV_FIT_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_cont_set_layout</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>LV_LAYOUT_ROW_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_BOTTOM</name></expr>:</case>

<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_TOP_LEFT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>LV_ALIGN_OUT_BOTTOM_LEFT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_TOP_LEFT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_cont_set_fit2</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>LV_FIT_TIGHT</name></expr></argument>, <argument><expr><name>LV_FIT_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_cont_set_layout</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>LV_LAYOUT_ROW_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_LEFT</name></expr>:</case>

<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_TOP_LEFT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_TOP_LEFT</name></expr></argument>, <argument><expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_TOP_RIGHT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_cont_set_fit2</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>LV_FIT_TIGHT</name></expr></argument>, <argument><expr><name>LV_FIT_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_cont_set_layout</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>LV_LAYOUT_ROW_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name><name>style_btn_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_RIGHT</name></expr>:</case>

<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_TOP_RIGHT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>tabview</name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_TOP_LEFT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_TOP_LEFT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_cont_set_fit2</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>LV_FIT_TIGHT</name></expr></argument>, <argument><expr><name>LV_FIT_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_cont_set_layout</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>LV_LAYOUT_ROW_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name><name>style_btn_bg</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>pages</name> <init>= <expr><call><name>lv_obj_get_child</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>pages</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><name>pages</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>tabpage_signal</name></expr>)</condition> <block>{<block_content> 

<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btns_pos</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_TOP</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_BOTTOM</name></expr>:</case>

<expr_stmt><expr><call><name>lv_obj_set_size</name><argument_list>(<argument><expr><name>pages</name></expr></argument>, <argument><expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_LEFT</name></expr>:</case>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_RIGHT</name></expr>:</case>

<expr_stmt><expr><call><name>lv_obj_set_size</name><argument_list>(<argument><expr><name>pages</name></expr></argument>, <argument><expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pages</name> <operator>=</operator> <call><name>lv_obj_get_child</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ext</name><operator>-&gt;</operator><name>btns_hide</name></name></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btns_pos</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_TOP</name></expr>:</case> <expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_BOTTOM_LEFT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_BOTTOM</name></expr>:</case> <expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_TOP_LEFT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_LEFT</name></expr>:</case> <expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_TOP_RIGHT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_TABVIEW_BTNS_POS_RIGHT</name></expr>:</case> <expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btns</name></name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_TOP_LEFT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_tabview_set_tab_act</name><argument_list>(<argument><expr><name>tabview</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>tab_cur</name></name></expr></argument>, <argument><expr><name>LV_ANIM_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
