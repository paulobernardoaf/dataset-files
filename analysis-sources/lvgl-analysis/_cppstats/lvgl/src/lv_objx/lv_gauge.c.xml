<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_objx\lv_gauge.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_gauge.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GAUGE</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_draw/lv_draw.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_themes/lv_theme.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_txt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_math.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_OBJX_NAME</name></cpp:macro> <cpp:value>"lv_gauge"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_GAUGE_DEF_NEEDLE_COLOR</name></cpp:macro> <cpp:value>LV_COLOR_RED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_GAUGE_DEF_LABEL_COUNT</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_GAUGE_DEF_LINE_COUNT</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_GAUGE_DEF_ANGLE</name></cpp:macro> <cpp:value>220</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_GAUGE_INTERPOLATE_SHIFT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_GAUGE_INTERPOLATE_MASK</name></cpp:macro> <cpp:value>0x1F</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lv_gauge_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>gauge</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_gauge_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>gauge</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_gauge_draw_scale</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>gauge</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_gauge_draw_needle</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>gauge</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_design_cb_t</name></type> <name>ancestor_design</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>ancestor_signal</name></decl>;</decl_stmt>

<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_gauge_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"gauge create started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>new_gauge</name> <init>= <expr><call><name>lv_lmeter_create</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_gauge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>new_gauge</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_gauge_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_allocate_ext_attr</name><argument_list>(<argument><expr><name>new_gauge</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_gauge_ext_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>needle_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>needle_colors</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>label_count</name></name> <operator>=</operator> <name>LV_GAUGE_DEF_LABEL_COUNT</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ancestor_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><name>new_gauge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ancestor_design</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_design</name> <operator>=</operator> <call><name>lv_obj_get_design_cb</name><argument_list>(<argument><expr><name>new_gauge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><name>new_gauge</name></expr></argument>, <argument><expr><name>lv_gauge_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_design_cb</name><argument_list>(<argument><expr><name>new_gauge</name></expr></argument>, <argument><expr><name>lv_gauge_design</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_gauge_set_scale</name><argument_list>(<argument><expr><name>new_gauge</name></expr></argument>, <argument><expr><name>LV_GAUGE_DEF_ANGLE</name></expr></argument>, <argument><expr><name>LV_GAUGE_DEF_LINE_COUNT</name></expr></argument>, <argument><expr><name>LV_GAUGE_DEF_LABEL_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_gauge_set_needle_count</name><argument_list>(<argument><expr><name>new_gauge</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_gauge_set_critical_value</name><argument_list>(<argument><expr><name>new_gauge</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_size</name><argument_list>(<argument><expr><name>new_gauge</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>LV_DPI</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>LV_DPI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>th</name> <init>= <expr><call><name>lv_theme_get_current</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>th</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_gauge_set_style</name><argument_list>(<argument><expr><name>new_gauge</name></expr></argument>, <argument><expr><name>LV_GAUGE_STYLE_MAIN</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>gauge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_gauge_set_style</name><argument_list>(<argument><expr><name>new_gauge</name></expr></argument>, <argument><expr><name>LV_GAUGE_STYLE_MAIN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_pretty_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_gauge_ext_t</name> <modifier>*</modifier></type> <name>copy_ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_gauge_set_needle_count</name><argument_list>(<argument><expr><name>new_gauge</name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>needle_count</name></name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>needle_colors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>needle_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>label_count</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>label_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_refresh_style</name><argument_list>(<argument><expr><name>new_gauge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"gauge created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_gauge</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_gauge_set_needle_count</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>gauge</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>needle_cnt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_color_t</name></type> <name><name>colors</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_gauge_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>needle_count</name></name> <operator>!=</operator> <name>needle_cnt</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>values</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <call><name>lv_mem_realloc</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name>needle_cnt</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>values</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>min</name> <init>= <expr><call><name>lv_gauge_get_min_value</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>n</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>n</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>needle_count</name></name></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>needle_cnt</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>needle_count</name></name> <operator>=</operator> <name>needle_cnt</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>needle_colors</name></name> <operator>=</operator> <name>colors</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_gauge_set_value</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>gauge</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>needle_id</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_gauge_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>needle_id</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>needle_count</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>needle_id</name></expr>]</index></name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>min</name> <init>= <expr><call><name>lv_gauge_get_min_value</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>max</name> <init>= <expr><call><name>lv_gauge_get_max_value</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>value</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>value</name> <operator>&lt;</operator> <name>min</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>min</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>needle_id</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_gauge_set_scale</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>gauge</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>angle</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>line_cnt</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>label_cnt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_lmeter_set_scale</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>, <argument><expr><name>line_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_gauge_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>label_count</name></name> <operator>=</operator> <name>label_cnt</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int16_t</name></type> <name>lv_gauge_get_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>gauge</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>needle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_gauge_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>min</name> <init>= <expr><call><name>lv_gauge_get_min_value</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>needle</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>needle_count</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>min</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>needle</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint8_t</name></type> <name>lv_gauge_get_needle_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>gauge</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_gauge_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>needle_count</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint8_t</name></type> <name>lv_gauge_get_label_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>gauge</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_gauge_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>label_count</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>lv_gauge_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>gauge</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_COVER_CHK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_DRAW_MAIN</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_ori_p</name> <init>= <expr><name><name>gauge</name><operator>-&gt;</operator><name>style_p</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_gauge_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_gauge_draw_scale</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>line_cnt_tmp</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>lmeter</name><operator>.</operator><name>line_cnt</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ancestor_design</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>lv_style_t</name></type> <name>style_tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>style_tmp</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>lmeter</name><operator>.</operator><name>line_cnt</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>label_count</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>style_tmp</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>style_tmp</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>style_tmp</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>style_tmp</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>gauge</name><operator>-&gt;</operator><name>style_p</name></name> <operator>=</operator> <operator>&amp;</operator><name>style_tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ancestor_design</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>lmeter</name><operator>.</operator><name>line_cnt</name></name> <operator>=</operator> <name>line_cnt_tmp</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>gauge</name><operator>-&gt;</operator><name>style_p</name></name> <operator>=</operator> <name>style_ori_p</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>lv_gauge_draw_needle</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_DRAW_POST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ancestor_design</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_gauge_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>gauge</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ancestor_signal</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_obj_handle_get_type_signal</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_gauge_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CLEANUP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_gauge_draw_scale</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>gauge</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>scale_txt</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_gauge_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name> <init>= <expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>r</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name><operator>)</operator> <operator>-</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x_ofs</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>gauge</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y_ofs</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>gauge</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>scale_angle</name> <init>= <expr><call><name>lv_lmeter_get_scale_angle</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>label_num</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>label_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>angle_ofs</name> <init>= <expr><literal type="number">90</literal> <operator>+</operator> <operator>(</operator><literal type="number">360</literal> <operator>-</operator> <name>scale_angle</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>min</name> <init>= <expr><call><name>lv_gauge_get_min_value</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>max</name> <init>= <expr><call><name>lv_gauge_get_max_value</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>label_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>angle</name> <init>= <expr><operator>(</operator><name>i</name> <operator>*</operator> <name>scale_angle</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>label_num</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>angle_ofs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>lv_trigo_sin</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>r</name><operator>)</operator> <operator>/</operator> <name>LV_TRIGO_SIN_MAX</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>y_ofs</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>lv_trigo_sin</name><argument_list>(<argument><expr><name>angle</name> <operator>+</operator> <literal type="number">90</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>r</name><operator>)</operator> <operator>/</operator> <name>LV_TRIGO_SIN_MAX</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>x_ofs</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>scale_act</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>max</name> <operator>-</operator> <name>min</name><operator>)</operator> <operator>*</operator> <name>i</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>label_num</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>scale_act</name> <operator>+=</operator> <name>min</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_utils_num_to_str</name><argument_list>(<argument><expr><name>scale_act</name></expr></argument>, <argument><expr><name>scale_txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>label_cord</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>label_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_txt_get_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>label_size</name></expr></argument>, <argument><expr><name>scale_txt</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name></expr></argument>,

<argument><expr><name>LV_COORD_MAX</name></expr></argument>, <argument><expr><name>LV_TXT_FLAG_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>label_cord</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name>x</name> <operator>-</operator> <name><name>label_size</name><operator>.</operator><name>x</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>label_cord</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name>y</name> <operator>-</operator> <name><name>label_size</name><operator>.</operator><name>y</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>label_cord</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>label_cord</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name><name>label_size</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>label_cord</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>label_cord</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <name><name>label_size</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_label</name><argument_list>(<argument><expr><operator>&amp;</operator><name>label_cord</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>, <argument><expr><name>scale_txt</name></expr></argument>, <argument><expr><name>LV_TXT_FLAG_NONE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_gauge_draw_needle</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>gauge</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_style_t</name></type> <name>style_needle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_gauge_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_gauge_get_style</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>, <argument><expr><name>LV_GAUGE_STYLE_MAIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name> <init>= <expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>r</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x_ofs</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>gauge</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y_ofs</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>gauge</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>angle</name> <init>= <expr><call><name>lv_lmeter_get_scale_angle</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>angle_ofs</name> <init>= <expr><literal type="number">90</literal> <operator>+</operator> <operator>(</operator><literal type="number">360</literal> <operator>-</operator> <name>angle</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>min</name> <init>= <expr><call><name>lv_gauge_get_min_value</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>max</name> <init>= <expr><call><name>lv_gauge_get_max_value</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p_mid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p_end_low</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p_end_high</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>style_needle</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mid</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x_ofs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mid</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y_ofs</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>needle_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>needle_angle</name> <init>=

<expr><operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>min</name><operator>)</operator> <operator>*</operator> <name>angle</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>LV_GAUGE_INTERPOLATE_SHIFT</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>max</name> <operator>-</operator> <name>min</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>needle_angle_low</name> <init>= <expr><operator>(</operator><name>needle_angle</name> <operator>&gt;&gt;</operator> <name>LV_GAUGE_INTERPOLATE_SHIFT</name><operator>)</operator> <operator>+</operator> <name>angle_ofs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>needle_angle_high</name> <init>= <expr><name>needle_angle_low</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_end_low</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><call><name>lv_trigo_sin</name><argument_list>(<argument><expr><name>needle_angle_low</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>r</name><operator>)</operator> <operator>/</operator> <name>LV_TRIGO_SIN_MAX</name> <operator>+</operator> <name>y_ofs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_end_low</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><call><name>lv_trigo_sin</name><argument_list>(<argument><expr><name>needle_angle_low</name> <operator>+</operator> <literal type="number">90</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>r</name><operator>)</operator> <operator>/</operator> <name>LV_TRIGO_SIN_MAX</name> <operator>+</operator> <name>x_ofs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_end_high</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><call><name>lv_trigo_sin</name><argument_list>(<argument><expr><name>needle_angle_high</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>r</name><operator>)</operator> <operator>/</operator> <name>LV_TRIGO_SIN_MAX</name> <operator>+</operator> <name>y_ofs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_end_high</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><call><name>lv_trigo_sin</name><argument_list>(<argument><expr><name>needle_angle_high</name> <operator>+</operator> <literal type="number">90</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>r</name><operator>)</operator> <operator>/</operator> <name>LV_TRIGO_SIN_MAX</name> <operator>+</operator> <name>x_ofs</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>rem</name> <init>= <expr><name>needle_angle</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>LV_GAUGE_INTERPOLATE_SHIFT</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>x_mod</name> <init>= <expr><operator>(</operator><operator>(</operator><call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>p_end_high</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>p_end_low</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name>rem</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>LV_GAUGE_INTERPOLATE_SHIFT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>y_mod</name> <init>= <expr><operator>(</operator><operator>(</operator><call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>p_end_high</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>p_end_low</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name>rem</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>LV_GAUGE_INTERPOLATE_SHIFT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_end_high</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>p_end_low</name><operator>.</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x_mod</name> <operator>=</operator> <operator>-</operator><name>x_mod</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_end_high</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>p_end_low</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>y_mod</name> <operator>=</operator> <operator>-</operator><name>y_mod</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_end</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p_end_low</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>x_mod</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_end</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>p_end_low</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>y_mod</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>needle_colors</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>style_needle</name><operator>.</operator><name>line</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>LV_GAUGE_DEF_NEEDLE_COLOR</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>style_needle</name><operator>.</operator><name>line</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>needle_colors</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>lv_draw_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_mid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_end</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>style_needle</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>lv_style_t</name></type> <name>style_neddle_mid</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>style_neddle_mid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style_neddle_mid</name><operator>.</operator><name>body</name><operator>.</operator><name>main_color</name></name> <operator>=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style_neddle_mid</name><operator>.</operator><name>body</name><operator>.</operator><name>grad_color</name></name> <operator>=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style_neddle_mid</name><operator>.</operator><name>body</name><operator>.</operator><name>radius</name></name> <operator>=</operator> <name>LV_RADIUS_CIRCLE</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>nm_cord</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>nm_cord</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name>x_ofs</name> <operator>-</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>radius</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nm_cord</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name>y_ofs</name> <operator>-</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>radius</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nm_cord</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name>x_ofs</name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>radius</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nm_cord</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name>y_ofs</name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>radius</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nm_cord</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>style_neddle_mid</name></expr></argument>, <argument><expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
