<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_objx\lv_chart.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_chart.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_CHART</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_refr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_draw/lv_draw.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_themes/lv_theme.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_OBJX_NAME</name></cpp:macro> <cpp:value>"lv_chart"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_CHART_YMIN_DEF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_CHART_YMAX_DEF</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_CHART_HDIV_DEF</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_CHART_VDIV_DEF</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_CHART_PNUM_DEF</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_CHART_AXIS_TO_LABEL_DISTANCE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_CHART_AXIS_MAJOR_TICK_LEN_COE</name></cpp:macro> <cpp:value>1 / 15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_CHART_AXIS_MINOR_TICK_LEN_COE</name></cpp:macro> <cpp:value>2 / 3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_CHART_AXIS_PRIMARY_Y</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_CHART_AXIS_SECONDARY_Y</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_CHART_LABEL_ITERATOR_FORWARD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_CHART_LABEL_ITERATOR_REVERSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>list_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>current_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>items_left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>is_reverse_iter</name></decl>;</decl_stmt>

}</block></struct></type> <name>lv_chart_label_iterator_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lv_chart_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_chart_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_chart_draw_div</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_chart_draw_lines</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_chart_draw_points</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_chart_draw_cols</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_chart_draw_vertical_lines</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_chart_draw_areas</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_chart_draw_axes</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_chart_inv_lines</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_chart_inv_points</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_chart_inv_cols</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_chart_get_next_label</name><parameter_list>(<parameter><decl><type><name>lv_chart_label_iterator_t</name> <modifier>*</modifier></type> <name>iterator</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>lv_chart_is_tick_with_label</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>tick_num</name></decl></parameter>, <parameter><decl><type><name>lv_chart_axis_cfg_t</name> <modifier>*</modifier></type> <name>axis</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>lv_chart_label_iterator_t</name></type> <name>lv_chart_create_label_iter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>iterator_dir</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_design_cb_t</name></type> <name>ancestor_design_f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>ancestor_signal</name></decl>;</decl_stmt>

<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_chart_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"chart create started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>new_chart</name> <init>= <expr><call><name>lv_obj_create</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_chart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>new_chart</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_allocate_ext_attr</name><argument_list>(<argument><expr><name>new_chart</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_chart_ext_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_ll_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>series_ll</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_chart_series_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ymin</name></name> <operator>=</operator> <name>LV_CHART_YMIN_DEF</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ymax</name></name> <operator>=</operator> <name>LV_CHART_YMAX_DEF</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>hdiv_cnt</name></name> <operator>=</operator> <name>LV_CHART_HDIV_DEF</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>vdiv_cnt</name></name> <operator>=</operator> <name>LV_CHART_VDIV_DEF</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name> <operator>=</operator> <name>LV_CHART_PNUM_DEF</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>LV_CHART_TYPE_LINE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>update_mode</name></name> <operator>=</operator> <name>LV_CHART_UPDATE_MODE_SHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>opa</name></name> <operator>=</operator> <name>LV_OPA_COVER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>dark</name></name> <operator>=</operator> <name>LV_OPA_50</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>margin</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>x_axis</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>x_axis</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>y_axis</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>y_axis</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>secondary_y_axis</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>secondary_y_axis</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>x_axis</name><operator>.</operator><name>major_tick_len</name></name> <operator>=</operator> <name>LV_CHART_TICK_LENGTH_AUTO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>x_axis</name><operator>.</operator><name>minor_tick_len</name></name> <operator>=</operator> <name>LV_CHART_TICK_LENGTH_AUTO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>y_axis</name><operator>.</operator><name>major_tick_len</name></name> <operator>=</operator> <name>LV_CHART_TICK_LENGTH_AUTO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>y_axis</name><operator>.</operator><name>minor_tick_len</name></name> <operator>=</operator> <name>LV_CHART_TICK_LENGTH_AUTO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>secondary_y_axis</name><operator>.</operator><name>major_tick_len</name></name> <operator>=</operator> <name>LV_CHART_TICK_LENGTH_AUTO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>secondary_y_axis</name><operator>.</operator><name>minor_tick_len</name></name> <operator>=</operator> <name>LV_CHART_TICK_LENGTH_AUTO</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ancestor_design_f</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_design_f</name> <operator>=</operator> <call><name>lv_obj_get_design_cb</name><argument_list>(<argument><expr><name>new_chart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ancestor_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><name>new_chart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><name>new_chart</name></expr></argument>, <argument><expr><name>lv_chart_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_design_cb</name><argument_list>(<argument><expr><name>new_chart</name></expr></argument>, <argument><expr><name>lv_chart_design</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_set_size</name><argument_list>(<argument><expr><name>new_chart</name></expr></argument>, <argument><expr><name>LV_DPI</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>LV_DPI</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>th</name> <init>= <expr><call><name>lv_theme_get_current</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>th</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_chart_set_style</name><argument_list>(<argument><expr><name>new_chart</name></expr></argument>, <argument><expr><name>LV_CHART_STYLE_MAIN</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>chart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_chart_set_style</name><argument_list>(<argument><expr><name>new_chart</name></expr></argument>, <argument><expr><name>LV_CHART_STYLE_MAIN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext_copy</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>ext_copy</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ymin</name></name> <operator>=</operator> <name><name>ext_copy</name><operator>-&gt;</operator><name>ymin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ymax</name></name> <operator>=</operator> <name><name>ext_copy</name><operator>-&gt;</operator><name>ymax</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>hdiv_cnt</name></name> <operator>=</operator> <name><name>ext_copy</name><operator>-&gt;</operator><name>hdiv_cnt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>vdiv_cnt</name></name> <operator>=</operator> <name><name>ext_copy</name><operator>-&gt;</operator><name>vdiv_cnt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name> <operator>=</operator> <name><name>ext_copy</name><operator>-&gt;</operator><name>point_cnt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>opa</name></name> <operator>=</operator> <name><name>ext_copy</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>opa</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>margin</name></name> <operator>=</operator> <name><name>ext_copy</name><operator>-&gt;</operator><name>margin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>x_axis</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ext_copy</name><operator>-&gt;</operator><name>x_axis</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_chart_axis_cfg_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>y_axis</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ext_copy</name><operator>-&gt;</operator><name>y_axis</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_chart_axis_cfg_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>secondary_y_axis</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ext_copy</name><operator>-&gt;</operator><name>secondary_y_axis</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_chart_axis_cfg_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_refresh_style</name><argument_list>(<argument><expr><name>new_chart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"chart created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_chart</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_chart_series_t</name> <modifier>*</modifier></type> <name>lv_chart_add_series</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_chart_series_t</name> <modifier>*</modifier></type> <name>ser</name> <init>= <expr><call><name>lv_ll_ins_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>series_ll</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>ser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ser</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>def</name> <init>= <expr><name>LV_CHART_POINT_DEF</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ser</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ser</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ser</name><operator>-&gt;</operator><name>points</name></name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_coord_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>ser</name><operator>-&gt;</operator><name>points</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ser</name><operator>-&gt;</operator><name>points</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_ll_rem</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>series_ll</name></name></expr></argument>, <argument><expr><name>ser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name>ser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ser</name><operator>-&gt;</operator><name>start_point</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name> <modifier>*</modifier></type> <name>p_tmp</name> <init>= <expr><name><name>ser</name><operator>-&gt;</operator><name>points</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_tmp</name> <operator>=</operator> <name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_tmp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>num</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>ser</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_chart_clear_serie</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>lv_chart_series_t</name> <modifier>*</modifier></type> <name>serie</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>serie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>chart</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>serie</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>serie</name><operator>-&gt;</operator><name>points</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>LV_CHART_POINT_DEF</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>serie</name><operator>-&gt;</operator><name>start_point</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_chart_set_div_line_count</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>hdiv</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>vdiv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>hdiv_cnt</name></name> <operator>==</operator> <name>hdiv</name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>vdiv_cnt</name></name> <operator>==</operator> <name>vdiv</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>hdiv_cnt</name></name> <operator>=</operator> <name>hdiv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>vdiv_cnt</name></name> <operator>=</operator> <name>vdiv</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_chart_set_range</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>ymin</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>ymax</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>ymin</name></name> <operator>==</operator> <name>ymin</name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>ymax</name></name> <operator>==</operator> <name>ymax</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ymin</name></name> <operator>=</operator> <name>ymin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ymax</name></name> <operator>=</operator> <name>ymax</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_chart_refresh</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_chart_set_type</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>lv_chart_type_t</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_chart_refresh</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_chart_set_point_count</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>point_cnt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name> <operator>==</operator> <name>point_cnt</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_chart_series_t</name> <modifier>*</modifier></type> <name>ser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>point_cnt_old</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>def</name> <init>= <expr><name>LV_CHART_POINT_DEF</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>point_cnt</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>point_cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>LV_LL_READ_BACK</name><argument_list>(<argument>ext-&gt;series_ll</argument>, <argument>ser</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ser</name><operator>-&gt;</operator><name>start_point</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name> <modifier>*</modifier></type> <name>new_points</name> <init>= <expr><call><name>lv_mem_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_coord_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>point_cnt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_points</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>new_points</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>point_cnt</name> <operator>&gt;=</operator> <name>point_cnt_old</name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>point_cnt_old</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>new_points</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<name><name>ser</name><operator>-&gt;</operator><name>points</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <name><name>ser</name><operator>-&gt;</operator><name>start_point</name></name><operator>)</operator> <operator>%</operator> <name>point_cnt_old</name></expr>]</index></name></expr>;</expr_stmt> 

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>point_cnt_old</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>point_cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>new_points</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>def</name></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>point_cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>new_points</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<name><name>ser</name><operator>-&gt;</operator><name>points</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <name><name>ser</name><operator>-&gt;</operator><name>start_point</name></name><operator>)</operator> <operator>%</operator> <name>point_cnt_old</name></expr>]</index></name></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>ser</name><operator>-&gt;</operator><name>points</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ser</name><operator>-&gt;</operator><name>points</name></name> <operator>=</operator> <name>new_points</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ser</name><operator>-&gt;</operator><name>points</name></name> <operator>=</operator> <call><name>lv_mem_realloc</name><argument_list>(<argument><expr><name><name>ser</name><operator>-&gt;</operator><name>points</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_coord_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>point_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>ser</name><operator>-&gt;</operator><name>points</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ser</name><operator>-&gt;</operator><name>points</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>point_cnt</name> <operator>&gt;</operator> <name>point_cnt_old</name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>point_cnt_old</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>point_cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ser</name><operator>-&gt;</operator><name>points</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>def</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ser</name><operator>-&gt;</operator><name>start_point</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name> <operator>=</operator> <name>point_cnt</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_chart_refresh</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_chart_set_series_opa</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>opa</name></name> <operator>==</operator> <name>opa</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>opa</name></name> <operator>=</operator> <name>opa</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_chart_set_series_width</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>width</name></name> <operator>==</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_chart_set_series_darking</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>dark_eff</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>dark</name></name> <operator>==</operator> <name>dark_eff</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>dark</name></name> <operator>=</operator> <name>dark_eff</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_chart_init_points</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>lv_chart_series_t</name> <modifier>*</modifier></type> <name>ser</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>ser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ser</name><operator>-&gt;</operator><name>points</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ser</name><operator>-&gt;</operator><name>start_point</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_chart_refresh</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_chart_set_points</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>lv_chart_series_t</name> <modifier>*</modifier></type> <name>ser</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name><name>y_array</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>ser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ser</name><operator>-&gt;</operator><name>points</name></name></expr></argument>, <argument><expr><name>y_array</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>lv_coord_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ser</name><operator>-&gt;</operator><name>start_point</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_chart_refresh</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_chart_set_next</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>lv_chart_series_t</name> <modifier>*</modifier></type> <name>ser</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>ser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>update_mode</name></name> <operator>==</operator> <name>LV_CHART_UPDATE_MODE_SHIFT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ser</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>ser</name><operator>-&gt;</operator><name>start_point</name></name></expr>]</index></name> <operator>=</operator>

<name>y</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ser</name><operator>-&gt;</operator><name>start_point</name></name> <operator>=</operator> <operator>(</operator><name><name>ser</name><operator>-&gt;</operator><name>start_point</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_chart_refresh</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>update_mode</name></name> <operator>==</operator> <name>LV_CHART_UPDATE_MODE_CIRCULAR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ser</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>ser</name><operator>-&gt;</operator><name>start_point</name></name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>LV_CHART_TYPE_LINE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_chart_inv_lines</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name><name>ser</name><operator>-&gt;</operator><name>start_point</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>LV_CHART_TYPE_COLUMN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_chart_inv_cols</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name><name>ser</name><operator>-&gt;</operator><name>start_point</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>LV_CHART_TYPE_POINT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_chart_inv_points</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name><name>ser</name><operator>-&gt;</operator><name>start_point</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>LV_CHART_TYPE_VERTICAL_LINE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_chart_inv_lines</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name><name>ser</name><operator>-&gt;</operator><name>start_point</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>LV_CHART_TYPE_AREA</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_chart_inv_lines</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name><name>ser</name><operator>-&gt;</operator><name>start_point</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ser</name><operator>-&gt;</operator><name>start_point</name></name> <operator>=</operator> <operator>(</operator><name><name>ser</name><operator>-&gt;</operator><name>start_point</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_chart_set_update_mode</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>lv_chart_update_mode_t</name></type> <name>update_mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>update_mode</name></name> <operator>==</operator> <name>update_mode</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>update_mode</name></name> <operator>=</operator> <name>update_mode</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_chart_set_x_tick_length</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>major_tick_len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>minor_tick_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>x_axis</name><operator>.</operator><name>major_tick_len</name></name> <operator>=</operator> <name>major_tick_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>x_axis</name><operator>.</operator><name>minor_tick_len</name></name> <operator>=</operator> <name>minor_tick_len</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_chart_set_y_tick_length</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>major_tick_len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>minor_tick_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>y_axis</name><operator>.</operator><name>major_tick_len</name></name> <operator>=</operator> <name>major_tick_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>y_axis</name><operator>.</operator><name>minor_tick_len</name></name> <operator>=</operator> <name>minor_tick_len</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_chart_set_secondary_y_tick_length</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>major_tick_len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>minor_tick_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>secondary_y_axis</name><operator>.</operator><name>major_tick_len</name></name> <operator>=</operator> <name>major_tick_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>secondary_y_axis</name><operator>.</operator><name>minor_tick_len</name></name> <operator>=</operator> <name>minor_tick_len</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_chart_set_x_tick_texts</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>list_of_values</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>num_tick_marks</name></decl></parameter>,

<parameter><decl><type><name>lv_chart_axis_options_t</name></type> <name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>list_of_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>x_axis</name><operator>.</operator><name>num_tick_marks</name></name> <operator>=</operator> <name>num_tick_marks</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>x_axis</name><operator>.</operator><name>list_of_values</name></name> <operator>=</operator> <name>list_of_values</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>x_axis</name><operator>.</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_chart_set_y_tick_texts</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>list_of_values</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>num_tick_marks</name></decl></parameter>,

<parameter><decl><type><name>lv_chart_axis_options_t</name></type> <name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>list_of_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>y_axis</name><operator>.</operator><name>num_tick_marks</name></name> <operator>=</operator> <name>num_tick_marks</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>y_axis</name><operator>.</operator><name>list_of_values</name></name> <operator>=</operator> <name>list_of_values</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>y_axis</name><operator>.</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_chart_set_secondary_y_tick_texts</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>list_of_values</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>num_tick_marks</name></decl></parameter>,

<parameter><decl><type><name>lv_chart_axis_options_t</name></type> <name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>list_of_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>secondary_y_axis</name><operator>.</operator><name>num_tick_marks</name></name> <operator>=</operator> <name>num_tick_marks</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>secondary_y_axis</name><operator>.</operator><name>list_of_values</name></name> <operator>=</operator> <name>list_of_values</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>secondary_y_axis</name><operator>.</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_chart_set_margin</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>margin</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>margin</name></name> <operator>=</operator> <name>margin</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_refresh_ext_draw_pad</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>lv_chart_type_t</name></type> <name>lv_chart_get_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>lv_chart_get_point_cnt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_opa_t</name></type> <name>lv_chart_get_series_opa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>opa</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_coord_t</name></type> <name>lv_chart_get_series_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>width</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_opa_t</name></type> <name>lv_chart_get_series_darking</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>dark</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_chart_refresh</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>lv_chart_get_margin</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>margin</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>lv_chart_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_COVER_CHK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>ancestor_design_f</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_DRAW_MAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chart</name><operator>-&gt;</operator><name>coords</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_chart_draw_div</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>mask_tmp</name></decl>, <decl><type ref="prev"/><name>adjusted_mask</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>union_ok</name> <init>= <expr><call><name>lv_area_intersect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adjusted_mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask_tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>union_ok</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>LV_CHART_TYPE_LINE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_chart_draw_lines</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>adjusted_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>LV_CHART_TYPE_COLUMN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_chart_draw_cols</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>adjusted_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>LV_CHART_TYPE_POINT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_chart_draw_points</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>adjusted_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>LV_CHART_TYPE_VERTICAL_LINE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_chart_draw_vertical_lines</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>adjusted_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>LV_CHART_TYPE_AREA</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_chart_draw_areas</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>adjusted_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_chart_draw_axes</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_chart_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ancestor_signal</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_obj_handle_get_type_signal</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CLEANUP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>datal</name></decl>;</decl_stmt>

<macro><name>LV_LL_READ</name><argument_list>(<argument>ext-&gt;series_ll</argument>, <argument>datal</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><operator>*</operator><name>datal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>lv_ll_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>series_ll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_REFR_EXT_DRAW_PAD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>chart</name><operator>-&gt;</operator><name>ext_draw_pad</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>margin</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_chart_draw_div</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name> <init>= <expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>div_i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>div_i_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>div_i_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x_ofs</name> <init>= <expr><name><name>chart</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y_ofs</name> <init>= <expr><name><name>chart</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>hdiv_cnt</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>div_i_start</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>div_i_end</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>hdiv_cnt</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>div_i_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>div_i_end</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>hdiv_cnt</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal> <operator>+</operator> <name>x_ofs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>x_ofs</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>div_i</name> <operator>=</operator> <name>div_i_start</name></expr>;</init> <condition><expr><name>div_i</name> <operator>&lt;=</operator> <name>div_i_end</name></expr>;</condition> <incr><expr><name>div_i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>h</name> <operator>-</operator> <name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>*</operator> <name>div_i</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>hdiv_cnt</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>y_ofs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>p1</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>vdiv_cnt</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>div_i_start</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>div_i_end</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>vdiv_cnt</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>div_i_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>div_i_end</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>vdiv_cnt</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal> <operator>+</operator> <name>y_ofs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>h</name> <operator>+</operator> <name>y_ofs</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>div_i</name> <operator>=</operator> <name>div_i_start</name></expr>;</init> <condition><expr><name>div_i</name> <operator>&lt;=</operator> <name>div_i_end</name></expr>;</condition> <incr><expr><name>div_i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>w</name> <operator>-</operator> <name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>*</operator> <name>div_i</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>vdiv_cnt</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>x_ofs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p1</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_chart_draw_lines</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x_ofs</name> <init>= <expr><name><name>chart</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y_ofs</name> <init>= <expr><name><name>chart</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>y_tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>p_prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>p_act</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_chart_series_t</name> <modifier>*</modifier></type> <name>ser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name> <init>= <expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_style_t</name></type> <name>style</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>style</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>.</operator><name>line</name><operator>.</operator><name>opa</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>opa</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>.</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<macro><name>LV_LL_READ_BACK</name><argument_list>(<argument>ext-&gt;series_ll</argument>, <argument>ser</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name><name>style</name><operator>.</operator><name>line</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name><name>ser</name><operator>-&gt;</operator><name>color</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>start_point</name> <init>= <expr><ternary><condition><expr><name><name>ext</name><operator>-&gt;</operator><name>update_mode</name></name> <operator>==</operator> <name>LV_CHART_UPDATE_MODE_SHIFT</name></expr> ?</condition><then> <expr><name><name>ser</name><operator>-&gt;</operator><name>start_point</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal> <operator>+</operator> <name>x_ofs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal> <operator>+</operator> <name>x_ofs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_prev</name> <operator>=</operator> <name>start_point</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_tmp</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>ser</name><operator>-&gt;</operator><name>points</name><index>[<expr><name>p_prev</name></expr>]</index></name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>ymin</name></name><operator>)</operator> <operator>*</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_tmp</name> <operator>=</operator> <name>y_tmp</name> <operator>/</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>ymax</name></name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>ymin</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>h</name> <operator>-</operator> <name>y_tmp</name> <operator>+</operator> <name>y_ofs</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p2</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>p2</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>w</name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>x_ofs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_act</name> <operator>=</operator> <operator>(</operator><name>start_point</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>%</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_tmp</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>ser</name><operator>-&gt;</operator><name>points</name><index>[<expr><name>p_act</name></expr>]</index></name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>ymin</name></name><operator>)</operator> <operator>*</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_tmp</name> <operator>=</operator> <name>y_tmp</name> <operator>/</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>ymax</name></name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>ymin</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>h</name> <operator>-</operator> <name>y_tmp</name> <operator>+</operator> <name>y_ofs</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ser</name><operator>-&gt;</operator><name>points</name><index>[<expr><name>p_prev</name></expr>]</index></name> <operator>!=</operator> <name>LV_CHART_POINT_DEF</name> <operator>&amp;&amp;</operator> <name><name>ser</name><operator>-&gt;</operator><name>points</name><index>[<expr><name>p_act</name></expr>]</index></name> <operator>!=</operator> <name>LV_CHART_POINT_DEF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_draw_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_prev</name> <operator>=</operator> <name>p_act</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_chart_draw_points</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>cir_a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x_ofs</name> <init>= <expr><name><name>chart</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y_ofs</name> <init>= <expr><name><name>chart</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>y_tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>p_act</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_chart_series_t</name> <modifier>*</modifier></type> <name>ser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>series_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_style_t</name></type> <name>style_point</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>style_point</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style_point</name><operator>.</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style_point</name><operator>.</operator><name>body</name><operator>.</operator><name>radius</name></name> <operator>=</operator> <name>LV_RADIUS_CIRCLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style_point</name><operator>.</operator><name>body</name><operator>.</operator><name>opa</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>opa</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style_point</name><operator>.</operator><name>body</name><operator>.</operator><name>radius</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<macro><name>LV_LL_READ_BACK</name><argument_list>(<argument>ext-&gt;series_ll</argument>, <argument>ser</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>start_point</name> <init>= <expr><ternary><condition><expr><name><name>ext</name><operator>-&gt;</operator><name>update_mode</name></name> <operator>==</operator> <name>LV_CHART_UPDATE_MODE_SHIFT</name></expr> ?</condition><then> <expr><name><name>ser</name><operator>-&gt;</operator><name>start_point</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>style_point</name><operator>.</operator><name>body</name><operator>.</operator><name>main_color</name></name> <operator>=</operator> <name><name>ser</name><operator>-&gt;</operator><name>color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style_point</name><operator>.</operator><name>body</name><operator>.</operator><name>grad_color</name></name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>LV_COLOR_BLACK</name></expr></argument>, <argument><expr><name><name>ser</name><operator>-&gt;</operator><name>color</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>dark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>cir_a</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>w</name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>x_ofs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cir_a</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>cir_a</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name><name>style_point</name><operator>.</operator><name>body</name><operator>.</operator><name>radius</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cir_a</name><operator>.</operator><name>x1</name></name> <operator>-=</operator> <name><name>style_point</name><operator>.</operator><name>body</name><operator>.</operator><name>radius</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_act</name> <operator>=</operator> <operator>(</operator><name>start_point</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>%</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_tmp</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>ser</name><operator>-&gt;</operator><name>points</name><index>[<expr><name>p_act</name></expr>]</index></name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>ymin</name></name><operator>)</operator> <operator>*</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_tmp</name> <operator>=</operator> <name>y_tmp</name> <operator>/</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>ymax</name></name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>ymin</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cir_a</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name>h</name> <operator>-</operator> <name>y_tmp</name> <operator>+</operator> <name>y_ofs</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cir_a</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>cir_a</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <name><name>style_point</name><operator>.</operator><name>body</name><operator>.</operator><name>radius</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cir_a</name><operator>.</operator><name>y1</name></name> <operator>-=</operator> <name><name>style_point</name><operator>.</operator><name>body</name><operator>.</operator><name>radius</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ser</name><operator>-&gt;</operator><name>points</name><index>[<expr><name>p_act</name></expr>]</index></name> <operator>!=</operator> <name>LV_CHART_POINT_DEF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cir_a</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>style_point</name></expr></argument>, <argument><expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>series_cnt</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_chart_draw_cols</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>col_a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>col_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>mask_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>y_tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_chart_series_t</name> <modifier>*</modifier></type> <name>ser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_style_t</name></type> <name>rects</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>col_w</name> <init>= <expr><name>w</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>num</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name><operator>)</operator></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x_ofs</name> <init>= <expr><name>col_w</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rects</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rects</name><operator>.</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rects</name><operator>.</operator><name>body</name><operator>.</operator><name>radius</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rects</name><operator>.</operator><name>body</name><operator>.</operator><name>opa</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>opa</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>col_a</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>chart</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y2</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x_act</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>x_act</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>w</name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>/</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x_act</name> <operator>+=</operator> <name><name>chart</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name>x_ofs</name></expr>;</expr_stmt>

<macro><name>LV_LL_READ_BACK</name><argument_list>(<argument>ext-&gt;series_ll</argument>, <argument>ser</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>start_point</name> <init>= <expr><ternary><condition><expr><name><name>ext</name><operator>-&gt;</operator><name>update_mode</name></name> <operator>==</operator> <name>LV_CHART_UPDATE_MODE_SHIFT</name></expr> ?</condition><then> <expr><name><name>ser</name><operator>-&gt;</operator><name>start_point</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>col_a</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name>x_act</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>col_a</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>col_a</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name>col_w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x_act</name> <operator>+=</operator> <name>col_w</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>col_a</name><operator>.</operator><name>x2</name></name> <operator>&lt;</operator> <name><name>mask</name><operator>-&gt;</operator><name>x1</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>col_a</name><operator>.</operator><name>x1</name></name> <operator>&gt;</operator> <name><name>mask</name><operator>-&gt;</operator><name>x2</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rects</name><operator>.</operator><name>body</name><operator>.</operator><name>main_color</name></name> <operator>=</operator> <name><name>ser</name><operator>-&gt;</operator><name>color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rects</name><operator>.</operator><name>body</name><operator>.</operator><name>grad_color</name></name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>LV_COLOR_BLACK</name></expr></argument>, <argument><expr><name><name>ser</name><operator>-&gt;</operator><name>color</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>dark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>p_act</name> <init>= <expr><operator>(</operator><name>start_point</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>%</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>y_tmp</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>ser</name><operator>-&gt;</operator><name>points</name><index>[<expr><name>p_act</name></expr>]</index></name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>ymin</name></name><operator>)</operator> <operator>*</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_tmp</name> <operator>=</operator> <name>y_tmp</name> <operator>/</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>ymax</name></name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>ymin</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>col_a</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name>h</name> <operator>-</operator> <name>y_tmp</name> <operator>+</operator> <name><name>chart</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mask_ret</name> <operator>=</operator> <call><name>lv_area_intersect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>col_mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>mask_ret</name> <operator>!=</operator> <name>false</name> <operator>&amp;&amp;</operator> <name><name>ser</name><operator>-&gt;</operator><name>points</name><index>[<expr><name>p_act</name></expr>]</index></name> <operator>!=</operator> <name>LV_CHART_POINT_DEF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chart</name><operator>-&gt;</operator><name>coords</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col_mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rects</name></expr></argument>, <argument><expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_chart_draw_vertical_lines</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name> <operator>!=</operator> <name>w</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_chart_draw_lines</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>p_act</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x_ofs</name> <init>= <expr><name><name>chart</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y_ofs</name> <init>= <expr><name><name>chart</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>y_tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_chart_series_t</name> <modifier>*</modifier></type> <name>ser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name> <init>= <expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_style_t</name></type> <name>style</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>style</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>.</operator><name>line</name><operator>.</operator><name>opa</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>opa</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>.</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<macro><name>LV_LL_READ_BACK</name><argument_list>(<argument>ext-&gt;series_ll</argument>, <argument>ser</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>start_point</name> <init>= <expr><ternary><condition><expr><name><name>ext</name><operator>-&gt;</operator><name>update_mode</name></name> <operator>==</operator> <name>LV_CHART_UPDATE_MODE_SHIFT</name></expr> ?</condition><then> <expr><name><name>ser</name><operator>-&gt;</operator><name>start_point</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>style</name><operator>.</operator><name>line</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name><name>ser</name><operator>-&gt;</operator><name>color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal> <operator>+</operator> <name>x_ofs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal> <operator>+</operator> <name>x_ofs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_tmp</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>ser</name><operator>-&gt;</operator><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>ymin</name></name><operator>)</operator> <operator>*</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_tmp</name> <operator>=</operator> <name>y_tmp</name> <operator>/</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>ymax</name></name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>ymin</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>h</name> <operator>-</operator> <name>y_tmp</name> <operator>+</operator> <name>y_ofs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>p2</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>p_act</name> <operator>=</operator> <operator>(</operator><name>start_point</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>%</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_tmp</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>ser</name><operator>-&gt;</operator><name>points</name><index>[<expr><name>p_act</name></expr>]</index></name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>ymin</name></name><operator>)</operator> <operator>*</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_tmp</name> <operator>=</operator> <name>y_tmp</name> <operator>/</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>ymax</name></name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>ymin</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>h</name> <operator>-</operator> <name>y_tmp</name> <operator>+</operator> <name>y_ofs</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p1</name><operator>.</operator><name>y</name></name> <operator>==</operator> <name><name>p2</name><operator>.</operator><name>y</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>x</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ser</name><operator>-&gt;</operator><name>points</name><index>[<expr><name>p_act</name></expr>]</index></name> <operator>!=</operator> <name>LV_CHART_POINT_DEF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>w</name> <operator>*</operator> <name>p_act</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>x_ofs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p2</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>p2</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_chart_draw_areas</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x_ofs</name> <init>= <expr><name><name>chart</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y_ofs</name> <init>= <expr><name><name>chart</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>y_tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>p_prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>p_act</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_chart_series_t</name> <modifier>*</modifier></type> <name>ser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name> <init>= <expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_style_t</name></type> <name>style</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>style</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>LV_LL_READ_BACK</name><argument_list>(<argument>ext-&gt;series_ll</argument>, <argument>ser</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>start_point</name> <init>= <expr><ternary><condition><expr><name><name>ext</name><operator>-&gt;</operator><name>update_mode</name></name> <operator>==</operator> <name>LV_CHART_UPDATE_MODE_SHIFT</name></expr> ?</condition><then> <expr><name><name>ser</name><operator>-&gt;</operator><name>start_point</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>style</name><operator>.</operator><name>body</name><operator>.</operator><name>main_color</name></name> <operator>=</operator> <name><name>ser</name><operator>-&gt;</operator><name>color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>.</operator><name>body</name><operator>.</operator><name>opa</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>opa</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal> <operator>+</operator> <name>x_ofs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_prev</name> <operator>=</operator> <name>start_point</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_tmp</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>ser</name><operator>-&gt;</operator><name>points</name><index>[<expr><name>p_prev</name></expr>]</index></name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>ymin</name></name><operator>)</operator> <operator>*</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_tmp</name> <operator>=</operator> <name>y_tmp</name> <operator>/</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>ymax</name></name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>ymin</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>h</name> <operator>-</operator> <name>y_tmp</name> <operator>+</operator> <name>y_ofs</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p2</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>p2</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_act</name> <operator>=</operator> <operator>(</operator><name>start_point</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>%</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>w</name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>x_ofs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_tmp</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>ser</name><operator>-&gt;</operator><name>points</name><index>[<expr><name>p_act</name></expr>]</index></name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>ymin</name></name><operator>)</operator> <operator>*</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_tmp</name> <operator>=</operator> <name>y_tmp</name> <operator>/</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>ymax</name></name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>ymin</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>h</name> <operator>-</operator> <name>y_tmp</name> <operator>+</operator> <name>y_ofs</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ser</name><operator>-&gt;</operator><name>points</name><index>[<expr><name>p_prev</name></expr>]</index></name> <operator>!=</operator> <name>LV_CHART_POINT_DEF</name> <operator>&amp;&amp;</operator> <name><name>ser</name><operator>-&gt;</operator><name>points</name><index>[<expr><name>p_act</name></expr>]</index></name> <operator>!=</operator> <name>LV_CHART_POINT_DEF</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name><name>triangle_points</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>triangle_points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>triangle_points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>triangle_points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>p1</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>triangle_points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>chart</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_triangle</name><argument_list>(<argument><expr><name>triangle_points</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>triangle_points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>p2</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>triangle_points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>chart</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_triangle</name><argument_list>(<argument><expr><name>triangle_points</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_prev</name> <operator>=</operator> <name>p_act</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lv_chart_label_iterator_t</name></type> <name>lv_chart_create_label_iter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>iterator_dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_chart_label_iterator_t</name></type> <name>iterator</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>iterator</name><operator>.</operator><name>list_start</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>list</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>list</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>iterator</name><operator>.</operator><name>items_left</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>iterator_dir</name> <operator>==</operator> <name>LV_CHART_LABEL_ITERATOR_FORWARD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>iterator</name><operator>.</operator><name>is_reverse_iter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iterator</name><operator>.</operator><name>current_pos</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>iterator</name><operator>.</operator><name>is_reverse_iter</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iterator</name><operator>.</operator><name>current_pos</name></name> <operator>=</operator> <name>list</name> <operator>+</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>iterator</name><operator>.</operator><name>items_left</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>iterator</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_chart_get_next_label</name><parameter_list>(<parameter><decl><type><name>lv_chart_label_iterator_t</name> <modifier>*</modifier></type> <name>iterator</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>label_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>is_reverse_iter</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>label_start</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name><name>iterator</name><operator>-&gt;</operator><name>current_pos</name></name> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>iterator</name><operator>-&gt;</operator><name>current_pos</name></name> <operator>!=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>list_start</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>current_pos</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>label_len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>label_start</name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>current_pos</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>iterator</name><operator>-&gt;</operator><name>current_pos</name></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>label_start</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>current_pos</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>label_len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>label_len</name> <operator>&gt;</operator> <name>LV_CHART_AXIS_TICK_LABEL_MAX_LEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>label_len</name> <operator>=</operator> <name>LV_CHART_AXIS_TICK_LABEL_MAX_LEN</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>label_start</name></expr></argument>, <argument><expr><name>label_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while<condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>current_pos</name><index>[<expr><name>label_len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator>

<name><name>iterator</name><operator>-&gt;</operator><name>current_pos</name><index>[<expr><name>label_len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>label_len</name> <operator>&lt;</operator> <name>LV_CHART_AXIS_TICK_LABEL_MAX_LEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>label_len</name></expr>]</index></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>current_pos</name><index>[<expr><name>label_len</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>label_len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>label_len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>current_pos</name></name> <operator>+=</operator> <name>label_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>label_len</name> <operator>&gt;</operator> <name>LV_CHART_AXIS_TICK_LABEL_MAX_LEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>label_len</name> <operator>=</operator> <name>LV_CHART_AXIS_TICK_LABEL_MAX_LEN</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name><name>iterator</name><operator>-&gt;</operator><name>current_pos</name></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>current_pos</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>label_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>lv_chart_is_tick_with_label</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>tick_num</name></decl></parameter>, <parameter><decl><type><name>lv_chart_axis_cfg_t</name> <modifier>*</modifier></type> <name>axis</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>tick_num</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>tick_num</name> <operator>%</operator> <name><name>axis</name><operator>-&gt;</operator><name>num_tick_marks</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_chart_draw_y_ticks</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>which_axis</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_chart_axis_cfg_t</name> <modifier>*</modifier></type> <name>y_axis</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>which_axis</name> <operator>==</operator> <name>LV_CHART_AXIS_PRIMARY_Y</name><operator>)</operator></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>y_axis</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>secondary_y_axis</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>y_axis</name><operator>-&gt;</operator><name>list_of_values</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>y_axis</name><operator>-&gt;</operator><name>num_tick_marks</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name> <init>= <expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>num_of_labels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>num_scale_ticks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>major_tick_len</name></decl>, <decl><type ref="prev"/><name>minor_tick_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>iter_dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x_ofs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_chart_label_iterator_t</name></type> <name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y_ofs</name> <init>= <expr><name><name>chart</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>LV_CHART_AXIS_TICK_LABEL_MAX_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

<if_stmt><if>if<condition>(<expr><name>which_axis</name> <operator>==</operator> <name>LV_CHART_AXIS_PRIMARY_Y</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x_ofs</name> <operator>=</operator> <name><name>chart</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>x_ofs</name> <operator>=</operator> <name><name>chart</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x2</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>y_axis</name><operator>-&gt;</operator><name>major_tick_len</name></name> <operator>==</operator> <name>LV_CHART_TICK_LENGTH_AUTO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>major_tick_len</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>w</name> <operator>*</operator> <name>LV_CHART_AXIS_MAJOR_TICK_LEN_COE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>major_tick_len</name> <operator>=</operator> <name><name>y_axis</name><operator>-&gt;</operator><name>major_tick_len</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>y_axis</name><operator>-&gt;</operator><name>minor_tick_len</name></name> <operator>==</operator> <name>LV_CHART_TICK_LENGTH_AUTO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>minor_tick_len</name> <operator>=</operator> <name>major_tick_len</name> <operator>*</operator> <name>LV_CHART_AXIS_MINOR_TICK_LEN_COE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>minor_tick_len</name> <operator>=</operator> <name><name>y_axis</name><operator>-&gt;</operator><name>minor_tick_len</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>which_axis</name> <operator>==</operator> <name>LV_CHART_AXIS_SECONDARY_Y</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>major_tick_len</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>minor_tick_len</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>iter_dir</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>y_axis</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>LV_CHART_AXIS_INVERSE_LABELS_ORDER</name><operator>)</operator></expr> ?</condition><then> <expr><name>LV_CHART_LABEL_ITERATOR_REVERSE</name></expr> </then><else>: <expr><name>LV_CHART_LABEL_ITERATOR_FORWARD</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>lv_chart_create_label_iter</name><argument_list>(<argument><expr><name><name>y_axis</name><operator>-&gt;</operator><name>list_of_values</name></name></expr></argument>, <argument><expr><name>iter_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_of_labels</name> <operator>=</operator> <name><name>iter</name><operator>.</operator><name>items_left</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>y_axis</name><operator>-&gt;</operator><name>num_tick_marks</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>y_axis</name><operator>-&gt;</operator><name>num_tick_marks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>num_of_labels</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num_scale_ticks</name> <operator>=</operator> <name><name>y_axis</name><operator>-&gt;</operator><name>num_tick_marks</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>num_scale_ticks</name> <operator>=</operator> <operator>(</operator><name><name>y_axis</name><operator>-&gt;</operator><name>num_tick_marks</name></name> <operator>*</operator> <operator>(</operator><name>num_of_labels</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>num_scale_ticks</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x_ofs</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>which_axis</name> <operator>==</operator> <name>LV_CHART_AXIS_PRIMARY_Y</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>x</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>x</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>num_of_labels</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>%</operator> <name><name>y_axis</name><operator>-&gt;</operator><name>num_tick_marks</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p1</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>major_tick_len</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p1</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>minor_tick_len</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>p1</name><operator>.</operator><name>y</name></name> <operator>=</operator>

<name>y_ofs</name> <operator>+</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>h</name> <operator>-</operator> <name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>*</operator> <name>i</name><operator>)</operator> <operator>/</operator> <name>num_scale_ticks</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>y_axis</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>LV_CHART_AXIS_INVERSE_LABELS_ORDER</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_draw_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>y_axis</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>LV_CHART_AXIS_DRAW_LAST_TICK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_draw_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>!=</operator> <name>num_scale_ticks</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_draw_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>y_axis</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>LV_CHART_AXIS_DRAW_LAST_TICK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_draw_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>num_of_labels</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_chart_is_tick_with_label</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>y_axis</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_chart_get_next_label</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_txt_get_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name></expr></argument>,

<argument><expr><name>LV_COORD_MAX</name></expr></argument>, <argument><expr><name>LV_TXT_FLAG_CENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>a</name> <init>= <expr><block>{<expr><operator>.</operator><name>y1</name> <operator>=</operator> <name><name>p2</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>size</name><operator>.</operator><name>y</name></name> <operator>/</operator> <literal type="number">2</literal></expr>, <expr><operator>.</operator><name>y2</name> <operator>=</operator> <name><name>p2</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>size</name><operator>.</operator><name>y</name></name> <operator>/</operator> <literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>which_axis</name> <operator>==</operator> <name>LV_CHART_AXIS_PRIMARY_Y</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>p2</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>size</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>LV_CHART_AXIS_TO_LABEL_DISTANCE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>p2</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>LV_CHART_AXIS_TO_LABEL_DISTANCE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>p2</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>LV_CHART_AXIS_TO_LABEL_DISTANCE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>p2</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>size</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>LV_CHART_AXIS_TO_LABEL_DISTANCE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lv_draw_label</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>LV_TXT_FLAG_CENTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_chart_draw_x_ticks</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>x_axis</name><operator>.</operator><name>list_of_values</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>ext</name><operator>-&gt;</operator><name>x_axis</name><operator>.</operator><name>num_tick_marks</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name> <init>= <expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>num_of_labels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>num_scale_ticks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>major_tick_len</name></decl>, <decl><type ref="prev"/><name>minor_tick_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_chart_label_iterator_t</name></type> <name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x_ofs</name> <init>= <expr><name><name>chart</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y_ofs</name> <init>= <expr><name><name>chart</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>LV_CHART_AXIS_TICK_LABEL_MAX_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>x_axis</name><operator>.</operator><name>major_tick_len</name></name> <operator>==</operator> <name>LV_CHART_TICK_LENGTH_AUTO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>major_tick_len</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>w</name> <operator>*</operator> <name>LV_CHART_AXIS_MAJOR_TICK_LEN_COE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>major_tick_len</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>x_axis</name><operator>.</operator><name>major_tick_len</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>x_axis</name><operator>.</operator><name>minor_tick_len</name></name> <operator>==</operator> <name>LV_CHART_TICK_LENGTH_AUTO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>minor_tick_len</name> <operator>=</operator> <name>major_tick_len</name> <operator>*</operator> <name>LV_CHART_AXIS_MINOR_TICK_LEN_COE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>minor_tick_len</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>x_axis</name><operator>.</operator><name>minor_tick_len</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>lv_chart_create_label_iter</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>x_axis</name><operator>.</operator><name>list_of_values</name></name></expr></argument>, <argument><expr><name>LV_CHART_LABEL_ITERATOR_FORWARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_of_labels</name> <operator>=</operator> <name><name>iter</name><operator>.</operator><name>items_left</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>x_axis</name><operator>.</operator><name>num_tick_marks</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>x_axis</name><operator>.</operator><name>num_tick_marks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>num_of_labels</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num_scale_ticks</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>x_axis</name><operator>.</operator><name>num_tick_marks</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>num_scale_ticks</name> <operator>=</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>x_axis</name><operator>.</operator><name>num_tick_marks</name></name> <operator>*</operator> <operator>(</operator><name>num_of_labels</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>num_scale_ticks</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>h</name> <operator>+</operator> <name>y_ofs</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>num_of_labels</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>%</operator> <name><name>ext</name><operator>-&gt;</operator><name>x_axis</name><operator>.</operator><name>num_tick_marks</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>p1</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>major_tick_len</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>p1</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>minor_tick_len</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p1</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x_ofs</name> <operator>+</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>w</name> <operator>-</operator> <name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>*</operator> <name>i</name><operator>)</operator> <operator>/</operator> <name>num_scale_ticks</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>!=</operator> <name>num_scale_ticks</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_draw_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>x_axis</name><operator>.</operator><name>options</name></name> <operator>&amp;</operator> <name>LV_CHART_AXIS_DRAW_LAST_TICK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_draw_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>num_of_labels</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_chart_is_tick_with_label</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>x_axis</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_chart_get_next_label</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_txt_get_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name></expr></argument>,

<argument><expr><name>LV_COORD_MAX</name></expr></argument>, <argument><expr><name>LV_TXT_FLAG_CENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>a</name> <init>= <expr><block>{<expr><operator>(</operator><name><name>p2</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>size</name><operator>.</operator><name>x</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>, <expr><operator>(</operator><name><name>p2</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>LV_CHART_AXIS_TO_LABEL_DISTANCE</name><operator>)</operator></expr>, <expr><operator>(</operator><name><name>p2</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>size</name><operator>.</operator><name>x</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>,

<expr><operator>(</operator><name><name>p2</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>size</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>LV_CHART_AXIS_TO_LABEL_DISTANCE</name><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_draw_label</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>LV_TXT_FLAG_CENTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_chart_draw_axes</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lv_chart_draw_y_ticks</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>LV_CHART_AXIS_PRIMARY_Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_chart_draw_y_ticks</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>LV_CHART_AXIS_SECONDARY_Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_chart_draw_x_ticks</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_chart_inv_lines</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x_ofs</name> <init>= <expr><name><name>chart</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>coords</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>coords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>coords</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>w</name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>x_ofs</name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coords</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>w</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>x_ofs</name> <operator>+</operator> <name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate_area</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>coords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>coords</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>w</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>x_ofs</name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coords</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>w</name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>x_ofs</name> <operator>+</operator> <name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate_area</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>coords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_chart_inv_points</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>cir_a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x_ofs</name> <init>= <expr><name><name>chart</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cir_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cir_a</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>w</name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>x_ofs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cir_a</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>cir_a</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cir_a</name><operator>.</operator><name>x1</name></name> <operator>-=</operator> <name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_inv_area</name><argument_list>(<argument><expr><call><name>lv_obj_get_disp</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>cir_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_chart_inv_cols</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>chart</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_chart_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>col_a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>col_w</name> <init>= <expr><name>w</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>series</name><operator>.</operator><name>num</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name><operator>)</operator></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x_ofs</name> <init>= <expr><name>col_w</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x_act</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x_act</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>w</name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>/</operator> <name><name>ext</name><operator>-&gt;</operator><name>point_cnt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x_act</name> <operator>+=</operator> <name><name>chart</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name>x_ofs</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>col_a</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name>x_act</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>col_a</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>col_a</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name>col_w</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_inv_area</name><argument_list>(<argument><expr><call><name>lv_obj_get_disp</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>col_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
