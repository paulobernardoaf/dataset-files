<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_objx\lv_win.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_win.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_WIN</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_themes/lv_theme.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_disp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_OBJX_NAME</name></cpp:macro> <cpp:value>"lv_win"</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_win_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_win_realign</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>ancestor_signal</name></decl>;</decl_stmt>

<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_win_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"window create started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>new_win</name> <init>= <expr><call><name>lv_obj_create</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>new_win</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ancestor_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><name>new_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_win_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_allocate_ext_attr</name><argument_list>(<argument><expr><name>new_win</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_win_ext_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>style_btn_rel</name></name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_btn_rel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>style_btn_pr</name></name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_btn_pr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_size</name></name> <operator>=</operator> <operator>(</operator><name>LV_DPI</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>par</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>lv_obj_get_width_fit</name><argument_list>(<argument><expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>new_win</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>lv_obj_get_height_fit</name><argument_list>(<argument><expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>new_win</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>lv_disp_get_hor_res</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>lv_disp_get_ver_res</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lv_obj_set_size</name><argument_list>(<argument><expr><name>new_win</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_style</name><argument_list>(<argument><expr><name>new_win</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name> <operator>=</operator> <call><name>lv_page_create</name><argument_list>(<argument><expr><name>new_win</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_protect</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name></expr></argument>, <argument><expr><name>LV_PROTECT_PARENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_page_set_sb_mode</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name></expr></argument>, <argument><expr><name>LV_SB_MODE_AUTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_page_set_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_BG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_transp_fit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <call><name>lv_obj_create</name><argument_list>(<argument><expr><name>new_win</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_protect</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>LV_PROTECT_PARENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_parent</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>new_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <call><name>lv_label_create</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_label_set_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><literal type="string">"My title"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><name>new_win</name></expr></argument>, <argument><expr><name>lv_win_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>th</name> <init>= <expr><call><name>lv_theme_get_current</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>th</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_win_set_style</name><argument_list>(<argument><expr><name>new_win</name></expr></argument>, <argument><expr><name>LV_WIN_STYLE_BG</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>win</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_win_set_style</name><argument_list>(<argument><expr><name>new_win</name></expr></argument>, <argument><expr><name>LV_WIN_STYLE_SB</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>win</name><operator>.</operator><name>sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_win_set_style</name><argument_list>(<argument><expr><name>new_win</name></expr></argument>, <argument><expr><name>LV_WIN_STYLE_HEADER</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>win</name><operator>.</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_win_set_style</name><argument_list>(<argument><expr><name>new_win</name></expr></argument>, <argument><expr><name>LV_WIN_STYLE_CONTENT</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>win</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_win_set_style</name><argument_list>(<argument><expr><name>new_win</name></expr></argument>, <argument><expr><name>LV_WIN_STYLE_BTN_REL</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>win</name><operator>.</operator><name>btn</name><operator>.</operator><name>rel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_win_set_style</name><argument_list>(<argument><expr><name>new_win</name></expr></argument>, <argument><expr><name>LV_WIN_STYLE_BTN_PR</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>win</name><operator>.</operator><name>btn</name><operator>.</operator><name>pr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_win_set_style</name><argument_list>(<argument><expr><name>new_win</name></expr></argument>, <argument><expr><name>LV_WIN_STYLE_BG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_win_set_style</name><argument_list>(<argument><expr><name>new_win</name></expr></argument>, <argument><expr><name>LV_WIN_STYLE_CONTENT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_transp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_win_set_style</name><argument_list>(<argument><expr><name>new_win</name></expr></argument>, <argument><expr><name>LV_WIN_STYLE_HEADER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_plain_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_win_ext_t</name> <modifier>*</modifier></type> <name>copy_ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <call><name>lv_obj_create</name><argument_list>(<argument><expr><name>new_win</name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <call><name>lv_label_create</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name> <operator>=</operator> <call><name>lv_page_create</name><argument_list>(<argument><expr><name>new_win</name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>page</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_size</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>btn_size</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cbtn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>lv_obj_get_child_back</name><argument_list>(<argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>lv_obj_get_child_back</name><argument_list>(<argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while<condition>(<expr><name>child</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cbtn</name> <operator>=</operator> <call><name>lv_btn_create</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_img_create</name><argument_list>(<argument><expr><name>cbtn</name></expr></argument>, <argument><expr><call><name>lv_obj_get_child</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>lv_obj_get_child_back</name><argument_list>(<argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><name>new_win</name></expr></argument>, <argument><expr><name>lv_win_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lv_obj_refresh_style</name><argument_list>(<argument><expr><name>new_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_win_realign</name><argument_list>(<argument><expr><name>new_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"window created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_win</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_win_clean</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>scrl</name> <init>= <expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_clean</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_win_add_btn</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>img_src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>img_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_win_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name> <init>= <expr><call><name>lv_btn_create</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_REL</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>style_btn_rel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_PR</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>style_btn_pr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_size</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_size</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>img</name> <init>= <expr><call><name>lv_img_create</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_set_click</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_img_set_src</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name>img_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_win_realign</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>btn</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_win_close_event_cb</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>, <parameter><decl><type><name>lv_event_t</name></type> <name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><literal type="string">"lv_btn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>event</name> <operator>==</operator> <name>LV_EVENT_RELEASED</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name> <init>= <expr><call><name>lv_win_get_from_btn</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_del</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_win_set_title</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>title</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_STR</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_win_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_label_set_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_win_realign</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_win_set_btn_size</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_win_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>btn_size</name></name> <operator>==</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_win_realign</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_win_set_content_size</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_win_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>h</name> <operator>+=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_size</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_win_set_layout</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>lv_layout_t</name></type> <name>layout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_win_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_page_set_scrl_layout</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name></expr></argument>, <argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_win_set_sb_mode</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>lv_sb_mode_t</name></type> <name>sb_mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_win_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_page_set_sb_mode</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name></expr></argument>, <argument><expr><name>sb_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_win_set_anim_time</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>anim_time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_page_set_anim_time</name><argument_list>(<argument><expr><call><name>lv_win_get_content</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>anim_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_win_set_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>lv_win_style_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_win_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_WIN_STYLE_BG</name></expr>:</case>

<expr_stmt><expr><call><name>lv_obj_set_style</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_win_realign</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_WIN_STYLE_CONTENT</name></expr>:</case> <expr_stmt><expr><call><name>lv_page_set_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_SCRL</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_WIN_STYLE_SB</name></expr>:</case> <expr_stmt><expr><call><name>lv_page_set_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_SB</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_WIN_STYLE_HEADER</name></expr>:</case>

<expr_stmt><expr><call><name>lv_obj_set_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_win_realign</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_WIN_STYLE_BTN_REL</name></expr>:</case> <expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>style_btn_rel</name></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_WIN_STYLE_BTN_PR</name></expr>:</case> <expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>style_btn_pr</name></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>LV_WIN_STYLE_BTN_REL</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>LV_WIN_STYLE_BTN_PR</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>btn</name> <operator>=</operator> <call><name>lv_obj_get_child_back</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>btn</name> <operator>=</operator> <call><name>lv_obj_get_child_back</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while<condition>(<expr><name>btn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>LV_WIN_STYLE_BTN_REL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_REL</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_PR</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>btn</name> <operator>=</operator> <call><name>lv_obj_get_child_back</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_win_set_drag</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_win_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win_header</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_set_drag_parent</name><argument_list>(<argument><expr><name>win_header</name></expr></argument>, <argument><expr><name>en</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_drag</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>en</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>lv_win_get_title</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_win_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>lv_label_get_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_win_get_content</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_win_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_coord_t</name></type> <name>lv_win_get_btn_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_win_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>btn_size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_win_get_from_btn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>ctrl_btn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ctrl_btn</name></expr></argument>, <argument><expr><literal type="string">"lv_btn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>header</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>ctrl_btn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>win</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_layout_t</name></type> <name>lv_win_get_layout</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_win_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>lv_page_get_scrl_layout</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_sb_mode_t</name></type> <name>lv_win_get_sb_mode</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_win_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>lv_page_get_sb_mode</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>lv_win_get_anim_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>lv_page_get_anim_time</name><argument_list>(<argument><expr><call><name>lv_win_get_content</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_coord_t</name></type> <name>lv_win_get_width</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_win_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>scrl</name> <init>= <expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_scrl</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>style_scrl</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name> <operator>-</operator> <name><name>style_scrl</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>lv_win_get_style</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>lv_win_style_t</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_win_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_WIN_STYLE_BG</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_WIN_STYLE_CONTENT</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_page_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_SCRL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_WIN_STYLE_SB</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_page_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_SB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_WIN_STYLE_HEADER</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_WIN_STYLE_BTN_REL</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>style_btn_rel</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_WIN_STYLE_BTN_PR</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>style_btn_pr</name></name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>style</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>style</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_win_focus</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_anim_enable_t</name></type> <name>anim_en</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_win_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_page_focus</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>anim_en</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_win_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ancestor_signal</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_obj_handle_get_type_signal</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_win_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CHILD_CHG</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>page</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>page</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>child</name></decl>;</decl_stmt>

<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>lv_obj_get_child</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>child</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_is_protected</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>LV_PROTECT_PARENT</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>tmp</name> <init>= <expr><name>child</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>lv_obj_get_child</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>lv_obj_set_parent</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>lv_obj_get_child</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_STYLE_CHG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_win_realign</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CORD_CHG</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>lv_area_get_height</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_win_realign</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CLEANUP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CONTROL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>ext</name><operator>-&gt;</operator><name>page</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_win_realign</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_win_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ext</name><operator>-&gt;</operator><name>header</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ext</name><operator>-&gt;</operator><name>title</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>header_style</name> <init>= <expr><call><name>lv_win_get_style</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>LV_WIN_STYLE_HEADER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_set_size</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_size</name></name> <operator>+</operator> <name><name>header_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name><name>header_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>first_btn</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn_prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>btn</name> <operator>=</operator> <call><name>lv_obj_get_child_back</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>btn</name> <operator>=</operator> <call><name>lv_obj_get_child_back</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while<condition>(<expr><name>btn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_set_size</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_size</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>btn_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>first_btn</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_RIGHT_MID</name></expr></argument>, <argument><expr><operator>-</operator><name><name>header_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>first_btn</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>btn_prev</name></expr></argument>, <argument><expr><name>LV_ALIGN_OUT_LEFT_MID</name></expr></argument>, <argument><expr><operator>-</operator><name><name>header_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>btn_prev</name> <operator>=</operator> <name>btn</name></expr>;</expr_stmt>

<expr_stmt><expr><name>btn</name> <operator>=</operator> <call><name>lv_obj_get_child_back</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_header</name> <init>= <expr><call><name>lv_win_get_style</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>LV_WIN_STYLE_HEADER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_LEFT_MID</name></expr></argument>, <argument><expr><name><name>style_header</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_pos</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_size</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name></expr></argument>, <argument><expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>LV_ALIGN_OUT_BOTTOM_LEFT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
