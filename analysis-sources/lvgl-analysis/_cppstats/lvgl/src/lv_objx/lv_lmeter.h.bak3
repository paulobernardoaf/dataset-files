




#ifndef LV_LMETER_H
#define LV_LMETER_H

#ifdef __cplusplus
extern "C" {
#endif




#ifdef LV_CONF_INCLUDE_SIMPLE
#include "lv_conf.h"
#else
#include "../../../lv_conf.h"
#endif

#if LV_USE_LMETER != 0

#include "../lv_core/lv_obj.h"









typedef struct
{


uint16_t scale_angle; 
uint16_t angle_ofs;
uint16_t line_cnt; 
int16_t cur_value;
int16_t min_value;
int16_t max_value;
uint8_t mirrored :1;
} lv_lmeter_ext_t;


enum {
LV_LMETER_STYLE_MAIN,
};
typedef uint8_t lv_lmeter_style_t;












lv_obj_t * lv_lmeter_create(lv_obj_t * par, const lv_obj_t * copy);










void lv_lmeter_set_value(lv_obj_t * lmeter, int16_t value);







void lv_lmeter_set_range(lv_obj_t * lmeter, int16_t min, int16_t max);







void lv_lmeter_set_scale(lv_obj_t * lmeter, uint16_t angle, uint16_t line_cnt);






void lv_lmeter_set_angle_offset(lv_obj_t * lmeter, uint16_t angle);






void lv_lmeter_set_mirror(lv_obj_t *lmeter, bool mirror);







static inline void lv_lmeter_set_style(lv_obj_t * lmeter, lv_lmeter_style_t type, lv_style_t * style)
{
(void)type; 
lv_obj_set_style(lmeter, style);
}










int16_t lv_lmeter_get_value(const lv_obj_t * lmeter);






int16_t lv_lmeter_get_min_value(const lv_obj_t * lmeter);






int16_t lv_lmeter_get_max_value(const lv_obj_t * lmeter);






uint16_t lv_lmeter_get_line_count(const lv_obj_t * lmeter);






uint16_t lv_lmeter_get_scale_angle(const lv_obj_t * lmeter);






uint16_t lv_lmeter_get_angle_offset(lv_obj_t * lmeter);






bool lv_lmeter_get_mirror(lv_obj_t * lmeter);







static inline const lv_style_t * lv_lmeter_get_style(const lv_obj_t * lmeter, lv_lmeter_style_t type)
{
(void)type; 
return lv_obj_get_style(lmeter);
}





#endif 

#ifdef __cplusplus
} 
#endif

#endif 
