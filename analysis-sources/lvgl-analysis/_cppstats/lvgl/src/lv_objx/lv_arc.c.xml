<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_objx\lv_arc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_arc.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ARC</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_math.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_draw/lv_draw_arc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_themes/lv_theme.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_OBJX_NAME</name></cpp:macro> <cpp:value>"lv_arc"</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lv_arc_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>arc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_arc_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>arc</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>ancestor_signal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_design_cb_t</name></type> <name>ancestor_design</name></decl>;</decl_stmt>

<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_arc_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"arc create started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>new_arc</name> <init>= <expr><call><name>lv_obj_create</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_arc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>new_arc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_arc_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_allocate_ext_attr</name><argument_list>(<argument><expr><name>new_arc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_arc_ext_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ancestor_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><name>new_arc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ancestor_design</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_design</name> <operator>=</operator> <call><name>lv_obj_get_design_cb</name><argument_list>(<argument><expr><name>new_arc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>angle_start</name></name> <operator>=</operator> <literal type="number">45</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>angle_end</name></name> <operator>=</operator> <literal type="number">315</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><name>new_arc</name></expr></argument>, <argument><expr><name>lv_arc_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_design_cb</name><argument_list>(<argument><expr><name>new_arc</name></expr></argument>, <argument><expr><name>lv_arc_design</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>th</name> <init>= <expr><call><name>lv_theme_get_current</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>th</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_arc_set_style</name><argument_list>(<argument><expr><name>new_arc</name></expr></argument>, <argument><expr><name>LV_ARC_STYLE_MAIN</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>arc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_arc_set_style</name><argument_list>(<argument><expr><name>new_arc</name></expr></argument>, <argument><expr><name>LV_ARC_STYLE_MAIN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_plain_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_arc_ext_t</name> <modifier>*</modifier></type> <name>copy_ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>angle_start</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>angle_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>angle_end</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>angle_end</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_refresh_style</name><argument_list>(<argument><expr><name>new_arc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"arc created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_arc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_arc_set_angles</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>arc</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>arc</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_arc_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>arc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>start</name> <operator>&gt;</operator> <literal type="number">360</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">360</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>end</name> <operator>&gt;</operator> <literal type="number">360</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>end</name> <operator>=</operator> <literal type="number">360</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>angle_start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>angle_end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>arc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_arc_set_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>arc</name></decl></parameter>, <parameter><decl><type><name>lv_arc_style_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>arc</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_ARC_STYLE_MAIN</name></expr>:</case> <expr_stmt><expr><call><name>lv_obj_set_style</name><argument_list>(<argument><expr><name>arc</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>lv_arc_get_angle_start</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>arc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>arc</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_arc_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>arc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>angle_start</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>lv_arc_get_angle_end</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>arc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>arc</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_arc_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>arc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>angle_end</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>lv_arc_get_style</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>arc</name></decl></parameter>, <parameter><decl><type><name>lv_arc_style_t</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>arc</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_ARC_STYLE_MAIN</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>arc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>style</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>style</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>lv_arc_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>arc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_COVER_CHK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_DRAW_MAIN</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_arc_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>arc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_arc_get_style</name><argument_list>(<argument><expr><name>arc</name></expr></argument>, <argument><expr><name>LV_ARC_STYLE_MAIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>r</name> <init>= <expr><operator>(</operator><call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>arc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>arc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x</name> <init>= <expr><name><name>arc</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>arc</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y</name> <init>= <expr><name><name>arc</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>arc</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name> <init>= <expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>arc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_draw_arc</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>angle_start</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>angle_end</name></name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>rounded</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>thick_half</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>cir_x</name> <init>= <expr><operator>(</operator><operator>(</operator><name>r</name> <operator>-</operator> <name>thick_half</name><operator>)</operator> <operator>*</operator> <call><name>lv_trigo_sin</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>angle_start</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>LV_TRIGO_SHIFT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>cir_y</name> <init>= <expr><operator>(</operator><operator>(</operator><name>r</name> <operator>-</operator> <name>thick_half</name><operator>)</operator> <operator>*</operator> <call><name>lv_trigo_sin</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>angle_start</name></name> <operator>+</operator> <literal type="number">90</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>LV_TRIGO_SHIFT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_style_t</name></type> <name>cir_style</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cir_style</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cir_style</name><operator>.</operator><name>body</name><operator>.</operator><name>grad_color</name></name> <operator>=</operator> <name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cir_style</name><operator>.</operator><name>body</name><operator>.</operator><name>main_color</name></name> <operator>=</operator> <name><name>cir_style</name><operator>.</operator><name>body</name><operator>.</operator><name>grad_color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cir_style</name><operator>.</operator><name>body</name><operator>.</operator><name>radius</name></name> <operator>=</operator> <name>LV_RADIUS_CIRCLE</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>cir_area</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cir_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name>cir_x</name> <operator>+</operator> <name>x</name> <operator>-</operator> <name>thick_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cir_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name>cir_y</name> <operator>+</operator> <name>y</name> <operator>-</operator> <name>thick_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cir_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name>cir_x</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>thick_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cir_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name>cir_y</name> <operator>+</operator> <name>y</name> <operator>+</operator> <name>thick_half</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cir_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cir_style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cir_x</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>-</operator> <name>thick_half</name><operator>)</operator> <operator>*</operator> <call><name>lv_trigo_sin</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>angle_end</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>LV_TRIGO_SHIFT</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cir_y</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>-</operator> <name>thick_half</name><operator>)</operator> <operator>*</operator> <call><name>lv_trigo_sin</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>angle_end</name></name> <operator>+</operator> <literal type="number">90</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>LV_TRIGO_SHIFT</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cir_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name>cir_x</name> <operator>+</operator> <name>x</name> <operator>-</operator> <name>thick_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cir_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name>cir_y</name> <operator>+</operator> <name>y</name> <operator>-</operator> <name>thick_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cir_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name>cir_x</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>thick_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cir_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name>cir_y</name> <operator>+</operator> <name>y</name> <operator>+</operator> <name>thick_half</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cir_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cir_style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_DRAW_POST</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_arc_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>arc</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ancestor_signal</name><argument_list>(<argument><expr><name>arc</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_obj_handle_get_type_signal</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CLEANUP</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
