<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_objx\lv_cb.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_cb.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_CB</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_group.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_themes/lv_theme.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_OBJX_NAME</name></cpp:macro> <cpp:value>"lv_cb"</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lv_cb_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lv_bullet_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>bullet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_cb_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_design_cb_t</name></type> <name>ancestor_bg_design</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_design_cb_t</name></type> <name>ancestor_bullet_design</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>ancestor_signal</name></decl>;</decl_stmt>

<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_cb_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"check box create started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>new_cb</name> <init>= <expr><call><name>lv_btn_create</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>new_cb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ancestor_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><name>new_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ancestor_bg_design</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_bg_design</name> <operator>=</operator> <call><name>lv_obj_get_design_cb</name><argument_list>(<argument><expr><name>new_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_cb_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_allocate_ext_attr</name><argument_list>(<argument><expr><name>new_cb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_cb_ext_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>bullet</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><name>new_cb</name></expr></argument>, <argument><expr><name>lv_cb_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_design_cb</name><argument_list>(<argument><expr><name>new_cb</name></expr></argument>, <argument><expr><name>lv_cb_design</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>bullet</name></name> <operator>=</operator> <call><name>lv_btn_create</name><argument_list>(<argument><expr><name>new_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ancestor_bullet_design</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_bullet_design</name> <operator>=</operator> <call><name>lv_obj_get_design_cb</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>bullet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_set_click</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>bullet</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name> <operator>=</operator> <call><name>lv_label_create</name><argument_list>(<argument><expr><name>new_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_cb_set_text</name><argument_list>(<argument><expr><name>new_cb</name></expr></argument>, <argument><expr><literal type="string">"Check box"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btn_set_layout</name><argument_list>(<argument><expr><name>new_cb</name></expr></argument>, <argument><expr><name>LV_LAYOUT_ROW_M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btn_set_fit</name><argument_list>(<argument><expr><name>new_cb</name></expr></argument>, <argument><expr><name>LV_FIT_TIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btn_set_toggle</name><argument_list>(<argument><expr><name>new_cb</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_protect</name><argument_list>(<argument><expr><name>new_cb</name></expr></argument>, <argument><expr><name>LV_PROTECT_PRESS_LOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>th</name> <init>= <expr><call><name>lv_theme_get_current</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>th</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_cb_set_style</name><argument_list>(<argument><expr><name>new_cb</name></expr></argument>, <argument><expr><name>LV_CB_STYLE_BG</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>cb</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_cb_set_style</name><argument_list>(<argument><expr><name>new_cb</name></expr></argument>, <argument><expr><name>LV_CB_STYLE_BOX_REL</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>cb</name><operator>.</operator><name>box</name><operator>.</operator><name>rel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_cb_set_style</name><argument_list>(<argument><expr><name>new_cb</name></expr></argument>, <argument><expr><name>LV_CB_STYLE_BOX_PR</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>cb</name><operator>.</operator><name>box</name><operator>.</operator><name>pr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_cb_set_style</name><argument_list>(<argument><expr><name>new_cb</name></expr></argument>, <argument><expr><name>LV_CB_STYLE_BOX_TGL_REL</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>cb</name><operator>.</operator><name>box</name><operator>.</operator><name>tgl_rel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_cb_set_style</name><argument_list>(<argument><expr><name>new_cb</name></expr></argument>, <argument><expr><name>LV_CB_STYLE_BOX_TGL_PR</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>cb</name><operator>.</operator><name>box</name><operator>.</operator><name>tgl_pr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_cb_set_style</name><argument_list>(<argument><expr><name>new_cb</name></expr></argument>, <argument><expr><name>LV_CB_STYLE_BOX_INA</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>cb</name><operator>.</operator><name>box</name><operator>.</operator><name>ina</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_cb_set_style</name><argument_list>(<argument><expr><name>new_cb</name></expr></argument>, <argument><expr><name>LV_CB_STYLE_BG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_transp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_cb_set_style</name><argument_list>(<argument><expr><name>new_cb</name></expr></argument>, <argument><expr><name>LV_CB_STYLE_BOX_REL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_cb_ext_t</name> <modifier>*</modifier></type> <name>copy_ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>bullet</name></name> <operator>=</operator> <call><name>lv_btn_create</name><argument_list>(<argument><expr><name>new_cb</name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>bullet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name> <operator>=</operator> <call><name>lv_label_create</name><argument_list>(<argument><expr><name>new_cb</name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_refresh_style</name><argument_list>(<argument><expr><name>new_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lv_obj_set_design_cb</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>bullet</name></name></expr></argument>, <argument><expr><name>lv_bullet_design</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"check box created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_cb</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_cb_set_text</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cb_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_label_set_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_cb_set_static_text</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cb_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_label_set_static_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_cb_set_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>lv_cb_style_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cb_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_CB_STYLE_BG</name></expr>:</case>

<expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_REL</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_PR</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_TGL_REL</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_TGL_PR</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_INA</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LV_CB_STYLE_BOX_REL</name></expr>:</case> <expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>bullet</name></name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_REL</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_CB_STYLE_BOX_PR</name></expr>:</case> <expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>bullet</name></name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_PR</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_CB_STYLE_BOX_TGL_REL</name></expr>:</case> <expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>bullet</name></name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_TGL_REL</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_CB_STYLE_BOX_TGL_PR</name></expr>:</case> <expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>bullet</name></name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_TGL_PR</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_CB_STYLE_BOX_INA</name></expr>:</case> <expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>bullet</name></name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_INA</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>lv_cb_get_text</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cb_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>lv_label_get_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>lv_cb_get_style</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>lv_cb_style_t</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_cb_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_CB_STYLE_BG</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_btn_get_style</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_CB_STYLE_BOX_REL</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_btn_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>bullet</name></name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_CB_STYLE_BOX_PR</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_btn_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>bullet</name></name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_PR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_CB_STYLE_BOX_TGL_REL</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_btn_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>bullet</name></name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_TGL_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_CB_STYLE_BOX_TGL_PR</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_btn_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>bullet</name></name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_TGL_PR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_CB_STYLE_BOX_INA</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_btn_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>bullet</name></name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_INA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>style</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>style</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>lv_cb_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_COVER_CHK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ancestor_bg_design</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_DRAW_MAIN</name> <operator>||</operator> <name>mode</name> <operator>==</operator> <name>LV_DESIGN_DRAW_POST</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_cb_ext_t</name> <modifier>*</modifier></type> <name>cb_ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_btn_ext_t</name> <modifier>*</modifier></type> <name>bullet_ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name><name>cb_ext</name><operator>-&gt;</operator><name>bullet</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bullet_ext</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name><name>cb_ext</name><operator>-&gt;</operator><name>bg_btn</name><operator>.</operator><name>state</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ancestor_bg_design</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ancestor_bg_design</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>lv_bullet_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>bullet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_COVER_CHK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>ancestor_bullet_design</name><argument_list>(<argument><expr><name>bullet</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_DRAW_MAIN</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_ori</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>bullet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>bg</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>bullet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_page</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>g</name> <init>= <expr><call><name>lv_obj_get_group</name><argument_list>(<argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style_page</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>opa</name></name> <operator>==</operator> <name>LV_OPA_TRANSP</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if<condition>(<expr><call><name>lv_group_get_focused</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>bg</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>style_mod</name></decl>;</decl_stmt>

<expr_stmt><expr><name>style_mod</name> <operator>=</operator> <call><name>lv_group_mod_style</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>style_ori</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bullet</name><operator>-&gt;</operator><name>style_p</name></name> <operator>=</operator> <name>style_mod</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ancestor_bullet_design</name><argument_list>(<argument><expr><name>bullet</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<expr_stmt><expr><name><name>bullet</name><operator>-&gt;</operator><name>style_p</name></name> <operator>=</operator> <name>style_ori</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_DRAW_POST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ancestor_bullet_design</name><argument_list>(<argument><expr><name>bullet</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_cb_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ancestor_signal</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_obj_handle_get_type_signal</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_cb_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_STYLE_CHG</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>label_style</name> <init>= <expr><call><name>lv_label_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>LV_LABEL_STYLE_MAIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_set_size</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>bullet</name></name></expr></argument>, <argument><expr><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name><name>label_style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name><name>label_style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>bullet</name></name></expr></argument>, <argument><expr><call><name>lv_btn_get_state</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESSED</name> <operator>||</operator> <name>sign</name> <operator>==</operator> <name>LV_SIGNAL_RELEASED</name> <operator>||</operator> <name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESS_LOST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>bullet</name></name></expr></argument>, <argument><expr><call><name>lv_btn_get_state</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CONTROL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>param</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_RIGHT</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>LV_KEY_DOWN</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>LV_KEY_LEFT</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>LV_KEY_UP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>bullet</name></name></expr></argument>, <argument><expr><call><name>lv_btn_get_state</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
