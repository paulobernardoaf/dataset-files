<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_themes\lv_theme_templ.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_theme.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_THEME_TEMPL</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_theme_t</name></type> <name>theme</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_style_t</name></type> <name>def</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint16_t</name></type> <name>_hue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>_font</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>basic_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>def</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>def</name><operator>.</operator><name>text</name><operator>.</operator><name>font</name></name> <operator>=</operator> <name>_font</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>scr</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>bg</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>panel</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cont_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_CONT</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>cont</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>btn_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_BTN</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>btn</name><operator>.</operator><name>rel</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>btn</name><operator>.</operator><name>pr</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>btn</name><operator>.</operator><name>tgl_rel</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>btn</name><operator>.</operator><name>tgl_pr</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>btn</name><operator>.</operator><name>ina</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imgbtn_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_IMGBTN</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>imgbtn</name><operator>.</operator><name>rel</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>imgbtn</name><operator>.</operator><name>pr</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>imgbtn</name><operator>.</operator><name>tgl_rel</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>imgbtn</name><operator>.</operator><name>tgl_pr</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>imgbtn</name><operator>.</operator><name>ina</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>label_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_LABEL</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>label</name><operator>.</operator><name>prim</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>label</name><operator>.</operator><name>sec</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>label</name><operator>.</operator><name>hint</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>img_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_IMG</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>img</name><operator>.</operator><name>light</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>img</name><operator>.</operator><name>dark</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>line_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_LINE</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>line</name><operator>.</operator><name>decor</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>led_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_LED</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>led</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bar_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_BAR</name></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>bar</name><operator>.</operator><name>bg</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>bar</name><operator>.</operator><name>indic</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>slider_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_SLIDER</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>slider</name><operator>.</operator><name>bg</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>slider</name><operator>.</operator><name>indic</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>slider</name><operator>.</operator><name>knob</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sw_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_SW</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>sw</name><operator>.</operator><name>bg</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>sw</name><operator>.</operator><name>indic</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>sw</name><operator>.</operator><name>knob_off</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>sw</name><operator>.</operator><name>knob_on</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lmeter_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_LMETER</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>lmeter</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gauge_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GAUGE</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>gauge</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>arc_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ARC</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>arc</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>preload_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_PRELOAD</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>preload</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>chart_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_CHART</name></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>chart</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calendar_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_CALENDAR</name></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>calendar</name><operator>.</operator><name>bg</name></name> <operator>=</operator> <name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>panel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>calendar</name><operator>.</operator><name>header</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>calendar</name><operator>.</operator><name>inactive_days</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>calendar</name><operator>.</operator><name>highlighted_days</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>calendar</name><operator>.</operator><name>week_box</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>calendar</name><operator>.</operator><name>today_box</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>calendar</name><operator>.</operator><name>header_pr</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>calendar</name><operator>.</operator><name>day_names</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cb_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_CB</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>cb</name><operator>.</operator><name>bg</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>cb</name><operator>.</operator><name>box</name><operator>.</operator><name>rel</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>cb</name><operator>.</operator><name>box</name><operator>.</operator><name>pr</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>cb</name><operator>.</operator><name>box</name><operator>.</operator><name>tgl_rel</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>cb</name><operator>.</operator><name>box</name><operator>.</operator><name>tgl_pr</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>cb</name><operator>.</operator><name>box</name><operator>.</operator><name>ina</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>btnm_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_BTNM</name></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>btnm</name><operator>.</operator><name>bg</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>btnm</name><operator>.</operator><name>btn</name><operator>.</operator><name>rel</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>btnm</name><operator>.</operator><name>btn</name><operator>.</operator><name>pr</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>btnm</name><operator>.</operator><name>btn</name><operator>.</operator><name>tgl_rel</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>btnm</name><operator>.</operator><name>btn</name><operator>.</operator><name>tgl_pr</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>btnm</name><operator>.</operator><name>btn</name><operator>.</operator><name>ina</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>kb_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_KB</name></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>kb</name><operator>.</operator><name>bg</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>kb</name><operator>.</operator><name>btn</name><operator>.</operator><name>rel</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>kb</name><operator>.</operator><name>btn</name><operator>.</operator><name>pr</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>kb</name><operator>.</operator><name>btn</name><operator>.</operator><name>tgl_rel</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>kb</name><operator>.</operator><name>btn</name><operator>.</operator><name>tgl_pr</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>kb</name><operator>.</operator><name>btn</name><operator>.</operator><name>ina</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mbox_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_MBOX</name></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>mbox</name><operator>.</operator><name>bg</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>mbox</name><operator>.</operator><name>btn</name><operator>.</operator><name>bg</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>mbox</name><operator>.</operator><name>btn</name><operator>.</operator><name>rel</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>mbox</name><operator>.</operator><name>btn</name><operator>.</operator><name>pr</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>page_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_PAGE</name></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>page</name><operator>.</operator><name>bg</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>page</name><operator>.</operator><name>scrl</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>page</name><operator>.</operator><name>sb</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ta_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_TA</name></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>ta</name><operator>.</operator><name>area</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>ta</name><operator>.</operator><name>oneline</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>ta</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>ta</name><operator>.</operator><name>sb</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>list_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_LIST</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>list</name><operator>.</operator><name>sb</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>list</name><operator>.</operator><name>bg</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>list</name><operator>.</operator><name>scrl</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>list</name><operator>.</operator><name>btn</name><operator>.</operator><name>rel</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>list</name><operator>.</operator><name>btn</name><operator>.</operator><name>pr</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>list</name><operator>.</operator><name>btn</name><operator>.</operator><name>tgl_rel</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>list</name><operator>.</operator><name>btn</name><operator>.</operator><name>tgl_pr</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>list</name><operator>.</operator><name>btn</name><operator>.</operator><name>ina</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ddlist_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_DDLIST</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>ddlist</name><operator>.</operator><name>bg</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>ddlist</name><operator>.</operator><name>sel</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>ddlist</name><operator>.</operator><name>sb</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>roller_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ROLLER</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>roller</name><operator>.</operator><name>bg</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>roller</name><operator>.</operator><name>sel</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tabview_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_TABVIEW</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>tabview</name><operator>.</operator><name>bg</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>tabview</name><operator>.</operator><name>indic</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>tabview</name><operator>.</operator><name>btn</name><operator>.</operator><name>bg</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>tabview</name><operator>.</operator><name>btn</name><operator>.</operator><name>rel</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>tabview</name><operator>.</operator><name>btn</name><operator>.</operator><name>pr</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>tabview</name><operator>.</operator><name>btn</name><operator>.</operator><name>tgl_rel</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>tabview</name><operator>.</operator><name>btn</name><operator>.</operator><name>tgl_pr</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>table_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_TABLE</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>table</name><operator>.</operator><name>bg</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>table</name><operator>.</operator><name>cell</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>win_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_WIN</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>win</name><operator>.</operator><name>bg</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>win</name><operator>.</operator><name>sb</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>win</name><operator>.</operator><name>header</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>win</name><operator>.</operator><name>content</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>win</name><operator>.</operator><name>btn</name><operator>.</operator><name>rel</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>style</name><operator>.</operator><name>win</name><operator>.</operator><name>btn</name><operator>.</operator><name>pr</name></name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>style_mod</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>group</name></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>!=</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>opa</name></name> <operator>=</operator> <name>LV_OPA_COVER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>LV_COLOR_ORANGE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>LV_DPI</name> <operator>/</operator> <literal type="number">20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>main_color</name></name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>main_color</name></name></expr></argument>, <argument><expr><name>LV_COLOR_ORANGE</name></expr></argument>, <argument><expr><name>LV_OPA_70</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>grad_color</name></name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>grad_color</name></name></expr></argument>, <argument><expr><name>LV_COLOR_ORANGE</name></expr></argument>, <argument><expr><name>LV_OPA_70</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>color</name></name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>LV_COLOR_ORANGE</name></expr></argument>, <argument><expr><name>LV_OPA_60</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>color</name></name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>LV_COLOR_ORANGE</name></expr></argument>, <argument><expr><name>LV_OPA_70</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>opa</name></name> <operator>=</operator> <name>LV_OPA_COVER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>LV_COLOR_BLACK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>style_mod_edit</name><parameter_list>(<parameter><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>group</name></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>!=</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>opa</name></name> <operator>=</operator> <name>LV_OPA_COVER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>LV_COLOR_GREEN</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>LV_DPI</name> <operator>/</operator> <literal type="number">20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>main_color</name></name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>main_color</name></name></expr></argument>, <argument><expr><name>LV_COLOR_GREEN</name></expr></argument>, <argument><expr><name>LV_OPA_70</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>grad_color</name></name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>grad_color</name></name></expr></argument>, <argument><expr><name>LV_COLOR_GREEN</name></expr></argument>, <argument><expr><name>LV_OPA_70</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>color</name></name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>LV_COLOR_GREEN</name></expr></argument>, <argument><expr><name>LV_OPA_60</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>color</name></name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>LV_COLOR_GREEN</name></expr></argument>, <argument><expr><name>LV_OPA_70</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>opa</name></name> <operator>=</operator> <name>LV_OPA_COVER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>LV_COLOR_BLACK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>lv_theme_templ_init</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>hue</name></decl></parameter>, <parameter><decl><type><name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>font</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>font</name> <operator>=</operator> <name>LV_FONT_DEFAULT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>_hue</name> <operator>=</operator> <name>hue</name></expr>;</expr_stmt>

<expr_stmt><expr><name>_font</name> <operator>=</operator> <name>font</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>style_p</name> <init>= <expr><operator>(</operator><name>lv_style_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>theme</name><operator>.</operator><name>style</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LV_THEME_STYLE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>style_p</name> <operator>=</operator> <operator>&amp;</operator><name>def</name></expr>;</expr_stmt>

<expr_stmt><expr><name>style_p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>basic_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cont_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>btn_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>imgbtn_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>label_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>img_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>line_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>led_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bar_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>slider_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sw_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lmeter_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gauge_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arc_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>preload_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>chart_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>calendar_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cb_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>btnm_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kb_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbox_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>page_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ta_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ddlist_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>roller_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tabview_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>table_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>win_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>group</name><operator>.</operator><name>style_mod_xcb</name></name> <operator>=</operator> <name>style_mod</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theme</name><operator>.</operator><name>group</name><operator>.</operator><name>style_mod_edit_xcb</name></name> <operator>=</operator> <name>style_mod_edit</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>&amp;</operator><name>theme</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>lv_theme_get_templ</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>theme</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
