<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_draw\lv_draw_img.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_draw_img.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_img_cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_mem.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_img_draw_core</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>lv_draw_img</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>,

<parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>src</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Image draw: src is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><name>coords</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_plain</name></expr></argument>, <argument><expr><name>LV_OPA_COVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_label</name><argument_list>(<argument><expr><name>coords</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_plain</name></expr></argument>, <argument><expr><name>LV_OPA_COVER</name></expr></argument>, <argument><expr><literal type="string">"No\ndata"</literal></expr></argument>, <argument><expr><name>LV_TXT_FLAG_NONE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LV_BIDI_DIR_LTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_img_draw_core</name><argument_list>(<argument><expr><name>coords</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>LV_RES_INV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Image draw error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><name>coords</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_plain</name></expr></argument>, <argument><expr><name>LV_OPA_COVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_label</name><argument_list>(<argument><expr><name>coords</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_plain</name></expr></argument>, <argument><expr><name>LV_OPA_COVER</name></expr></argument>, <argument><expr><literal type="string">"No\ndata"</literal></expr></argument>, <argument><expr><name>LV_TXT_FLAG_NONE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LV_BIDI_DIR_LTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>lv_color_t</name></type> <name>lv_img_buf_get_px_color</name><parameter_list>(<parameter><decl><type><name>lv_img_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>p_color</name> <init>= <expr><name>LV_COLOR_BLACK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>x</name> <operator>&gt;=</operator> <operator>(</operator><name>lv_coord_t</name><operator>)</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_canvas_get_px: x is too large (out of canvas)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_canvas_get_px: x is &lt; 0 (out of canvas)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name> <operator>&gt;=</operator> <operator>(</operator><name>lv_coord_t</name><operator>)</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_canvas_get_px: y is too large (out of canvas)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_canvas_get_px: y is &lt; 0 (out of canvas)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf_u8</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>dsc</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_TRUE_COLOR</name> <operator>||</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED</name> <operator>||</operator>

<name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_TRUE_COLOR_ALPHA</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>px_size</name> <init>= <expr><call><name>lv_img_color_format_get_px_size</name><argument_list>(<argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>px</name> <init>= <expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>*</operator> <name>y</name> <operator>*</operator> <name>px_size</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>px_size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_color</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_color_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_SIZE</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:if>

<expr_stmt><expr><name><name>p_color</name><operator>.</operator><name>ch</name><operator>.</operator><name>alpha</name></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_INDEXED_1BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_u8</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bit</name> <init>= <expr><name>x</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>px</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_color</name><operator>.</operator><name>full</name></name> <operator>=</operator> <operator>(</operator><name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name>bit</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name>bit</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_INDEXED_2BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_u8</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bit</name> <init>= <expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>px</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_color</name><operator>.</operator><name>full</name></name> <operator>=</operator> <operator>(</operator><name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name>bit</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name>bit</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_INDEXED_4BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_u8</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bit</name> <init>= <expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>px</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_color</name><operator>.</operator><name>full</name></name> <operator>=</operator> <operator>(</operator><name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0xF</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name>bit</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name>bit</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_INDEXED_8BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_u8</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>px</name> <init>= <expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_color</name><operator>.</operator><name>full</name></name> <operator>=</operator> <name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_1BIT</name> <operator>||</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_2BIT</name> <operator>||</operator>

<name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_4BIT</name> <operator>||</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_8BIT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>style</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_color</name> <operator>=</operator> <name><name>style</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>color</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p_color</name> <operator>=</operator> <name>LV_COLOR_BLACK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_color</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_opa_t</name></type> <name>lv_img_buf_get_px_alpha</name><parameter_list>(<parameter><decl><type><name>lv_img_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>x</name> <operator>&gt;=</operator> <operator>(</operator><name>lv_coord_t</name><operator>)</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_canvas_get_px: x is too large (out of canvas)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_canvas_get_px: x is &lt; 0 (out of canvas)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name> <operator>&gt;=</operator> <operator>(</operator><name>lv_coord_t</name><operator>)</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_canvas_get_px: y is too large (out of canvas)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_canvas_get_px: y is &lt; 0 (out of canvas)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf_u8</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>dsc</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_TRUE_COLOR_ALPHA</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>px</name> <init>= <expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>*</operator> <name>y</name> <operator>*</operator> <name>LV_IMG_PX_SIZE_ALPHA_BYTE</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>LV_IMG_PX_SIZE_ALPHA_BYTE</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>buf_u8</name><index>[<expr><name>px</name> <operator>+</operator> <name>LV_IMG_PX_SIZE_ALPHA_BYTE</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_1BIT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bit</name> <init>= <expr><name>x</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>px</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>px_opa</name> <init>= <expr><operator>(</operator><name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name>bit</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name>bit</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>px_opa</name></expr> ?</condition><then> <expr><name>LV_OPA_TRANSP</name></expr> </then><else>: <expr><name>LV_OPA_COVER</name></expr></else></ternary></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_2BIT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>opa_table</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">170</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bit</name> <init>= <expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>px</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>px_opa</name> <init>= <expr><operator>(</operator><name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name>bit</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name>bit</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>opa_table</name><index>[<expr><name>px_opa</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_4BIT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>opa_table</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">51</literal></expr>, 

<expr><literal type="number">68</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="number">119</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">170</literal></expr>, <expr><literal type="number">187</literal></expr>, <expr><literal type="number">204</literal></expr>, <expr><literal type="number">221</literal></expr>, <expr><literal type="number">238</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bit</name> <init>= <expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>px</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>px_opa</name> <init>= <expr><operator>(</operator><name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0xF</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name>bit</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name>bit</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>opa_table</name><index>[<expr><name>px_opa</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_8BIT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>px</name> <init>= <expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>LV_OPA_COVER</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_img_buf_set_px_color</name><parameter_list>(<parameter><decl><type><name>lv_img_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf_u8</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>dsc</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_TRUE_COLOR</name> <operator>||</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>px_size</name> <init>= <expr><call><name>lv_img_color_format_get_px_size</name><argument_list>(<argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>px</name> <init>= <expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>*</operator> <name>y</name> <operator>*</operator> <name>px_size</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>px_size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>px_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_TRUE_COLOR_ALPHA</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>px_size</name> <init>= <expr><call><name>lv_img_color_format_get_px_size</name><argument_list>(<argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>px</name> <init>= <expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>*</operator> <name>y</name> <operator>*</operator> <name>px_size</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>px_size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>px_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_INDEXED_1BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_u8</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_color32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bit</name> <init>= <expr><name>x</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>px</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>=</operator> <name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name>bit</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>=</operator> <name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>.</operator><name>full</name></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name>bit</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_INDEXED_2BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_u8</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_color32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bit</name> <init>= <expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>px</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>=</operator> <name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name>bit</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>=</operator> <name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>.</operator><name>full</name></name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name>bit</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_INDEXED_4BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_u8</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_color32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bit</name> <init>= <expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>px</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>=</operator> <name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">0xF</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name>bit</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>=</operator> <name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>.</operator><name>full</name></name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name>bit</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_INDEXED_8BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_u8</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_color32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">256</literal></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>px</name> <init>= <expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>.</operator><name>full</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_img_buf_set_px_alpha</name><parameter_list>(<parameter><decl><type><name>lv_img_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf_u8</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>dsc</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_TRUE_COLOR_ALPHA</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>px_size</name> <init>= <expr><call><name>lv_img_color_format_get_px_size</name><argument_list>(<argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>px</name> <init>= <expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>*</operator> <name>y</name> <operator>*</operator> <name>px_size</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>px_size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf_u8</name><index>[<expr><name>px</name> <operator>+</operator> <name>px_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>opa</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_1BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opa</name> <operator>=</operator> <name>opa</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bit</name> <init>= <expr><name>x</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>px</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>=</operator> <name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name>bit</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>=</operator> <name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>opa</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name>bit</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_2BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opa</name> <operator>=</operator> <name>opa</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bit</name> <init>= <expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>px</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>=</operator> <name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name>bit</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>=</operator> <name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>opa</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name>bit</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_4BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opa</name> <operator>=</operator> <name>opa</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bit</name> <init>= <expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>px</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>=</operator> <name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">0xF</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name>bit</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>=</operator> <name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>opa</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name>bit</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_8BIT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>px</name> <init>= <expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf_u8</name><index>[<expr><name>px</name></expr>]</index></name> <operator>=</operator> <name>opa</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_img_buf_set_palette</name><parameter_list>(<parameter><decl><type><name>lv_img_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_1BIT</name> <operator>&amp;&amp;</operator> <name>id</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_2BIT</name> <operator>&amp;&amp;</operator> <name>id</name> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_4BIT</name> <operator>&amp;&amp;</operator> <name>id</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_8BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_img_buf_set_px_alpha: invalid 'id'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_color32_t</name></type> <name>c32</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c32</name><operator>.</operator><name>full</name></name> <operator>=</operator> <call><name>lv_color_to32</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>dsc</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>id</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>c32</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c32</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>c32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>uint8_t</name></type> <name>lv_img_color_format_get_px_size</name><parameter_list>(<parameter><decl><type><name>lv_img_cf_t</name></type> <name>cf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>px_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>cf</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_IMG_CF_UNKNOWN</name></expr>:</case>

<case>case <expr><name>LV_IMG_CF_RAW</name></expr>:</case> <expr_stmt><expr><name>px_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_IMG_CF_TRUE_COLOR</name></expr>:</case>

<case>case <expr><name>LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED</name></expr>:</case> <expr_stmt><expr><name>px_size</name> <operator>=</operator> <name>LV_COLOR_SIZE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_IMG_CF_TRUE_COLOR_ALPHA</name></expr>:</case> <expr_stmt><expr><name>px_size</name> <operator>=</operator> <name>LV_IMG_PX_SIZE_ALPHA_BYTE</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_IMG_CF_INDEXED_1BIT</name></expr>:</case>

<case>case <expr><name>LV_IMG_CF_ALPHA_1BIT</name></expr>:</case> <expr_stmt><expr><name>px_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_IMG_CF_INDEXED_2BIT</name></expr>:</case>

<case>case <expr><name>LV_IMG_CF_ALPHA_2BIT</name></expr>:</case> <expr_stmt><expr><name>px_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_IMG_CF_INDEXED_4BIT</name></expr>:</case>

<case>case <expr><name>LV_IMG_CF_ALPHA_4BIT</name></expr>:</case> <expr_stmt><expr><name>px_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>LV_IMG_CF_INDEXED_8BIT</name></expr>:</case>

<case>case <expr><name>LV_IMG_CF_ALPHA_8BIT</name></expr>:</case> <expr_stmt><expr><name>px_size</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>px_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>px_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_img_color_format_is_chroma_keyed</name><parameter_list>(<parameter><decl><type><name>lv_img_cf_t</name></type> <name>cf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>is_chroma_keyed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>cf</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED</name></expr>:</case>

<case>case <expr><name>LV_IMG_CF_RAW_CHROMA_KEYED</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_INDEXED_CHROMA</name></expr></cpp:if>

<case>case <expr><name>LV_IMG_CF_INDEXED_1BIT</name></expr>:</case>

<case>case <expr><name>LV_IMG_CF_INDEXED_2BIT</name></expr>:</case>

<case>case <expr><name>LV_IMG_CF_INDEXED_4BIT</name></expr>:</case>

<case>case <expr><name>LV_IMG_CF_INDEXED_8BIT</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>is_chroma_keyed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>is_chroma_keyed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>is_chroma_keyed</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_img_color_format_has_alpha</name><parameter_list>(<parameter><decl><type><name>lv_img_cf_t</name></type> <name>cf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>has_alpha</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>cf</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_IMG_CF_TRUE_COLOR_ALPHA</name></expr>:</case>

<case>case <expr><name>LV_IMG_CF_RAW_ALPHA</name></expr>:</case>

<case>case <expr><name>LV_IMG_CF_INDEXED_1BIT</name></expr>:</case>

<case>case <expr><name>LV_IMG_CF_INDEXED_2BIT</name></expr>:</case>

<case>case <expr><name>LV_IMG_CF_INDEXED_4BIT</name></expr>:</case>

<case>case <expr><name>LV_IMG_CF_INDEXED_8BIT</name></expr>:</case>

<case>case <expr><name>LV_IMG_CF_ALPHA_1BIT</name></expr>:</case>

<case>case <expr><name>LV_IMG_CF_ALPHA_2BIT</name></expr>:</case>

<case>case <expr><name>LV_IMG_CF_ALPHA_4BIT</name></expr>:</case>

<case>case <expr><name>LV_IMG_CF_ALPHA_8BIT</name></expr>:</case> <expr_stmt><expr><name>has_alpha</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>has_alpha</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>has_alpha</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_img_src_t</name></type> <name>lv_img_src_get_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_img_src_t</name></type> <name>img_src_type</name> <init>= <expr><name>LV_IMG_SRC_UNKNOWN</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>src</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>img_src_type</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>u8_p</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>u8_p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0x20</literal> <operator>&amp;&amp;</operator> <name><name>u8_p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0x7F</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>img_src_type</name> <operator>=</operator> <name>LV_IMG_SRC_FILE</name></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>u8_p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>img_src_type</name> <operator>=</operator> <name>LV_IMG_SRC_SYMBOL</name></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>img_src_type</name> <operator>=</operator> <name>LV_IMG_SRC_VARIABLE</name></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>LV_IMG_SRC_UNKNOWN</name> <operator>==</operator> <name>img_src_type</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_img_src_get_type: unknown image type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>img_src_type</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lv_img_dsc_t</name> <modifier>*</modifier></type><name>lv_img_buf_alloc</name><parameter_list>(<parameter><decl><type><name>lv_coord_t</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>lv_img_cf_t</name></type> <name>cf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_img_dsc_t</name> <modifier>*</modifier></type><name>dsc</name> <init>= <expr><call><name>lv_mem_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_img_dsc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>dsc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dsc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_img_dsc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <call><name>lv_img_buf_get_img_size</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>data_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name>dsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dsc</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name>dsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>dsc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>always_zero</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>=</operator> <name>cf</name></expr>;</expr_stmt>

<return>return <expr><name>dsc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_img_buf_free</name><parameter_list>(<parameter><decl><type><name>lv_img_dsc_t</name> <modifier>*</modifier></type><name>dsc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>dsc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name>dsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>lv_img_buf_get_img_size</name><parameter_list>(<parameter><decl><type><name>lv_coord_t</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>lv_img_cf_t</name></type> <name>cf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>cf</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LV_IMG_CF_TRUE_COLOR</name></expr>:</case> <return>return <expr><call><name>LV_IMG_BUF_SIZE_TRUE_COLOR</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>LV_IMG_CF_TRUE_COLOR_ALPHA</name></expr>:</case> <return>return <expr><call><name>LV_IMG_BUF_SIZE_TRUE_COLOR_ALPHA</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED</name></expr>:</case> <return>return <expr><call><name>LV_IMG_BUF_SIZE_TRUE_COLOR_CHROMA_KEYED</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>LV_IMG_CF_ALPHA_1BIT</name></expr>:</case> <return>return <expr><call><name>LV_IMG_BUF_SIZE_ALPHA_1BIT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>LV_IMG_CF_ALPHA_2BIT</name></expr>:</case> <return>return <expr><call><name>LV_IMG_BUF_SIZE_ALPHA_2BIT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>LV_IMG_CF_ALPHA_4BIT</name></expr>:</case> <return>return <expr><call><name>LV_IMG_BUF_SIZE_ALPHA_4BIT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>LV_IMG_CF_ALPHA_8BIT</name></expr>:</case> <return>return <expr><call><name>LV_IMG_BUF_SIZE_ALPHA_8BIT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>LV_IMG_CF_INDEXED_1BIT</name></expr>:</case> <return>return <expr><call><name>LV_IMG_BUF_SIZE_INDEXED_1BIT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>LV_IMG_CF_INDEXED_2BIT</name></expr>:</case> <return>return <expr><call><name>LV_IMG_BUF_SIZE_INDEXED_2BIT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>LV_IMG_CF_INDEXED_4BIT</name></expr>:</case> <return>return <expr><call><name>LV_IMG_BUF_SIZE_INDEXED_4BIT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>LV_IMG_CF_INDEXED_8BIT</name></expr>:</case> <return>return <expr><call><name>LV_IMG_BUF_SIZE_INDEXED_8BIT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default> <return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_img_draw_core</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>mask_com</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>union_ok</name></decl>;</decl_stmt>

<expr_stmt><expr><name>union_ok</name> <operator>=</operator> <call><name>lv_area_intersect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mask_com</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>coords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>union_ok</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>LV_RES_OK</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa</name> <init>=

<expr><ternary><condition><expr><name>opa_scale</name> <operator>==</operator> <name>LV_OPA_COVER</name></expr> ?</condition><then> <expr><name><name>style</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>opa</name></name></expr> </then><else>: <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>style</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>opa</name></name> <operator>*</operator> <name>opa_scale</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_img_cache_entry_t</name> <modifier>*</modifier></type> <name>cdsc</name> <init>= <expr><call><name>lv_img_cache_open</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>cdsc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_RES_INV</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>chroma_keyed</name> <init>= <expr><call><name>lv_img_color_format_is_chroma_keyed</name><argument_list>(<argument><expr><name><name>cdsc</name><operator>-&gt;</operator><name>dec_dsc</name><operator>.</operator><name>header</name><operator>.</operator><name>cf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>alpha_byte</name> <init>= <expr><call><name>lv_img_color_format_has_alpha</name><argument_list>(<argument><expr><name><name>cdsc</name><operator>-&gt;</operator><name>dec_dsc</name><operator>.</operator><name>header</name><operator>.</operator><name>cf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cdsc</name><operator>-&gt;</operator><name>dec_dsc</name><operator>.</operator><name>error_msg</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Image draw error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><name>coords</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_plain</name></expr></argument>, <argument><expr><name>LV_OPA_COVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_label</name><argument_list>(<argument><expr><name>coords</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_plain</name></expr></argument>, <argument><expr><name>LV_OPA_COVER</name></expr></argument>, <argument><expr><name><name>cdsc</name><operator>-&gt;</operator><name>dec_dsc</name><operator>.</operator><name>error_msg</name></name></expr></argument>, <argument><expr><name>LV_TXT_FLAG_NONE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LV_BIDI_DIR_LTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>cdsc</name><operator>-&gt;</operator><name>dec_dsc</name><operator>.</operator><name>img_data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_map</name><argument_list>(<argument><expr><name>coords</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>cdsc</name><operator>-&gt;</operator><name>dec_dsc</name><operator>.</operator><name>img_data</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>, <argument><expr><name>chroma_keyed</name></expr></argument>, <argument><expr><name>alpha_byte</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>color</name></name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>intense</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>width</name> <init>= <expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mask_com</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>lv_draw_get_buf</name><argument_list>(<argument><expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mask_com</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>LV_IMG_PX_SIZE_ALPHA_BYTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>line</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask_com</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_area_set_height</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x</name> <init>= <expr><name><name>mask_com</name><operator>.</operator><name>x1</name></name> <operator>-</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y</name> <init>= <expr><name><name>mask_com</name><operator>.</operator><name>y1</name></name> <operator>-</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>read_res</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>row</name> <operator>=</operator> <name><name>mask_com</name><operator>.</operator><name>y1</name></name></expr>;</init> <condition><expr><name>row</name> <operator>&lt;=</operator> <name><name>mask_com</name><operator>.</operator><name>y2</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>read_res</name> <operator>=</operator> <call><name>lv_img_decoder_read_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cdsc</name><operator>-&gt;</operator><name>dec_dsc</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>read_res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_img_decoder_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cdsc</name><operator>-&gt;</operator><name>dec_dsc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Image draw can't read the line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LV_RES_INV</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_draw_map</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>, <argument><expr><name>chroma_keyed</name></expr></argument>, <argument><expr><name>alpha_byte</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>intense</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><operator>.</operator><name>y1</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><operator>.</operator><name>y2</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>LV_RES_OK</name></expr>;</return>

</block_content>}</block></function>

</unit>
