<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_draw\lv_draw_line.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_draw.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_refr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_math.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p_act</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>dx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>sx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>dy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>sy</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>e2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hor</name></decl>;</decl_stmt> 

}</block></struct></type> <name>line_draw_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>width_1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>width_half</name></decl>;</decl_stmt>

}</block></struct></type> <name>line_width_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>line_draw_hor</name><parameter_list>(<parameter><decl><type><name>line_draw_t</name> <modifier>*</modifier></type> <name>main_line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>,

<parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>line_draw_ver</name><parameter_list>(<parameter><decl><type><name>line_draw_t</name> <modifier>*</modifier></type> <name>main_line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>,

<parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>line_draw_skew</name><parameter_list>(<parameter><decl><type><name>line_draw_t</name> <modifier>*</modifier></type> <name>main_line</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dir_ori</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>,

<parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>line_init</name><parameter_list>(<parameter><decl><type><name>line_draw_t</name> <modifier>*</modifier></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_point_t</name> <modifier>*</modifier></type> <name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_point_t</name> <modifier>*</modifier></type> <name>p2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>line_next</name><parameter_list>(<parameter><decl><type><name>line_draw_t</name> <modifier>*</modifier></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>line_next_y</name><parameter_list>(<parameter><decl><type><name>line_draw_t</name> <modifier>*</modifier></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>line_next_x</name><parameter_list>(<parameter><decl><type><name>line_draw_t</name> <modifier>*</modifier></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>lv_draw_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_point_t</name> <modifier>*</modifier></type> <name>point1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_point_t</name> <modifier>*</modifier></type> <name>point2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>point1</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <name><name>point2</name><operator>-&gt;</operator><name>x</name></name> <operator>&amp;&amp;</operator> <name><name>point1</name><operator>-&gt;</operator><name>y</name></name> <operator>==</operator> <name><name>point2</name><operator>-&gt;</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>point1</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;</operator> <name><name>mask</name><operator>-&gt;</operator><name>x1</name></name> <operator>-</operator> <name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>&amp;&amp;</operator> <name><name>point2</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;</operator> <name><name>mask</name><operator>-&gt;</operator><name>x1</name></name> <operator>-</operator> <name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>point1</name><operator>-&gt;</operator><name>x</name></name> <operator>&gt;</operator> <name><name>mask</name><operator>-&gt;</operator><name>x2</name></name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>&amp;&amp;</operator> <name><name>point2</name><operator>-&gt;</operator><name>x</name></name> <operator>&gt;</operator> <name><name>mask</name><operator>-&gt;</operator><name>x2</name></name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>point1</name><operator>-&gt;</operator><name>y</name></name> <operator>&lt;</operator> <name><name>mask</name><operator>-&gt;</operator><name>y1</name></name> <operator>-</operator> <name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>&amp;&amp;</operator> <name><name>point2</name><operator>-&gt;</operator><name>y</name></name> <operator>&lt;</operator> <name><name>mask</name><operator>-&gt;</operator><name>y1</name></name> <operator>-</operator> <name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>point1</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;</operator> <name><name>mask</name><operator>-&gt;</operator><name>y2</name></name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>&amp;&amp;</operator> <name><name>point2</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;</operator> <name><name>mask</name><operator>-&gt;</operator><name>y2</name></name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>line_draw_t</name></type> <name>main_line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p2</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>point1</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <name><name>point2</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>point1</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <name><name>point2</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>point1</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;</operator> <name><name>point2</name><operator>-&gt;</operator><name>x</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>point1</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>point1</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>point2</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>point2</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>point2</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>point2</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>point1</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>point1</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>point1</name><operator>-&gt;</operator><name>y</name></name> <operator>&lt;</operator> <name><name>point2</name><operator>-&gt;</operator><name>y</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>point1</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>point1</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>point2</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>point2</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>point2</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>point2</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>point1</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>point1</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>line_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>main_line</name><operator>.</operator><name>p1</name><operator>.</operator><name>y</name></name> <operator>==</operator> <name><name>main_line</name><operator>.</operator><name>p2</name><operator>.</operator><name>y</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>line_draw_hor</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_line</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>main_line</name><operator>.</operator><name>p1</name><operator>.</operator><name>x</name></name> <operator>==</operator> <name><name>main_line</name><operator>.</operator><name>p2</name><operator>.</operator><name>x</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>line_draw_ver</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_line</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>dir_ori</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<decl_stmt><decl><type><name>bool</name></type> <name>aa</name> <init>= <expr><call><name>lv_disp_get_antialiasing</name><argument_list>(<argument><expr><call><name>lv_refr_get_disp_refreshing</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>aa</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p_tmp</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>main_line</name><operator>.</operator><name>hor</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>main_line</name><operator>.</operator><name>p1</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>main_line</name><operator>.</operator><name>p2</name><operator>.</operator><name>y</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dir_ori</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_tmp</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>main_line</name><operator>.</operator><name>p2</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_tmp</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>main_line</name><operator>.</operator><name>p2</name><operator>.</operator><name>y</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>line_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>main_line</name><operator>.</operator><name>sy</name></name> <operator>=</operator> <call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>main_line</name><operator>.</operator><name>sy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>main_line</name><operator>.</operator><name>p1</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name><name>main_line</name><operator>.</operator><name>p2</name><operator>.</operator><name>y</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dir_ori</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_tmp</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>main_line</name><operator>.</operator><name>p2</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_tmp</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>main_line</name><operator>.</operator><name>p2</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>line_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>main_line</name><operator>.</operator><name>sy</name></name> <operator>=</operator> <operator>-</operator><call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>main_line</name><operator>.</operator><name>sy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>main_line</name><operator>.</operator><name>p1</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>main_line</name><operator>.</operator><name>p2</name><operator>.</operator><name>x</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dir_ori</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_tmp</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>main_line</name><operator>.</operator><name>p2</name><operator>.</operator><name>x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_tmp</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>main_line</name><operator>.</operator><name>p2</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>line_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>main_line</name><operator>.</operator><name>sx</name></name> <operator>=</operator> <call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>main_line</name><operator>.</operator><name>sx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>main_line</name><operator>.</operator><name>p1</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>main_line</name><operator>.</operator><name>p2</name><operator>.</operator><name>x</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dir_ori</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_tmp</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>main_line</name><operator>.</operator><name>p2</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_tmp</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>main_line</name><operator>.</operator><name>p2</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>line_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>main_line</name><operator>.</operator><name>sx</name></name> <operator>=</operator> <operator>-</operator><call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>main_line</name><operator>.</operator><name>sx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>line_draw_skew</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_line</name></expr></argument>, <argument><expr><name>dir_ori</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>line_draw_hor</name><parameter_list>(<parameter><decl><type><name>line_draw_t</name> <modifier>*</modifier></type> <name>main_line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>width</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>width_half</name> <init>= <expr><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>width_1</name> <init>= <expr><name>width</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa</name> <init>= <expr><ternary><condition><expr><name>opa_scale</name> <operator>==</operator> <name>LV_OPA_COVER</name></expr> ?</condition><then> <expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>opa</name></name></expr> </then><else>: <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>opa</name></name> <operator>*</operator> <name>opa_scale</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>act_area</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>act_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>act_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>act_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>width_half</name> <operator>-</operator> <name>width_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>act_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>width_half</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>draw_area</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><name><name>act_area</name><operator>.</operator><name>x1</name></name></expr></argument>, <argument><expr><name><name>act_area</name><operator>.</operator><name>x2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>act_area</name><operator>.</operator><name>x1</name></name></expr></argument>, <argument><expr><name><name>act_area</name><operator>.</operator><name>x2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><name><name>act_area</name><operator>.</operator><name>y1</name></name></expr></argument>, <argument><expr><name><name>act_area</name><operator>.</operator><name>y2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>act_area</name><operator>.</operator><name>y1</name></name></expr></argument>, <argument><expr><name><name>act_area</name><operator>.</operator><name>y2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>draw_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>line_draw_ver</name><parameter_list>(<parameter><decl><type><name>line_draw_t</name> <modifier>*</modifier></type> <name>main_line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>width</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>width_half</name> <init>= <expr><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>width_1</name> <init>= <expr><name>width</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa</name> <init>= <expr><ternary><condition><expr><name>opa_scale</name> <operator>==</operator> <name>LV_OPA_COVER</name></expr> ?</condition><then> <expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>opa</name></name></expr> </then><else>: <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>opa</name></name> <operator>*</operator> <name>opa_scale</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>act_area</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>act_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>width_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>act_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>width_half</name> <operator>+</operator> <name>width_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>act_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>act_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>draw_area</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><name><name>act_area</name><operator>.</operator><name>x1</name></name></expr></argument>, <argument><expr><name><name>act_area</name><operator>.</operator><name>x2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>act_area</name><operator>.</operator><name>x1</name></name></expr></argument>, <argument><expr><name><name>act_area</name><operator>.</operator><name>x2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><name><name>act_area</name><operator>.</operator><name>y1</name></name></expr></argument>, <argument><expr><name><name>act_area</name><operator>.</operator><name>y2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>act_area</name><operator>.</operator><name>y1</name></name></expr></argument>, <argument><expr><name><name>act_area</name><operator>.</operator><name>y2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>draw_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>line_draw_skew</name><parameter_list>(<parameter><decl><type><name>line_draw_t</name> <modifier>*</modifier></type> <name>main_line</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dir_ori</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>,

<parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa</name> <init>= <expr><ternary><condition><expr><name>opa_scale</name> <operator>==</operator> <name>LV_OPA_COVER</name></expr> ?</condition><then> <expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>opa</name></name></expr> </then><else>: <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>opa</name></name> <operator>*</operator> <name>opa_scale</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<decl_stmt><decl><type><name>bool</name></type> <name>aa</name> <init>= <expr><call><name>lv_disp_get_antialiasing</name><argument_list>(<argument><expr><call><name>lv_refr_get_disp_refreshing</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>vect_main</name></decl>, <decl><type ref="prev"/><name>vect_norm</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vect_main</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vect_main</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>main_line</name><operator>-&gt;</operator><name>hor</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>dir_ori</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vect_norm</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><name><name>vect_main</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vect_norm</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>vect_main</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>vect_norm</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>vect_main</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vect_norm</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><name><name>vect_main</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>dir_ori</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vect_norm</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>vect_main</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vect_norm</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><name><name>vect_main</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>vect_norm</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><name><name>vect_main</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vect_norm</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>vect_main</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>vect_norm</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>vect_norm</name><operator>.</operator><name>x</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vect_norm</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>vect_norm</name><operator>.</operator><name>y</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>width</name></decl>;</decl_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>pattern_size</name> <init>= <expr><name>width</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name> <modifier>*</modifier></type> <name>pattern</name> <init>= <expr><call><name>lv_draw_get_buf</name><argument_list>(<argument><expr><name>pattern_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_point_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>width</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>line_draw_t</name></type> <name>pattern_line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p0</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>line_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pattern_line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vect_norm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>width_sqr</name> <init>= <expr><name>width</name> <operator>*</operator> <name>width</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>lv_coord_t</name><operator>)</operator><name>pattern_size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>pattern_line</name><operator>.</operator><name>p_act</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>pattern_line</name><operator>.</operator><name>p_act</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sqr</name> <init>= <expr><name><name>pattern_line</name><operator>.</operator><name>p_act</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>pattern_line</name><operator>.</operator><name>p_act</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern_line</name><operator>.</operator><name>p_act</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>pattern_line</name><operator>.</operator><name>p_act</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>sqr</name> <operator>&gt;=</operator> <name>width_sqr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>aa</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>width</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>line_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pattern_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>aa_last_corner</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>width_safe</name> <init>= <expr><name>width</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>aa</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>width</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>width_safe</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>aa_last_corner</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x_center_ofs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y_center_ofs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>width</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x_center_ofs</name> <operator>=</operator> <name><name>pattern</name><index>[<expr><name>width</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y_center_ofs</name> <operator>=</operator> <name><name>pattern</name><index>[<expr><name>width</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>main_line</name><operator>-&gt;</operator><name>hor</name></name> <operator>&amp;&amp;</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>dir_ori</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>main_line</name><operator>-&gt;</operator><name>hor</name></name> <operator>&amp;&amp;</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>x</name></name> <operator>&gt;=</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>dir_ori</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-=</operator> <name>x_center_ofs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-=</operator> <name>y_center_ofs</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>aa</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>main_line</name><operator>-&gt;</operator><name>hor</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>pattern</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>!=</operator> <name><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>seg_w</name> <init>= <expr><name><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>y</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>main_line</name><operator>-&gt;</operator><name>sy</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_aa_ver_seg</name><argument_list>(<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>+</operator> <name>seg_w</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>seg_w</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_aa_ver_seg</name><argument_list>(<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>+</operator> <name>seg_w</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><name>seg_w</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_aa_ver_seg</name><argument_list>(<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>, <argument><expr><name>seg_w</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_aa_ver_seg</name><argument_list>(<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>, <argument><expr><operator>-</operator><name>seg_w</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>aa_last_corner</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>pattern</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>!=</operator> <name><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>seg_w</name> <init>= <expr><name><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>main_line</name><operator>-&gt;</operator><name>sx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_aa_hor_seg</name><argument_list>(<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <name>seg_w</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>seg_w</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_aa_hor_seg</name><argument_list>(<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <name>seg_w</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><name>seg_w</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_aa_hor_seg</name><argument_list>(<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>,

<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>seg_w</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_aa_hor_seg</name><argument_list>(<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>,

<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><name>seg_w</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>aa_last_corner</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>width</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>aa</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if<condition>(<expr><name><name>main_line</name><operator>-&gt;</operator><name>hor</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>seg_w</name> <init>= <expr><name><name>pattern</name><index>[<expr><name>width_safe</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>y</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>main_line</name><operator>-&gt;</operator><name>sy</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_aa_ver_seg</name><argument_list>(<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>+</operator> <name>seg_w</name></expr></argument>, <argument><expr><name>seg_w</name> <operator>+</operator> <name><name>main_line</name><operator>-&gt;</operator><name>sy</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_aa_ver_seg</name><argument_list>(<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>+</operator> <name>seg_w</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>seg_w</name> <operator>+</operator> <name><name>main_line</name><operator>-&gt;</operator><name>sy</name></name><operator>)</operator></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_aa_ver_seg</name><argument_list>(<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>, <argument><expr><name>seg_w</name> <operator>+</operator> <name><name>main_line</name><operator>-&gt;</operator><name>sy</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_aa_ver_seg</name><argument_list>(<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>seg_w</name> <operator>+</operator> <name><name>main_line</name><operator>-&gt;</operator><name>sy</name></name><operator>)</operator></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>seg_w</name> <init>= <expr><name><name>pattern</name><index>[<expr><name>width_safe</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>main_line</name><operator>-&gt;</operator><name>sx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_aa_hor_seg</name><argument_list>(<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <name>seg_w</name></expr></argument>,

<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>seg_w</name> <operator>+</operator> <name><name>main_line</name><operator>-&gt;</operator><name>sx</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_aa_hor_seg</name><argument_list>(<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <name>seg_w</name></expr></argument>,

<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>seg_w</name> <operator>+</operator> <name><name>main_line</name><operator>-&gt;</operator><name>sx</name></name><operator>)</operator></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_aa_hor_seg</name><argument_list>(<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>,

<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>seg_w</name> <operator>+</operator> <name><name>main_line</name><operator>-&gt;</operator><name>sx</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_aa_hor_seg</name><argument_list>(<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>,

<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>aa_last_corner</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>seg_w</name> <operator>+</operator> <name><name>main_line</name><operator>-&gt;</operator><name>sx</name></name><operator>)</operator></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>aa_shift1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>aa_shift2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>aa</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>main_line</name><operator>-&gt;</operator><name>hor</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>main_line</name><operator>-&gt;</operator><name>sx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>aa_shift1</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>aa_shift2</name> <operator>=</operator> <ternary><condition><expr><name>width</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>aa_shift1</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>aa_shift2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>aa_shift1</name> <operator>=</operator> <ternary><condition><expr><name>width</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>aa_shift2</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>main_line</name><operator>-&gt;</operator><name>sy</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>aa_shift1</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>aa_shift2</name> <operator>=</operator> <ternary><condition><expr><name>width</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>aa_shift1</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>aa_shift2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>aa_shift1</name> <operator>=</operator> <ternary><condition><expr><name>width</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>aa_shift2</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>lv_point_t</name></type> <name>prev_p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>prev_p</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prev_p</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>draw_area</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>first_run</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>main_line</name><operator>-&gt;</operator><name>hor</name></name></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><call><name>line_next_y</name><argument_list>(<argument><expr><name>main_line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>prev_p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>prev_p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>draw_area</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>prev_p</name><operator>.</operator><name>x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>draw_area</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>draw_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>!=</operator> <name><name>pattern</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>first_run</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>draw_area</name><operator>.</operator><name>x1</name></name></expr></argument>, <argument><expr><name><name>draw_area</name><operator>.</operator><name>y1</name></name> <operator>-</operator> <name><name>main_line</name><operator>-&gt;</operator><name>sy</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>aa</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_aa_hor_seg</name><argument_list>(<argument><expr><name><name>prev_p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>prev_p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name>aa_shift1</name></expr></argument>,

<argument><expr><operator>-</operator><operator>(</operator><name><name>main_line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>prev_p</name><operator>.</operator><name>x</name></name><operator>)</operator></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_aa_hor_seg</name><argument_list>(<argument><expr><name><name>prev_p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>width_safe</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>,

<argument><expr><name><name>prev_p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>width_safe</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>+</operator> <name>aa_shift2</name></expr></argument>, <argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>prev_p</name><operator>.</operator><name>x</name></name></expr></argument>,

<argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>first_run</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prev_p</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prev_p</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>prev_p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>prev_p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>draw_area</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>prev_p</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>draw_area</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>draw_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>!=</operator> <name><name>pattern</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>first_run</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>draw_area</name><operator>.</operator><name>x1</name></name></expr></argument>, <argument><expr><name><name>draw_area</name><operator>.</operator><name>y1</name></name> <operator>-</operator> <name><name>main_line</name><operator>-&gt;</operator><name>sy</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>aa</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_aa_hor_seg</name><argument_list>(<argument><expr><name><name>prev_p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>prev_p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name>aa_shift1</name></expr></argument>,

<argument><expr><operator>-</operator><operator>(</operator><name><name>main_line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>prev_p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_aa_hor_seg</name><argument_list>(<argument><expr><name><name>prev_p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>width_safe</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>prev_p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>width_safe</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>+</operator> <name>aa_shift2</name></expr></argument>,

<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>prev_p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else <block>{<block_content>

<while>while<condition>(<expr><call><name>line_next_x</name><argument_list>(<argument><expr><name>main_line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>prev_p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>prev_p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>draw_area</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>draw_area</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>prev_p</name><operator>.</operator><name>y</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>draw_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>!=</operator> <name><name>pattern</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>first_run</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>draw_area</name><operator>.</operator><name>x1</name></name> <operator>-</operator> <name><name>main_line</name><operator>-&gt;</operator><name>sx</name></name></expr></argument>, <argument><expr><name><name>draw_area</name><operator>.</operator><name>y1</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>aa</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_aa_ver_seg</name><argument_list>(<argument><expr><name><name>prev_p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name>aa_shift1</name></expr></argument>, <argument><expr><name><name>prev_p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>,

<argument><expr><operator>-</operator><operator>(</operator><name><name>main_line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>prev_p</name><operator>.</operator><name>y</name></name><operator>)</operator></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_aa_ver_seg</name><argument_list>(<argument><expr><name><name>prev_p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>width_safe</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <name>aa_shift2</name></expr></argument>,

<argument><expr><name><name>prev_p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>width_safe</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>, <argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>prev_p</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>first_run</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prev_p</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prev_p</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>prev_p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>prev_p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>draw_area</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>draw_area</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <name><name>main_line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>prev_p</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>draw_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>!=</operator> <name><name>pattern</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>first_run</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>draw_area</name><operator>.</operator><name>x1</name></name> <operator>-</operator> <name><name>main_line</name><operator>-&gt;</operator><name>sx</name></name></expr></argument>, <argument><expr><name><name>draw_area</name><operator>.</operator><name>y1</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>aa</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_aa_ver_seg</name><argument_list>(<argument><expr><name><name>prev_p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name>aa_shift1</name></expr></argument>, <argument><expr><name><name>prev_p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>,

<argument><expr><operator>-</operator><operator>(</operator><name><name>main_line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>prev_p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_aa_ver_seg</name><argument_list>(<argument><expr><name><name>prev_p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>width_safe</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <name>aa_shift2</name></expr></argument>, <argument><expr><name><name>prev_p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>pattern</name><index>[<expr><name>width_safe</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>,

<argument><expr><name><name>main_line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>prev_p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>line_init</name><parameter_list>(<parameter><decl><type><name>line_draw_t</name> <modifier>*</modifier></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_point_t</name> <modifier>*</modifier></type> <name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_point_t</name> <modifier>*</modifier></type> <name>p2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p2</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>p2</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>dx</name></name> <operator>=</operator> <call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>sx</name></name> <operator>=</operator> <ternary><condition><expr><name><name>line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>x</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>dy</name></name> <operator>=</operator> <call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>sy</name></name> <operator>=</operator> <ternary><condition><expr><name><name>line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>y</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>line</name><operator>-&gt;</operator><name>dx</name></name> <operator>&gt;</operator> <name><name>line</name><operator>-&gt;</operator><name>dy</name></name></expr> ?</condition><then> <expr><name><name>line</name><operator>-&gt;</operator><name>dx</name></name></expr> </then><else>: <expr><operator>-</operator><name><name>line</name><operator>-&gt;</operator><name>dy</name></name></expr></else></ternary><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>e2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>hor</name></name> <operator>=</operator> <ternary><condition><expr><name><name>line</name><operator>-&gt;</operator><name>dx</name></name> <operator>&gt;</operator> <name><name>line</name><operator>-&gt;</operator><name>dy</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>line</name><operator>-&gt;</operator><name>p1</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>line_next</name><parameter_list>(<parameter><decl><type><name>line_draw_t</name> <modifier>*</modifier></type> <name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>x</name></name> <operator>==</operator> <name><name>line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>x</name></name> <operator>&amp;&amp;</operator> <name><name>line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>y</name></name> <operator>==</operator> <name><name>line</name><operator>-&gt;</operator><name>p2</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>e2</name></name> <operator>=</operator> <name><name>line</name><operator>-&gt;</operator><name>err</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>e2</name></name> <operator>&gt;</operator> <operator>-</operator><name><name>line</name><operator>-&gt;</operator><name>dx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>err</name></name> <operator>-=</operator> <name><name>line</name><operator>-&gt;</operator><name>dy</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>line</name><operator>-&gt;</operator><name>sx</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>e2</name></name> <operator>&lt;</operator> <name><name>line</name><operator>-&gt;</operator><name>dy</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>err</name></name> <operator>+=</operator> <name><name>line</name><operator>-&gt;</operator><name>dx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>line</name><operator>-&gt;</operator><name>sy</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>line_next_y</name><parameter_list>(<parameter><decl><type><name>line_draw_t</name> <modifier>*</modifier></type> <name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>last_y</name> <init>= <expr><name><name>line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>line_next</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><name>last_y</name> <operator>==</operator> <name><name>line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>y</name></name></expr>)</condition>;</do>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>line_next_x</name><parameter_list>(<parameter><decl><type><name>line_draw_t</name> <modifier>*</modifier></type> <name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>last_x</name> <init>= <expr><name><name>line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>line_next</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><name>last_x</name> <operator>==</operator> <name><name>line</name><operator>-&gt;</operator><name>p_act</name><operator>.</operator><name>x</name></name></expr>)</condition>;</do>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

</unit>
