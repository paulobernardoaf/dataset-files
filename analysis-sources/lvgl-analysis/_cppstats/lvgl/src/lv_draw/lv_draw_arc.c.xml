<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_draw\lv_draw_arc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_draw_arc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_math.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ver_line</name><parameter_list>(<parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name></type> <name>color</name></decl></parameter>,

<parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>hor_line</name><parameter_list>(<parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name></type> <name>color</name></decl></parameter>,

<parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>deg_test_norm</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>deg</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>end</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>deg_test_inv</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>deg</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>end</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>lv_draw_arc</name><parameter_list>(<parameter><decl><type><name>lv_coord_t</name></type> <name>center_x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>center_y</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name></type> <name>start_angle</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>end_angle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>thickness</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>thickness</name> <operator>&gt;</operator> <name>radius</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>thickness</name> <operator>=</operator> <name>radius</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<expr_stmt><expr><name>thickness</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>radius</name><operator>--</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>r_out</name> <init>= <expr><name>radius</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>r_in</name> <init>= <expr><name>r_out</name> <operator>-</operator> <name>thickness</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>deg_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>deg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name><name>x_start</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name><name>x_end</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>color</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa</name> <init>= <expr><ternary><condition><expr><name>opa_scale</name> <operator>==</operator> <name>LV_OPA_COVER</name></expr> ?</condition><then> <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>opa</name></name></expr> </then><else>: <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>opa</name></name> <operator>*</operator> <name>opa_scale</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>deg_test</name>)<parameter_list>(<parameter><decl><type><name>uint16_t</name></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<if_stmt><if>if<condition>(<expr><name>start_angle</name> <operator>&lt;=</operator> <name>end_angle</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>deg_test</name> <operator>=</operator> <name>deg_test_norm</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>deg_test</name> <operator>=</operator> <name>deg_test_inv</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>middle_r_out</name> <init>= <expr><name>r_out</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>LV_ANTIALIAS</name></expr></cpp:if>

<expr_stmt><expr><name>thickness</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>middle_r_out</name> <operator>=</operator> <name>r_out</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>deg_test</name><argument_list>(<argument><expr><literal type="number">270</literal></expr></argument>, <argument><expr><name>start_angle</name></expr></argument>, <argument><expr><name>end_angle</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>hor_line</name><argument_list>(<argument><expr><name>center_x</name> <operator>-</operator> <name>middle_r_out</name></expr></argument>, <argument><expr><name>center_y</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>thickness</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><call><name>deg_test</name><argument_list>(<argument><expr><literal type="number">90</literal></expr></argument>, <argument><expr><name>start_angle</name></expr></argument>, <argument><expr><name>end_angle</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>hor_line</name><argument_list>(<argument><expr><name>center_x</name> <operator>+</operator> <name>r_in</name></expr></argument>, <argument><expr><name>center_y</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>thickness</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><call><name>deg_test</name><argument_list>(<argument><expr><literal type="number">180</literal></expr></argument>, <argument><expr><name>start_angle</name></expr></argument>, <argument><expr><name>end_angle</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ver_line</name><argument_list>(<argument><expr><name>center_x</name></expr></argument>, <argument><expr><name>center_y</name> <operator>-</operator> <name>middle_r_out</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>thickness</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><call><name>deg_test</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>start_angle</name></expr></argument>, <argument><expr><name>end_angle</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ver_line</name><argument_list>(<argument><expr><name>center_x</name></expr></argument>, <argument><expr><name>center_y</name> <operator>+</operator> <name>r_in</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>thickness</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>r_out_sqr</name> <init>= <expr><name>r_out</name> <operator>*</operator> <name>r_out</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>r_in_sqr</name> <init>= <expr><name>r_in</name> <operator>*</operator> <name>r_in</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>r_out_aa_sqr</name> <init>= <expr><operator>(</operator><name>r_out</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>r_out</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>r_in_aa_sqr</name> <init>= <expr><operator>(</operator><name>r_in</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>r_in</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int16_t</name></type> <name>xi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>yi</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>yi</name> <operator>=</operator> <operator>-</operator><name>r_out</name></expr>;</init> <condition><expr><name>yi</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>yi</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>x_start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>LV_COORD_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x_start</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>LV_COORD_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x_start</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>LV_COORD_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x_start</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>LV_COORD_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x_end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>LV_COORD_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x_end</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>LV_COORD_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x_end</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>LV_COORD_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x_end</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>LV_COORD_MIN</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xe</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>xi</name> <operator>=</operator> <operator>-</operator><name>r_out</name></expr>;</init> <condition><expr><name>xi</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>xi</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>r_act_sqr</name> <init>= <expr><name>xi</name> <operator>*</operator> <name>xi</name> <operator>+</operator> <name>yi</name> <operator>*</operator> <name>yi</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>r_act_sqr</name> <operator>&gt;</operator> <name>r_out_aa_sqr</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>(<expr><name>r_act_sqr</name> <operator>&gt;</operator> <name>r_out_sqr</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>deg_base</name> <operator>=</operator> <call><name>lv_atan2</name><argument_list>(<argument><expr><name>xi</name></expr></argument>, <argument><expr><name>yi</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">180</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>opa2</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>r_act_sqr</name> <operator>&gt;</operator> <name>r_out_sqr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opa2</name> <operator>=</operator> <name>LV_OPA_100</name> <operator>*</operator> <operator>(</operator><name>r_out</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <call><name>lv_sqrt</name><argument_list>(<argument><expr><name>LV_OPA_100</name> <operator>*</operator> <name>LV_OPA_100</name> <operator>*</operator> <name>r_act_sqr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>opa2</name> <operator>&lt;</operator> <name>LV_OPA_0</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>opa2</name> <operator>=</operator> <name>LV_OPA_0</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>opa2</name> <operator>&gt;</operator> <name>LV_OPA_100</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>opa2</name> <operator>=</operator> <name>LV_OPA_100</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>r_act_sqr</name> <operator>&lt;</operator> <name>r_in_sqr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>xe</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>xe</name> <operator>=</operator> <name>xi</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>opa2</name> <operator>=</operator> <call><name>lv_sqrt</name><argument_list>(<argument><expr><name>LV_OPA_100</name> <operator>*</operator> <name>LV_OPA_100</name> <operator>*</operator> <name>r_act_sqr</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>LV_OPA_100</name> <operator>*</operator> <operator>(</operator><name>r_in</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>opa2</name> <operator>&lt;</operator> <name>LV_OPA_0</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>opa2</name> <operator>=</operator> <name>LV_OPA_0</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>opa2</name> <operator>&gt;</operator> <name>LV_OPA_100</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>opa2</name> <operator>=</operator> <name>LV_OPA_100</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>r_act_sqr</name> <operator>&lt;</operator> <name>r_in_aa_sqr</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>opa2</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>deg_test</name><argument_list>(<argument><expr><literal type="number">180</literal> <operator>+</operator> <name>deg_base</name></expr></argument>, <argument><expr><name>start_angle</name></expr></argument>, <argument><expr><name>end_angle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name>center_x</name> <operator>+</operator> <name>xi</name></expr></argument>, <argument><expr><name>center_y</name> <operator>+</operator> <name>yi</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>deg_test</name><argument_list>(<argument><expr><literal type="number">360</literal> <operator>-</operator> <name>deg_base</name></expr></argument>, <argument><expr><name>start_angle</name></expr></argument>, <argument><expr><name>end_angle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name>center_x</name> <operator>+</operator> <name>xi</name></expr></argument>, <argument><expr><name>center_y</name> <operator>-</operator> <name>yi</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>deg_test</name><argument_list>(<argument><expr><literal type="number">180</literal> <operator>-</operator> <name>deg_base</name></expr></argument>, <argument><expr><name>start_angle</name></expr></argument>, <argument><expr><name>end_angle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name>center_x</name> <operator>-</operator> <name>xi</name></expr></argument>, <argument><expr><name>center_y</name> <operator>+</operator> <name>yi</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>deg_test</name><argument_list>(<argument><expr><name>deg_base</name></expr></argument>, <argument><expr><name>start_angle</name></expr></argument>, <argument><expr><name>end_angle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name>center_x</name> <operator>-</operator> <name>xi</name></expr></argument>, <argument><expr><name>center_y</name> <operator>-</operator> <name>yi</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>deg</name> <operator>=</operator> <literal type="number">180</literal> <operator>+</operator> <name>deg_base</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>deg_test</name><argument_list>(<argument><expr><name>deg</name></expr></argument>, <argument><expr><name>start_angle</name></expr></argument>, <argument><expr><name>end_angle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>x_start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>LV_COORD_MIN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>x_start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>xi</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>x_start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>LV_COORD_MIN</name> <operator>&amp;&amp;</operator> <name><name>x_end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>LV_COORD_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x_end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>xi</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>deg</name> <operator>=</operator> <literal type="number">360</literal> <operator>-</operator> <name>deg_base</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>deg_test</name><argument_list>(<argument><expr><name>deg</name></expr></argument>, <argument><expr><name>start_angle</name></expr></argument>, <argument><expr><name>end_angle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>x_start</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>LV_COORD_MIN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>x_start</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>xi</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>x_start</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>LV_COORD_MIN</name> <operator>&amp;&amp;</operator> <name><name>x_end</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>LV_COORD_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x_end</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>xi</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>deg</name> <operator>=</operator> <literal type="number">180</literal> <operator>-</operator> <name>deg_base</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>deg_test</name><argument_list>(<argument><expr><name>deg</name></expr></argument>, <argument><expr><name>start_angle</name></expr></argument>, <argument><expr><name>end_angle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>x_start</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>LV_COORD_MIN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>x_start</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>xi</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>x_start</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>LV_COORD_MIN</name> <operator>&amp;&amp;</operator> <name><name>x_end</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>LV_COORD_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x_end</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>xi</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>deg</name> <operator>=</operator> <name>deg_base</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>deg_test</name><argument_list>(<argument><expr><name>deg</name></expr></argument>, <argument><expr><name>start_angle</name></expr></argument>, <argument><expr><name>end_angle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>x_start</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>LV_COORD_MIN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>x_start</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>xi</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>x_start</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <name>LV_COORD_MIN</name> <operator>&amp;&amp;</operator> <name><name>x_end</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>LV_COORD_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x_end</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>xi</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>r_act_sqr</name> <operator>&lt;</operator> <name>r_in_sqr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>xe</name> <operator>=</operator> <name>xi</name></expr>;</expr_stmt>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name><name>x_start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>LV_COORD_MIN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>x_end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>LV_COORD_MIN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>x_end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>xe</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hor_line</name><argument_list>(<argument><expr><name>center_x</name> <operator>+</operator> <name><name>x_start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>center_y</name> <operator>+</operator> <name>yi</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>x_end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>x_start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>x_start</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>LV_COORD_MIN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>x_end</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>LV_COORD_MIN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>x_end</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>xe</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hor_line</name><argument_list>(<argument><expr><name>center_x</name> <operator>+</operator> <name><name>x_start</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>center_y</name> <operator>-</operator> <name>yi</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>x_end</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>x_start</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>x_start</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>LV_COORD_MIN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>x_end</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>LV_COORD_MIN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>x_end</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>xe</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hor_line</name><argument_list>(<argument><expr><name>center_x</name> <operator>-</operator> <name><name>x_end</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>center_y</name> <operator>+</operator> <name>yi</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>x_end</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>x_start</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>x_start</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <name>LV_COORD_MIN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>x_end</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>LV_COORD_MIN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>x_end</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>xe</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hor_line</name><argument_list>(<argument><expr><name>center_x</name> <operator>-</operator> <name><name>x_end</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>center_y</name> <operator>-</operator> <name>yi</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>x_end</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>x_start</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ver_line</name><parameter_list>(<parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>area</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_area_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hor_line</name><parameter_list>(<parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>area</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_area_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>deg_test_norm</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>deg</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>deg</name> <operator>&gt;=</operator> <name>start</name> <operator>&amp;&amp;</operator> <name>deg</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>deg_test_inv</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>deg</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>deg</name> <operator>&gt;=</operator> <name>start</name> <operator>||</operator> <name>deg</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

</unit>
