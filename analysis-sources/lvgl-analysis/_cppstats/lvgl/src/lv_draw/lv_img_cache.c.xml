<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_draw\lv_img_cache.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_img_cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_img_decoder.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_draw_img.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_hal/lv_hal_tick.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_gc.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_GC_INCLUDE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> LV_GC_INCLUDE</cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_IMG_CACHE_AGING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_IMG_CACHE_LIFE_GAIN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_IMG_CACHE_LIFE_LIMIT</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_IMG_CACHE_DEF_SIZE</name> <operator>&lt;</operator> <literal type="number">1</literal></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"LV_IMG_CACHE_DEF_SIZE must be &gt;= 1. See lv_conf.h"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint16_t</name></type> <name>entry_cnt</name></decl>;</decl_stmt>

<function><type><name>lv_img_cache_entry_t</name> <modifier>*</modifier></type> <name>lv_img_cache_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>entry_cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_img_cache_open: the cache size is 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_img_cache_entry_t</name> <modifier>*</modifier></type> <name>cache</name> <init>= <expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_img_cache_array</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>entry_cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>life</name> <operator>&gt;</operator> <name>INT32_MIN</name> <operator>+</operator> <name>LV_IMG_CACHE_AGING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>life</name> <operator>-=</operator> <name>LV_IMG_CACHE_AGING</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>lv_img_cache_entry_t</name> <modifier>*</modifier></type> <name>cached_src</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>entry_cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>match</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_img_src_t</name></type> <name>src_type</name> <init>= <expr><call><name>lv_img_src_get_type</name><argument_list>(<argument><expr><name><name>cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>dec_dsc</name><operator>.</operator><name>src</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>src_type</name> <operator>==</operator> <name>LV_IMG_SRC_VARIABLE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>dec_dsc</name><operator>.</operator><name>src</name></name> <operator>==</operator> <name>src</name> <operator>&amp;&amp;</operator> <name><name>cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>dec_dsc</name><operator>.</operator><name>style</name></name> <operator>==</operator> <name>style</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>match</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>src_type</name> <operator>==</operator> <name>LV_IMG_SRC_FILE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>dec_dsc</name><operator>.</operator><name>src</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>match</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>match</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cached_src</name> <operator>=</operator> <operator>&amp;</operator><name><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cached_src</name><operator>-&gt;</operator><name>life</name></name> <operator>+=</operator> <name><name>cached_src</name><operator>-&gt;</operator><name>dec_dsc</name><operator>.</operator><name>time_to_open</name></name> <operator>*</operator> <name>LV_IMG_CACHE_LIFE_GAIN</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cached_src</name><operator>-&gt;</operator><name>life</name></name> <operator>&gt;</operator> <name>LV_IMG_CACHE_LIFE_LIMIT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>cached_src</name><operator>-&gt;</operator><name>life</name></name> <operator>=</operator> <name>LV_IMG_CACHE_LIFE_LIMIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"image draw: image found in the cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>cached_src</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cached_src</name> <operator>=</operator> <operator>&amp;</operator><name><name>cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>entry_cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>life</name> <operator>&lt;</operator> <name><name>cached_src</name><operator>-&gt;</operator><name>life</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cached_src</name> <operator>=</operator> <operator>&amp;</operator><name><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name><name>cached_src</name><operator>-&gt;</operator><name>dec_dsc</name><operator>.</operator><name>src</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_img_decoder_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cached_src</name><operator>-&gt;</operator><name>dec_dsc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"image draw: cache miss, close and reuse an entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"image draw: cache miss, cached to an empty entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>t_start</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t_start</name> <operator>=</operator> <call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cached_src</name><operator>-&gt;</operator><name>dec_dsc</name><operator>.</operator><name>time_to_open</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>open_res</name> <init>= <expr><call><name>lv_img_decoder_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cached_src</name><operator>-&gt;</operator><name>dec_dsc</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>open_res</name> <operator>==</operator> <name>LV_RES_INV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Image draw cannot open the image resource"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_img_decoder_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cached_src</name><operator>-&gt;</operator><name>dec_dsc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cached_src</name><operator>-&gt;</operator><name>dec_dsc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_img_decoder_dsc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cached_src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_img_cache_entry_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cached_src</name><operator>-&gt;</operator><name>life</name></name> <operator>=</operator> <name>INT32_MIN</name></expr>;</expr_stmt> 

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cached_src</name><operator>-&gt;</operator><name>life</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cached_src</name><operator>-&gt;</operator><name>dec_dsc</name><operator>.</operator><name>time_to_open</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cached_src</name><operator>-&gt;</operator><name>dec_dsc</name><operator>.</operator><name>time_to_open</name></name> <operator>=</operator> <call><name>lv_tick_elaps</name><argument_list>(<argument><expr><name>t_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cached_src</name><operator>-&gt;</operator><name>dec_dsc</name><operator>.</operator><name>time_to_open</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>cached_src</name><operator>-&gt;</operator><name>dec_dsc</name><operator>.</operator><name>time_to_open</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>cached_src</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_img_cache_set_size</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>new_entry_cnt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_img_cache_array</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_img_cache_invalidate_src</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_img_cache_array</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_img_cache_array</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_img_cache_entry_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>new_entry_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_img_cache_array</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_img_cache_array</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>entry_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>entry_cnt</name> <operator>=</operator> <name>new_entry_cnt</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>entry_cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_img_cache_array</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>dec_dsc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_img_decoder_dsc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_img_cache_array</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_img_cache_entry_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_img_cache_invalidate_src</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_img_cache_entry_t</name> <modifier>*</modifier></type> <name>cache</name> <init>= <expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_img_cache_array</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>entry_cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>dec_dsc</name><operator>.</operator><name>src</name></name> <operator>==</operator> <name>src</name> <operator>||</operator> <name>src</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>dec_dsc</name><operator>.</operator><name>src</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_img_decoder_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dec_dsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dec_dsc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_img_decoder_dsc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_img_cache_entry_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

</unit>
