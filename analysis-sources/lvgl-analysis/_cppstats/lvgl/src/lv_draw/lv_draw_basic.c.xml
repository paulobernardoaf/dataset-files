<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_draw\lv_draw_basic.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_draw_basic.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_refr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_hal/lv_hal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_font/lv_font.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_area.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_color.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_draw.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VFILL_HW_ACC_SIZE_LIMIT</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_ATTRIBUTE_MEM_ALIGN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_ATTRIBUTE_MEM_ALIGN</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sw_mem_blend</name><parameter_list>(<parameter><decl><type><name>lv_color_t</name> <modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_color_t</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sw_color_fill</name><parameter_list>(<parameter><decl><type><name>lv_color_t</name> <modifier>*</modifier></type> <name>mem</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>mem_width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>fill_area</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name></type> <name>color</name></decl></parameter>,

<parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>LV_COLOR_SCREEN_TRANSP</name></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>lv_color_t</name></type> <name>color_mix_2_alpha</name><parameter_list>(<parameter><decl><type><name>lv_color_t</name></type> <name>bg_color</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>bg_opa</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name></type> <name>fg_color</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>fg_opa</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>lv_draw_px</name><parameter_list>(<parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask_p</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>opa</name> <operator>&lt;</operator> <name>LV_OPA_MIN</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>opa</name> <operator>&gt;</operator> <name>LV_OPA_MAX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>opa</name> <operator>=</operator> <name>LV_OPA_COVER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>x</name> <argument_list type="generic">&lt; <argument><expr><name><name>mask_p</name><operator>-&gt;</operator><name>x1</name></name> <operator>||</operator> <name>x</name></expr></argument> &gt;</argument_list></name> <name><name>mask_p</name><operator>-&gt;</operator><name>x2</name></name> <operator>||</operator> <name><name>y</name> <argument_list type="generic">&lt; <argument><expr><name><name>mask_p</name><operator>-&gt;</operator><name>y1</name></name> <operator>||</operator> <name>y</name></expr></argument> &gt;</argument_list></name> <name><name>mask_p</name><operator>-&gt;</operator><name>y2</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name> <init>= <expr><call><name>lv_refr_get_disp_refreshing</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_disp_buf_t</name> <modifier>*</modifier></type> <name>vdb</name> <init>= <expr><call><name>lv_disp_get_buf</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>vdb_width</name> <init>= <expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vdb</name><operator>-&gt;</operator><name>area</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>-=</operator> <name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>-=</operator> <name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>set_px_cb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>set_px_cb</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>vdb</name><operator>-&gt;</operator><name>buf_act</name></name></expr></argument>, <argument><expr><name>vdb_width</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>scr_transp</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>LV_COLOR_SCREEN_TRANSP</name></expr></cpp:if>

<expr_stmt><expr><name>scr_transp</name> <operator>=</operator> <name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>screen_transp</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_color_t</name> <modifier>*</modifier></type> <name>vdb_px_p</name> <init>= <expr><name><name>vdb</name><operator>-&gt;</operator><name>buf_act</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vdb_px_p</name> <operator>+=</operator> <name>y</name> <operator>*</operator> <name>vdb_width</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>scr_transp</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>opa</name> <operator>==</operator> <name>LV_OPA_COVER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>vdb_px_p</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>vdb_px_p</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><operator>*</operator><name>vdb_px_p</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>LV_COLOR_SCREEN_TRANSP</name></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>vdb_px_p</name> <operator>=</operator> <call><name>color_mix_2_alpha</name><argument_list>(<argument><expr><operator>*</operator><name>vdb_px_p</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>vdb_px_p</name><operator>)</operator><operator>.</operator><name><name>ch</name><operator>.</operator><name>alpha</name></name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_draw_fill</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>cords_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask_p</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>opa</name> <operator>&lt;</operator> <name>LV_OPA_MIN</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>opa</name> <operator>&gt;</operator> <name>LV_OPA_MAX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>opa</name> <operator>=</operator> <name>LV_OPA_COVER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>res_a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>union_ok</name></decl>;</decl_stmt>

<expr_stmt><expr><name>union_ok</name> <operator>=</operator> <call><name>lv_area_intersect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res_a</name></expr></argument>, <argument><expr><name>cords_p</name></expr></argument>, <argument><expr><name>mask_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>union_ok</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name> <init>= <expr><call><name>lv_refr_get_disp_refreshing</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_disp_buf_t</name> <modifier>*</modifier></type> <name>vdb</name> <init>= <expr><call><name>lv_disp_get_buf</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>vdb_rel_a</name></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>vdb_rel_a</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>res_a</name><operator>.</operator><name>x1</name></name> <operator>-</operator> <name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdb_rel_a</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>res_a</name><operator>.</operator><name>y1</name></name> <operator>-</operator> <name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdb_rel_a</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>res_a</name><operator>.</operator><name>x2</name></name> <operator>-</operator> <name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdb_rel_a</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>res_a</name><operator>.</operator><name>y2</name></name> <operator>-</operator> <name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_color_t</name> <modifier>*</modifier></type> <name>vdb_buf_tmp</name> <init>= <expr><name><name>vdb</name><operator>-&gt;</operator><name>buf_act</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>vdb_width</name> <init>= <expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vdb</name><operator>-&gt;</operator><name>area</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vdb_buf_tmp</name> <operator>+=</operator> <name>vdb_width</name> <operator>*</operator> <name><name>vdb_rel_a</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GPU</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>LV_ATTRIBUTE_MEM_ALIGN</name> <name>lv_color_t</name></type> <name><name>color_array_tmp</name><index>[<expr><name>LV_HOR_RES_MAX</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_coord_t</name></type> <name>last_width</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w</name> <init>= <expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vdb_rel_a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>w</name> <operator>&lt;</operator> <name>VFILL_HW_ACC_SIZE_LIMIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sw_color_fill</name><argument_list>(<argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>buf_act</name></name></expr></argument>, <argument><expr><name>vdb_width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vdb_rel_a</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>opa</name> <operator>==</operator> <name>LV_OPA_COVER</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>gpu_fill_cb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>gpu_fill_cb</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>buf_act</name></name></expr></argument>, <argument><expr><name>vdb_width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vdb_rel_a</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>lv_area_get_height</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vdb_rel_a</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>VFILL_HW_ACC_SIZE_LIMIT</name> <operator>&amp;&amp;</operator> <name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>gpu_blend_cb</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>color_array_tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>full</name> <operator>!=</operator> <name><name>color</name><operator>.</operator><name>full</name></name> <operator>||</operator> <name>last_width</name> <operator>!=</operator> <name>w</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>color_array_tmp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>full</name> <operator>=</operator> <name><name>color</name><operator>.</operator><name>full</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>last_width</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>row</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>row</name> <operator>=</operator> <name><name>vdb_rel_a</name><operator>.</operator><name>y1</name></name></expr>;</init> <condition><expr><name>row</name> <operator>&lt;=</operator> <name><name>vdb_rel_a</name><operator>.</operator><name>y2</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>gpu_blend_cb</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vdb_buf_tmp</name><index>[<expr><name><name>vdb_rel_a</name><operator>.</operator><name>x1</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>color_array_tmp</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vdb_buf_tmp</name> <operator>+=</operator> <name>vdb_width</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>sw_color_fill</name><argument_list>(<argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>buf_act</name></name></expr></argument>, <argument><expr><name>vdb_width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vdb_rel_a</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>gpu_blend_cb</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>color_array_tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>full</name> <operator>!=</operator> <name><name>color</name><operator>.</operator><name>full</name></name> <operator>||</operator> <name>last_width</name> <operator>!=</operator> <name>w</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>color_array_tmp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>full</name> <operator>=</operator> <name><name>color</name><operator>.</operator><name>full</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>last_width</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>row</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>row</name> <operator>=</operator> <name><name>vdb_rel_a</name><operator>.</operator><name>y1</name></name></expr>;</init> <condition><expr><name>row</name> <operator>&lt;=</operator> <name><name>vdb_rel_a</name><operator>.</operator><name>y2</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>gpu_blend_cb</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vdb_buf_tmp</name><index>[<expr><name><name>vdb_rel_a</name><operator>.</operator><name>x1</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>color_array_tmp</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vdb_buf_tmp</name> <operator>+=</operator> <name>vdb_width</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>sw_color_fill</name><argument_list>(<argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>buf_act</name></name></expr></argument>, <argument><expr><name>vdb_width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vdb_rel_a</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>sw_color_fill</name><argument_list>(<argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>buf_act</name></name></expr></argument>, <argument><expr><name>vdb_width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vdb_rel_a</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_draw_letter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_point_t</name> <modifier>*</modifier></type> <name>pos_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font_p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>letter</name></decl></parameter>,

<parameter><decl><type><name>lv_color_t</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>bpp1_opa_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>bpp2_opa_table</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">170</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>bpp4_opa_table</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">51</literal></expr>, 

<expr><literal type="number">68</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="number">119</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">170</literal></expr>, <expr><literal type="number">187</literal></expr>, <expr><literal type="number">204</literal></expr>, <expr><literal type="number">221</literal></expr>, <expr><literal type="number">238</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>opa</name> <operator>&lt;</operator> <name>LV_OPA_MIN</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>opa</name> <operator>&gt;</operator> <name>LV_OPA_MAX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>opa</name> <operator>=</operator> <name>LV_OPA_COVER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>font_p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Font: character's bitmap not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_font_glyph_dsc_t</name></type> <name>g</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>g_ret</name> <init>= <expr><call><name>lv_font_get_glyph_dsc</name><argument_list>(<argument><expr><name>font_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><name>letter</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>g_ret</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>pos_x</name> <init>= <expr><name><name>pos_p</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name><name>g</name><operator>.</operator><name>ofs_x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>pos_y</name> <init>= <expr><name><name>pos_p</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <operator>(</operator><name><name>font_p</name><operator>-&gt;</operator><name>line_height</name></name> <operator>-</operator> <name><name>font_p</name><operator>-&gt;</operator><name>base_line</name></name><operator>)</operator> <operator>-</operator> <name><name>g</name><operator>.</operator><name>box_h</name></name> <operator>-</operator> <name><name>g</name><operator>.</operator><name>ofs_y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>bpp_opa_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bitmask_init</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bitmask</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>g</name><operator>.</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>g</name><operator>.</operator><name>bpp</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>g</name><operator>.</operator><name>bpp</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>bpp_opa_table</name> <operator>=</operator> <name>bpp1_opa_table</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmask_init</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>bpp_opa_table</name> <operator>=</operator> <name>bpp2_opa_table</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmask_init</name> <operator>=</operator> <literal type="number">0xC0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name>bpp_opa_table</name> <operator>=</operator> <name>bpp4_opa_table</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmask_init</name> <operator>=</operator> <literal type="number">0xF0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><name>bpp_opa_table</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmask_init</name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<break>break;</break> 

<default>default:</default> <return>return;</return> 

</block_content>}</block></switch>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>map_p</name> <init>= <expr><call><name>lv_font_get_glyph_bitmap</name><argument_list>(<argument><expr><name>font_p</name></expr></argument>, <argument><expr><name>letter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>map_p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pos_x</name> <operator>+</operator> <name><name>g</name><operator>.</operator><name>box_w</name></name> <operator>&lt;</operator> <name><name>mask_p</name><operator>-&gt;</operator><name>x1</name></name> <operator>||</operator> <name>pos_x</name> <operator>&gt;</operator> <name><name>mask_p</name><operator>-&gt;</operator><name>x2</name></name> <operator>||</operator> <name>pos_y</name> <operator>+</operator> <name><name>g</name><operator>.</operator><name>box_h</name></name> <operator>&lt;</operator> <name><name>mask_p</name><operator>-&gt;</operator><name>y1</name></name> <operator>||</operator> <name>pos_y</name> <operator>&gt;</operator> <name><name>mask_p</name><operator>-&gt;</operator><name>y2</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name> <init>= <expr><call><name>lv_refr_get_disp_refreshing</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_disp_buf_t</name> <modifier>*</modifier></type> <name>vdb</name> <init>= <expr><call><name>lv_disp_get_buf</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>vdb_width</name> <init>= <expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vdb</name><operator>-&gt;</operator><name>area</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_color_t</name> <modifier>*</modifier></type> <name>vdb_buf_tmp</name> <init>= <expr><name><name>vdb</name><operator>-&gt;</operator><name>buf_act</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>col</name></decl>, <decl><type ref="prev"/><name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>width_byte_scr</name> <init>= <expr><name><name>g</name><operator>.</operator><name>box_w</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>g</name><operator>.</operator><name>box_w</name></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>width_byte_scr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>width_bit</name> <init>= <expr><name><name>g</name><operator>.</operator><name>box_w</name></name> <operator>*</operator> <name><name>g</name><operator>.</operator><name>bpp</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>subpx</name> <init>= <expr><ternary><condition><expr><name><name>font_p</name><operator>-&gt;</operator><name>subpx</name></name> <operator>==</operator> <name>LV_FONT_SUBPX_NONE</name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>col_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>col_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>row_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>row_end</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>subpx</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col_start</name> <operator>=</operator> <ternary><condition><expr><name>pos_x</name> <operator>&gt;=</operator> <name><name>mask_p</name><operator>-&gt;</operator><name>x1</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>mask_p</name><operator>-&gt;</operator><name>x1</name></name> <operator>-</operator> <name>pos_x</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>col_end</name> <operator>=</operator> <ternary><condition><expr><name>pos_x</name> <operator>+</operator> <name><name>g</name><operator>.</operator><name>box_w</name></name> <operator>&lt;=</operator> <name><name>mask_p</name><operator>-&gt;</operator><name>x2</name></name></expr> ?</condition><then> <expr><name><name>g</name><operator>.</operator><name>box_w</name></name></expr> </then><else>: <expr><name><name>mask_p</name><operator>-&gt;</operator><name>x2</name></name> <operator>-</operator> <name>pos_x</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>row_start</name> <operator>=</operator> <ternary><condition><expr><name>pos_y</name> <operator>&gt;=</operator> <name><name>mask_p</name><operator>-&gt;</operator><name>y1</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>mask_p</name><operator>-&gt;</operator><name>y1</name></name> <operator>-</operator> <name>pos_y</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>row_end</name> <operator>=</operator> <ternary><condition><expr><name>pos_y</name> <operator>+</operator> <name><name>g</name><operator>.</operator><name>box_h</name></name> <operator>&lt;=</operator> <name><name>mask_p</name><operator>-&gt;</operator><name>y2</name></name></expr> ?</condition><then> <expr><name><name>g</name><operator>.</operator><name>box_h</name></name></expr> </then><else>: <expr><name><name>mask_p</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name>pos_y</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>col_start</name> <operator>=</operator> <ternary><condition><expr><name>pos_x</name> <operator>&gt;=</operator> <name><name>mask_p</name><operator>-&gt;</operator><name>x1</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name><name>mask_p</name><operator>-&gt;</operator><name>x1</name></name> <operator>-</operator> <name>pos_x</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>col_end</name> <operator>=</operator> <ternary><condition><expr><name>pos_x</name> <operator>+</operator> <name><name>g</name><operator>.</operator><name>box_w</name></name> <operator>/</operator> <literal type="number">3</literal> <operator>&lt;=</operator> <name><name>mask_p</name><operator>-&gt;</operator><name>x2</name></name></expr> ?</condition><then> <expr><name><name>g</name><operator>.</operator><name>box_w</name></name></expr> </then><else>: <expr><operator>(</operator><name><name>mask_p</name><operator>-&gt;</operator><name>x2</name></name> <operator>-</operator> <name>pos_x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>row_start</name> <operator>=</operator> <ternary><condition><expr><name>pos_y</name> <operator>&gt;=</operator> <name><name>mask_p</name><operator>-&gt;</operator><name>y1</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>mask_p</name><operator>-&gt;</operator><name>y1</name></name> <operator>-</operator> <name>pos_y</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>row_end</name> <operator>=</operator> <ternary><condition><expr><name>pos_y</name> <operator>+</operator> <name><name>g</name><operator>.</operator><name>box_h</name></name> <operator>&lt;=</operator> <name><name>mask_p</name><operator>-&gt;</operator><name>y2</name></name></expr> ?</condition><then> <expr><name><name>g</name><operator>.</operator><name>box_h</name></name></expr> </then><else>: <expr><name><name>mask_p</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name>pos_y</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>vdb_buf_tmp</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>pos_y</name> <operator>-</operator> <name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>y1</name></name><operator>)</operator> <operator>*</operator> <name>vdb_width</name><operator>)</operator> <operator>+</operator> <name>pos_x</name> <operator>-</operator> <name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>subpx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>vdb_buf_tmp</name> <operator>+=</operator> <operator>(</operator><name>row_start</name> <operator>*</operator> <name>vdb_width</name><operator>)</operator> <operator>+</operator> <name>col_start</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>vdb_buf_tmp</name> <operator>+=</operator> <operator>(</operator><name>row_start</name> <operator>*</operator> <name>vdb_width</name><operator>)</operator> <operator>+</operator> <name>col_start</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bit_ofs</name> <init>= <expr><operator>(</operator><name>row_start</name> <operator>*</operator> <name>width_bit</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>col_start</name> <operator>*</operator> <name><name>g</name><operator>.</operator><name>bpp</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>map_p</name> <operator>+=</operator> <name>bit_ofs</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>letter_px</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>px_opa</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>col_bit</name></decl>;</decl_stmt>

<expr_stmt><expr><name>col_bit</name> <operator>=</operator> <name>bit_ofs</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>scr_transp</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>LV_COLOR_SCREEN_TRANSP</name></expr></cpp:if>

<expr_stmt><expr><name>scr_transp</name> <operator>=</operator> <name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>screen_transp</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>font_rgb</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>txt_rgb</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><call><name>LV_COLOR_GET_R</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>LV_COLOR_GET_G</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>, <macro><name>LV_COLOR_GET_B</name><argument_list>(<argument>color</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>row</name> <operator>=</operator> <name>row_start</name></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>row_end</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>bitmask</name> <operator>=</operator> <name>bitmask_init</name> <operator>&gt;&gt;</operator> <name>col_bit</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>sub_px_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>col</name> <operator>=</operator> <name>col_start</name></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>col_end</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>letter_px</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>map_p</name> <operator>&amp;</operator> <name>bitmask</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>col_bit</name> <operator>-</operator> <name><name>g</name><operator>.</operator><name>bpp</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>subpx</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>letter_px</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>opa</name> <operator>==</operator> <name>LV_OPA_COVER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>px_opa</name> <operator>=</operator> <ternary><condition><expr><name><name>g</name><operator>.</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>letter_px</name></expr> </then><else>: <expr><name><name>bpp_opa_table</name><index>[<expr><name>letter_px</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>px_opa</name> <operator>=</operator> <ternary><condition><expr><name><name>g</name><operator>.</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name>letter_px</name> <operator>*</operator> <name>opa</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>

</then><else>: <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>bpp_opa_table</name><index>[<expr><name>letter_px</name></expr>]</index></name> <operator>*</operator> <name>opa</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>set_px_cb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>set_px_cb</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>vdb</name><operator>-&gt;</operator><name>buf_act</name></name></expr></argument>, <argument><expr><name>vdb_width</name></expr></argument>,

<argument><expr><operator>(</operator><name>col</name> <operator>+</operator> <name>pos_x</name><operator>)</operator> <operator>-</operator> <name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>x1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>row</name> <operator>+</operator> <name>pos_y</name><operator>)</operator> <operator>-</operator> <name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>y1</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>px_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>vdb_buf_tmp</name><operator>-&gt;</operator><name>full</name></name> <operator>!=</operator> <name><name>color</name><operator>.</operator><name>full</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>px_opa</name> <operator>&gt;</operator> <name>LV_OPA_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>vdb_buf_tmp</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>px_opa</name> <operator>&gt;</operator> <name>LV_OPA_MIN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>scr_transp</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>vdb_buf_tmp</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><operator>*</operator><name>vdb_buf_tmp</name></expr></argument>, <argument><expr><name>px_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>LV_COLOR_SCREEN_TRANSP</name></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>vdb_buf_tmp</name> <operator>=</operator> <call><name>color_mix_2_alpha</name><argument_list>(<argument><expr><operator>*</operator><name>vdb_buf_tmp</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>vdb_buf_tmp</name><operator>)</operator><operator>.</operator><name><name>ch</name><operator>.</operator><name>alpha</name></name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>px_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vdb_buf_tmp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>letter_px</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>opa</name> <operator>==</operator> <name>LV_OPA_COVER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>px_opa</name> <operator>=</operator> <ternary><condition><expr><name><name>g</name><operator>.</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>letter_px</name></expr> </then><else>: <expr><name><name>bpp_opa_table</name><index>[<expr><name>letter_px</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>px_opa</name> <operator>=</operator> <ternary><condition><expr><name><name>g</name><operator>.</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name>letter_px</name> <operator>*</operator> <name>opa</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>

</then><else>: <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>bpp_opa_table</name><index>[<expr><name>letter_px</name></expr>]</index></name> <operator>*</operator> <name>opa</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>font_rgb</name><index>[<expr><name>sub_px_cnt</name></expr>]</index></name> <operator>=</operator> <name>px_opa</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>font_rgb</name><index>[<expr><name>sub_px_cnt</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>sub_px_cnt</name> <operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>sub_px_cnt</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>res_color</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>font_rgb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>font_rgb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>font_rgb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res_color</name> <operator>=</operator> <operator>*</operator><name>vdb_buf_tmp</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bg_rgb</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><call><name>LV_COLOR_GET_R</name><argument_list>(<argument><expr><operator>*</operator><name>vdb_buf_tmp</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>LV_COLOR_GET_G</name><argument_list>(<argument><expr><operator>*</operator><name>vdb_buf_tmp</name></expr></argument>)</argument_list></call></expr>, <macro><name>LV_COLOR_GET_B</name><argument_list>(<argument>*vdb_buf_tmp</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_FONT_SUBPX_BGR</name></expr></cpp:if>

<expr_stmt><expr><call><name>LV_COLOR_SET_B</name><argument_list>(<argument><expr><name>res_color</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>txt_rgb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>font_rgb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>bg_rgb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>font_rgb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_COLOR_SET_R</name><argument_list>(<argument><expr><name>res_color</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>txt_rgb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>font_rgb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>bg_rgb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>font_rgb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>LV_COLOR_SET_R</name><argument_list>(<argument><expr><name>res_color</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>txt_rgb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>font_rgb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>bg_rgb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>font_rgb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_COLOR_SET_B</name><argument_list>(<argument><expr><name>res_color</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>txt_rgb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>font_rgb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>bg_rgb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>font_rgb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>LV_COLOR_SET_G</name><argument_list>(<argument><expr><name>res_color</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>txt_rgb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>font_rgb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>bg_rgb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>font_rgb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>scr_transp</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vdb_buf_tmp</name><operator>-&gt;</operator><name>full</name></name> <operator>=</operator> <name><name>res_color</name><operator>.</operator><name>full</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>LV_COLOR_SCREEN_TRANSP</name></expr></cpp:if>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>vdb_buf_tmp</name> <operator>=</operator> <call><name>color_mix_2_alpha</name><argument_list>(<argument><expr><operator>*</operator><name>vdb_buf_tmp</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>vdb_buf_tmp</name><operator>)</operator><operator>.</operator><name><name>ch</name><operator>.</operator><name>alpha</name></name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>px_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>sub_px_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>vdb_buf_tmp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>col_bit</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>-</operator> <name><name>g</name><operator>.</operator><name>bpp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col_bit</name> <operator>+=</operator> <name><name>g</name><operator>.</operator><name>bpp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmask</name> <operator>=</operator> <name>bitmask</name> <operator>&gt;&gt;</operator> <name><name>g</name><operator>.</operator><name>bpp</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>col_bit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmask</name> <operator>=</operator> <name>bitmask_init</name></expr>;</expr_stmt>

<expr_stmt><expr><name>map_p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>col_bit</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>g</name><operator>.</operator><name>box_w</name></name> <operator>-</operator> <name>col_end</name><operator>)</operator> <operator>+</operator> <name>col_start</name><operator>)</operator> <operator>*</operator> <name><name>g</name><operator>.</operator><name>bpp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>map_p</name> <operator>+=</operator> <operator>(</operator><name>col_bit</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>col_bit</name> <operator>=</operator> <name>col_bit</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>subpx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>vdb_buf_tmp</name> <operator>+=</operator> <name>vdb_width</name> <operator>-</operator> <operator>(</operator><name>col_end</name> <operator>-</operator> <name>col_start</name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>vdb_buf_tmp</name> <operator>+=</operator> <name>vdb_width</name> <operator>-</operator> <operator>(</operator><name>col_end</name> <operator>-</operator> <name>col_start</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_draw_map</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>cords_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>map_p</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>chroma_key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>alpha_byte</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name></type> <name>recolor</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>recolor_opa</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>opa</name> <operator>&lt;</operator> <name>LV_OPA_MIN</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>opa</name> <operator>&gt;</operator> <name>LV_OPA_MAX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>opa</name> <operator>=</operator> <name>LV_OPA_COVER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>masked_a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>union_ok</name></decl>;</decl_stmt>

<expr_stmt><expr><name>union_ok</name> <operator>=</operator> <call><name>lv_area_intersect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>masked_a</name></expr></argument>, <argument><expr><name>cords_p</name></expr></argument>, <argument><expr><name>mask_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>union_ok</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>px_size_byte</name> <init>= <expr><ternary><condition><expr><name>alpha_byte</name></expr> ?</condition><then> <expr><name>LV_IMG_PX_SIZE_ALPHA_BYTE</name></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_color_t</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>map_width</name> <init>= <expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>cords_p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cords_p</name><operator>-&gt;</operator><name>y1</name></name> <operator>&lt;</operator> <name><name>masked_a</name><operator>.</operator><name>y1</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>map_p</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>map_width</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>masked_a</name><operator>.</operator><name>y1</name></name> <operator>-</operator> <name><name>cords_p</name><operator>-&gt;</operator><name>y1</name></name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>px_size_byte</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cords_p</name><operator>-&gt;</operator><name>x1</name></name> <operator>&lt;</operator> <name><name>masked_a</name><operator>.</operator><name>x1</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>map_p</name> <operator>+=</operator> <operator>(</operator><name><name>masked_a</name><operator>.</operator><name>x1</name></name> <operator>-</operator> <name><name>cords_p</name><operator>-&gt;</operator><name>x1</name></name><operator>)</operator> <operator>*</operator> <name>px_size_byte</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name> <init>= <expr><call><name>lv_refr_get_disp_refreshing</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_disp_buf_t</name> <modifier>*</modifier></type> <name>vdb</name> <init>= <expr><call><name>lv_disp_get_buf</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>masked_a</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>masked_a</name><operator>.</operator><name>x1</name></name> <operator>-</operator> <name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>masked_a</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>masked_a</name><operator>.</operator><name>y1</name></name> <operator>-</operator> <name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>masked_a</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>masked_a</name><operator>.</operator><name>x2</name></name> <operator>-</operator> <name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>masked_a</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>masked_a</name><operator>.</operator><name>y2</name></name> <operator>-</operator> <name><name>vdb</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>vdb_width</name> <init>= <expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vdb</name><operator>-&gt;</operator><name>area</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_color_t</name> <modifier>*</modifier></type> <name>vdb_buf_tmp</name> <init>= <expr><name><name>vdb</name><operator>-&gt;</operator><name>buf_act</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vdb_buf_tmp</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>vdb_width</name> <operator>*</operator> <name><name>masked_a</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>vdb_buf_tmp</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>masked_a</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>map_useful_w</name> <init>= <expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name>masked_a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>scr_transp</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>LV_COLOR_SCREEN_TRANSP</name></expr></cpp:if>

<expr_stmt><expr><name>scr_transp</name> <operator>=</operator> <name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>screen_transp</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>chroma_key</name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator> <name>alpha_byte</name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator> <name>opa</name> <operator>==</operator> <name>LV_OPA_COVER</name> <operator>&amp;&amp;</operator> <name>recolor_opa</name> <operator>==</operator> <name>LV_OPA_TRANSP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>set_px_cb</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>col</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>row</name> <operator>=</operator> <name><name>masked_a</name><operator>.</operator><name>y1</name></name></expr>;</init> <condition><expr><name>row</name> <operator>&lt;=</operator> <name><name>masked_a</name><operator>.</operator><name>y2</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>map_useful_w</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>px_color</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>lv_color_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>map_p</name><index>[<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>col</name> <operator>*</operator> <name>px_size_byte</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>set_px_cb</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>vdb</name><operator>-&gt;</operator><name>buf_act</name></name></expr></argument>, <argument><expr><name>vdb_width</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name><name>masked_a</name><operator>.</operator><name>x1</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>,

<argument><expr><name>px_color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>map_p</name> <operator>+=</operator> <name>map_width</name> <operator>*</operator> <name>px_size_byte</name></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></if>

<else>else <block>{<block_content>

<for>for<control>(<init><expr><name>row</name> <operator>=</operator> <name><name>masked_a</name><operator>.</operator><name>y1</name></name></expr>;</init> <condition><expr><name>row</name> <operator>&lt;=</operator> <name><name>masked_a</name><operator>.</operator><name>y2</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GPU</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>gpu_blend_cb</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sw_mem_blend</name><argument_list>(<argument><expr><name>vdb_buf_tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>lv_color_t</name> <operator>*</operator><operator>)</operator><name>map_p</name></expr></argument>, <argument><expr><name>map_useful_w</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>gpu_blend_cb</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><name>vdb_buf_tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>lv_color_t</name> <operator>*</operator><operator>)</operator><name>map_p</name></expr></argument>, <argument><expr><name>map_useful_w</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>sw_mem_blend</name><argument_list>(<argument><expr><name>vdb_buf_tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>lv_color_t</name> <operator>*</operator><operator>)</operator><name>map_p</name></expr></argument>, <argument><expr><name>map_useful_w</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>map_p</name> <operator>+=</operator> <name>map_width</name> <operator>*</operator> <name>px_size_byte</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>vdb_buf_tmp</name> <operator>+=</operator> <name>vdb_width</name></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>last_img_px</name> <init>= <expr><name>LV_COLOR_BLACK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>recolored_px</name> <init>= <expr><call><name>lv_color_mix</name><argument_list>(<argument><expr><name>recolor</name></expr></argument>, <argument><expr><name>last_img_px</name></expr></argument>, <argument><expr><name>recolor_opa</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>row</name> <operator>=</operator> <name><name>masked_a</name><operator>.</operator><name>y1</name></name></expr>;</init> <condition><expr><name>row</name> <operator>&lt;=</operator> <name><name>masked_a</name><operator>.</operator><name>y2</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>map_useful_w</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_result</name> <init>= <expr><name>opa</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>px_color_p</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>map_p</name><index>[<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>col</name> <operator>*</operator> <name>px_size_byte</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>px_color</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>alpha_byte</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">8</literal> <operator>||</operator> <name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><name><name>px_color</name><operator>.</operator><name>full</name></name> <operator>=</operator> <name><name>px_color_p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">16</literal></expr></cpp:elif>

<expr_stmt><expr><name><name>px_color</name><operator>.</operator><name>full</name></name> <operator>=</operator> <name><name>px_color_p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>px_color_p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:elif>

<expr_stmt><expr><name>px_color</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>lv_color_t</name> <operator>*</operator><operator>)</operator><name>px_color_p</name><operator>)</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>px_opa</name> <init>= <expr><operator>*</operator><operator>(</operator><name>px_color_p</name> <operator>+</operator> <name>LV_IMG_PX_SIZE_ALPHA_BYTE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>px_opa</name> <operator>==</operator> <name>LV_OPA_TRANSP</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>px_opa</name> <operator>!=</operator> <name>LV_OPA_COVER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>opa_result</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>px_opa</name> <operator>*</operator> <name>opa_result</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>px_color</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>lv_color_t</name> <operator>*</operator><operator>)</operator><name>px_color_p</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>chroma_key</name> <operator>&amp;&amp;</operator> <name><name>px_color</name><operator>.</operator><name>full</name></name> <operator>==</operator> <name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>color_chroma_key</name><operator>.</operator><name>full</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>recolor_opa</name> <operator>!=</operator> <name>LV_OPA_TRANSP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>last_img_px</name><operator>.</operator><name>full</name></name> <operator>!=</operator> <name><name>px_color</name><operator>.</operator><name>full</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>last_img_px</name> <operator>=</operator> <name>px_color</name></expr>;</expr_stmt>

<expr_stmt><expr><name>recolored_px</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>recolor</name></expr></argument>, <argument><expr><name>last_img_px</name></expr></argument>, <argument><expr><name>recolor_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>set_px_cb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>set_px_cb</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>vdb</name><operator>-&gt;</operator><name>buf_act</name></name></expr></argument>, <argument><expr><name>vdb_width</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name><name>masked_a</name><operator>.</operator><name>x1</name></name></expr></argument>,

<argument><expr><name>row</name></expr></argument>, <argument><expr><name>recolored_px</name></expr></argument>, <argument><expr><name>opa_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>opa_result</name> <operator>==</operator> <name>LV_OPA_COVER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vdb_buf_tmp</name><index>[<expr><name>col</name></expr>]</index></name><operator>.</operator><name>full</name> <operator>=</operator> <name><name>recolored_px</name><operator>.</operator><name>full</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vdb_buf_tmp</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>recolored_px</name></expr></argument>, <argument><expr><name><name>vdb_buf_tmp</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>, <argument><expr><name>opa_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>set_px_cb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>set_px_cb</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>vdb</name><operator>-&gt;</operator><name>buf_act</name></name></expr></argument>, <argument><expr><name>vdb_width</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name><name>masked_a</name><operator>.</operator><name>x1</name></name></expr></argument>,

<argument><expr><name>row</name></expr></argument>, <argument><expr><name>px_color</name></expr></argument>, <argument><expr><name>opa_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>opa_result</name> <operator>==</operator> <name>LV_OPA_COVER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vdb_buf_tmp</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <name>px_color</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>scr_transp</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vdb_buf_tmp</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>px_color</name></expr></argument>, <argument><expr><name><name>vdb_buf_tmp</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>, <argument><expr><name>opa_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>LV_COLOR_SCREEN_TRANSP</name></expr></cpp:if>

<expr_stmt><expr><name><name>vdb_buf_tmp</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <call><name>color_mix_2_alpha</name><argument_list>(<argument><expr><name><name>vdb_buf_tmp</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>vdb_buf_tmp</name><index>[<expr><name>col</name></expr>]</index></name><operator>.</operator><name><name>ch</name><operator>.</operator><name>alpha</name></name></expr></argument>,

<argument><expr><name>px_color</name></expr></argument>, <argument><expr><name>opa_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>map_p</name> <operator>+=</operator> <name>map_width</name> <operator>*</operator> <name>px_size_byte</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>vdb_buf_tmp</name> <operator>+=</operator> <name>vdb_width</name></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sw_mem_blend</name><parameter_list>(<parameter><decl><type><name>lv_color_t</name> <modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_color_t</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>opa</name> <operator>==</operator> <name>LV_OPA_COVER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>length</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_color_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>col</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dest</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sw_color_fill</name><parameter_list>(<parameter><decl><type><name>lv_color_t</name> <modifier>*</modifier></type> <name>mem</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>mem_width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>fill_area</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name></type> <name>color</name></decl></parameter>,

<parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name> <init>= <expr><call><name>lv_refr_get_disp_refreshing</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>set_px_cb</name></name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>col</name> <operator>=</operator> <name><name>fill_area</name><operator>-&gt;</operator><name>x1</name></name></expr>;</init> <condition><expr><name>col</name> <operator>&lt;=</operator> <name><name>fill_area</name><operator>-&gt;</operator><name>x2</name></name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>row</name> <operator>=</operator> <name><name>fill_area</name><operator>-&gt;</operator><name>y1</name></name></expr>;</init> <condition><expr><name>row</name> <operator>&lt;=</operator> <name><name>fill_area</name><operator>-&gt;</operator><name>y2</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>set_px_cb</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>mem</name></expr></argument>, <argument><expr><name>mem_width</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mem</name> <operator>+=</operator> <name><name>fill_area</name><operator>-&gt;</operator><name>y1</name></name> <operator>*</operator> <name>mem_width</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>opa</name> <operator>==</operator> <name>LV_OPA_COVER</name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>col</name> <operator>=</operator> <name><name>fill_area</name><operator>-&gt;</operator><name>x1</name></name></expr>;</init> <condition><expr><name>col</name> <operator>&lt;=</operator> <name><name>fill_area</name><operator>-&gt;</operator><name>x2</name></name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>mem</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>lv_color_t</name> <modifier>*</modifier></type> <name>mem_first</name> <init>= <expr><operator>&amp;</operator><name><name>mem</name><index>[<expr><name><name>fill_area</name><operator>-&gt;</operator><name>x1</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>copy_size</name> <init>= <expr><operator>(</operator><name><name>fill_area</name><operator>-&gt;</operator><name>x2</name></name> <operator>-</operator> <name><name>fill_area</name><operator>-&gt;</operator><name>x1</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_color_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mem</name> <operator>+=</operator> <name>mem_width</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>row</name> <operator>=</operator> <name><name>fill_area</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;=</operator> <name><name>fill_area</name><operator>-&gt;</operator><name>y2</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mem</name><index>[<expr><name><name>fill_area</name><operator>-&gt;</operator><name>x1</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>mem_first</name></expr></argument>, <argument><expr><name>copy_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mem</name> <operator>+=</operator> <name>mem_width</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>scr_transp</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>LV_COLOR_SCREEN_TRANSP</name></expr></cpp:if>

<expr_stmt><expr><name>scr_transp</name> <operator>=</operator> <name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>screen_transp</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>bg_tmp</name> <init>= <expr><name>LV_COLOR_BLACK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>opa_tmp</name> <init>= <expr><call><name>lv_color_mix</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><name>bg_tmp</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>row</name> <operator>=</operator> <name><name>fill_area</name><operator>-&gt;</operator><name>y1</name></name></expr>;</init> <condition><expr><name>row</name> <operator>&lt;=</operator> <name><name>fill_area</name><operator>-&gt;</operator><name>y2</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>col</name> <operator>=</operator> <name><name>fill_area</name><operator>-&gt;</operator><name>x1</name></name></expr>;</init> <condition><expr><name>col</name> <operator>&lt;=</operator> <name><name>fill_area</name><operator>-&gt;</operator><name>x2</name></name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>scr_transp</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>mem</name><index>[<expr><name>col</name></expr>]</index></name><operator>.</operator><name>full</name> <operator>!=</operator> <name><name>bg_tmp</name><operator>.</operator><name>full</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bg_tmp</name> <operator>=</operator> <name><name>mem</name><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>opa_tmp</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><name>bg_tmp</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mem</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <name>opa_tmp</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>LV_COLOR_SCREEN_TRANSP</name></expr></cpp:if>

<expr_stmt><expr><name><name>mem</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <call><name>color_mix_2_alpha</name><argument_list>(<argument><expr><name><name>mem</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>mem</name><index>[<expr><name>col</name></expr>]</index></name><operator>.</operator><name><name>ch</name><operator>.</operator><name>alpha</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>mem</name> <operator>+=</operator> <name>mem_width</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>LV_COLOR_SCREEN_TRANSP</name></expr></cpp:if>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>lv_color_t</name></type> <name>color_mix_2_alpha</name><parameter_list>(<parameter><decl><type><name>lv_color_t</name></type> <name>bg_color</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>bg_opa</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name></type> <name>fg_color</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>fg_opa</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>fg_opa</name> <operator>&gt;</operator> <name>LV_OPA_MAX</name> <operator>||</operator> <name>bg_opa</name> <operator>&lt;=</operator> <name>LV_OPA_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fg_color</name><operator>.</operator><name>ch</name><operator>.</operator><name>alpha</name></name> <operator>=</operator> <name>fg_opa</name></expr>;</expr_stmt>

<return>return <expr><name>fg_color</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>fg_opa</name> <operator>&lt;=</operator> <name>LV_OPA_MIN</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>bg_color</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>bg_opa</name> <operator>&gt;=</operator> <name>LV_OPA_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>lv_color_mix</name><argument_list>(<argument><expr><name>fg_color</name></expr></argument>, <argument><expr><name>bg_color</name></expr></argument>, <argument><expr><name>fg_opa</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_opa_t</name></type> <name>fg_opa_save</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_opa_t</name></type> <name>bg_opa_save</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_color_t</name></type> <name>fg_color_save</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_color_t</name></type> <name>bg_color_save</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>lv_color_t</name></type> <name>c</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>fg_opa</name> <operator>!=</operator> <name>fg_opa_save</name> <operator>||</operator> <name>bg_opa</name> <operator>!=</operator> <name>bg_opa_save</name> <operator>||</operator> <name><name>fg_color</name><operator>.</operator><name>full</name></name> <operator>!=</operator> <name><name>fg_color_save</name><operator>.</operator><name>full</name></name> <operator>||</operator>

<name><name>bg_color</name><operator>.</operator><name>full</name></name> <operator>!=</operator> <name><name>bg_color_save</name><operator>.</operator><name>full</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fg_opa_save</name> <operator>=</operator> <name>fg_opa</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bg_opa_save</name> <operator>=</operator> <name>bg_opa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fg_color_save</name><operator>.</operator><name>full</name></name> <operator>=</operator> <name><name>fg_color</name><operator>.</operator><name>full</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bg_color_save</name><operator>.</operator><name>full</name></name> <operator>=</operator> <name><name>bg_color</name><operator>.</operator><name>full</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>alpha_res</name> <init>= <expr><literal type="number">255</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name>fg_opa</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name>bg_opa</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>alpha_res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>ratio</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name>fg_opa</name> <operator>*</operator> <literal type="number">255</literal><operator>)</operator> <operator>/</operator> <name>alpha_res</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>fg_color</name></expr></argument>, <argument><expr><name>bg_color</name></expr></argument>, <argument><expr><name>ratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>ch</name><operator>.</operator><name>alpha</name></name> <operator>=</operator> <name>alpha_res</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
