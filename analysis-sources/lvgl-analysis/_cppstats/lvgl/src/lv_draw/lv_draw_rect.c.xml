<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats\lvgl\src\lv_draw\lv_draw_rect.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_draw_rect.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_circ.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_math.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_refr.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_OPA_EXTRA_PRECISION</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_BOTTOM_AA_EXTRA_RADIUS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_draw_rect_main_mid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>,

<parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_draw_rect_main_corner</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>,

<parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_draw_rect_border_straight</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>,

<parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_draw_rect_border_corner</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>,

<parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_SHADOW</name></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_draw_shadow</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>,

<parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_draw_shadow_full</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>,

<parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_draw_shadow_bottom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>,

<parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_draw_shadow_full_straight</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>lv_opa_t</name> <modifier>*</modifier></type> <name>map</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>uint16_t</name></type> <name>lv_draw_cont_radius_corr</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>lv_opa_t</name></type> <name>antialias_get_opa_circ</name><parameter_list>(<parameter><decl><type><name>lv_coord_t</name></type> <name>seg</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>px_id</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>lv_draw_rect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_area_get_height</name><argument_list>(<argument><expr><name>coords</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>coords</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_SHADOW</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_shadow</name><argument_list>(<argument><expr><name>coords</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>lv_area_is_on</name><argument_list>(<argument><expr><name>coords</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>opa</name></name> <operator>&gt;</operator> <name>LV_OPA_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_rect_main_mid</name><argument_list>(<argument><expr><name>coords</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>radius</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_rect_main_corner</name><argument_list>(<argument><expr><name>coords</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>part</name></name> <operator>!=</operator> <name>LV_BORDER_NONE</name> <operator>&amp;&amp;</operator>

<name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>opa</name></name> <operator>&gt;=</operator> <name>LV_OPA_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_rect_border_straight</name><argument_list>(<argument><expr><name>coords</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>radius</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_rect_border_corner</name><argument_list>(<argument><expr><name>coords</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_draw_rect_main_mid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>,

<parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>radius</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>radius</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>aa</name> <init>= <expr><call><name>lv_disp_get_antialiasing</name><argument_list>(<argument><expr><call><name>lv_refr_get_disp_refreshing</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>mcolor</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>main_color</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>gcolor</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>grad_color</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>mix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>height</name> <init>= <expr><call><name>lv_area_get_height</name><argument_list>(<argument><expr><name>coords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>width</name> <init>= <expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>coords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa</name> <init>= <expr><ternary><condition><expr><name>opa_scale</name> <operator>==</operator> <name>LV_OPA_COVER</name></expr> ?</condition><then> <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>opa</name></name></expr> </then><else>: <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>opa</name></name> <operator>*</operator> <name>opa_scale</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>radius</name> <operator>=</operator> <call><name>lv_draw_cont_radius_corr</name><argument_list>(<argument><expr><name>radius</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>radius</name> <operator>&gt;</operator> <name>height</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>work_area</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x2</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>mcolor</name><operator>.</operator><name>full</name></name> <operator>==</operator> <name><name>gcolor</name><operator>.</operator><name>full</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <name>radius</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name>radius</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>radius</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>aa</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y1</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y2</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y1</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y2</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>work_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mcolor</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>row_start</name> <init>= <expr><name><name>coords</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <name>radius</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>row_end</name> <init>= <expr><name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name>radius</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>act_color</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>radius</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>aa</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>row_start</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>row_end</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>row_start</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>row_end</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>row_start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>row_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>row</name> <operator>=</operator> <name>row_start</name></expr>;</init> <condition><expr><name>row</name> <operator>&lt;=</operator> <name>row_end</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mix</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name><name>work_area</name><operator>.</operator><name>y1</name></name><operator>)</operator> <operator>*</operator> <literal type="number">255</literal><operator>)</operator> <operator>/</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>act_color</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>mcolor</name></expr></argument>, <argument><expr><name>gcolor</name></expr></argument>, <argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>work_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>act_color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_draw_rect_main_corner</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>,

<parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>radius</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>radius</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>aa</name> <init>= <expr><call><name>lv_disp_get_antialiasing</name><argument_list>(<argument><expr><call><name>lv_refr_get_disp_refreshing</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>mcolor</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>main_color</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>gcolor</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>grad_color</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>act_color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa</name> <init>= <expr><ternary><condition><expr><name>opa_scale</name> <operator>==</operator> <name>LV_OPA_COVER</name></expr> ?</condition><then> <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>opa</name></name></expr> </then><else>: <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>opa</name></name> <operator>*</operator> <name>opa_scale</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>mix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>height</name> <init>= <expr><call><name>lv_area_get_height</name><argument_list>(<argument><expr><name>coords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>width</name> <init>= <expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>coords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>radius</name> <operator>=</operator> <call><name>lv_draw_cont_radius_corr</name><argument_list>(<argument><expr><name>radius</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>lt_origo</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>lb_origo</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>rt_origo</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>rb_origo</name></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>lt_origo</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name> <operator>+</operator> <name>radius</name> <operator>+</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <name>radius</name> <operator>+</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lb_origo</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name> <operator>+</operator> <name>radius</name> <operator>+</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name>radius</name> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rt_origo</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x2</name></name> <operator>-</operator> <name>radius</name> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <name>radius</name> <operator>+</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rb_origo</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x2</name></name> <operator>-</operator> <name>radius</name> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name>radius</name> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>edge_top_area</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>mid_top_area</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>mid_bot_area</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>edge_bot_area</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>cir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>cir_tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_circ_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cir_tmp</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_area_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mid_bot_area</name></expr></argument>, <argument><expr><name><name>lb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_X</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_Y</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>rb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT1_X</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT1_Y</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_area_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>edge_bot_area</name></expr></argument>, <argument><expr><name><name>lb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT3_X</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT3_Y</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>rb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT2_X</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT2_Y</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_area_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mid_top_area</name></expr></argument>, <argument><expr><name><name>lt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT5_X</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT5_Y</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>rt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_X</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_Y</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_area_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>edge_top_area</name></expr></argument>, <argument><expr><name><name>lt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT6_X</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT6_Y</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>rt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT7_X</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT7_Y</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>out_y_seg_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>out_y_seg_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>out_x_last</name> <init>= <expr><name>radius</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>aa_color_hor_top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>aa_color_hor_bottom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>aa_color_ver</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while<condition>(<expr><call><name>lv_circ_cont</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cir</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>aa</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>out_x_last</name> <operator>!=</operator> <name><name>cir</name><operator>.</operator><name>x</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out_y_seg_end</name> <operator>=</operator> <name><name>cir</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>seg_size</name> <init>= <expr><name>out_y_seg_end</name> <operator>-</operator> <name>out_y_seg_start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>aa_p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>aa_p</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>out_x_last</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aa_p</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>out_y_seg_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mix</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>radius</name> <operator>-</operator> <name>out_x_last</name><operator>)</operator> <operator>*</operator> <literal type="number">255</literal><operator>)</operator> <operator>/</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>aa_color_hor_top</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>gcolor</name></expr></argument>, <argument><expr><name>mcolor</name></expr></argument>, <argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>aa_color_hor_bottom</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>mcolor</name></expr></argument>, <argument><expr><name>gcolor</name></expr></argument>, <argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>seg_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>aa_opa</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>seg_size</name> <operator>&gt;</operator> <name>CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>aa_opa</name> <operator>=</operator> <call><name>antialias_get_opa_circ</name><argument_list>(<argument><expr><name>seg_size</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>aa_opa</name> <operator>=</operator> <name>opa</name> <operator>-</operator> <call><name>lv_draw_aa_get_opa</name><argument_list>(<argument><expr><name>seg_size</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT2_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT2_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name>aa_color_hor_bottom</name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT3_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT3_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name>aa_color_hor_bottom</name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT6_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT6_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name>aa_color_hor_top</name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT7_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT7_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name>aa_color_hor_top</name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mix</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>radius</name> <operator>-</operator> <name>out_y_seg_start</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>*</operator> <literal type="number">255</literal><operator>)</operator> <operator>/</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>aa_color_ver</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>mcolor</name></expr></argument>, <argument><expr><name>gcolor</name></expr></argument>, <argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT1_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT1_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name>aa_color_ver</name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name>aa_color_ver</name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>aa_color_ver</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>gcolor</name></expr></argument>, <argument><expr><name>mcolor</name></expr></argument>, <argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT5_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT5_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name>aa_color_ver</name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name>aa_color_ver</name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>out_x_last</name> <operator>=</operator> <name><name>cir</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_y_seg_start</name> <operator>=</operator> <name>out_y_seg_end</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>edge_top_refr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>mid_top_refr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>mid_bot_refr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>edge_bot_refr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>mid_bot_area</name><operator>.</operator><name>y1</name></name> <operator>!=</operator> <call><name>LV_CIRC_OCT4_Y</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>lb_origo</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mid_bot_refr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>edge_bot_area</name><operator>.</operator><name>y1</name></name> <operator>!=</operator> <call><name>LV_CIRC_OCT2_Y</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>lb_origo</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>edge_bot_refr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>mid_top_area</name><operator>.</operator><name>y1</name></name> <operator>!=</operator> <call><name>LV_CIRC_OCT8_Y</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>lt_origo</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mid_top_refr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>edge_top_area</name><operator>.</operator><name>y1</name></name> <operator>!=</operator> <call><name>LV_CIRC_OCT7_Y</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>lt_origo</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>edge_top_refr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>edge_top_refr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>mcolor</name><operator>.</operator><name>full</name></name> <operator>==</operator> <name><name>gcolor</name><operator>.</operator><name>full</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>act_color</name> <operator>=</operator> <name>mcolor</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>mix</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name><name>edge_top_area</name><operator>.</operator><name>y1</name></name><operator>)</operator> <operator>*</operator> <literal type="number">255</literal><operator>)</operator> <operator>/</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>act_color</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>mcolor</name></expr></argument>, <argument><expr><name>gcolor</name></expr></argument>, <argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>edge_top_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>act_color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>mid_top_refr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>mcolor</name><operator>.</operator><name>full</name></name> <operator>==</operator> <name><name>gcolor</name><operator>.</operator><name>full</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>act_color</name> <operator>=</operator> <name>mcolor</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>mix</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name><name>mid_top_area</name><operator>.</operator><name>y1</name></name><operator>)</operator> <operator>*</operator> <literal type="number">255</literal><operator>)</operator> <operator>/</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>act_color</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>mcolor</name></expr></argument>, <argument><expr><name>gcolor</name></expr></argument>, <argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mid_top_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>act_color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>mid_bot_refr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>mcolor</name><operator>.</operator><name>full</name></name> <operator>==</operator> <name><name>gcolor</name><operator>.</operator><name>full</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>act_color</name> <operator>=</operator> <name>mcolor</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>mix</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name><name>mid_bot_area</name><operator>.</operator><name>y1</name></name><operator>)</operator> <operator>*</operator> <literal type="number">255</literal><operator>)</operator> <operator>/</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>act_color</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>mcolor</name></expr></argument>, <argument><expr><name>gcolor</name></expr></argument>, <argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mid_bot_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>act_color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>edge_bot_refr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>mcolor</name><operator>.</operator><name>full</name></name> <operator>==</operator> <name><name>gcolor</name><operator>.</operator><name>full</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>act_color</name> <operator>=</operator> <name>mcolor</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>mix</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name><name>edge_bot_area</name><operator>.</operator><name>y1</name></name><operator>)</operator> <operator>*</operator> <literal type="number">255</literal><operator>)</operator> <operator>/</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>act_color</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>mcolor</name></expr></argument>, <argument><expr><name>gcolor</name></expr></argument>, <argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>edge_bot_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>act_color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_area_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mid_bot_area</name></expr></argument>, <argument><expr><name><name>lb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_X</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_Y</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>rb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT1_X</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT1_Y</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_area_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>edge_bot_area</name></expr></argument>, <argument><expr><name><name>lb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT3_X</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT3_Y</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>rb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT2_X</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT2_Y</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_area_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mid_top_area</name></expr></argument>, <argument><expr><name><name>lt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT5_X</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT5_Y</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>rt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_X</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_Y</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_area_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>edge_top_area</name></expr></argument>, <argument><expr><name><name>lt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT6_X</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT6_Y</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>rt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT7_X</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT7_Y</name><argument_list>(<argument><expr><name>cir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_circ_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cir_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name><name>mcolor</name><operator>.</operator><name>full</name></name> <operator>==</operator> <name><name>gcolor</name><operator>.</operator><name>full</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>act_color</name> <operator>=</operator> <name>mcolor</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>mix</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name><name>edge_top_area</name><operator>.</operator><name>y1</name></name><operator>)</operator> <operator>*</operator> <literal type="number">255</literal><operator>)</operator> <operator>/</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>act_color</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>mcolor</name></expr></argument>, <argument><expr><name>gcolor</name></expr></argument>, <argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>edge_top_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>act_color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>edge_top_area</name><operator>.</operator><name>y1</name></name> <operator>!=</operator> <name><name>mid_top_area</name><operator>.</operator><name>y1</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>mcolor</name><operator>.</operator><name>full</name></name> <operator>==</operator> <name><name>gcolor</name><operator>.</operator><name>full</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>act_color</name> <operator>=</operator> <name>mcolor</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>mix</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name><name>mid_top_area</name><operator>.</operator><name>y1</name></name><operator>)</operator> <operator>*</operator> <literal type="number">255</literal><operator>)</operator> <operator>/</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>act_color</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>mcolor</name></expr></argument>, <argument><expr><name>gcolor</name></expr></argument>, <argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mid_top_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>act_color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>mcolor</name><operator>.</operator><name>full</name></name> <operator>==</operator> <name><name>gcolor</name><operator>.</operator><name>full</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>act_color</name> <operator>=</operator> <name>mcolor</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>mix</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name><name>mid_bot_area</name><operator>.</operator><name>y1</name></name><operator>)</operator> <operator>*</operator> <literal type="number">255</literal><operator>)</operator> <operator>/</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>act_color</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>mcolor</name></expr></argument>, <argument><expr><name>gcolor</name></expr></argument>, <argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mid_bot_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>act_color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>edge_bot_area</name><operator>.</operator><name>y1</name></name> <operator>!=</operator> <name><name>mid_bot_area</name><operator>.</operator><name>y1</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>mcolor</name><operator>.</operator><name>full</name></name> <operator>==</operator> <name><name>gcolor</name><operator>.</operator><name>full</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>act_color</name> <operator>=</operator> <name>mcolor</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>mix</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name><name>edge_bot_area</name><operator>.</operator><name>y1</name></name><operator>)</operator> <operator>*</operator> <literal type="number">255</literal><operator>)</operator> <operator>/</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>act_color</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>mcolor</name></expr></argument>, <argument><expr><name>gcolor</name></expr></argument>, <argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>edge_bot_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>act_color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>aa</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>edge_top_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name> <operator>+</operator> <name>radius</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>edge_top_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x2</name></name> <operator>-</operator> <name>radius</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>edge_top_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>edge_top_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>edge_top_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>main_color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>edge_top_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>edge_top_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>edge_top_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>grad_color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out_y_seg_end</name> <operator>=</operator> <name><name>cir</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>seg_size</name> <init>= <expr><name>out_y_seg_end</name> <operator>-</operator> <name>out_y_seg_start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>aa_p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>aa_p</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>out_x_last</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aa_p</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>out_y_seg_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mix</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>radius</name> <operator>-</operator> <name>out_x_last</name><operator>)</operator> <operator>*</operator> <literal type="number">255</literal><operator>)</operator> <operator>/</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>aa_color_hor_bottom</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>gcolor</name></expr></argument>, <argument><expr><name>mcolor</name></expr></argument>, <argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>aa_color_hor_top</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>mcolor</name></expr></argument>, <argument><expr><name>gcolor</name></expr></argument>, <argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>seg_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>aa_opa</name> <init>= <expr><name>opa</name> <operator>-</operator> <call><name>lv_draw_aa_get_opa</name><argument_list>(<argument><expr><name>seg_size</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT2_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT2_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name>aa_color_hor_top</name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT3_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT3_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name>aa_color_hor_top</name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT6_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT6_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name>aa_color_hor_bottom</name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT7_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT7_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name>aa_color_hor_bottom</name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mix</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>radius</name> <operator>-</operator> <name>out_y_seg_start</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>*</operator> <literal type="number">255</literal><operator>)</operator> <operator>/</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>aa_color_ver</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>mcolor</name></expr></argument>, <argument><expr><name>gcolor</name></expr></argument>, <argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT1_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT1_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>aa_color_ver</name></expr></argument>,

<argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>aa_color_ver</name></expr></argument>,

<argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>aa_color_ver</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>gcolor</name></expr></argument>, <argument><expr><name>mcolor</name></expr></argument>, <argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT5_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT5_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>aa_color_ver</name></expr></argument>,

<argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>aa_color_ver</name></expr></argument>,

<argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>aa_p</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>aa_p</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>seg_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>aa_p</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>out_x_last</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aa_p</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>out_x_last</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mix</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>out_x_last</name><operator>)</operator><operator>*</operator><literal type="number">255</literal><operator>)</operator> <operator>/</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>aa_color_hor_top</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>gcolor</name></expr></argument>, <argument><expr><name>mcolor</name></expr></argument>, <argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>aa_color_hor_bottom</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>mcolor</name></expr></argument>, <argument><expr><name>gcolor</name></expr></argument>, <argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>aa_opa</name> <init>= <expr><name>opa</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT2_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT2_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>aa_color_hor_bottom</name></expr></argument>,

<argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>aa_color_hor_bottom</name></expr></argument>,

<argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT6_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT6_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>aa_color_hor_top</name></expr></argument>,

<argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>aa_color_hor_top</name></expr></argument>,

<argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_draw_rect_border_straight</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>,

<parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>radius</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>radius</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>aa</name> <init>= <expr><call><name>lv_disp_get_antialiasing</name><argument_list>(<argument><expr><call><name>lv_refr_get_disp_refreshing</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>width</name> <init>= <expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>coords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>height</name> <init>= <expr><call><name>lv_area_get_height</name><argument_list>(<argument><expr><name>coords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>bwidth</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa</name> <init>= <expr><ternary><condition><expr><name>opa_scale</name> <operator>==</operator> <name>LV_OPA_COVER</name></expr> ?</condition><then> <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>opa</name></name></expr>

</then><else>: <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>opa</name></name> <operator>*</operator> <name>opa_scale</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_border_part_t</name></type> <name>part</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>part</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>color</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>work_area</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>length_corr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>corner_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bwidth</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>radius</name> <operator>=</operator> <call><name>lv_draw_cont_radius_corr</name><argument_list>(<argument><expr><name>radius</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>radius</name> <operator>&lt;</operator> <name>bwidth</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>length_corr</name> <operator>=</operator> <name>bwidth</name> <operator>-</operator> <name>radius</name> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name>corner_size</name> <operator>=</operator> <name>bwidth</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>corner_size</name> <operator>=</operator> <name>radius</name> <operator>+</operator> <name>aa</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>radius</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_TOP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <name>bwidth</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>work_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_RIGHT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x2</name></name> <operator>-</operator> <name>bwidth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_TOP</name></expr> ?</condition><then> <expr><name>bwidth</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_BOTTOM</name></expr> ?</condition><then> <expr><name>bwidth</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>work_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_LEFT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name> <operator>+</operator> <name>bwidth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_TOP</name></expr> ?</condition><then> <expr><name>bwidth</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_BOTTOM</name></expr> ?</condition><then> <expr><name>bwidth</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>work_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_BOTTOM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name>bwidth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>work_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>corner_size</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_TOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <name>corner_size</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <name>radius</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_BOTTOM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name>corner_size</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name>radius</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_LEFT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>work_area</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name>bwidth</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>work_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_RIGHT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>work_area</name><operator>.</operator><name>x2</name></name> <operator>-</operator> <name>bwidth</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>work_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name> <operator>+</operator> <name>corner_size</name> <operator>-</operator> <name>length_corr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x2</name></name> <operator>-</operator> <name>corner_size</name> <operator>+</operator> <name>length_corr</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_TOP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <name>bwidth</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>work_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_BOTTOM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>work_area</name><operator>.</operator><name>y2</name></name> <operator>-</operator> <name>bwidth</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>work_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>length_corr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_TOP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name> <operator>+</operator> <name>radius</name> <operator>+</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <name>radius</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <name>bwidth</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>work_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_TOP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_RIGHT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x2</name></name> <operator>-</operator> <name>radius</name> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <name>radius</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <name>bwidth</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>work_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_BOTTOM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name> <operator>+</operator> <name>radius</name> <operator>+</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name>bwidth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name>radius</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>work_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_BOTTOM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_RIGHT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x2</name></name> <operator>-</operator> <name>radius</name> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name>bwidth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name>radius</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>work_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_draw_rect_border_corner</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>,

<parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>radius</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>radius</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>aa</name> <init>= <expr><call><name>lv_disp_get_antialiasing</name><argument_list>(<argument><expr><call><name>lv_refr_get_disp_refreshing</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>bwidth</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>color</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_border_part_t</name></type> <name>part</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>part</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa</name> <init>= <expr><ternary><condition><expr><name>opa_scale</name> <operator>==</operator> <name>LV_OPA_COVER</name></expr> ?</condition><then> <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>opa</name></name></expr>

</then><else>: <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>opa</name></name> <operator>*</operator> <name>opa_scale</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bwidth</name><operator>--</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>aa</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bwidth</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>width</name> <init>= <expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>coords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>height</name> <init>= <expr><call><name>lv_area_get_height</name><argument_list>(<argument><expr><name>coords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>radius</name> <operator>=</operator> <call><name>lv_draw_cont_radius_corr</name><argument_list>(<argument><expr><name>radius</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>lt_origo</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>lb_origo</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>rt_origo</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>rb_origo</name></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>lt_origo</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name> <operator>+</operator> <name>radius</name> <operator>+</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <name>radius</name> <operator>+</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lb_origo</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name> <operator>+</operator> <name>radius</name> <operator>+</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name>radius</name> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rt_origo</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x2</name></name> <operator>-</operator> <name>radius</name> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <name>radius</name> <operator>+</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rb_origo</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x2</name></name> <operator>-</operator> <name>radius</name> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name>radius</name> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>cir_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>tmp_out</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_circ_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cir_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_out</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>cir_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>tmp_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>radius_in</name> <init>= <expr><name>radius</name> <operator>-</operator> <name>bwidth</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>radius_in</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>radius_in</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_circ_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cir_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_in</name></expr></argument>, <argument><expr><name>radius_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>circ_area</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>act_w1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>act_w2</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>out_y_seg_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>out_y_seg_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>out_x_last</name> <init>= <expr><name>radius</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>in_y_seg_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>in_y_seg_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>in_x_last</name> <init>= <expr><name>radius</name> <operator>-</operator> <name>bwidth</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while<condition>(<expr><name><name>cir_out</name><operator>.</operator><name>y</name></name> <operator>&lt;=</operator> <name><name>cir_out</name><operator>.</operator><name>x</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>cir_in</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>cir_in</name><operator>.</operator><name>x</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>act_w1</name> <operator>=</operator> <name><name>cir_out</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>cir_in</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>act_w2</name> <operator>=</operator> <name>act_w1</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>act_w1</name> <operator>=</operator> <name><name>cir_out</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>cir_out</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>act_w2</name> <operator>=</operator> <name>act_w1</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>aa</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>out_x_last</name> <operator>!=</operator> <name><name>cir_out</name><operator>.</operator><name>x</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out_y_seg_end</name> <operator>=</operator> <name><name>cir_out</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>seg_size</name> <init>= <expr><name>out_y_seg_end</name> <operator>-</operator> <name>out_y_seg_start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>aa_p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>aa_p</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>out_x_last</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aa_p</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>out_y_seg_start</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>seg_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>aa_opa</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>seg_size</name> <operator>&gt;</operator> <name>CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>aa_opa</name> <operator>=</operator> <call><name>antialias_get_opa_circ</name><argument_list>(<argument><expr><name>seg_size</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>aa_opa</name> <operator>=</operator> <name>opa</name> <operator>-</operator> <call><name>lv_draw_aa_get_opa</name><argument_list>(<argument><expr><name>seg_size</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_BOTTOM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_RIGHT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT1_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT1_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT2_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT2_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_BOTTOM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT3_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT3_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_TOP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT5_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT5_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT6_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT6_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_TOP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_RIGHT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT7_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT7_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>out_x_last</name> <operator>=</operator> <name><name>cir_out</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_y_seg_start</name> <operator>=</operator> <name>out_y_seg_end</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>in_x_last</name> <operator>!=</operator> <name><name>cir_in</name><operator>.</operator><name>x</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>in_y_seg_end</name> <operator>=</operator> <name><name>cir_out</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>seg_size</name> <init>= <expr><name>in_y_seg_end</name> <operator>-</operator> <name>in_y_seg_start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>aa_p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>aa_p</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>in_x_last</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aa_p</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>in_y_seg_start</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>seg_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>aa_opa</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>seg_size</name> <operator>&gt;</operator> <name>CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>aa_opa</name> <operator>=</operator> <name>opa</name> <operator>-</operator> <call><name>antialias_get_opa_circ</name><argument_list>(<argument><expr><name>seg_size</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>aa_opa</name> <operator>=</operator> <call><name>lv_draw_aa_get_opa</name><argument_list>(<argument><expr><name>seg_size</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_BOTTOM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_RIGHT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT1_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT1_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_BOTTOM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT3_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT3_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_TOP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT5_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT5_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_TOP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_RIGHT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT7_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT7_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>LV_CIRC_OCT1_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>!=</operator> <call><name>LV_CIRC_OCT2_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_BOTTOM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_RIGHT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT2_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT2_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_BOTTOM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>,

<argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_TOP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT6_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT6_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_TOP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_RIGHT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>,

<argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>in_x_last</name> <operator>=</operator> <name><name>cir_in</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_y_seg_start</name> <operator>=</operator> <name>in_y_seg_end</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_BOTTOM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_RIGHT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>rb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT1_X</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>act_w2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>rb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT1_X</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT1_Y</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT1_Y</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>circ_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>rb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT2_X</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>rb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT2_X</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT2_Y</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>act_w1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT2_Y</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>circ_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_BOTTOM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>lb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT3_X</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>lb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT3_X</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT3_Y</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>act_w2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT3_Y</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>circ_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>lb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_X</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>lb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_X</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>act_w1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_Y</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_Y</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>circ_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_TOP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_Y</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT5_Y</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>lt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT5_X</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>lt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT5_X</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>act_w2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT5_Y</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT5_Y</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>circ_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>lt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT6_X</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>lt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT6_X</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT6_Y</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT6_Y</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>act_w1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>circ_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_TOP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_RIGHT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>rt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT7_X</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>rt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT7_X</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT7_Y</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT7_Y</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>act_w2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>circ_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT1_Y</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_Y</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>rt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_X</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>act_w1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>rt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_X</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_Y</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>circ_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_Y</name><argument_list>(<argument><expr><name>cir_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>circ_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_circ_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cir_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cir_in</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>cir_in</name><operator>.</operator><name>x</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_circ_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cir_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>aa</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out_y_seg_end</name> <operator>=</operator> <name><name>cir_out</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>seg_size</name> <init>= <expr><name>out_y_seg_end</name> <operator>-</operator> <name>out_y_seg_start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>aa_p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>aa_p</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>out_x_last</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aa_p</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>out_y_seg_start</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>seg_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>aa_opa</name> <init>= <expr><name>opa</name> <operator>-</operator> <call><name>lv_draw_aa_get_opa</name><argument_list>(<argument><expr><name>seg_size</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_BOTTOM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_RIGHT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT1_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT1_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT2_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT2_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_BOTTOM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT3_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT3_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_TOP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT5_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT5_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT6_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT6_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_TOP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_RIGHT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT7_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT7_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>aa_p</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>aa_p</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>seg_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>aa_p</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>out_x_last</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aa_p</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>out_x_last</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>aa_opa</name> <init>= <expr><name>opa</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_BOTTOM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_RIGHT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT2_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT2_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_BOTTOM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_TOP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT6_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT6_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_TOP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_RIGHT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>in_y_seg_end</name> <operator>=</operator> <name><name>cir_in</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aa_p</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>in_x_last</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aa_p</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>in_y_seg_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>seg_size</name> <operator>=</operator> <name>in_y_seg_end</name> <operator>-</operator> <name>in_y_seg_start</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>seg_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>aa_opa</name> <init>= <expr><call><name>lv_draw_aa_get_opa</name><argument_list>(<argument><expr><name>seg_size</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_BOTTOM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_RIGHT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT1_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT1_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_BOTTOM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT3_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT3_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_TOP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT5_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT5_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_TOP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_RIGHT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT7_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT7_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>LV_CIRC_OCT1_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>!=</operator> <call><name>LV_CIRC_OCT2_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_BOTTOM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_RIGHT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT2_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>rb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT2_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_BOTTOM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lb_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>lb_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT4_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_TOP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>lt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT6_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name><name>lt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT6_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_TOP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&amp;</operator> <name>LV_BORDER_RIGHT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>rt_origo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_X</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rt_origo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>LV_CIRC_OCT8_Y</name><argument_list>(<argument><expr><name>aa_p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>aa_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_SHADOW</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_draw_shadow</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>,

<parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>radius</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>radius</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>width</name> <init>= <expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>coords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>height</name> <init>= <expr><call><name>lv_area_get_height</name><argument_list>(<argument><expr><name>coords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>radius</name> <operator>=</operator> <call><name>lv_draw_cont_radius_corr</name><argument_list>(<argument><expr><name>radius</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>area_tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area_tmp</name></expr></argument>, <argument><expr><name>coords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>x1</name></name> <operator>+=</operator> <name>radius</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>x2</name></name> <operator>-=</operator> <name>radius</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_area_is_in</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area_tmp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area_tmp</name></expr></argument>, <argument><expr><name>coords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>y1</name></name> <operator>+=</operator> <name>radius</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>y2</name></name> <operator>-=</operator> <name>radius</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_area_is_in</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area_tmp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>LV_SHADOW_FULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_shadow_full</name><argument_list>(<argument><expr><name>coords</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>LV_SHADOW_BOTTOM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_shadow_bottom</name><argument_list>(<argument><expr><name>coords</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_draw_shadow_full</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>,

<parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>aa</name> <init>= <expr><call><name>lv_disp_get_antialiasing</name><argument_list>(<argument><expr><call><name>lv_refr_get_disp_refreshing</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>radius</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>radius</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>swidth</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>width</name> <init>= <expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>coords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>height</name> <init>= <expr><call><name>lv_area_get_height</name><argument_list>(<argument><expr><name>coords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>radius</name> <operator>=</operator> <call><name>lv_draw_cont_radius_corr</name><argument_list>(<argument><expr><name>radius</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>radius</name> <operator>+=</operator> <name>aa</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>filter_width</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>swidth</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>curve_x_size</name> <init>= <expr><operator>(</operator><operator>(</operator><name>radius</name> <operator>+</operator> <name>swidth</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x3</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>curve_x_size</name> <operator>*=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_coord_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>line_1d_blur_size</name> <init>= <expr><operator>(</operator><name>filter_width</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x3</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>line_1d_blur_size</name> <operator>*=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>line_2d_blur_size</name> <init>= <expr><operator>(</operator><operator>(</operator><name>radius</name> <operator>+</operator> <name>swidth</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x3</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>line_2d_blur_size</name> <operator>*=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_opa_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>draw_buf</name> <init>= <expr><call><name>lv_draw_get_buf</name><argument_list>(<argument><expr><name>curve_x_size</name> <operator>+</operator> <name>line_1d_blur_size</name> <operator>+</operator> <name>line_2d_blur_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name> <modifier>*</modifier></type> <name>curve_x</name> <init>= <expr><operator>(</operator><name>lv_coord_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>draw_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>line_1d_blur</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>draw_buf</name><index>[<expr><name>curve_x_size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name> <modifier>*</modifier></type> <name>line_2d_blur</name> <init>= <expr><operator>(</operator><name>lv_opa_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>draw_buf</name><index>[<expr><name>curve_x_size</name> <operator>+</operator> <name>line_1d_blur_size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>curve_x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>curve_x_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>circ</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>circ_tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_circ_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>circ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>circ_tmp</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><call><name>lv_circ_cont</name><argument_list>(<argument><expr><operator>&amp;</operator><name>circ</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curve_x</name><index>[<expr><call><name>LV_CIRC_OCT1_Y</name><argument_list>(<argument><expr><name>circ</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>LV_CIRC_OCT1_X</name><argument_list>(<argument><expr><name>circ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curve_x</name><index>[<expr><call><name>LV_CIRC_OCT2_Y</name><argument_list>(<argument><expr><name>circ</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>LV_CIRC_OCT2_X</name><argument_list>(<argument><expr><name>circ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_circ_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>circ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>circ_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>int16_t</name></type> <name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa</name> <init>= <expr><ternary><condition><expr><name>opa_scale</name> <operator>==</operator> <name>LV_OPA_COVER</name></expr> ?</condition><then> <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>opa</name></name></expr> </then><else>: <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>opa</name></name> <operator>*</operator> <name>opa_scale</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>line</name> <operator>&lt;</operator> <name>filter_width</name></expr>;</condition> <incr><expr><name>line</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>line_1d_blur</name><index>[<expr><name>line</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>filter_width</name> <operator>-</operator> <name>line</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>opa</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>SHADOW_OPA_EXTRA_PRECISION</name><operator>)</operator> <operator>/</operator>

<operator>(</operator><name>filter_width</name> <operator>*</operator> <name>filter_width</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>point_rt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>point_rb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>point_lt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>point_lb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>ofs_rb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>ofs_rt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>ofs_lb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>ofs_lt</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ofs_rb</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x2</name></name> <operator>-</operator> <name>radius</name> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ofs_rb</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name>radius</name> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ofs_rt</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x2</name></name> <operator>-</operator> <name>radius</name> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ofs_rt</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <name>radius</name> <operator>+</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ofs_lb</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name> <operator>+</operator> <name>radius</name> <operator>+</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ofs_lb</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name>radius</name> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ofs_lt</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name> <operator>+</operator> <name>radius</name> <operator>+</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ofs_lt</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <name>radius</name> <operator>+</operator> <name>aa</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>line_ready</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>line</name> <operator>&lt;=</operator> <name>radius</name> <operator>+</operator> <name>swidth</name></expr>;</condition> <incr><expr><name>line</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 

<expr_stmt><expr><name>line_ready</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;=</operator> <name>radius</name> <operator>+</operator> <name>swidth</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 

<decl_stmt><decl><type><name>int16_t</name></type> <name>line_rel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>px_opa_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>line_rel</name> <operator>=</operator> <operator>-</operator><name>swidth</name></expr>;</init> <condition><expr><name>line_rel</name> <operator>&lt;=</operator> <name>swidth</name></expr>;</condition> <incr><expr><name>line_rel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>col_rel</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>line</name> <operator>+</operator> <name>line_rel</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>col_rel</name> <operator>=</operator> <name>radius</name> <operator>-</operator> <name><name>curve_x</name><index>[<expr><name>line</name></expr>]</index></name> <operator>-</operator> <name>col</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>line</name> <operator>+</operator> <name>line_rel</name> <operator>&gt;</operator> <name>radius</name></expr>)</condition> <block>{<block_content> 

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>col_rel</name> <operator>=</operator> <name><name>curve_x</name><index>[<expr><name>line</name> <operator>+</operator> <name>line_rel</name></expr>]</index></name> <operator>-</operator> <name><name>curve_x</name><index>[<expr><name>line</name></expr>]</index></name> <operator>-</operator> <name>col</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>col_rel</name> <operator>&lt;</operator> <operator>-</operator><name>swidth</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if<condition>(<expr><name>line_rel</name> <operator>==</operator> <operator>-</operator><name>swidth</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>line_ready</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<break>break;</break> 

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>col_rel</name> <operator>&gt;</operator> <name>swidth</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>px_opa_sum</name> <operator>+=</operator> <name><name>line_1d_blur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>px_opa_sum</name> <operator>+=</operator> <name><name>line_1d_blur</name><index>[<expr><name>swidth</name> <operator>-</operator> <name>col_rel</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><name><name>line_2d_blur</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <name>px_opa_sum</name> <operator>&gt;&gt;</operator> <name>SHADOW_OPA_EXTRA_PRECISION</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>line_ready</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name><operator>++</operator></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>point_rt</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>curve_x</name><index>[<expr><name>line</name></expr>]</index></name> <operator>+</operator> <name><name>ofs_rt</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point_rt</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>ofs_rt</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>line</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point_rb</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>curve_x</name><index>[<expr><name>line</name></expr>]</index></name> <operator>+</operator> <name><name>ofs_rb</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point_rb</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>ofs_rb</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>line</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point_lt</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>ofs_lt</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>curve_x</name><index>[<expr><name>line</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point_lt</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>ofs_lt</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>line</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point_lb</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>ofs_lb</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>curve_x</name><index>[<expr><name>line</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point_lb</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>ofs_lb</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>line</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>d</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <name>col</name></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>point_lt</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>ofs_lt</name><operator>.</operator><name>x</name></name> <operator>&amp;&amp;</operator> <name><name>point_lt</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>ofs_lt</name><operator>.</operator><name>y</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>point_lt</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>point_lt</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name><name>line_2d_blur</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>point_lb</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>ofs_lb</name><operator>.</operator><name>x</name></name> <operator>&amp;&amp;</operator> <name><name>point_lb</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name><name>ofs_lb</name><operator>.</operator><name>y</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>point_lb</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>point_lb</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name><name>line_2d_blur</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>point_rt</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>ofs_rt</name><operator>.</operator><name>x</name></name> <operator>&amp;&amp;</operator> <name><name>point_rt</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>ofs_rt</name><operator>.</operator><name>y</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>point_rt</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>point_rt</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name><name>line_2d_blur</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>point_rb</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>ofs_rb</name><operator>.</operator><name>x</name></name> <operator>&amp;&amp;</operator> <name><name>point_rb</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name><name>ofs_rb</name><operator>.</operator><name>y</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>point_rb</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>point_rb</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name><name>line_2d_blur</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>point_rb</name><operator>.</operator><name>x</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point_lb</name><operator>.</operator><name>x</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point_rt</name><operator>.</operator><name>x</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point_lt</name><operator>.</operator><name>x</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>line</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_draw_shadow_full_straight</name><argument_list>(<argument><expr><name>coords</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>line_2d_blur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_draw_shadow_bottom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>,

<parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>aa</name> <init>= <expr><call><name>lv_disp_get_antialiasing</name><argument_list>(<argument><expr><call><name>lv_refr_get_disp_refreshing</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>radius</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>radius</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>swidth</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>width</name> <init>= <expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>coords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>height</name> <init>= <expr><call><name>lv_area_get_height</name><argument_list>(<argument><expr><name>coords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>radius</name> <operator>=</operator> <call><name>lv_draw_cont_radius_corr</name><argument_list>(<argument><expr><name>radius</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>radius</name> <operator>+=</operator> <name>aa</name> <operator>*</operator> <name>SHADOW_BOTTOM_AA_EXTRA_RADIUS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>swidth</name> <operator>+=</operator> <name>aa</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>curve_x_size</name> <init>= <expr><operator>(</operator><operator>(</operator><name>radius</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x3</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>curve_x_size</name> <operator>*=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_coord_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>line_1d_blur_size</name> <init>= <expr><operator>(</operator><name>swidth</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x3</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>line_1d_blur_size</name> <operator>*=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_opa_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>draw_buf</name> <init>= <expr><call><name>lv_draw_get_buf</name><argument_list>(<argument><expr><name>curve_x_size</name> <operator>+</operator> <name>line_1d_blur_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name> <modifier>*</modifier></type> <name>curve_x</name> <init>= <expr><operator>(</operator><name>lv_coord_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>draw_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_opa_t</name> <modifier>*</modifier></type> <name>line_1d_blur</name> <init>= <expr><operator>(</operator><name>lv_opa_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>draw_buf</name><index>[<expr><name>curve_x_size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>circ</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>circ_tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_circ_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>circ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>circ_tmp</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><call><name>lv_circ_cont</name><argument_list>(<argument><expr><operator>&amp;</operator><name>circ</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curve_x</name><index>[<expr><call><name>LV_CIRC_OCT1_Y</name><argument_list>(<argument><expr><name>circ</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>LV_CIRC_OCT1_X</name><argument_list>(<argument><expr><name>circ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curve_x</name><index>[<expr><call><name>LV_CIRC_OCT2_Y</name><argument_list>(<argument><expr><name>circ</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>LV_CIRC_OCT2_X</name><argument_list>(<argument><expr><name>circ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_circ_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>circ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>circ_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>int16_t</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa</name> <init>= <expr><ternary><condition><expr><name>opa_scale</name> <operator>==</operator> <name>LV_OPA_COVER</name></expr> ?</condition><then> <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>opa</name></name></expr> </then><else>: <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>opa</name></name> <operator>*</operator> <name>opa_scale</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>swidth</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>line_1d_blur</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>swidth</name> <operator>-</operator> <name>col</name><operator>)</operator> <operator>*</operator> <name>opa</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>swidth</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>point_l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>point_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>area_mid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>ofs_l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>ofs_r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ofs_l</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name> <operator>+</operator> <name>radius</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ofs_l</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name>radius</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ofs_r</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x2</name></name> <operator>-</operator> <name>radius</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ofs_r</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name>radius</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;=</operator> <name>radius</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>point_l</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>ofs_l</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point_l</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>ofs_l</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>curve_x</name><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point_r</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>ofs_r</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point_r</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>ofs_r</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>curve_x</name><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>px_opa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>diff</name> <init>= <expr><ternary><condition><expr><name>col</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>curve_x</name><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>curve_x</name><index>[<expr><name>col</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>d</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <name>swidth</name></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>diff</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>px_opa</name> <operator>=</operator> <name><name>line_1d_blur</name><index>[<expr><name>d</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>px_opa</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>line_1d_blur</name><index>[<expr><name>d</name></expr>]</index></name> <operator>+</operator> <name><name>line_1d_blur</name><index>[<expr><name>d</name> <operator>-</operator> <name>diff</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>point_l</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>point_l</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>px_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point_l</name><operator>.</operator><name>y</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>point_r</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>ofs_l</name><operator>.</operator><name>x</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name><name>point_r</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>point_r</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>px_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>point_r</name><operator>.</operator><name>y</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>area_mid</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>ofs_l</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area_mid</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>ofs_l</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>radius</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area_mid</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>ofs_r</name><operator>.</operator><name>x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area_mid</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>area_mid</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>d</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <name>swidth</name></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area_mid</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name><name>line_1d_blur</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area_mid</name><operator>.</operator><name>y1</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area_mid</name><operator>.</operator><name>y2</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_draw_shadow_full_straight</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>lv_opa_t</name> <modifier>*</modifier></type> <name>map</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>aa</name> <init>= <expr><call><name>lv_disp_get_antialiasing</name><argument_list>(<argument><expr><call><name>lv_refr_get_disp_refreshing</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>radius</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>radius</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>swidth</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>width</name> <init>= <expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>coords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>height</name> <init>= <expr><call><name>lv_area_get_height</name><argument_list>(<argument><expr><name>coords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>radius</name> <operator>=</operator> <call><name>lv_draw_cont_radius_corr</name><argument_list>(<argument><expr><name>radius</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>radius</name> <operator>+=</operator> <name>aa</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>right_area</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>right_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x2</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>right_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <name>radius</name> <operator>+</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>right_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>right_area</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>right_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name>radius</name> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>left_area</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>left_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <name>radius</name> <operator>+</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>left_area</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name>radius</name> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>top_area</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>top_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name> <operator>+</operator> <name>radius</name> <operator>+</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>top_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>top_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x2</name></name> <operator>-</operator> <name>radius</name> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>top_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>top_area</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>bottom_area</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bottom_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name> <operator>+</operator> <name>radius</name> <operator>+</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bottom_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y2</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bottom_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x2</name></name> <operator>-</operator> <name>radius</name> <operator>-</operator> <name>aa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bottom_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>bottom_area</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_act</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>d</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</init> <condition><expr><name>d</name> <operator>&lt;=</operator> <name>swidth</name></expr> ;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>opa_act</name> <operator>=</operator> <name><name>map</name><index>[<expr><name>d</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>right_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>right_area</name><operator>.</operator><name>x1</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>right_area</name><operator>.</operator><name>x2</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>left_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left_area</name><operator>.</operator><name>x1</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left_area</name><operator>.</operator><name>x2</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>top_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>top_area</name><operator>.</operator><name>y1</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>top_area</name><operator>.</operator><name>y2</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bottom_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><name>opa_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bottom_area</name><operator>.</operator><name>y1</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bottom_area</name><operator>.</operator><name>y2</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>uint16_t</name></type> <name>lv_draw_cont_radius_corr</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>aa</name> <init>= <expr><call><name>lv_disp_get_antialiasing</name><argument_list>(<argument><expr><call><name>lv_refr_get_disp_refreshing</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>r</name> <operator>&gt;=</operator> <operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>r</name> <operator>&gt;=</operator> <operator>(</operator><name>h</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>-=</operator> <name>aa</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>lv_opa_t</name></type> <name>antialias_get_opa_circ</name><parameter_list>(<parameter><decl><type><name>lv_coord_t</name></type> <name>seg</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>px_id</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>lv_opa_t</name></type> <name><name>opa_map2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">210</literal></expr>, <expr><literal type="number">80</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>lv_opa_t</name></type> <name><name>opa_map3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">230</literal></expr>, <expr><literal type="number">150</literal></expr>, <expr><literal type="number">60</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>lv_opa_t</name></type> <name><name>opa_map4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">235</literal></expr>, <expr><literal type="number">185</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">50</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>lv_opa_t</name></type> <name><name>opa_map8</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">250</literal></expr>, <expr><literal type="number">242</literal></expr>, <expr><literal type="number">219</literal></expr>, <expr><literal type="number">191</literal></expr>, <expr><literal type="number">158</literal></expr>, <expr><literal type="number">117</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">40</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD</name> <operator>&lt;</operator> <literal type="number">1</literal></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>seg</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">170</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD</name> <operator>&lt;</operator> <literal type="number">2</literal></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>seg</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name><name>opa_map2</name><index>[<expr><name>px_id</name></expr>]</index></name> <operator>*</operator> <name>opa</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>seg</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name><name>opa_map3</name><index>[<expr><name>px_id</name></expr>]</index></name> <operator>*</operator> <name>opa</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD</name> <operator>&lt;</operator> <literal type="number">4</literal></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>seg</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name><name>opa_map4</name><index>[<expr><name>px_id</name></expr>]</index></name> <operator>*</operator> <name>opa</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>id</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>px_id</name> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>opa_map8</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><name>seg</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>opa_map8</name><index>[<expr><name>id</name></expr>]</index></name> <operator>*</operator> <name>opa</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
