<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_hal\lv_hal_disp.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_hal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_obj.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_refr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_gc.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_GC_INCLUDE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> LV_GC_INCLUDE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
















<decl_stmt><decl><type><specifier>static</specifier> <name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp_def</name></decl>;</decl_stmt>















<function><type><name>void</name></type> <name>lv_disp_drv_init</name><parameter_list>(<parameter><decl><type><name>lv_disp_drv_t</name> <modifier>*</modifier></type> <name>driver</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>driver</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_disp_drv_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>flush_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>hor_res</name></name> <operator>=</operator> <name>LV_HOR_RES_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>ver_res</name></name> <operator>=</operator> <name>LV_VER_RES_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>rotated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>color_chroma_key</name></name> <operator>=</operator> <name>LV_COLOR_TRANSP</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>
<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>antialiasing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_SCREEN_TRANSP</name></expr></cpp:if>
<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>screen_transp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GPU</name></expr></cpp:if>
<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>gpu_blend_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>gpu_fill_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_USER_DATA</name></expr></cpp:if>
<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>set_px_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
















<function><type><name>void</name></type> <name>lv_disp_buf_init</name><parameter_list>(<parameter><decl><type><name>lv_disp_buf_t</name> <modifier>*</modifier></type> <name>disp_buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>buf1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>buf2</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size_in_px_cnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>disp_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_disp_buf_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>disp_buf</name><operator>-&gt;</operator><name>buf1</name></name> <operator>=</operator> <name>buf1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disp_buf</name><operator>-&gt;</operator><name>buf2</name></name> <operator>=</operator> <name>buf2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disp_buf</name><operator>-&gt;</operator><name>buf_act</name></name> <operator>=</operator> <name><name>disp_buf</name><operator>-&gt;</operator><name>buf1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disp_buf</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size_in_px_cnt</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>lv_disp_drv_register</name><parameter_list>(<parameter><decl><type><name>lv_disp_drv_t</name> <modifier>*</modifier></type> <name>driver</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name> <init>= <expr><call><name>lv_ll_ins_head</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_disp_ll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>disp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><name>driver</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_disp_drv_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>inv_area_joined</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>disp</name><operator>-&gt;</operator><name>inv_area_joined</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>inv_areas</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>disp</name><operator>-&gt;</operator><name>inv_areas</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_ll_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>scr_ll</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_obj_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>last_activity_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>disp_def</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>disp_def</name> <operator>=</operator> <name>disp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp_def_tmp</name> <init>= <expr><name>disp_def</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>disp_def</name> <operator>=</operator> <name>disp</name></expr>;</expr_stmt> 


<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>inv_p</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>act_scr</name></name> <operator>=</operator> <call><name>lv_obj_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>top_layer</name></name> <operator>=</operator> <call><name>lv_obj_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>sys_layer</name></name> <operator>=</operator> <call><name>lv_obj_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>lv_obj_set_style</name><argument_list>(<argument><expr><name><name>disp</name><operator>-&gt;</operator><name>top_layer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_transp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_style</name><argument_list>(<argument><expr><name><name>disp</name><operator>-&gt;</operator><name>sys_layer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_transp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name><name>disp</name><operator>-&gt;</operator><name>act_scr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>disp_def</name> <operator>=</operator> <name>disp_def_tmp</name></expr>;</expr_stmt> 


<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>refr_task</name></name> <operator>=</operator> <call><name>lv_task_create</name><argument_list>(<argument><expr><name>lv_disp_refr_task</name></expr></argument>, <argument><expr><name>LV_DISP_DEF_REFR_PERIOD</name></expr></argument>, <argument><expr><name>LV_TASK_PRIO_MID</name></expr></argument>, <argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>disp</name><operator>-&gt;</operator><name>refr_task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>refr_task</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_task_ready</name><argument_list>(<argument><expr><name><name>disp</name><operator>-&gt;</operator><name>refr_task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>disp</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_disp_drv_update</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>, <parameter><decl><type><name>lv_disp_drv_t</name> <modifier>*</modifier></type> <name>new_drv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><name>new_drv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_disp_drv_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>scr</name></decl>;</decl_stmt>
<macro><name>LV_LL_READ</name><argument_list>(<argument>disp-&gt;scr_ll</argument>, <argument>scr</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>lv_obj_set_size</name><argument_list>(<argument><expr><name>scr</name></expr></argument>, <argument><expr><call><name>lv_disp_get_hor_res</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>lv_disp_get_ver_res</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>lv_disp_remove</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>was_default</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>disp</name> <operator>==</operator> <call><name>lv_disp_get_default</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>was_default</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name></decl>;</decl_stmt>
<expr_stmt><expr><name>indev</name> <operator>=</operator> <call><name>lv_indev_get_next</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>indev</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>disp</name></name> <operator>==</operator> <name>disp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>disp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>indev</name> <operator>=</operator> <call><name>lv_indev_get_next</name><argument_list>(<argument><expr><name>indev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>lv_ll_rem</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_disp_ll</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>was_default</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_disp_set_default</name><argument_list>(<argument><expr><call><name>lv_ll_get_head</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_disp_ll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>lv_disp_set_default</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>disp_def</name> <operator>=</operator> <name>disp</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>lv_disp_get_default</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>disp_def</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>lv_coord_t</name></type> <name>lv_disp_get_hor_res</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>disp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>lv_disp_get_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>disp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LV_HOR_RES_MAX</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>rotated</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>hor_res</name></name></expr> </then><else>: <expr><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>ver_res</name></name></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>






<function><type><name>lv_coord_t</name></type> <name>lv_disp_get_ver_res</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>disp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>lv_disp_get_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>disp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LV_VER_RES_MAX</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>rotated</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>ver_res</name></name></expr> </then><else>: <expr><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>hor_res</name></name></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>lv_disp_get_antialiasing</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<return>return <expr><name>false</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if<condition>(<expr><name>disp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>lv_disp_get_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>disp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>antialiasing</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><name>LV_ATTRIBUTE_FLUSH_READY</name> <name>void</name></type> <name>lv_disp_flush_ready</name><parameter_list>(<parameter><decl><type><name>lv_disp_drv_t</name> <modifier>*</modifier></type> <name>disp_drv</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_SCREEN_TRANSP</name></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>disp_drv</name><operator>-&gt;</operator><name>screen_transp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>disp_drv</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>buf_act</name></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name><name>disp_drv</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_color32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>disp_drv</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>flushing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>lv_disp_get_next</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>disp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>lv_ll_get_head</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_disp_ll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>lv_ll_get_next</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_disp_ll</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>






<function><type><name>lv_disp_buf_t</name> <modifier>*</modifier></type> <name>lv_disp_get_buf</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>buffer</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>uint16_t</name></type> <name>lv_disp_get_inv_buf_size</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>disp</name><operator>-&gt;</operator><name>inv_p</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>lv_disp_pop_from_inv_buf</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>inv_p</name></name> <operator>&lt;</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>inv_p</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>inv_p</name></name> <operator>-=</operator> <name>num</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>lv_disp_is_double_buf</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>buf1</name></name> <operator>&amp;&amp;</operator> <name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>buf2</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>







<function><type><name>bool</name></type> <name>lv_disp_is_true_double_buf</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>scr_size</name> <init>= <expr><name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>hor_res</name></name> <operator>*</operator> <name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>ver_res</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_disp_is_double_buf</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>disp</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>scr_size</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




</unit>
