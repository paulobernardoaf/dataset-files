<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_hal\lv_hal_indev.h">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_HAL_INDEV_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_HAL_INDEV_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_CONF_INCLUDE_SIMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_conf.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../lv_conf.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_area.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_task.h"</cpp:file></cpp:include>









<struct_decl>struct <name>_lv_obj_t</name>;</struct_decl>
<struct_decl>struct <name>_disp_t</name>;</struct_decl>
<struct_decl>struct <name>_lv_indev_t</name>;</struct_decl>
<struct_decl>struct <name>_lv_indev_drv_t</name>;</struct_decl>


<enum>enum <block>{
<decl><name>LV_INDEV_TYPE_NONE</name></decl>, 
<decl><name>LV_INDEV_TYPE_POINTER</name></decl>, 
<decl><name>LV_INDEV_TYPE_KEYPAD</name></decl>, 
<decl><name>LV_INDEV_TYPE_BUTTON</name></decl>, 

<decl><name>LV_INDEV_TYPE_ENCODER</name></decl>, 
}</block>;</enum>
<typedef>typedef <type><name>uint8_t</name></type> <name>lv_indev_type_t</name>;</typedef>


<enum>enum <block>{ <decl><name>LV_INDEV_STATE_REL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>LV_INDEV_STATE_PR</name></decl> }</block>;</enum>
<typedef>typedef <type><name>uint8_t</name></type> <name>lv_indev_state_t</name>;</typedef>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>lv_point_t</name></type> <name>point</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>key</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>btn_id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name></type> <name>enc_diff</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_indev_state_t</name></type> <name>state</name></decl>;</decl_stmt> 
}</block></struct></type> <name>lv_indev_data_t</name>;</typedef>


<typedef>typedef <type><struct>struct <name>_lv_indev_drv_t</name>
<block>{


<decl_stmt><decl><type><name>lv_indev_type_t</name></type> <name>type</name></decl>;</decl_stmt>




<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>read_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_indev_drv_t</name></name> <modifier>*</modifier></type> <name>indev_drv</name></decl></parameter>, <parameter><decl><type><name>lv_indev_data_t</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>feedback_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_indev_drv_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_USER_DATA</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_indev_drv_user_data_t</name></type> <name>user_data</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name><name>struct</name> <name>_disp_t</name></name> <modifier>*</modifier></type> <name>disp</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>read_task</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>drag_limit</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>drag_throw</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint16_t</name></type> <name>long_press_time</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint16_t</name></type> <name>long_press_rep_time</name></decl>;</decl_stmt>
}</block></struct></type> <name>lv_indev_drv_t</name>;</typedef>




<typedef>typedef <type><struct>struct <name>_lv_indev_proc_t</name>
<block>{
<decl_stmt><decl><type><name>lv_indev_state_t</name></type> <name>state</name></decl>;</decl_stmt> 
<union>union
<block>{
<struct>struct
<block>{ 
<decl_stmt><decl><type><name>lv_point_t</name></type> <name>act_point</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>lv_point_t</name></type> <name>last_point</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>lv_point_t</name></type> <name>vect</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>lv_point_t</name></type> <name>drag_sum</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>lv_point_t</name></type> <name>drag_throw_vect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_lv_obj_t</name></name> <modifier>*</modifier></type> <name>act_obj</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>_lv_obj_t</name></name> <modifier>*</modifier></type> <name>last_obj</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>_lv_obj_t</name></name> <modifier>*</modifier></type> <name>last_pressed</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>uint8_t</name></type> <name>drag_limit_out</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>drag_in_prog</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block> <decl><name>pointer</name></decl>;</struct>
<struct>struct
<block>{ 
<decl_stmt><decl><type><name>lv_indev_state_t</name></type> <name>last_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>last_key</name></decl>;</decl_stmt>
}</block> <decl><name>keypad</name></decl>;</struct>
}</block> <decl><name>types</name></decl>;</union>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pr_timestamp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>longpr_rep_timestamp</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>uint8_t</name></type> <name>long_pr_sent</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>reset_query</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>disabled</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>wait_until_release</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block></struct></type> <name>lv_indev_proc_t</name>;</typedef>

<struct_decl>struct <name>_lv_obj_t</name>;</struct_decl>
<struct_decl>struct <name>_lv_group_t</name>;</struct_decl>



<typedef>typedef <type><struct>struct <name>_lv_indev_t</name>
<block>{
<decl_stmt><decl><type><name>lv_indev_drv_t</name></type> <name>driver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_indev_proc_t</name></type> <name>proc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_lv_obj_t</name></name> <modifier>*</modifier></type> <name>cursor</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>_lv_group_t</name></name> <modifier>*</modifier></type> <name>group</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_point_t</name> <modifier>*</modifier></type> <name>btn_points</name></decl>;</decl_stmt> 

}</block></struct></type> <name>lv_indev_t</name>;</typedef>











<function_decl><type><name>void</name></type> <name>lv_indev_drv_init</name><parameter_list>(<parameter><decl><type><name>lv_indev_drv_t</name> <modifier>*</modifier></type> <name>driver</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>lv_indev_drv_register</name><parameter_list>(<parameter><decl><type><name>lv_indev_drv_t</name> <modifier>*</modifier></type> <name>driver</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>lv_indev_drv_update</name><parameter_list>(<parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name></decl></parameter>, <parameter><decl><type><name>lv_indev_drv_t</name> <modifier>*</modifier></type> <name>new_drv</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>lv_indev_get_next</name><parameter_list>(<parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>bool</name></type> <name>lv_indev_read</name><parameter_list>(<parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name></decl></parameter>, <parameter><decl><type><name>lv_indev_data_t</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
