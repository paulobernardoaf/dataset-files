<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_hal\lv_hal_disp.h">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_HAL_DISP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_HAL_DISP_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_hal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_color.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_area.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_ll.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_task.h"</cpp:file></cpp:include>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_INV_BUF_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_INV_BUF_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_ATTRIBUTE_FLUSH_READY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_ATTRIBUTE_FLUSH_READY</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<struct_decl>struct <name>_disp_t</name>;</struct_decl>
<struct_decl>struct <name>_disp_drv_t</name>;</struct_decl>




<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>buf1</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>buf2</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>buf_act</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>lv_area_t</name></type> <name>area</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>uint32_t</name></type> <name>flushing</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block></struct></type> <name>lv_disp_buf_t</name>;</typedef>




<typedef>typedef <type><struct>struct <name>_disp_drv_t</name>
<block>{

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>hor_res</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>ver_res</name></decl>;</decl_stmt> 



<decl_stmt><decl><type><name>lv_disp_buf_t</name> <modifier>*</modifier></type> <name>buffer</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>antialiasing</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rotated</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_SCREEN_TRANSP</name></expr></cpp:if>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>screen_transp</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>flush_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_disp_drv_t</name></name> <modifier>*</modifier></type> <name>disp_drv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>area</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name> <modifier>*</modifier></type> <name>color_p</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>rounder_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_disp_drv_t</name></name> <modifier>*</modifier></type> <name>disp_drv</name></decl></parameter>, <parameter><decl><type><name>lv_area_t</name> <modifier>*</modifier></type> <name>area</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>set_px_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_disp_drv_t</name></name> <modifier>*</modifier></type> <name>disp_drv</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>buf_w</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>lv_color_t</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>monitor_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_disp_drv_t</name></name> <modifier>*</modifier></type> <name>disp_drv</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>px</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GPU</name></expr></cpp:if>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>gpu_blend_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_disp_drv_t</name></name> <modifier>*</modifier></type> <name>disp_drv</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name> <modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_color_t</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>length</name></decl></parameter>,
<parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>gpu_fill_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_disp_drv_t</name></name> <modifier>*</modifier></type> <name>disp_drv</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name> <modifier>*</modifier></type> <name>dest_buf</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>dest_width</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>fill_area</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><name>lv_color_t</name></type> <name>color_chroma_key</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_USER_DATA</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_disp_drv_user_data_t</name></type> <name>user_data</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>lv_disp_drv_t</name>;</typedef>

<struct_decl>struct <name>_lv_obj_t</name>;</struct_decl>





<typedef>typedef <type><struct>struct <name>_disp_t</name>
<block>{

<decl_stmt><decl><type><name>lv_disp_drv_t</name></type> <name>driver</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>refr_task</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lv_ll_t</name></type> <name>scr_ll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_lv_obj_t</name></name> <modifier>*</modifier></type> <name>act_scr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>_lv_obj_t</name></name> <modifier>*</modifier></type> <name>top_layer</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>_lv_obj_t</name></name> <modifier>*</modifier></type> <name>sys_layer</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>lv_area_t</name></type> <name><name>inv_areas</name><index>[<expr><name>LV_INV_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>inv_area_joined</name><index>[<expr><name>LV_INV_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>inv_p</name> <range>: <expr><literal type="number">10</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>last_activity_time</name></decl>;</decl_stmt> 
}</block></struct></type> <name>lv_disp_t</name>;</typedef>











<function_decl><type><name>void</name></type> <name>lv_disp_drv_init</name><parameter_list>(<parameter><decl><type><name>lv_disp_drv_t</name> <modifier>*</modifier></type> <name>driver</name></decl></parameter>)</parameter_list>;</function_decl>
















<function_decl><type><name>void</name></type> <name>lv_disp_buf_init</name><parameter_list>(<parameter><decl><type><name>lv_disp_buf_t</name> <modifier>*</modifier></type> <name>disp_buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>buf1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>buf2</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size_in_px_cnt</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>lv_disp_drv_register</name><parameter_list>(<parameter><decl><type><name>lv_disp_drv_t</name> <modifier>*</modifier></type> <name>driver</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>lv_disp_drv_update</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>, <parameter><decl><type><name>lv_disp_drv_t</name> <modifier>*</modifier></type> <name>new_drv</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>lv_disp_remove</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>lv_disp_set_default</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>lv_disp_get_default</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>lv_coord_t</name></type> <name>lv_disp_get_hor_res</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>lv_coord_t</name></type> <name>lv_disp_get_ver_res</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>bool</name></type> <name>lv_disp_get_antialiasing</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>LV_ATTRIBUTE_FLUSH_READY</name> <name>void</name></type> <name>lv_disp_flush_ready</name><parameter_list>(<parameter><decl><type><name>lv_disp_drv_t</name> <modifier>*</modifier></type> <name>disp_drv</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>lv_disp_get_next</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>lv_disp_buf_t</name> <modifier>*</modifier></type> <name>lv_disp_get_buf</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>uint16_t</name></type> <name>lv_disp_get_inv_buf_size</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>lv_disp_pop_from_inv_buf</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>bool</name></type> <name>lv_disp_is_double_buf</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>bool</name></type> <name>lv_disp_is_true_double_buf</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>;</function_decl>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
