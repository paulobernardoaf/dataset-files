<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_hal\lv_hal_tick.c">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_CONF_INCLUDE_SIMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_conf.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../lv_conf.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_hal_tick.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_TICK_CUSTOM</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> LV_TICK_CUSTOM_INCLUDE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
















<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>sys_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>uint8_t</name></type> <name>tick_irq_flag</name></decl>;</decl_stmt>













<function><type><name>LV_ATTRIBUTE_TICK_INC</name> <name>void</name></type> <name>lv_tick_inc</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>tick_period</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>tick_irq_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sys_time</name> <operator>+=</operator> <name>tick_period</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>uint32_t</name></type> <name>lv_tick_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_TICK_CUSTOM</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>result</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>tick_irq_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>sys_time</name></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><operator>!</operator><name>tick_irq_flag</name></expr>)</condition>;</do> 


<return>return <expr><name>result</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>LV_TICK_CUSTOM_SYS_TIME_EXPR</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><name>uint32_t</name></type> <name>lv_tick_elaps</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>prev_tick</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>act_time</name> <init>= <expr><call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>act_time</name> <operator>&gt;=</operator> <name>prev_tick</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prev_tick</name> <operator>=</operator> <name>act_time</name> <operator>-</operator> <name>prev_tick</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>prev_tick</name> <operator>=</operator> <name>UINT32_MAX</name> <operator>-</operator> <name>prev_tick</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_tick</name> <operator>+=</operator> <name>act_time</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>prev_tick</name></expr>;</return>
</block_content>}</block></function>




</unit>
