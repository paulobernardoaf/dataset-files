









#include "../lv_core/lv_debug.h"
#include "../lv_hal/lv_hal_indev.h"
#include "../lv_core/lv_indev.h"
#include "../lv_misc/lv_mem.h"
#include "../lv_misc/lv_gc.h"
#include "lv_hal_disp.h"

#if defined(LV_GC_INCLUDE)
#include LV_GC_INCLUDE
#endif 































void lv_indev_drv_init(lv_indev_drv_t * driver)
{
    memset(driver, 0, sizeof(lv_indev_drv_t));

    driver->type                = LV_INDEV_TYPE_NONE;
    driver->drag_limit          = LV_INDEV_DEF_DRAG_LIMIT;
    driver->drag_throw          = LV_INDEV_DEF_DRAG_THROW;
    driver->long_press_time     = LV_INDEV_DEF_LONG_PRESS_TIME;
    driver->long_press_rep_time = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
}






lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{

    if(driver->disp == NULL) driver->disp = lv_disp_get_default();

    if(driver->disp == NULL) {
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attache the indev to "
                    "a display");
        return NULL;
    }

    lv_indev_t * indev = lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
    if(!indev) {
        LV_ASSERT_MEM(indev);
        return NULL;
    }

    memset(indev, 0, sizeof(lv_indev_t));
    memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));

    indev->proc.reset_query = 1;
    indev->cursor           = NULL;
    indev->group            = NULL;
    indev->btn_points       = NULL;

    indev->driver.read_task = lv_task_create(lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_MID, indev);

    return indev;
}






void lv_indev_drv_update(lv_indev_t * indev, lv_indev_drv_t * new_drv)
{
    memcpy(&indev->driver, new_drv, sizeof(lv_indev_drv_t));
}







lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
    else
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
}







bool lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
    bool cont = false;

    memset(data, 0, sizeof(lv_indev_data_t));

    

    if(indev->driver.type == LV_INDEV_TYPE_POINTER) {
        data->point.x = indev->proc.types.pointer.act_point.x;
        data->point.y = indev->proc.types.pointer.act_point.y;
    }
    
    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
        data->key = indev->proc.types.keypad.last_key;
    }

    if(indev->driver.read_cb) {
        LV_LOG_TRACE("idnev read started");
        cont = indev->driver.read_cb(&indev->driver, data);
        LV_LOG_TRACE("idnev read finished");
    } else {
        LV_LOG_WARN("indev function registered");
    }

    return cont;
}




