<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_hal\lv_hal_indev.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_hal/lv_hal_indev.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_indev.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_gc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_hal_disp.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_GC_INCLUDE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> LV_GC_INCLUDE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 































<function><type><name>void</name></type> <name>lv_indev_drv_init</name><parameter_list>(<parameter><decl><type><name>lv_indev_drv_t</name> <modifier>*</modifier></type> <name>driver</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>driver</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_indev_drv_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>LV_INDEV_TYPE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>drag_limit</name></name> <operator>=</operator> <name>LV_INDEV_DEF_DRAG_LIMIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>drag_throw</name></name> <operator>=</operator> <name>LV_INDEV_DEF_DRAG_THROW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>long_press_time</name></name> <operator>=</operator> <name>LV_INDEV_DEF_LONG_PRESS_TIME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>long_press_rep_time</name></name> <operator>=</operator> <name>LV_INDEV_DEF_LONG_PRESS_REP_TIME</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>lv_indev_drv_register</name><parameter_list>(<parameter><decl><type><name>lv_indev_drv_t</name> <modifier>*</modifier></type> <name>driver</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>driver</name><operator>-&gt;</operator><name>disp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>disp</name></name> <operator>=</operator> <call><name>lv_disp_get_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>driver</name><operator>-&gt;</operator><name>disp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_indev_drv_register: no display registered hence can't attache the indev to "</literal>
<literal type="string">"a display"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name> <init>= <expr><call><name>lv_ll_ins_head</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_indev_ll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>indev</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>indev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>indev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_indev_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>indev</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><name>driver</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_indev_drv_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>reset_query</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>btn_points</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>read_task</name></name> <operator>=</operator> <call><name>lv_task_create</name><argument_list>(<argument><expr><name>lv_indev_read_task</name></expr></argument>, <argument><expr><name>LV_INDEV_DEF_READ_PERIOD</name></expr></argument>, <argument><expr><name>LV_TASK_PRIO_MID</name></expr></argument>, <argument><expr><name>indev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>indev</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_indev_drv_update</name><parameter_list>(<parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name></decl></parameter>, <parameter><decl><type><name>lv_indev_drv_t</name> <modifier>*</modifier></type> <name>new_drv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>indev</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><name>new_drv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_indev_drv_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>lv_indev_get_next</name><parameter_list>(<parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>indev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>lv_ll_get_head</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_indev_ll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>lv_ll_get_next</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_indev_ll</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>indev</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>







<function><type><name>bool</name></type> <name>lv_indev_read</name><parameter_list>(<parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name></decl></parameter>, <parameter><decl><type><name>lv_indev_data_t</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>cont</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_indev_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if<condition>(<expr><name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>LV_INDEV_TYPE_POINTER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_point</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>pointer</name><operator>.</operator><name>act_point</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>LV_INDEV_TYPE_KEYPAD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>types</name><operator>.</operator><name>keypad</name><operator>.</operator><name>last_key</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>read_cb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"idnev read started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cont</name> <operator>=</operator> <call><name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>read_cb</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>indev</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"idnev read finished"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"indev function registered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>cont</name></expr>;</return>
</block_content>}</block></function>




</unit>
