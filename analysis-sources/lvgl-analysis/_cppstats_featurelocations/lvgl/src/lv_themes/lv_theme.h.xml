<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_themes\lv_theme.h">




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_THEMES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_THEMES_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_CONF_INCLUDE_SIMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_conf.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../lv_conf.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_style.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_group.h"</cpp:file></cpp:include>















<typedef>typedef <type><struct>struct
<block>{
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>scr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>panel</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_CONT</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>cont</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_BTN</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>rel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>pr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>tgl_rel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>tgl_pr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>ina</name></decl>;</decl_stmt>
}</block> <decl><name>btn</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_IMGBTN</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>rel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>pr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>tgl_rel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>tgl_pr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>ina</name></decl>;</decl_stmt>
}</block> <decl><name>imgbtn</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_LABEL</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>prim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>hint</name></decl>;</decl_stmt>
}</block> <decl><name>label</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_IMG</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>light</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>dark</name></decl>;</decl_stmt>
}</block> <decl><name>img</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_LINE</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>decor</name></decl>;</decl_stmt>
}</block> <decl><name>line</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_LED</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>led</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_BAR</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>indic</name></decl>;</decl_stmt>
}</block> <decl><name>bar</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_SLIDER</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>indic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>knob</name></decl>;</decl_stmt>
}</block> <decl><name>slider</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_LMETER</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>lmeter</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GAUGE</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>gauge</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ARC</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>arc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_PRELOAD</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>preload</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_SW</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>indic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>knob_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>knob_on</name></decl>;</decl_stmt>
}</block> <decl><name>sw</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_CHART</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>chart</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_CALENDAR</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>header_pr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>day_names</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>highlighted_days</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>inactive_days</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>week_box</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>today_box</name></decl>;</decl_stmt>
}</block> <decl><name>calendar</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_CB</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>bg</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>rel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>pr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>tgl_rel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>tgl_pr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>ina</name></decl>;</decl_stmt>
}</block> <decl><name>box</name></decl>;</struct>
}</block> <decl><name>cb</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_BTNM</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>bg</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>rel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>pr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>tgl_rel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>tgl_pr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>ina</name></decl>;</decl_stmt>
}</block> <decl><name>btn</name></decl>;</struct>
}</block> <decl><name>btnm</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_KB</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>bg</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>rel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>pr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>tgl_rel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>tgl_pr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>ina</name></decl>;</decl_stmt>
}</block> <decl><name>btn</name></decl>;</struct>
}</block> <decl><name>kb</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_MBOX</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>bg</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>rel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>pr</name></decl>;</decl_stmt>
}</block> <decl><name>btn</name></decl>;</struct>
}</block> <decl><name>mbox</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_PAGE</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>scrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>sb</name></decl>;</decl_stmt>
}</block> <decl><name>page</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_TA</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>area</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>oneline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>sb</name></decl>;</decl_stmt>
}</block> <decl><name>ta</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_SPINBOX</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>sb</name></decl>;</decl_stmt>
}</block> <decl><name>spinbox</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_LIST</name></expr></cpp:if>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>scrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>sb</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>rel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>pr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>tgl_rel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>tgl_pr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>ina</name></decl>;</decl_stmt>
}</block> <decl><name>btn</name></decl>;</struct>
}</block> <decl><name>list</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_DDLIST</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>sel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>sb</name></decl>;</decl_stmt>
}</block> <decl><name>ddlist</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ROLLER</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>sel</name></decl>;</decl_stmt>
}</block> <decl><name>roller</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_TABVIEW</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>indic</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>rel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>pr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>tgl_rel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>tgl_pr</name></decl>;</decl_stmt>
}</block> <decl><name>btn</name></decl>;</struct>
}</block> <decl><name>tabview</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_TILEVIEW</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>scrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>sb</name></decl>;</decl_stmt>
}</block> <decl><name>tileview</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_TABLE</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>cell</name></decl>;</decl_stmt>
}</block> <decl><name>table</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_WIN</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>content</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>rel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>pr</name></decl>;</decl_stmt>
}</block> <decl><name>btn</name></decl>;</struct>
}</block> <decl><name>win</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block> <decl><name>style</name></decl>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>
<struct>struct
<block>{


<decl_stmt><decl><type><name>lv_group_style_mod_cb_t</name></type> <name>style_mod_xcb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_group_style_mod_cb_t</name></type> <name>style_mod_edit_xcb</name></decl>;</decl_stmt>
}</block> <decl><name>group</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>lv_theme_t</name>;</typedef>










<function_decl><type><name>void</name></type> <name>lv_theme_set_current</name><parameter_list>(<parameter><decl><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>th</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>lv_theme_get_current</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_THEME_STYLE_COUNT</name></cpp:macro> <cpp:value>(sizeof(((lv_theme_t *)0)-&gt;style) / sizeof(lv_style_t *))</cpp:value></cpp:define>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_theme_templ.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_theme_default.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_theme_alien.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_theme_night.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_theme_zen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_theme_mono.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_theme_nemo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_theme_material.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
