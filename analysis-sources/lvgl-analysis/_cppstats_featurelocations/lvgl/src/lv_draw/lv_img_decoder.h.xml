<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_draw\lv_img_decoder.h">




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_IMG_DEOCER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_IMG_DEOCER_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_CONF_INCLUDE_SIMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_conf.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../lv_conf.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_area.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_style.h"</cpp:file></cpp:include>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_IMG_PX_SIZE_ALPHA_BYTE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">16</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_IMG_PX_SIZE_ALPHA_BYTE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_IMG_PX_SIZE_ALPHA_BYTE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<enum>enum <block>{
<decl><name>LV_IMG_SRC_VARIABLE</name></decl>, 
<decl><name>LV_IMG_SRC_FILE</name></decl>, 
<decl><name>LV_IMG_SRC_SYMBOL</name></decl>, 
<decl><name>LV_IMG_SRC_UNKNOWN</name></decl>, 
}</block>;</enum>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_img_src_t</name>;</typedef>



<typedef>typedef <type><struct>struct
<block>{



<decl_stmt><decl><type><name>uint32_t</name></type> <name>cf</name> <range>: <expr><literal type="number">5</literal></expr></range></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>always_zero</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>w</name> <range>: <expr><literal type="number">11</literal></expr></range></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>h</name> <range>: <expr><literal type="number">11</literal></expr></range></decl>;</decl_stmt> 
}</block></struct></type> <name>lv_img_header_t</name>;</typedef>


<enum>enum <block>{
<decl><name>LV_IMG_CF_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>LV_IMG_CF_RAW</name></decl>, 
<decl><name>LV_IMG_CF_RAW_ALPHA</name></decl>, 

<decl><name>LV_IMG_CF_RAW_CHROMA_KEYED</name></decl>, 


<decl><name>LV_IMG_CF_TRUE_COLOR</name></decl>, 
<decl><name>LV_IMG_CF_TRUE_COLOR_ALPHA</name></decl>, 
<decl><name>LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED</name></decl>, 


<decl><name>LV_IMG_CF_INDEXED_1BIT</name></decl>, 
<decl><name>LV_IMG_CF_INDEXED_2BIT</name></decl>, 
<decl><name>LV_IMG_CF_INDEXED_4BIT</name></decl>, 
<decl><name>LV_IMG_CF_INDEXED_8BIT</name></decl>, 

<decl><name>LV_IMG_CF_ALPHA_1BIT</name></decl>, 
<decl><name>LV_IMG_CF_ALPHA_2BIT</name></decl>, 
<decl><name>LV_IMG_CF_ALPHA_4BIT</name></decl>, 
<decl><name>LV_IMG_CF_ALPHA_8BIT</name></decl>, 

<decl><name>LV_IMG_CF_RESERVED_15</name></decl>, 
<decl><name>LV_IMG_CF_RESERVED_16</name></decl>, 
<decl><name>LV_IMG_CF_RESERVED_17</name></decl>, 
<decl><name>LV_IMG_CF_RESERVED_18</name></decl>, 
<decl><name>LV_IMG_CF_RESERVED_19</name></decl>, 
<decl><name>LV_IMG_CF_RESERVED_20</name></decl>, 
<decl><name>LV_IMG_CF_RESERVED_21</name></decl>, 
<decl><name>LV_IMG_CF_RESERVED_22</name></decl>, 
<decl><name>LV_IMG_CF_RESERVED_23</name></decl>, 

<decl><name>LV_IMG_CF_USER_ENCODED_0</name></decl>, 
<decl><name>LV_IMG_CF_USER_ENCODED_1</name></decl>, 
<decl><name>LV_IMG_CF_USER_ENCODED_2</name></decl>, 
<decl><name>LV_IMG_CF_USER_ENCODED_3</name></decl>, 
<decl><name>LV_IMG_CF_USER_ENCODED_4</name></decl>, 
<decl><name>LV_IMG_CF_USER_ENCODED_5</name></decl>, 
<decl><name>LV_IMG_CF_USER_ENCODED_6</name></decl>, 
<decl><name>LV_IMG_CF_USER_ENCODED_7</name></decl>, 
}</block>;</enum>
<typedef>typedef <type><name>uint8_t</name></type> <name>lv_img_cf_t</name>;</typedef>



<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>lv_img_header_t</name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>data_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>
}</block></struct></type> <name>lv_img_dsc_t</name>;</typedef>



<struct_decl>struct <name>_lv_img_decoder</name>;</struct_decl>
<struct_decl>struct <name>_lv_img_decoder_dsc</name>;</struct_decl>








<typedef>typedef <function_decl><type><name>lv_res_t</name></type> (<modifier>*</modifier><name>lv_img_decoder_info_f_t</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_img_decoder</name></name> <modifier>*</modifier></type> <name>decoder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>,
<parameter><decl><type><name>lv_img_header_t</name> <modifier>*</modifier></type> <name>header</name></decl></parameter>)</parameter_list>;</function_decl></typedef>






<typedef>typedef <function_decl><type><name>lv_res_t</name></type> (<modifier>*</modifier><name>lv_img_decoder_open_f_t</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_img_decoder</name></name> <modifier>*</modifier></type> <name>decoder</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_lv_img_decoder_dsc</name></name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>)</parameter_list>;</function_decl></typedef>












<typedef>typedef <function_decl><type><name>lv_res_t</name></type> (<modifier>*</modifier><name>lv_img_decoder_read_line_f_t</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_img_decoder</name></name> <modifier>*</modifier></type> <name>decoder</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_lv_img_decoder_dsc</name></name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>,
<parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl></typedef>






<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>lv_img_decoder_close_f_t</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_img_decoder</name></name> <modifier>*</modifier></type> <name>decoder</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_lv_img_decoder_dsc</name></name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>_lv_img_decoder</name>
<block>{
<decl_stmt><decl><type><name>lv_img_decoder_info_f_t</name></type> <name>info_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_img_decoder_open_f_t</name></type> <name>open_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_img_decoder_read_line_f_t</name></type> <name>read_line_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_img_decoder_close_f_t</name></type> <name>close_cb</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_USER_DATA</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_img_decoder_user_data_t</name></type> <name>user_data</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>lv_img_decoder_t</name>;</typedef>


<typedef>typedef <type><struct>struct <name>_lv_img_decoder_dsc</name>
<block>{

<decl_stmt><decl><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>decoder</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>src</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lv_img_src_t</name></type> <name>src_type</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lv_img_header_t</name></type> <name>header</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>img_data</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint32_t</name></type> <name>time_to_open</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>error_msg</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>user_data</name></decl>;</decl_stmt>
}</block></struct></type> <name>lv_img_decoder_dsc_t</name>;</typedef>








<function_decl><type><name>void</name></type> <name>lv_img_decoder_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>lv_res_t</name></type> <name>lv_img_decoder_get_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>lv_img_header_t</name> <modifier>*</modifier></type> <name>header</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>lv_res_t</name></type> <name>lv_img_decoder_open</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>lv_res_t</name></type> <name>lv_img_decoder_read_line</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>lv_img_decoder_close</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>lv_img_decoder_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>lv_img_decoder_delete</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>decoder</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>lv_img_decoder_set_info_cb</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>decoder</name></decl></parameter>, <parameter><decl><type><name>lv_img_decoder_info_f_t</name></type> <name>info_cb</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>lv_img_decoder_set_open_cb</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>decoder</name></decl></parameter>, <parameter><decl><type><name>lv_img_decoder_open_f_t</name></type> <name>open_cb</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>lv_img_decoder_set_read_line_cb</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>decoder</name></decl></parameter>, <parameter><decl><type><name>lv_img_decoder_read_line_f_t</name></type> <name>read_line_cb</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>lv_img_decoder_set_close_cb</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>decoder</name></decl></parameter>, <parameter><decl><type><name>lv_img_decoder_close_f_t</name></type> <name>close_cb</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>lv_res_t</name></type> <name>lv_img_decoder_built_in_info</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>decoder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>lv_img_header_t</name> <modifier>*</modifier></type> <name>header</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>lv_res_t</name></type> <name>lv_img_decoder_built_in_open</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>decoder</name></decl></parameter>, <parameter><decl><type><name>lv_img_decoder_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>lv_res_t</name></type> <name>lv_img_decoder_built_in_read_line</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>decoder</name></decl></parameter>, <parameter><decl><type><name>lv_img_decoder_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>,
<parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>lv_img_decoder_built_in_close</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>decoder</name></decl></parameter>, <parameter><decl><type><name>lv_img_decoder_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>)</parameter_list>;</function_decl>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
