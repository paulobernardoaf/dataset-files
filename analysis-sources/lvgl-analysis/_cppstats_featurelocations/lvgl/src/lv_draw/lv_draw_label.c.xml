<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_draw\lv_draw_label.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_draw_label.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_math.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_bidi.h"</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LABEL_RECOLOR_PAR_LENGTH</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LABEL_HINT_UPDATE_TH</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define> 




<enum>enum <block>{
<decl><name>CMD_STATE_WAIT</name></decl>,
<decl><name>CMD_STATE_PAR</name></decl>,
<decl><name>CMD_STATE_IN</name></decl>,
}</block>;</enum>
<typedef>typedef <type><name>uint8_t</name></type> <name>cmd_state_t</name>;</typedef>




<function_decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name>hex_char_to_num</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>hex</name></decl></parameter>)</parameter_list>;</function_decl>
























<function><type><name>void</name></type> <name>lv_draw_label</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>lv_txt_flag_t</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>lv_point_t</name> <modifier>*</modifier></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>lv_draw_label_txt_sel_t</name> <modifier>*</modifier></type> <name>sel</name></decl></parameter>,
<parameter><decl><type><name>lv_draw_label_hint_t</name> <modifier>*</modifier></type> <name>hint</name></decl></parameter>, <parameter><decl><type><name>lv_bidi_dir_t</name></type> <name>bidi_dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>txt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>LV_TXT_FLAG_EXPAND</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>coords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_txt_get_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>txt</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name></expr></argument>, <argument><expr><name>LV_COORD_MAX</name></expr></argument>,
<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>line_height</name> <init>= <expr><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>line_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_point_t</name></type> <name>pos</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x_ofs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y_ofs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>offset</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x_ofs</name> <operator>=</operator> <name><name>offset</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y_ofs</name> <operator>=</operator> <name><name>offset</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>y_ofs</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>line_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>last_line_start</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>hint</name> <operator>&amp;&amp;</operator> <name>y_ofs</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>hint</name><operator>-&gt;</operator><name>coord_y</name></name> <operator>-</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>LV_LABEL_HINT_UPDATE_TH</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>line_height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>line_start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>last_line_start</name> <operator>=</operator> <name><name>hint</name><operator>-&gt;</operator><name>line_start</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>hint</name> <operator>&amp;&amp;</operator> <name>last_line_start</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line_start</name> <operator>=</operator> <name>last_line_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>hint</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>line_end</name> <init>= <expr><name>line_start</name> <operator>+</operator> <call><name>lv_txt_get_next_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name>line_start</name></expr>]</index></name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<while>while<condition>(<expr><name><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>line_height</name> <operator>&lt;</operator> <name><name>mask</name><operator>-&gt;</operator><name>y1</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line_start</name> <operator>=</operator> <name>line_end</name></expr>;</expr_stmt>
<expr_stmt><expr><name>line_end</name> <operator>+=</operator> <call><name>lv_txt_get_next_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name>line_start</name></expr>]</index></name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>line_height</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>hint</name> <operator>&amp;&amp;</operator> <name><name>pos</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <operator>-</operator><name>LV_LABEL_HINT_UPDATE_TH</name> <operator>&amp;&amp;</operator> <name><name>hint</name><operator>-&gt;</operator><name>line_start</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>line_start</name></name> <operator>=</operator> <name>line_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>coord_y</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>y1</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>txt</name><index>[<expr><name>line_start</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if<condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>LV_TXT_FLAG_CENTER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line_width</name> <operator>=</operator> <call><name>lv_txt_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name>line_start</name></expr>]</index></name></expr></argument>, <argument><expr><name>line_end</name> <operator>-</operator> <name>line_start</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <operator>(</operator><call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>coords</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>line_width</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>LV_TXT_FLAG_RIGHT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line_width</name> <operator>=</operator> <call><name>lv_txt_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name>line_start</name></expr>]</index></name></expr></argument>, <argument><expr><name>line_end</name> <operator>-</operator> <name>line_start</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>coords</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>line_width</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa</name> <init>= <expr><ternary><condition><expr><name>opa_scale</name> <operator>==</operator> <name>LV_OPA_COVER</name></expr> ?</condition><then> <expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>opa</name></name></expr> </then><else>: <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>opa</name></name> <operator>*</operator> <name>opa_scale</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>sel_start</name> <init>= <expr><literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>sel_end</name> <init>= <expr><literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>sel</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sel_start</name> <operator>=</operator> <name><name>sel</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sel_end</name> <operator>=</operator> <name><name>sel</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>sel_start</name> <operator>&gt;</operator> <name>sel_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>tmp</name> <init>= <expr><name>sel_start</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sel_start</name> <operator>=</operator> <name>sel_end</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sel_end</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>cmd_state_t</name></type> <name>cmd_state</name> <init>= <expr><name>CMD_STATE_WAIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>par_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_color_t</name></type> <name>recolor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>letter_w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name></type> <name>sel_style</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sel_style</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_plain_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sel_style</name><operator>.</operator><name>body</name><operator>.</operator><name>main_color</name></name> <operator>=</operator> <name><name>sel_style</name><operator>.</operator><name>body</name><operator>.</operator><name>grad_color</name></name> <operator>=</operator> <name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>sel_color</name></name></expr>;</expr_stmt>


<while>while<condition>(<expr><name><name>txt</name><index>[<expr><name>line_start</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>offset</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>x_ofs</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cmd_state</name> <operator>=</operator> <name>CMD_STATE_WAIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>letter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>letter_next</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_BIDI</name></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bidi_txt</name> <init>= <expr><call><name>lv_draw_get_buf</name><argument_list>(<argument><expr><name>line_end</name> <operator>-</operator> <name>line_start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_bidi_process_paragraph</name><argument_list>(<argument><expr><name>txt</name> <operator>+</operator> <name>line_start</name></expr></argument>, <argument><expr><name>bidi_txt</name></expr></argument>, <argument><expr><name>line_end</name> <operator>-</operator> <name>line_start</name></expr></argument>, <argument><expr><name>bidi_dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>bidi_dir</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bidi_txt</name> <init>= <expr><name>txt</name> <operator>+</operator> <name>line_start</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>line_end</name> <operator>-</operator> <name>line_start</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>logical_char_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>sel_start</name> <operator>!=</operator> <literal type="number">0xFFFF</literal> <operator>&amp;&amp;</operator> <name>sel_end</name> <operator>!=</operator> <literal type="number">0xFFFF</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_BIDI</name></expr></cpp:if>
<expr_stmt><expr><name>logical_char_pos</name> <operator>=</operator> <call><name>lv_txt_encoded_get_char_id</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name>line_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>t</name> <init>= <expr><call><name>lv_txt_encoded_get_char_id</name><argument_list>(<argument><expr><name>bidi_txt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>logical_char_pos</name> <operator>+=</operator> <call><name>lv_bidi_get_logical_pos</name><argument_list>(<argument><expr><name>bidi_txt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>line_end</name> <operator>-</operator> <name>line_start</name></expr></argument>, <argument><expr><name>bidi_dir</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>logical_char_pos</name> <operator>=</operator> <call><name>lv_txt_encoded_get_char_id</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name>line_start</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>letter</name> <operator>=</operator> <call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name>bidi_txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>letter_next</name> <operator>=</operator> <call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bidi_txt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if<condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>LV_TXT_FLAG_RECOLOR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>letter</name> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>LV_TXT_COLOR_CMD</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>cmd_state</name> <operator>==</operator> <name>CMD_STATE_WAIT</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>par_start</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd_state</name> <operator>=</operator> <name>CMD_STATE_PAR</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>cmd_state</name> <operator>==</operator> <name>CMD_STATE_PAR</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>cmd_state</name> <operator>=</operator> <name>CMD_STATE_WAIT</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>cmd_state</name> <operator>==</operator> <name>CMD_STATE_IN</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>cmd_state</name> <operator>=</operator> <name>CMD_STATE_WAIT</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>cmd_state</name> <operator>==</operator> <name>CMD_STATE_PAR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>letter</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>-</operator> <name>par_start</name> <operator>==</operator> <name>LABEL_RECOLOR_PAR_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>LABEL_RECOLOR_PAR_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bidi_txt</name><index>[<expr><name>par_start</name></expr>]</index></name></expr></argument>, <argument><expr><name>LABEL_RECOLOR_PAR_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>LABEL_RECOLOR_PAR_LENGTH</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><call><name>hex_char_to_num</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <call><name>hex_char_to_num</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><call><name>hex_char_to_num</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <call><name>hex_char_to_num</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><call><name>hex_char_to_num</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <call><name>hex_char_to_num</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>recolor</name> <operator>=</operator> <call><name>lv_color_make</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>recolor</name><operator>.</operator><name>full</name></name> <operator>=</operator> <name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>color</name><operator>.</operator><name>full</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>cmd_state</name> <operator>=</operator> <name>CMD_STATE_IN</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>color</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>color</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>cmd_state</name> <operator>==</operator> <name>CMD_STATE_IN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>color</name> <operator>=</operator> <name>recolor</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>letter_w</name> <operator>=</operator> <call><name>lv_font_get_glyph_width</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>letter</name></expr></argument>, <argument><expr><name>letter_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>sel_start</name> <operator>!=</operator> <literal type="number">0xFFFF</literal> <operator>&amp;&amp;</operator> <name>sel_end</name> <operator>!=</operator> <literal type="number">0xFFFF</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>logical_char_pos</name> <operator>&gt;=</operator> <name>sel_start</name> <operator>&amp;&amp;</operator> <name>logical_char_pos</name> <operator>&lt;</operator> <name>sel_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_area_t</name></type> <name>sel_coords</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sel_coords</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sel_coords</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sel_coords</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>letter_w</name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sel_coords</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>line_height</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sel_coords</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sel_style</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_draw_letter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name>letter</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>letter_w</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>letter_w</name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>line_start</name> <operator>=</operator> <name>line_end</name></expr>;</expr_stmt>
<expr_stmt><expr><name>line_end</name> <operator>+=</operator> <call><name>lv_txt_get_next_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name>line_start</name></expr>]</index></name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>coords</name><operator>-&gt;</operator><name>x1</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>LV_TXT_FLAG_CENTER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line_width</name> <operator>=</operator>
<call><name>lv_txt_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name>line_start</name></expr>]</index></name></expr></argument>, <argument><expr><name>line_end</name> <operator>-</operator> <name>line_start</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <operator>(</operator><call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>coords</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>line_width</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>LV_TXT_FLAG_RIGHT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line_width</name> <operator>=</operator>
<call><name>lv_txt_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name>line_start</name></expr>]</index></name></expr></argument>, <argument><expr><name>line_end</name> <operator>-</operator> <name>line_start</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>coords</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>line_width</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>line_height</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pos</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name><name>mask</name><operator>-&gt;</operator><name>y2</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>hex_char_to_num</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>hex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>hex</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>hex</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>hex</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>hex</name> <operator>&gt;=</operator> <literal type="char">'a'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hex</name> <operator>-=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<switch>switch<condition>(<expr><name>hex</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'A'</literal></expr>:</case> <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'B'</literal></expr>:</case> <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'C'</literal></expr>:</case> <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'D'</literal></expr>:</case> <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'E'</literal></expr>:</case> <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'F'</literal></expr>:</case> <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
