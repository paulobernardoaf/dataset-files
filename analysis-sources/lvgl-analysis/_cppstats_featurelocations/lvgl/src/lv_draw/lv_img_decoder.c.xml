<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_draw\lv_img_decoder.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_img_decoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_draw/lv_draw_img.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_ll.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_color.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_gc.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_GC_INCLUDE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> LV_GC_INCLUDE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CF_BUILT_IN_FIRST</name></cpp:macro> <cpp:value>LV_IMG_CF_TRUE_COLOR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CF_BUILT_IN_LAST</name></cpp:macro> <cpp:value>LV_IMG_CF_ALPHA_8BIT</cpp:value></cpp:define>




<typedef>typedef <type><struct>struct
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_FILESYSTEM</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_fs_file_t</name> <modifier>*</modifier></type> <name>f</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>lv_color_t</name> <modifier>*</modifier></type> <name>palette</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_opa_t</name> <modifier>*</modifier></type> <name>opa</name></decl>;</decl_stmt>
}</block></struct></type> <name>lv_img_decoder_built_in_data_t</name>;</typedef>




<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_img_decoder_built_in_line_true_color</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>lv_coord_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_img_decoder_built_in_line_alpha</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>lv_coord_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_img_decoder_built_in_line_indexed</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>lv_coord_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
















<function><type><name>void</name></type> <name>lv_img_decoder_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lv_ll_init</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_img_defoder_ll</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_img_decoder_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>decoder</name></decl>;</decl_stmt>


<expr_stmt><expr><name>decoder</name> <operator>=</operator> <call><name>lv_img_decoder_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>decoder</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_img_decoder_init: out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_img_decoder_set_info_cb</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><name>lv_img_decoder_built_in_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_img_decoder_set_open_cb</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><name>lv_img_decoder_built_in_open</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_img_decoder_set_read_line_cb</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><name>lv_img_decoder_built_in_read_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_img_decoder_set_close_cb</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><name>lv_img_decoder_built_in_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>lv_res_t</name></type> <name>lv_img_decoder_get_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>lv_img_header_t</name> <modifier>*</modifier></type> <name>header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>always_zero</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name> <init>= <expr><name>LV_RES_INV</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>d</name></decl>;</decl_stmt>
<macro><name>LV_LL_READ</name><argument_list>(<argument>LV_GC_ROOT(_lv_img_defoder_ll)</argument>, <argument>d</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>LV_RES_INV</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>info_cb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>d</name><operator>-&gt;</operator><name>info_cb</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>













<function><type><name>lv_res_t</name></type> <name>lv_img_decoder_open</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dsc</name><operator>-&gt;</operator><name>style</name></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc</name><operator>-&gt;</operator><name>src_type</name></name> <operator>=</operator> <call><name>lv_img_src_get_type</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>src_type</name></name> <operator>==</operator> <name>LV_IMG_SRC_FILE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>fnlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dsc</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><name>fnlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>dsc</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dsc</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name> <init>= <expr><name>LV_RES_INV</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>d</name></decl>;</decl_stmt>
<macro><name>LV_LL_READ</name><argument_list>(<argument>LV_GC_ROOT(_lv_img_defoder_ll)</argument>, <argument>d</argument>)</argument_list></macro>
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>info_cb</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>d</name><operator>-&gt;</operator><name>open_cb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>d</name><operator>-&gt;</operator><name>info_cb</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dsc</name><operator>-&gt;</operator><name>error_msg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc</name><operator>-&gt;</operator><name>img_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc</name><operator>-&gt;</operator><name>decoder</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>d</name><operator>-&gt;</operator><name>open_cb</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>dsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>LV_RES_INV</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dsc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_img_decoder_dsc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>lv_res_t</name></type> <name>lv_img_decoder_read_line</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name> <init>= <expr><name>LV_RES_INV</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>decoder</name><operator>-&gt;</operator><name>read_line_cb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>dsc</name><operator>-&gt;</operator><name>decoder</name><operator>-&gt;</operator><name>read_line_cb</name></name><argument_list>(<argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><name>dsc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>lv_img_decoder_close</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>decoder</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>decoder</name><operator>-&gt;</operator><name>close_cb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>dsc</name><operator>-&gt;</operator><name>decoder</name><operator>-&gt;</operator><name>close_cb</name></name><argument_list>(<argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><name>dsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>src_type</name></name> <operator>==</operator> <name>LV_IMG_SRC_FILE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>lv_img_decoder_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>decoder</name></decl>;</decl_stmt>
<expr_stmt><expr><name>decoder</name> <operator>=</operator> <call><name>lv_ll_ins_head</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_img_defoder_ll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>decoder</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_img_decoder_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>decoder</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>lv_img_decoder_delete</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>decoder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lv_ll_rem</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_img_defoder_ll</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_img_decoder_set_info_cb</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>decoder</name></decl></parameter>, <parameter><decl><type><name>lv_img_decoder_info_f_t</name></type> <name>info_cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>decoder</name><operator>-&gt;</operator><name>info_cb</name></name> <operator>=</operator> <name>info_cb</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_img_decoder_set_open_cb</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>decoder</name></decl></parameter>, <parameter><decl><type><name>lv_img_decoder_open_f_t</name></type> <name>open_cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>decoder</name><operator>-&gt;</operator><name>open_cb</name></name> <operator>=</operator> <name>open_cb</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_img_decoder_set_read_line_cb</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>decoder</name></decl></parameter>, <parameter><decl><type><name>lv_img_decoder_read_line_f_t</name></type> <name>read_line_cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>decoder</name><operator>-&gt;</operator><name>read_line_cb</name></name> <operator>=</operator> <name>read_line_cb</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_img_decoder_set_close_cb</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>decoder</name></decl></parameter>, <parameter><decl><type><name>lv_img_decoder_close_f_t</name></type> <name>close_cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>decoder</name><operator>-&gt;</operator><name>close_cb</name></name> <operator>=</operator> <name>close_cb</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>lv_res_t</name></type> <name>lv_img_decoder_built_in_info</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>decoder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>lv_img_header_t</name> <modifier>*</modifier></type> <name>header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>decoder</name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>lv_img_src_t</name></type> <name>src_type</name> <init>= <expr><call><name>lv_img_src_get_type</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>src_type</name> <operator>==</operator> <name>LV_IMG_SRC_VARIABLE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_img_cf_t</name></type> <name>cf</name> <init>= <expr><operator>(</operator><operator>(</operator><name>lv_img_dsc_t</name> <operator>*</operator><operator>)</operator><name>src</name><operator>)</operator><operator>-&gt;</operator><name><name>header</name><operator>.</operator><name>cf</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>cf</name> <argument_list type="generic">&lt; <argument><expr><name>CF_BUILT_IN_FIRST</name> <operator>||</operator> <name>cf</name></expr></argument> &gt;</argument_list></name> <name>CF_BUILT_IN_LAST</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_RES_INV</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>lv_img_dsc_t</name> <operator>*</operator><operator>)</operator><name>src</name><operator>)</operator><operator>-&gt;</operator><name><name>header</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>lv_img_dsc_t</name> <operator>*</operator><operator>)</operator><name>src</name><operator>)</operator><operator>-&gt;</operator><name><name>header</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>cf</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>lv_img_dsc_t</name> <operator>*</operator><operator>)</operator><name>src</name><operator>)</operator><operator>-&gt;</operator><name><name>header</name><operator>.</operator><name>cf</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_FILESYSTEM</name></expr></cpp:if>
<if type="elseif">else if<condition>(<expr><name>src_type</name> <operator>==</operator> <name>LV_IMG_SRC_FILE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_fs_file_t</name></type> <name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_fs_res_t</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rn</name></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_fs_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>file</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>LV_FS_MODE_RD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>LV_FS_RES_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_fs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>file</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_img_header_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_fs_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>cf</name></name> <operator>&lt;</operator> <name>CF_BUILT_IN_FIRST</name> <operator>||</operator> <name><name>header</name><operator>-&gt;</operator><name>cf</name></name> <operator>&gt;</operator> <name>CF_BUILT_IN_LAST</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_RES_INV</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if type="elseif">else if<condition>(<expr><name>src_type</name> <operator>==</operator> <name>LV_IMG_SRC_SYMBOL</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>cf</name></name> <operator>=</operator> <name>LV_IMG_CF_ALPHA_1BIT</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Image get info found unknown src type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LV_RES_INV</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>LV_RES_OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>lv_res_t</name></type> <name>lv_img_decoder_built_in_open</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>decoder</name></decl></parameter>, <parameter><decl><type><name>lv_img_decoder_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>src_type</name></name> <operator>==</operator> <name>LV_IMG_SRC_FILE</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_FILESYSTEM</name></expr></cpp:if>


<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>lv_fs_get_ext</name><argument_list>(<argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>src</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"bin"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_RES_INV</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_fs_file_t</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_fs_res_t</name></type> <name>res</name> <init>= <expr><call><name>lv_fs_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name>LV_FS_MODE_RD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_FS_RES_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Built-in image decoder can't open the file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LV_RES_INV</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>user_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dsc</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_img_decoder_built_in_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>user_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_ERROR</name><argument_list>(<argument><expr><literal type="string">"img_decoder_built_in_open: out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_img_decoder_built_in_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_img_decoder_built_in_data_t</name> <modifier>*</modifier></type> <name>user_data</name> <init>= <expr><name><name>dsc</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>user_data</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>user_data</name><operator>-&gt;</operator><name>f</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_ERROR</name><argument_list>(<argument><expr><literal type="string">"img_decoder_built_in_open: out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>user_data</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>user_data</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LV_RES_INV</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_img_cf_t</name></type> <name>cf</name> <init>= <expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>cf</name> <operator>==</operator> <name>LV_IMG_CF_TRUE_COLOR</name> <operator>||</operator> <name>cf</name> <operator>==</operator> <name>LV_IMG_CF_TRUE_COLOR_ALPHA</name> <operator>||</operator> <name>cf</name> <operator>==</operator> <name>LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>src_type</name></name> <operator>==</operator> <name>LV_IMG_SRC_VARIABLE</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>dsc</name><operator>-&gt;</operator><name>img_data</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>lv_img_dsc_t</name> <operator>*</operator><operator>)</operator><name><name>dsc</name><operator>-&gt;</operator><name>src</name></name><operator>)</operator><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>
<return>return <expr><name>LV_RES_OK</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>dsc</name><operator>-&gt;</operator><name>img_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>LV_RES_OK</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>cf</name> <operator>==</operator> <name>LV_IMG_CF_INDEXED_1BIT</name> <operator>||</operator> <name>cf</name> <operator>==</operator> <name>LV_IMG_CF_INDEXED_2BIT</name> <operator>||</operator> <name>cf</name> <operator>==</operator> <name>LV_IMG_CF_INDEXED_4BIT</name> <operator>||</operator>
<name>cf</name> <operator>==</operator> <name>LV_IMG_CF_INDEXED_8BIT</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_IMG_CF_INDEXED</name></expr></cpp:if>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>px_size</name> <init>= <expr><call><name>lv_img_color_format_get_px_size</name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>palette_size</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>px_size</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>user_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dsc</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_img_decoder_built_in_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>user_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_ERROR</name><argument_list>(<argument><expr><literal type="string">"img_decoder_built_in_open: out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_img_decoder_built_in_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_img_decoder_built_in_data_t</name> <modifier>*</modifier></type> <name>user_data</name> <init>= <expr><name><name>dsc</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>user_data</name><operator>-&gt;</operator><name>palette</name></name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><name>palette_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_color_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>user_data</name><operator>-&gt;</operator><name>opa</name></name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><name>palette_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv_opa_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>user_data</name><operator>-&gt;</operator><name>palette</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>user_data</name><operator>-&gt;</operator><name>opa</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_ERROR</name><argument_list>(<argument><expr><literal type="string">"img_decoder_built_in_open: out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>user_data</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>user_data</name><operator>-&gt;</operator><name>opa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>src_type</name></name> <operator>==</operator> <name>LV_IMG_SRC_FILE</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_FILESYSTEM</name></expr></cpp:if>
<expr_stmt><expr><call><name>lv_fs_seek</name><argument_list>(<argument><expr><name><name>user_data</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>lv_color32_t</name></type> <name>cur_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>palette_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>lv_fs_read</name><argument_list>(<argument><expr><name><name>user_data</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_color</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_color32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>user_data</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>lv_color_make</name><argument_list>(<argument><expr><name><name>cur_color</name><operator>.</operator><name>ch</name><operator>.</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>cur_color</name><operator>.</operator><name>ch</name><operator>.</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>cur_color</name><operator>.</operator><name>ch</name><operator>.</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>user_data</name><operator>-&gt;</operator><name>opa</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cur_color</name><operator>.</operator><name>ch</name><operator>.</operator><name>alpha</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Image built-in decoder can read the palette because LV_USE_FILESYSTEM = 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LV_RES_INV</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_color32_t</name> <modifier>*</modifier></type> <name>palette_p</name> <init>= <expr><operator>(</operator><name>lv_color32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>lv_img_dsc_t</name> <operator>*</operator><operator>)</operator><name><name>dsc</name><operator>-&gt;</operator><name>src</name></name><operator>)</operator><operator>-&gt;</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>palette_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>user_data</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>lv_color_make</name><argument_list>(<argument><expr><name><name>palette_p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ch</name><operator>.</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>palette_p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ch</name><operator>.</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>palette_p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ch</name><operator>.</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>user_data</name><operator>-&gt;</operator><name>opa</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>palette_p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ch</name><operator>.</operator><name>alpha</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dsc</name><operator>-&gt;</operator><name>img_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>LV_RES_OK</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Indexed (palette) images are not enabled in lv_conf.h. See LV_IMG_CF_INDEXED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LV_RES_INV</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>cf</name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_1BIT</name> <operator>||</operator> <name>cf</name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_2BIT</name> <operator>||</operator> <name>cf</name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_4BIT</name> <operator>||</operator>
<name>cf</name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_8BIT</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_IMG_CF_ALPHA</name></expr></cpp:if>
<expr_stmt><expr><name><name>dsc</name><operator>-&gt;</operator><name>img_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>LV_RES_OK</name></expr>;</return> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Alpha indexed images are not enabled in lv_conf.h. See LV_IMG_CF_ALPHA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LV_RES_INV</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_img_decoder_built_in_close</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><name>dsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>LV_LOG_WARN</name><argument_list>(<argument><literal type="string">"Image decoder open: unknown color format"</literal></argument>)</argument_list></macro>
<return>return <expr><name>LV_RES_INV</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>












<function><type><name>lv_res_t</name></type> <name>lv_img_decoder_built_in_read_line</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>decoder</name></decl></parameter>, <parameter><decl><type><name>lv_img_decoder_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>,
<parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>decoder</name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name> <init>= <expr><name>LV_RES_INV</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_TRUE_COLOR</name> <operator>||</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_TRUE_COLOR_ALPHA</name> <operator>||</operator>
<name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>src_type</name></name> <operator>==</operator> <name>LV_IMG_SRC_FILE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_img_decoder_built_in_line_true_color</name><argument_list>(<argument><expr><name>dsc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_1BIT</name> <operator>||</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_2BIT</name> <operator>||</operator>
<name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_4BIT</name> <operator>||</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_8BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_img_decoder_built_in_line_alpha</name><argument_list>(<argument><expr><name>dsc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_INDEXED_1BIT</name> <operator>||</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_INDEXED_2BIT</name> <operator>||</operator>
<name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_INDEXED_4BIT</name> <operator>||</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_INDEXED_8BIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_img_decoder_built_in_line_indexed</name><argument_list>(<argument><expr><name>dsc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Built-in image decoder read not supports the color format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LV_RES_INV</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_img_decoder_built_in_close</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_t</name> <modifier>*</modifier></type> <name>decoder</name></decl></parameter>, <parameter><decl><type><name>lv_img_decoder_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>decoder</name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>lv_img_decoder_built_in_data_t</name> <modifier>*</modifier></type> <name>user_data</name> <init>= <expr><name><name>dsc</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>user_data</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_FILESYSTEM</name></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>user_data</name><operator>-&gt;</operator><name>f</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_fs_close</name><argument_list>(<argument><expr><name><name>user_data</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>user_data</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><name><name>user_data</name><operator>-&gt;</operator><name>palette</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>user_data</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>user_data</name><operator>-&gt;</operator><name>opa</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>user_data</name><operator>-&gt;</operator><name>opa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name>user_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_img_decoder_built_in_line_true_color</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>lv_coord_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_FILESYSTEM</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_img_decoder_built_in_data_t</name> <modifier>*</modifier></type> <name>user_data</name> <init>= <expr><name><name>dsc</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_fs_res_t</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>px_size</name> <init>= <expr><call><name>lv_img_color_format_get_px_size</name><argument_list>(<argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos</name> <init>= <expr><operator>(</operator><operator>(</operator><name>y</name> <operator>*</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>+</operator> <name>x</name><operator>)</operator> <operator>*</operator> <name>px_size</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_fs_seek</name><argument_list>(<argument><expr><name><name>user_data</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_FS_RES_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Built-in image decoder seek failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LV_RES_INV</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>btr</name> <init>= <expr><name>len</name> <operator>*</operator> <operator>(</operator><name>px_size</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>br</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_fs_read</name><argument_list>(<argument><expr><name><name>user_data</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>btr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_FS_RES_OK</name> <operator>||</operator> <name>btr</name> <operator>!=</operator> <name>br</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Built-in image decoder read failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LV_RES_INV</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>LV_RES_OK</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LV_RES_INV</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_img_decoder_built_in_line_alpha</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>lv_coord_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_IMG_CF_ALPHA</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_opa_t</name></type> <name><name>alpha1_opa_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_opa_t</name></type> <name><name>alpha2_opa_table</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">170</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_opa_t</name></type> <name><name>alpha4_opa_table</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">51</literal></expr>, 
<expr><literal type="number">68</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="number">119</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">170</literal></expr>, <expr><literal type="number">187</literal></expr>, <expr><literal type="number">204</literal></expr>, <expr><literal type="number">221</literal></expr>, <expr><literal type="number">238</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lv_color_t</name></type> <name>bg_color</name> <init>= <expr><name><name>dsc</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>color</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">8</literal> <operator>||</operator> <name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name> <operator>*</operator> <name>LV_IMG_PX_SIZE_ALPHA_BYTE</name></expr>]</index></name> <operator>=</operator> <name><name>bg_color</name><operator>.</operator><name>full</name></name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">16</literal></expr></cpp:elif>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name> <operator>*</operator> <name>LV_IMG_PX_SIZE_ALPHA_BYTE</name></expr>]</index></name> <operator>=</operator> <name><name>bg_color</name><operator>.</operator><name>full</name></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name> <operator>*</operator> <name>LV_IMG_PX_SIZE_ALPHA_BYTE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>bg_color</name><operator>.</operator><name>full</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:elif>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>i</name> <operator>*</operator> <name>LV_IMG_PX_SIZE_ALPHA_BYTE</name></expr>]</index></name><operator>)</operator> <operator>=</operator> <name><name>bg_color</name><operator>.</operator><name>full</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_opa_t</name> <modifier>*</modifier></type> <name>opa_table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>px_size</name> <init>= <expr><call><name>lv_img_color_format_get_px_size</name><argument_list>(<argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>mask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>px_size</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ofs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_IMG_CF_ALPHA_1BIT</name></expr>:</case>
<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>w</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ofs</name> <operator>+=</operator> <name>w</name> <operator>*</operator> <name>y</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">7</literal> <operator>-</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>opa_table</name> <operator>=</operator> <name>alpha1_opa_table</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_IMG_CF_ALPHA_2BIT</name></expr>:</case>
<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>w</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ofs</name> <operator>+=</operator> <name>w</name> <operator>*</operator> <name>y</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">6</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>opa_table</name> <operator>=</operator> <name>alpha2_opa_table</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_IMG_CF_ALPHA_4BIT</name></expr>:</case>
<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>w</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ofs</name> <operator>+=</operator> <name>w</name> <operator>*</operator> <name>y</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">4</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>opa_table</name> <operator>=</operator> <name>alpha4_opa_table</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_IMG_CF_ALPHA_8BIT</name></expr>:</case>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>ofs</name> <operator>+=</operator> <name>w</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_FILESYSTEM</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_img_decoder_built_in_data_t</name> <modifier>*</modifier></type> <name>user_data</name> <init>= <expr><name><name>dsc</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>fs_buf</name><index>[<expr><name>LV_HOR_RES_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>data_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>src_type</name></name> <operator>==</operator> <name>LV_IMG_SRC_VARIABLE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_img_dsc_t</name> <modifier>*</modifier></type> <name>img_dsc</name> <init>= <expr><name><name>dsc</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>data_tmp</name> <operator>=</operator> <name><name>img_dsc</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>ofs</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_FILESYSTEM</name></expr></cpp:if>
<expr_stmt><expr><call><name>lv_fs_seek</name><argument_list>(<argument><expr><name><name>user_data</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>ofs</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>lv_fs_read</name><argument_list>(<argument><expr><name><name>user_data</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>fs_buf</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data_tmp</name> <operator>=</operator> <name>fs_buf</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Image built-in alpha line reader can't read file because LV_USE_FILESYSTEM = 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data_tmp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<return>return <expr><name>LV_RES_INV</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>byte_act</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>val_act</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>val_act</name> <operator>=</operator> <operator>(</operator><name><name>data_tmp</name><index>[<expr><name>byte_act</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>mask</name> <operator>&lt;&lt;</operator> <name>pos</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name> <operator>*</operator> <name>LV_IMG_PX_SIZE_ALPHA_BYTE</name> <operator>+</operator> <name>LV_IMG_PX_SIZE_ALPHA_BYTE</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<ternary><condition><expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_ALPHA_8BIT</name></expr> ?</condition><then> <expr><name>val_act</name></expr> </then><else>: <expr><name><name>opa_table</name><index>[<expr><name>val_act</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>-=</operator> <name>px_size</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">8</literal> <operator>-</operator> <name>px_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data_tmp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>LV_RES_OK</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Image built-in alpha line reader failed because LV_IMG_CF_ALPHA is 0 in lv_conf.h"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LV_RES_INV</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_img_decoder_built_in_line_indexed</name><parameter_list>(<parameter><decl><type><name>lv_img_decoder_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>lv_coord_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_IMG_CF_INDEXED</name></expr></cpp:if>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>px_size</name> <init>= <expr><call><name>lv_img_color_format_get_px_size</name><argument_list>(<argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>mask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>px_size</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ofs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_IMG_CF_INDEXED_1BIT</name></expr>:</case>
<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>w</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ofs</name> <operator>+=</operator> <name>w</name> <operator>*</operator> <name>y</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>ofs</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">7</literal> <operator>-</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_IMG_CF_INDEXED_2BIT</name></expr>:</case>
<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>w</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ofs</name> <operator>+=</operator> <name>w</name> <operator>*</operator> <name>y</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>ofs</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">6</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_IMG_CF_INDEXED_4BIT</name></expr>:</case>
<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>w</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ofs</name> <operator>+=</operator> <name>w</name> <operator>*</operator> <name>y</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>ofs</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">4</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_IMG_CF_INDEXED_8BIT</name></expr>:</case>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>ofs</name> <operator>+=</operator> <name>w</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>ofs</name> <operator>+=</operator> <literal type="number">1024</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<decl_stmt><decl><type><name>lv_img_decoder_built_in_data_t</name> <modifier>*</modifier></type> <name>user_data</name> <init>= <expr><name><name>dsc</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_FILESYSTEM</name></expr></cpp:if>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>fs_buf</name><index>[<expr><name>LV_HOR_RES_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>data_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>src_type</name></name> <operator>==</operator> <name>LV_IMG_SRC_VARIABLE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_img_dsc_t</name> <modifier>*</modifier></type> <name>img_dsc</name> <init>= <expr><name><name>dsc</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>data_tmp</name> <operator>=</operator> <name><name>img_dsc</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>ofs</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_FILESYSTEM</name></expr></cpp:if>
<expr_stmt><expr><call><name>lv_fs_seek</name><argument_list>(<argument><expr><name><name>user_data</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>ofs</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>lv_fs_read</name><argument_list>(<argument><expr><name><name>user_data</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>fs_buf</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data_tmp</name> <operator>=</operator> <name>fs_buf</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Image built-in indexed line reader can't read file because LV_USE_FILESYSTEM = 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data_tmp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<return>return <expr><name>LV_RES_INV</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>val_act</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>val_act</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>data_tmp</name> <operator>&amp;</operator> <operator>(</operator><name>mask</name> <operator>&lt;&lt;</operator> <name>pos</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>pos</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>color</name> <init>= <expr><name><name>user_data</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>val_act</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">8</literal> <operator>||</operator> <name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name> <operator>*</operator> <name>LV_IMG_PX_SIZE_ALPHA_BYTE</name></expr>]</index></name> <operator>=</operator> <name><name>color</name><operator>.</operator><name>full</name></name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">16</literal></expr></cpp:elif>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name> <operator>*</operator> <name>LV_IMG_PX_SIZE_ALPHA_BYTE</name></expr>]</index></name> <operator>=</operator> <name><name>color</name><operator>.</operator><name>full</name></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name> <operator>*</operator> <name>LV_IMG_PX_SIZE_ALPHA_BYTE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>color</name><operator>.</operator><name>full</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LV_COLOR_DEPTH</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:elif>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>i</name> <operator>*</operator> <name>LV_IMG_PX_SIZE_ALPHA_BYTE</name></expr>]</index></name><operator>)</operator> <operator>=</operator> <name><name>color</name><operator>.</operator><name>full</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name> <operator>*</operator> <name>LV_IMG_PX_SIZE_ALPHA_BYTE</name> <operator>+</operator> <name>LV_IMG_PX_SIZE_ALPHA_BYTE</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>user_data</name><operator>-&gt;</operator><name>opa</name><index>[<expr><name>val_act</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>-=</operator> <name>px_size</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">8</literal> <operator>-</operator> <name>px_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data_tmp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>LV_RES_OK</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"Image built-in indexed line reader failed because LV_IMG_CF_INDEXED is 0 in lv_conf.h"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LV_RES_INV</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
