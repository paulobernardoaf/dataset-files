<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_draw\lv_draw.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_draw.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_math.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_math.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_gc.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_GC_INCLUDE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> LV_GC_INCLUDE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
















<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>draw_buf_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>














<function><type><name>void</name> <modifier>*</modifier></type> <name>lv_draw_get_buf</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&lt;=</operator> <name>draw_buf_size</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_draw_buf</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"lv_draw_get_buf: allocate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>draw_buf_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_draw_buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_draw_buf</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_draw_buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_draw_buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_draw_buf</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>lv_mem_realloc</name><argument_list>(<argument><expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_draw_buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_draw_buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_draw_buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>lv_draw_free_buf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_draw_buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_draw_buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_draw_buf</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>draw_buf_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>








<function><type><name>lv_opa_t</name></type> <name>lv_draw_aa_get_opa</name><parameter_list>(<parameter><decl><type><name>lv_coord_t</name></type> <name>seg</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>px_id</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>base_opa</name></decl></parameter>)</parameter_list>
<block>{<block_content>



















<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>lv_opa_t</name></type> <name><name>seg1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">128</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>lv_opa_t</name></type> <name><name>seg2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">64</literal></expr>, <expr><literal type="number">192</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>lv_opa_t</name></type> <name><name>seg3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">42</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">212</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>lv_opa_t</name></type> <name><name>seg4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">32</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">159</literal></expr>, <expr><literal type="number">223</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>lv_opa_t</name></type> <name><name>seg5</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">26</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">178</literal></expr>, <expr><literal type="number">230</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>lv_opa_t</name></type> <name><name>seg6</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">21</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">106</literal></expr>, <expr><literal type="number">148</literal></expr>, <expr><literal type="number">191</literal></expr>, <expr><literal type="number">234</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>lv_opa_t</name></type> <name><name>seg7</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">18</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">164</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">237</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>lv_opa_t</name></type> <name><name>seg8</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">16</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">143</literal></expr>, <expr><literal type="number">175</literal></expr>, <expr><literal type="number">207</literal></expr>, <expr><literal type="number">239</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>lv_opa_t</name> <modifier>*</modifier></type> <name><name>seg_map</name><index>[]</index></name> <init>= <expr><block>{<expr><name>seg1</name></expr>, <expr><name>seg2</name></expr>, <expr><name>seg3</name></expr>, <expr><name>seg4</name></expr>, <expr><name>seg5</name></expr>, <expr><name>seg6</name></expr>, <expr><name>seg7</name></expr>, <expr><name>seg8</name></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>seg</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LV_OPA_TRANSP</name></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>seg</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>seg_map</name><index>[<expr><name>seg</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>px_id</name></expr>]</index></name> <operator>*</operator> <name>base_opa</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>px_id</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>base_opa</name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>seg</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>










<function><type><name>void</name></type> <name>lv_draw_aa_ver_seg</name><parameter_list>(<parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name></type> <name>color</name></decl></parameter>,
<parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>aa_inv</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aa_inv</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>-</operator><name>length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>px_opa</name> <init>= <expr><call><name>lv_draw_aa_get_opa</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>aa_inv</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>px_opa</name> <operator>=</operator> <name>opa</name> <operator>-</operator> <name>px_opa</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>px_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>










<function><type><name>void</name></type> <name>lv_draw_aa_hor_seg</name><parameter_list>(<parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name></type> <name>color</name></decl></parameter>,
<parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>aa_inv</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aa_inv</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>-</operator><name>length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>px_opa</name> <init>= <expr><call><name>lv_draw_aa_get_opa</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>aa_inv</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>px_opa</name> <operator>=</operator> <name>opa</name> <operator>-</operator> <name>px_opa</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>lv_draw_px</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>px_opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
