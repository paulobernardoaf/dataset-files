<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_draw\lv_draw_triangle.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_draw_triangle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_math.h"</cpp:file></cpp:include>












<function_decl><type><name>void</name></type> <name>tri_draw_flat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_point_t</name> <modifier>*</modifier></type> <name>points</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tri_draw_tall</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_point_t</name> <modifier>*</modifier></type> <name>points</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>point_swap</name><parameter_list>(<parameter><decl><type><name>lv_point_t</name> <modifier>*</modifier></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>lv_point_t</name> <modifier>*</modifier></type> <name>p2</name></decl></parameter>)</parameter_list>;</function_decl>




















<function><type><name>void</name></type> <name>lv_draw_triangle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_point_t</name> <modifier>*</modifier></type> <name>points</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>==</operator> <name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&amp;&amp;</operator> <name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>==</operator> <name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>==</operator> <name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&amp;&amp;</operator> <name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>==</operator> <name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>==</operator> <name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&amp;&amp;</operator> <name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>==</operator> <name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>==</operator> <name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&amp;&amp;</operator> <name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>==</operator> <name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>==</operator> <name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&amp;&amp;</operator> <name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>==</operator> <name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa</name> <init>= <expr><ternary><condition><expr><name>opa_scale</name> <operator>==</operator> <name>LV_OPA_COVER</name></expr> ?</condition><then> <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>opa</name></name></expr> </then><else>: <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>opa</name></name> <operator>*</operator> <name>opa_scale</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x_min</name> <init>= <expr><call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x_max</name> <init>= <expr><call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y_min</name> <init>= <expr><call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y_max</name> <init>= <expr><call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>








<if_stmt><if>if<condition>(<expr><name>x_max</name> <operator>-</operator> <name>x_min</name> <operator>&lt;</operator> <name>y_max</name> <operator>-</operator> <name>y_min</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tri_draw_tall</name><argument_list>(<argument><expr><name>points</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><call><name>tri_draw_flat</name><argument_list>(<argument><expr><name>points</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>lv_draw_polygon</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_point_t</name> <modifier>*</modifier></type> <name>points</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>point_cnt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>,
<parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>point_cnt</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>points</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_point_t</name></type> <name><name>tri</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>point_cnt</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>points</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>points</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_draw_triangle</name><argument_list>(<argument><expr><name>tri</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>tri_draw_flat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_point_t</name> <modifier>*</modifier></type> <name>points</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;</operator> <name><name>mask</name><operator>-&gt;</operator><name>x1</name></name> <operator>&amp;&amp;</operator> <name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;</operator> <name><name>mask</name><operator>-&gt;</operator><name>x1</name></name> <operator>&amp;&amp;</operator> <name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;</operator> <name><name>mask</name><operator>-&gt;</operator><name>x1</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&gt;</operator> <name><name>mask</name><operator>-&gt;</operator><name>x2</name></name> <operator>&amp;&amp;</operator> <name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&gt;</operator> <name><name>mask</name><operator>-&gt;</operator><name>x2</name></name> <operator>&amp;&amp;</operator> <name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&gt;</operator> <name><name>mask</name><operator>-&gt;</operator><name>x2</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&lt;</operator> <name><name>mask</name><operator>-&gt;</operator><name>y1</name></name> <operator>&amp;&amp;</operator> <name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&lt;</operator> <name><name>mask</name><operator>-&gt;</operator><name>y1</name></name> <operator>&amp;&amp;</operator> <name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&lt;</operator> <name><name>mask</name><operator>-&gt;</operator><name>y1</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&gt;</operator> <name><name>mask</name><operator>-&gt;</operator><name>y2</name></name> <operator>&amp;&amp;</operator> <name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&gt;</operator> <name><name>mask</name><operator>-&gt;</operator><name>y2</name></name> <operator>&amp;&amp;</operator> <name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&gt;</operator> <name><name>mask</name><operator>-&gt;</operator><name>y2</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name><name>tri</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tri</name></expr></argument>, <argument><expr><name>points</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tri</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&lt;</operator> <name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>point_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&lt;</operator> <name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>point_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&lt;</operator> <name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>point_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>lv_point_t</name></type> <name>edge1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>dx1</name> <init>= <expr><call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>sx1</name> <init>= <expr><ternary><condition><expr><name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;</operator> <name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>dy1</name> <init>= <expr><call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>sy1</name> <init>= <expr><ternary><condition><expr><name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&lt;</operator> <name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>err1</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>dx1</name> <operator>&gt;</operator> <name>dy1</name></expr> ?</condition><then> <expr><name>dx1</name></expr> </then><else>: <expr><operator>-</operator><name>dy1</name></expr></else></ternary><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>err_tmp1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>edge2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>dx2</name> <init>= <expr><call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>sx2</name> <init>= <expr><ternary><condition><expr><name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;</operator> <name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>dy2</name> <init>= <expr><call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>sy2</name> <init>= <expr><ternary><condition><expr><name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&lt;</operator> <name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>err2</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>dx1</name> <operator>&gt;</operator> <name>dy2</name></expr> ?</condition><then> <expr><name>dx2</name></expr> </then><else>: <expr><operator>-</operator><name>dy2</name></expr></else></ternary><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>err_tmp2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y1_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y2_tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>edge1</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>edge1</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>edge2</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>edge2</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>lv_area_t</name></type> <name>act_area</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_area_t</name></type> <name>draw_area</name></decl>;</decl_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>act_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>edge1</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>act_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>edge2</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>act_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>edge1</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>act_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>edge2</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><name><name>act_area</name><operator>.</operator><name>x1</name></name></expr></argument>, <argument><expr><name><name>act_area</name><operator>.</operator><name>x2</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>act_area</name><operator>.</operator><name>x1</name></name></expr></argument>, <argument><expr><name><name>act_area</name><operator>.</operator><name>x2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><name><name>act_area</name><operator>.</operator><name>y1</name></name></expr></argument>, <argument><expr><name><name>act_area</name><operator>.</operator><name>y2</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>act_area</name><operator>.</operator><name>y1</name></name></expr></argument>, <argument><expr><name><name>act_area</name><operator>.</operator><name>y2</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>draw_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>main_color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>y1_tmp</name> <operator>=</operator> <name><name>edge1</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>edge1</name><operator>.</operator><name>x</name></name> <operator>==</operator> <name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&amp;&amp;</operator> <name><name>edge1</name><operator>.</operator><name>y</name></name> <operator>==</operator> <name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dx1</name> <operator>=</operator> <call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sx1</name> <operator>=</operator> <ternary><condition><expr><name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;</operator> <name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>dy1</name> <operator>=</operator> <call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sy1</name> <operator>=</operator> <ternary><condition><expr><name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&lt;</operator> <name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>err1</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>dx1</name> <operator>&gt;</operator> <name>dy1</name></expr> ?</condition><then> <expr><name>dx1</name></expr> </then><else>: <expr><operator>-</operator><name>dy1</name></expr></else></ternary><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>edge1</name><operator>.</operator><name>x</name></name> <operator>==</operator> <name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&amp;&amp;</operator> <name><name>edge1</name><operator>.</operator><name>y</name></name> <operator>==</operator> <name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>err_tmp1</name> <operator>=</operator> <name>err1</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>err_tmp1</name> <operator>&gt;</operator> <operator>-</operator><name>dx1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err1</name> <operator>-=</operator> <name>dy1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>edge1</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>sx1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>err_tmp1</name> <operator>&lt;</operator> <name>dy1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err1</name> <operator>+=</operator> <name>dx1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>edge1</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>sy1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while<condition>(<expr><name><name>edge1</name><operator>.</operator><name>y</name></name> <operator>==</operator> <name>y1_tmp</name></expr>)</condition>;</do>


<expr_stmt><expr><name>y2_tmp</name> <operator>=</operator> <name><name>edge2</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>edge2</name><operator>.</operator><name>x</name></name> <operator>==</operator> <name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&amp;&amp;</operator> <name><name>edge2</name><operator>.</operator><name>y</name></name> <operator>==</operator> <name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>err_tmp2</name> <operator>=</operator> <name>err2</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>err_tmp2</name> <operator>&gt;</operator> <operator>-</operator><name>dx2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err2</name> <operator>-=</operator> <name>dy2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>edge2</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>sx2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>err_tmp2</name> <operator>&lt;</operator> <name>dy2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err2</name> <operator>+=</operator> <name>dx2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>edge2</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>sy2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while<condition>(<expr><name><name>edge2</name><operator>.</operator><name>y</name></name> <operator>==</operator> <name>y2_tmp</name></expr>)</condition>;</do>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tri_draw_tall</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_point_t</name> <modifier>*</modifier></type> <name>points</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>)</parameter_list>
<block>{<block_content>










<decl_stmt><decl><type><name>lv_point_t</name></type> <name><name>tri</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tri</name></expr></argument>, <argument><expr><name>points</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tri</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;</operator> <name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>point_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;</operator> <name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>point_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;</operator> <name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>point_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>lv_point_t</name></type> <name>edge1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>dx1</name> <init>= <expr><call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>sx1</name> <init>= <expr><ternary><condition><expr><name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;</operator> <name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>dy1</name> <init>= <expr><call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>sy1</name> <init>= <expr><ternary><condition><expr><name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&lt;</operator> <name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>err1</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>dx1</name> <operator>&gt;</operator> <name>dy1</name></expr> ?</condition><then> <expr><name>dx1</name></expr> </then><else>: <expr><operator>-</operator><name>dy1</name></expr></else></ternary><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>err_tmp1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>edge2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>dx2</name> <init>= <expr><call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>sx2</name> <init>= <expr><ternary><condition><expr><name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;</operator> <name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>dy2</name> <init>= <expr><call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>sy2</name> <init>= <expr><ternary><condition><expr><name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&lt;</operator> <name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>err2</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>dx1</name> <operator>&gt;</operator> <name>dy2</name></expr> ?</condition><then> <expr><name>dx2</name></expr> </then><else>: <expr><operator>-</operator><name>dy2</name></expr></else></ternary><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>err_tmp2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x1_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x2_tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>edge1</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>edge1</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>edge2</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>edge2</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>lv_area_t</name></type> <name>act_area</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_area_t</name></type> <name>draw_area</name></decl>;</decl_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>act_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>edge1</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>act_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>edge2</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>act_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>edge1</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>act_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>edge2</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><name><name>act_area</name><operator>.</operator><name>x1</name></name></expr></argument>, <argument><expr><name><name>act_area</name><operator>.</operator><name>x2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>act_area</name><operator>.</operator><name>x1</name></name></expr></argument>, <argument><expr><name><name>act_area</name><operator>.</operator><name>x2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><name><name>act_area</name><operator>.</operator><name>y1</name></name></expr></argument>, <argument><expr><name><name>act_area</name><operator>.</operator><name>y2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>draw_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>act_area</name><operator>.</operator><name>y1</name></name></expr></argument>, <argument><expr><name><name>act_area</name><operator>.</operator><name>y2</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>draw_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>main_color</name></name></expr></argument>, <argument><expr><name>opa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>x1_tmp</name> <operator>=</operator> <name><name>edge1</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>edge1</name><operator>.</operator><name>y</name></name> <operator>==</operator> <name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&amp;&amp;</operator> <name><name>edge1</name><operator>.</operator><name>x</name></name> <operator>==</operator> <name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dx1</name> <operator>=</operator> <call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sx1</name> <operator>=</operator> <ternary><condition><expr><name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;</operator> <name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>dy1</name> <operator>=</operator> <call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sy1</name> <operator>=</operator> <ternary><condition><expr><name><name>tri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&lt;</operator> <name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>err1</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>dx1</name> <operator>&gt;</operator> <name>dy1</name></expr> ?</condition><then> <expr><name>dx1</name></expr> </then><else>: <expr><operator>-</operator><name>dy1</name></expr></else></ternary><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>edge1</name><operator>.</operator><name>y</name></name> <operator>==</operator> <name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&amp;&amp;</operator> <name><name>edge1</name><operator>.</operator><name>x</name></name> <operator>==</operator> <name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>err_tmp1</name> <operator>=</operator> <name>err1</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>err_tmp1</name> <operator>&gt;</operator> <operator>-</operator><name>dx1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err1</name> <operator>-=</operator> <name>dy1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>edge1</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>sx1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>err_tmp1</name> <operator>&lt;</operator> <name>dy1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err1</name> <operator>+=</operator> <name>dx1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>edge1</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>sy1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while<condition>(<expr><name><name>edge1</name><operator>.</operator><name>x</name></name> <operator>==</operator> <name>x1_tmp</name></expr>)</condition>;</do>


<expr_stmt><expr><name>x2_tmp</name> <operator>=</operator> <name><name>edge2</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>edge2</name><operator>.</operator><name>y</name></name> <operator>==</operator> <name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&amp;&amp;</operator> <name><name>edge2</name><operator>.</operator><name>x</name></name> <operator>==</operator> <name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err_tmp2</name> <operator>=</operator> <name>err2</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>err_tmp2</name> <operator>&gt;</operator> <operator>-</operator><name>dx2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err2</name> <operator>-=</operator> <name>dy2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>edge2</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>sx2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>err_tmp2</name> <operator>&lt;</operator> <name>dy2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err2</name> <operator>+=</operator> <name>dx2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>edge2</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>sy2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while<condition>(<expr><name><name>edge2</name><operator>.</operator><name>x</name></name> <operator>==</operator> <name>x2_tmp</name></expr>)</condition>;</do>
</block_content>}</block></while>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>point_swap</name><parameter_list>(<parameter><decl><type><name>lv_point_t</name> <modifier>*</modifier></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>lv_point_t</name> <modifier>*</modifier></type> <name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_point_t</name></type> <name>tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p1</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>p2</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p1</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>p2</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p2</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p2</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
