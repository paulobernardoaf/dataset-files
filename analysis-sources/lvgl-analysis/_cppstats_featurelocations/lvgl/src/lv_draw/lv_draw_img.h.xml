<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_draw\lv_draw_img.h">




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_DRAW_IMG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_DRAW_IMG_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_draw.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_img_decoder.h"</cpp:file></cpp:include>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_IMG_BUF_SIZE_TRUE_COLOR</name><parameter_list>(<parameter><type><name>w</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((LV_COLOR_SIZE / 8) * w * h)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_IMG_BUF_SIZE_TRUE_COLOR_CHROMA_KEYED</name><parameter_list>(<parameter><type><name>w</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((LV_COLOR_SIZE / 8) * w * h)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_IMG_BUF_SIZE_TRUE_COLOR_ALPHA</name><parameter_list>(<parameter><type><name>w</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(LV_IMG_PX_SIZE_ALPHA_BYTE * w * h)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_IMG_BUF_SIZE_ALPHA_1BIT</name><parameter_list>(<parameter><type><name>w</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((w / 8) + 1) * h))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_IMG_BUF_SIZE_ALPHA_2BIT</name><parameter_list>(<parameter><type><name>w</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((w / 4) + 1) * h))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_IMG_BUF_SIZE_ALPHA_4BIT</name><parameter_list>(<parameter><type><name>w</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((w / 2) + 1) * h))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_IMG_BUF_SIZE_ALPHA_8BIT</name><parameter_list>(<parameter><type><name>w</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((w * h))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_IMG_BUF_SIZE_INDEXED_1BIT</name><parameter_list>(<parameter><type><name>w</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(LV_IMG_BUF_SIZE_ALPHA_1BIT(w, h) + 4 * 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_IMG_BUF_SIZE_INDEXED_2BIT</name><parameter_list>(<parameter><type><name>w</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(LV_IMG_BUF_SIZE_ALPHA_2BIT(w, h) + 4 * 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_IMG_BUF_SIZE_INDEXED_4BIT</name><parameter_list>(<parameter><type><name>w</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(LV_IMG_BUF_SIZE_ALPHA_4BIT(w, h) + 4 * 16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_IMG_BUF_SIZE_INDEXED_8BIT</name><parameter_list>(<parameter><type><name>w</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(LV_IMG_BUF_SIZE_ALPHA_8BIT(w, h) + 4 * 256)</cpp:value></cpp:define>

















<function_decl><type><name>void</name></type> <name>lv_draw_img</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>coords</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>,
<parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>lv_img_src_t</name></type> <name>lv_img_src_get_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>lv_color_t</name></type> <name>lv_img_buf_get_px_color</name><parameter_list>(<parameter><decl><type><name>lv_img_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>lv_opa_t</name></type> <name>lv_img_buf_get_px_alpha</name><parameter_list>(<parameter><decl><type><name>lv_img_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>lv_img_buf_set_px_color</name><parameter_list>(<parameter><decl><type><name>lv_img_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>lv_img_buf_set_px_alpha</name><parameter_list>(<parameter><decl><type><name>lv_img_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name></type> <name>lv_img_buf_set_palette</name><parameter_list>(<parameter><decl><type><name>lv_img_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>uint8_t</name></type> <name>lv_img_color_format_get_px_size</name><parameter_list>(<parameter><decl><type><name>lv_img_cf_t</name></type> <name>cf</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>bool</name></type> <name>lv_img_color_format_is_chroma_keyed</name><parameter_list>(<parameter><decl><type><name>lv_img_cf_t</name></type> <name>cf</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>bool</name></type> <name>lv_img_color_format_has_alpha</name><parameter_list>(<parameter><decl><type><name>lv_img_cf_t</name></type> <name>cf</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>lv_img_dsc_t</name> <modifier>*</modifier></type><name>lv_img_buf_alloc</name><parameter_list>(<parameter><decl><type><name>lv_coord_t</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>lv_img_cf_t</name></type> <name>cf</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>lv_img_buf_free</name><parameter_list>(<parameter><decl><type><name>lv_img_dsc_t</name> <modifier>*</modifier></type><name>dsc</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>uint32_t</name></type> <name>lv_img_buf_get_img_size</name><parameter_list>(<parameter><decl><type><name>lv_coord_t</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>lv_img_cf_t</name></type> <name>cf</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
