<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_objx\lv_cb.h">




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_CB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_CB_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_CONF_INCLUDE_SIMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_conf.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../lv_conf.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_CB</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_BTN</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"lv_cb: lv_btn is required. Enable it in lv_conf.h (LV_USE_BTN 1) "</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_LABEL</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"lv_cb: lv_label is required. Enable it in lv_conf.h (LV_USE_LABEL 1) "</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_obj.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_btn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_label.h"</cpp:file></cpp:include>










<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>lv_btn_ext_t</name></type> <name>bg_btn</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>bullet</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name></decl>;</decl_stmt> 
}</block></struct></type> <name>lv_cb_ext_t</name>;</typedef>


<enum>enum <block>{
<decl><name>LV_CB_STYLE_BG</name></decl>, 
<decl><name>LV_CB_STYLE_BOX_REL</name></decl>, 
<decl><name>LV_CB_STYLE_BOX_PR</name></decl>, 
<decl><name>LV_CB_STYLE_BOX_TGL_REL</name></decl>, 
<decl><name>LV_CB_STYLE_BOX_TGL_PR</name></decl>, 
<decl><name>LV_CB_STYLE_BOX_INA</name></decl>, 
}</block>;</enum>
<typedef>typedef <type><name>uint8_t</name></type> <name>lv_cb_style_t</name>;</typedef>











<function_decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_cb_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name></type> <name>lv_cb_set_text</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>lv_cb_set_static_text</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>)</parameter_list>;</function_decl>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_cb_set_checked</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>checked</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><ternary><condition><expr><name>checked</name></expr> ?</condition><then> <expr><name>LV_BTN_STATE_TGL_REL</name></expr> </then><else>: <expr><name>LV_BTN_STATE_REL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_cb_set_inactive</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>LV_BTN_STATE_INA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function_decl><type><name>void</name></type> <name>lv_cb_set_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>lv_cb_style_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>lv_cb_get_text</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>cb</name></decl></parameter>)</parameter_list>;</function_decl>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>lv_cb_is_checked</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>lv_btn_get_state</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LV_BTN_STATE_REL</name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>lv_cb_is_inactive</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>lv_btn_get_state</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LV_BTN_STATE_INA</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>:<expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>







<function_decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>lv_cb_get_style</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>lv_cb_style_t</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
