




#ifndef LV_KB_H
#define LV_KB_H

#ifdef __cplusplus
extern "C" {
#endif




#ifdef LV_CONF_INCLUDE_SIMPLE
#include "lv_conf.h"
#else
#include "../../../lv_conf.h"
#endif

#if LV_USE_KB != 0


#if LV_USE_BTNM == 0
#error "lv_kb: lv_btnm is required. Enable it in lv_conf.h (LV_USE_BTNM  1) "
#endif

#if LV_USE_TA == 0
#error "lv_kb: lv_ta is required. Enable it in lv_conf.h (LV_USE_TA  1) "
#endif

#include "../lv_core/lv_obj.h"
#include "lv_btnm.h"










enum {
    LV_KB_MODE_TEXT,
    LV_KB_MODE_NUM,
    LV_KB_MODE_TEXT_UPPER,
};
typedef uint8_t lv_kb_mode_t;


typedef struct
{
    lv_btnm_ext_t btnm; 
    
    lv_obj_t * ta;          
    lv_kb_mode_t mode;      
    uint8_t cursor_mng : 1; 
} lv_kb_ext_t;

enum {
    LV_KB_STYLE_BG,
    LV_KB_STYLE_BTN_REL,
    LV_KB_STYLE_BTN_PR,
    LV_KB_STYLE_BTN_TGL_REL,
    LV_KB_STYLE_BTN_TGL_PR,
    LV_KB_STYLE_BTN_INA,
};
typedef uint8_t lv_kb_style_t;











lv_obj_t * lv_kb_create(lv_obj_t * par, const lv_obj_t * copy);










void lv_kb_set_ta(lv_obj_t * kb, lv_obj_t * ta);






void lv_kb_set_mode(lv_obj_t * kb, lv_kb_mode_t mode);






void lv_kb_set_cursor_manage(lv_obj_t * kb, bool en);







static inline void lv_kb_set_map(lv_obj_t * kb, const char * map[])
{
    lv_btnm_set_map(kb, map);
}









static inline void lv_kb_set_ctrl_map(lv_obj_t * kb, const lv_btnm_ctrl_t ctrl_map[])
{
    lv_btnm_set_ctrl_map(kb, ctrl_map);
}







void lv_kb_set_style(lv_obj_t * kb, lv_kb_style_t type, const lv_style_t * style);










lv_obj_t * lv_kb_get_ta(const lv_obj_t * kb);






lv_kb_mode_t lv_kb_get_mode(const lv_obj_t * kb);






bool lv_kb_get_cursor_manage(const lv_obj_t * kb);






static inline const char ** lv_kb_get_map_array(const lv_obj_t * kb)
{
    return lv_btnm_get_map_array(kb);
}







const lv_style_t * lv_kb_get_style(const lv_obj_t * kb, lv_kb_style_t type);












void lv_kb_def_event_cb(lv_obj_t * kb, lv_event_t event);





#endif 

#ifdef __cplusplus
} 
#endif

#endif 
