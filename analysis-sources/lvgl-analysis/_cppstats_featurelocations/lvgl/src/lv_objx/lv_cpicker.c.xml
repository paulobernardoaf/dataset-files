<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_objx\lv_cpicker.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_cpicker.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_CPICKER</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_draw/lv_draw_arc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_themes/lv_theme.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_indev.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_refr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_math.h"</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_OBJX_NAME</name></cpp:macro> <cpp:value>"lv_cpicker"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_CPICKER_DEF_TYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_CPICKER_DEF_TYPE</name></cpp:macro> <cpp:value>LV_CPICKER_TYPE_DISC</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_CPICKER_DEF_HUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_CPICKER_DEF_HUE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_CPICKER_DEF_SATURATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_CPICKER_DEF_SATURATION</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_CPICKER_DEF_VALUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_CPICKER_DEF_VALUE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_CPICKER_DEF_HSV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_CPICKER_DEF_HSV</name></cpp:macro> <cpp:value>((lv_color_hsv_t){LV_CPICKER_DEF_HUE, LV_CPICKER_DEF_SATURATION, LV_CPICKER_DEF_VALUE})</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_CPICKER_DEF_QF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_CPICKER_DEF_QF</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRI_OFFSET</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>








<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lv_cpicker_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_cpicker_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>draw_rect_grad</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>draw_disc_grad</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>draw_indic</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>invalidate_indic</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>lv_area_t</name></type> <name>get_indic_area</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>next_color_mode</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>double_click_reset</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>refr_indic_pos</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>lv_color_t</name></type> <name>angle_to_mode_color</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>angle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint16_t</name></type> <name>get_angle</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>ancestor_signal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>lv_design_cb_t</name></type> <name>ancestor_design</name></decl>;</decl_stmt>















<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_cpicker_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"color_picker create started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>new_cpicker</name> <init>= <expr><call><name>lv_obj_create</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>new_cpicker</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ancestor_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><name>new_cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ancestor_design</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_design</name> <operator>=</operator> <call><name>lv_obj_get_design_cb</name><argument_list>(<argument><expr><name>new_cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_allocate_ext_attr</name><argument_list>(<argument><expr><name>new_cpicker</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_cpicker_ext_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>LV_CPICKER_DEF_TYPE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>hsv</name></name> <operator>=</operator> <name>LV_CPICKER_DEF_HSV</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name><operator>.</operator><name>style</name></name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_plain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name><operator>.</operator><name>colored</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>color_mode</name></name> <operator>=</operator> <name>LV_CPICKER_COLOR_MODE_HUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>color_mode_fixed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>preview</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>last_click_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>last_change_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><name>new_cpicker</name></expr></argument>, <argument><expr><name>lv_cpicker_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_design_cb</name><argument_list>(<argument><expr><name>new_cpicker</name></expr></argument>, <argument><expr><name>lv_cpicker_design</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_obj_set_size</name><argument_list>(<argument><expr><name>new_cpicker</name></expr></argument>, <argument><expr><name>LV_DPI</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>LV_DPI</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_protect</name><argument_list>(<argument><expr><name>new_cpicker</name></expr></argument>, <argument><expr><name>LV_PROTECT_PRESS_LOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>th</name> <init>= <expr><call><name>lv_theme_get_current</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>th</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_cpicker_set_style</name><argument_list>(<argument><expr><name>new_cpicker</name></expr></argument>, <argument><expr><name>LV_CPICKER_STYLE_MAIN</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lv_cpicker_set_style</name><argument_list>(<argument><expr><name>new_cpicker</name></expr></argument>, <argument><expr><name>LV_CPICKER_STYLE_MAIN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>copy_ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>color_mode</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>color_mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>color_mode_fixed</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>color_mode_fixed</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>preview</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>preview</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>hsv</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>hsv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name><operator>.</operator><name>colored</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>indic</name><operator>.</operator><name>colored</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name><operator>.</operator><name>style</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>indic</name><operator>.</operator><name>style</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lv_obj_refresh_style</name><argument_list>(<argument><expr><name>new_cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>refr_indic_pos</name><argument_list>(<argument><expr><name>new_cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"color_picker created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_cpicker</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>void</name></type> <name>lv_cpicker_set_type</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>, <parameter><decl><type><name>lv_cpicker_type_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_refresh_ext_draw_pad</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refr_indic_pos</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>lv_cpicker_set_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>, <parameter><decl><type><name>lv_cpicker_style_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_CPICKER_STYLE_MAIN</name></expr>:</case>
<expr_stmt><expr><call><name>lv_obj_set_style</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_CPICKER_STYLE_INDICATOR</name></expr>:</case>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name><operator>.</operator><name>style</name></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>







<function><type><name>bool</name></type> <name>lv_cpicker_set_hue</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>hue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_color_hsv_t</name></type> <name>hsv</name> <init>= <expr><call><name>lv_cpicker_get_hsv</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name>hue</name></expr>;</expr_stmt>
<return>return <expr><call><name>lv_cpicker_set_hsv</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>hsv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>bool</name></type> <name>lv_cpicker_set_saturation</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>saturation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_color_hsv_t</name></type> <name>hsv</name> <init>= <expr><call><name>lv_cpicker_get_hsv</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name>saturation</name></expr>;</expr_stmt>
<return>return <expr><call><name>lv_cpicker_set_hsv</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>hsv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>bool</name></type> <name>lv_cpicker_set_value</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_color_hsv_t</name></type> <name>hsv</name> <init>= <expr><call><name>lv_cpicker_get_hsv</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>v</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<return>return <expr><call><name>lv_cpicker_set_hsv</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>hsv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>bool</name></type> <name>lv_cpicker_set_hsv</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>, <parameter><decl><type><name>lv_color_hsv_t</name></type> <name>hsv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hsv</name><operator>.</operator><name>h</name></name> <operator>&gt;</operator> <literal type="number">360</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>h</name></name> <operator>%=</operator> <literal type="number">360</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hsv</name><operator>.</operator><name>s</name></name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>s</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hsv</name><operator>.</operator><name>v</name></name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>v</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>h</name></name> <operator>==</operator> <name><name>hsv</name><operator>.</operator><name>h</name></name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>s</name></name> <operator>==</operator> <name><name>hsv</name><operator>.</operator><name>s</name></name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>v</name></name> <operator>==</operator> <name><name>hsv</name><operator>.</operator><name>v</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>hsv</name></name> <operator>=</operator> <name>hsv</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>refr_indic_pos</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>preview</name></name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>LV_CPICKER_TYPE_DISC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>bool</name></type> <name>lv_cpicker_set_color</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_color32_t</name></type> <name>c32</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c32</name><operator>.</operator><name>full</name></name> <operator>=</operator> <call><name>lv_color_to32</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>lv_cpicker_set_hsv</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>,
<argument><expr><call><name>lv_color_rgb_to_hsv</name><argument_list>(<argument><expr><name><name>c32</name><operator>.</operator><name>ch</name><operator>.</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>c32</name><operator>.</operator><name>ch</name><operator>.</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>c32</name><operator>.</operator><name>ch</name><operator>.</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_cpicker_set_color_mode</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>, <parameter><decl><type><name>lv_cpicker_color_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>color_mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refr_indic_pos</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_cpicker_set_color_mode_fixed</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fixed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>color_mode_fixed</name></name> <operator>=</operator> <name>fixed</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_cpicker_set_indic_colored</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name><operator>.</operator><name>colored</name></name> <operator>=</operator> <ternary><condition><expr><name>en</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invalidate_indic</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_cpicker_set_preview</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>preview</name></name> <operator>=</operator> <ternary><condition><expr><name>en</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>lv_cpicker_color_mode_t</name></type> <name>lv_cpicker_get_color_mode</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>color_mode</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>lv_cpicker_get_color_mode_fixed</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>color_mode_fixed</name></name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>lv_cpicker_get_style</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>, <parameter><decl><type><name>lv_cpicker_style_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_CPICKER_STYLE_MAIN</name></expr>:</case>
<return>return <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>LV_CPICKER_STYLE_INDICATOR</name></expr>:</case>
<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name><operator>.</operator><name>style</name></name></expr>;</return>
<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>


<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>uint16_t</name></type> <name>lv_cpicker_get_hue</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>h</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>uint8_t</name></type> <name>lv_cpicker_get_saturation</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>s</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>uint8_t</name></type> <name>lv_cpicker_get_value</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>v</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>lv_color_hsv_t</name></type> <name>lv_cpicker_get_hsv</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>hsv</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>lv_color_t</name></type> <name>lv_cpicker_get_color</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>lv_color_hsv_to_rgb</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>lv_cpicker_get_indic_colored</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name><operator>.</operator><name>colored</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>lv_cpicker_get_preview</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name><name>ext</name><operator>-&gt;</operator><name>preview</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





















<function><type><specifier>static</specifier> <name>bool</name></type> <name>lv_cpicker_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_COVER_CHK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_DRAW_MAIN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name> <init>= <expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>LV_CPICKER_TYPE_DISC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>draw_disc_grad</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>LV_CPICKER_TYPE_RECT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>draw_rect_grad</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>draw_indic</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_DRAW_POST</name></expr>)</condition> <block>{<block_content>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_disc_grad</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>start_angle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name></type> <name>end_angle</name> <init>= <expr><literal type="number">360</literal> <operator>-</operator> <name>LV_CPICKER_DEF_QF</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>cx</name> <init>= <expr><name><name>cpicker</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name>w</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>cy</name> <init>= <expr><name><name>cpicker</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <name>h</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>r</name> <init>= <expr><name>w</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>lv_point_t</name></type> <name>center</name> <init>= <expr><block>{<expr><name>cx</name></expr>, <expr><name>cy</name></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>lv_area_is_point_on</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>center</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>dr</name></decl>, <decl><type ref="prev"/><name>ur</name></decl>, <decl><type ref="prev"/><name>ul</name></decl>, <decl><type ref="prev"/><name>dl</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dr</name> <operator>=</operator> <call><name>lv_atan2</name><argument_list>(<argument><expr><name><name>mask</name><operator>-&gt;</operator><name>x2</name></name> <operator>-</operator> <name>cx</name></expr></argument>, <argument><expr><name><name>mask</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ur</name> <operator>=</operator> <call><name>lv_atan2</name><argument_list>(<argument><expr><name><name>mask</name><operator>-&gt;</operator><name>x2</name></name> <operator>-</operator> <name>cx</name></expr></argument>, <argument><expr><name><name>mask</name><operator>-&gt;</operator><name>y1</name></name> <operator>-</operator> <name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ul</name> <operator>=</operator> <call><name>lv_atan2</name><argument_list>(<argument><expr><name><name>mask</name><operator>-&gt;</operator><name>x1</name></name> <operator>-</operator> <name>cx</name></expr></argument>, <argument><expr><name><name>mask</name><operator>-&gt;</operator><name>y1</name></name> <operator>-</operator> <name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dl</name> <operator>=</operator> <call><name>lv_atan2</name><argument_list>(<argument><expr><name><name>mask</name><operator>-&gt;</operator><name>x1</name></name> <operator>-</operator> <name>cx</name></expr></argument>, <argument><expr><name><name>mask</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>left</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>mask</name><operator>-&gt;</operator><name>x2</name></name> <operator>&lt;</operator> <name>cx</name> <operator>&amp;&amp;</operator> <name><name>mask</name><operator>-&gt;</operator><name>x1</name></name> <operator>&lt;</operator> <name>cx</name><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>onYaxis</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>mask</name><operator>-&gt;</operator><name>x2</name></name> <operator>&gt;</operator> <name>cx</name> <operator>&amp;&amp;</operator> <name><name>mask</name><operator>-&gt;</operator><name>x1</name></name> <operator>&lt;</operator> <name>cx</name><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>right</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>mask</name><operator>-&gt;</operator><name>x2</name></name> <operator>&gt;</operator> <name>cx</name> <operator>&amp;&amp;</operator> <name><name>mask</name><operator>-&gt;</operator><name>x1</name></name> <operator>&gt;</operator> <name>cx</name><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>top</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>mask</name><operator>-&gt;</operator><name>y2</name></name> <operator>&lt;</operator> <name>cy</name> <operator>&amp;&amp;</operator> <name><name>mask</name><operator>-&gt;</operator><name>y1</name></name> <operator>&lt;</operator> <name>cy</name><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>onXaxis</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>mask</name><operator>-&gt;</operator><name>y2</name></name> <operator>&gt;</operator> <name>cy</name> <operator>&amp;&amp;</operator> <name><name>mask</name><operator>-&gt;</operator><name>y1</name></name> <operator>&lt;</operator> <name>cy</name><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>bottom</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>mask</name><operator>-&gt;</operator><name>y2</name></name> <operator>&gt;</operator> <name>cy</name> <operator>&amp;&amp;</operator> <name><name>mask</name><operator>-&gt;</operator><name>y1</name></name> <operator>&gt;</operator> <name>cy</name><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>right</name> <operator>&amp;&amp;</operator> <name>bottom</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_angle</name> <operator>=</operator> <name>dl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_angle</name> <operator>=</operator> <name>ur</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>right</name> <operator>&amp;&amp;</operator> <name>onXaxis</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_angle</name> <operator>=</operator> <name>dl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_angle</name> <operator>=</operator> <name>ul</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>right</name> <operator>&amp;&amp;</operator> <name>top</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_angle</name> <operator>=</operator> <name>dr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_angle</name> <operator>=</operator> <name>ul</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>onYaxis</name> <operator>&amp;&amp;</operator> <name>top</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_angle</name> <operator>=</operator> <name>dr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_angle</name> <operator>=</operator> <name>dl</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>left</name> <operator>&amp;&amp;</operator> <name>top</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_angle</name> <operator>=</operator> <name>ur</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_angle</name> <operator>=</operator> <name>dl</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>left</name> <operator>&amp;&amp;</operator> <name>onXaxis</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_angle</name> <operator>=</operator> <name>ur</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_angle</name> <operator>=</operator> <name>dr</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>left</name> <operator>&amp;&amp;</operator> <name>bottom</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_angle</name> <operator>=</operator> <name>ul</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_angle</name> <operator>=</operator> <name>dr</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>onYaxis</name> <operator>&amp;&amp;</operator> <name>bottom</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_angle</name> <operator>=</operator> <name>ul</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_angle</name> <operator>=</operator> <name>ur</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>start_angle</name> <operator>&gt;</operator> <name>end_angle</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>end_angle</name> <operator>+=</operator> <literal type="number">360</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>start_angle</name> <operator>=</operator> <operator>(</operator><name>start_angle</name><operator>/</operator><name>LV_CPICKER_DEF_QF</name><operator>)</operator> <operator>*</operator> <name>LV_CPICKER_DEF_QF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_angle</name> <operator>=</operator> <operator>(</operator><name>end_angle</name> <operator>/</operator> <name>LV_CPICKER_DEF_QF</name><operator>)</operator> <operator>*</operator> <name>LV_CPICKER_DEF_QF</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>(</operator><name>start_angle</name> <operator>-</operator> <name>LV_CPICKER_DEF_QF</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_angle</name> <operator>+=</operator> <literal type="number">360</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>end_angle</name> <operator>+=</operator> <literal type="number">360</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>start_angle</name> <operator>-=</operator> <name>LV_CPICKER_DEF_QF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_angle</name> <operator>+=</operator> <name>LV_CPICKER_DEF_QF</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name><name>triangle_points</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name></type> <name>style</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>style</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>start_angle</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>end_angle</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator> <name>LV_CPICKER_DEF_QF</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>style</name><operator>.</operator><name>body</name><operator>.</operator><name>main_color</name></name> <operator>=</operator> <call><name>angle_to_mode_color</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style</name><operator>.</operator><name>body</name><operator>.</operator><name>grad_color</name></name> <operator>=</operator> <name><name>style</name><operator>.</operator><name>body</name><operator>.</operator><name>main_color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>triangle_points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>cx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>triangle_points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>cy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>triangle_points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>cx</name> <operator>+</operator> <operator>(</operator><name>r</name> <operator>*</operator> <call><name>lv_trigo_sin</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>LV_TRIGO_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>triangle_points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>cy</name> <operator>+</operator> <operator>(</operator><name>r</name> <operator>*</operator> <call><name>lv_trigo_sin</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">90</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>LV_TRIGO_SHIFT</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>end_angle</name> <operator>||</operator> <name>i</name> <operator>==</operator> <operator>(</operator><literal type="number">360</literal> <operator>-</operator> <name>LV_CPICKER_DEF_QF</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>triangle_points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>cx</name> <operator>+</operator> <operator>(</operator><name>r</name> <operator>*</operator> <call><name>lv_trigo_sin</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <name>LV_CPICKER_DEF_QF</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>LV_TRIGO_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>triangle_points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>cy</name> <operator>+</operator> <operator>(</operator><name>r</name> <operator>*</operator> <call><name>lv_trigo_sin</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <name>LV_CPICKER_DEF_QF</name> <operator>+</operator> <literal type="number">90</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>LV_TRIGO_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>triangle_points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>cx</name> <operator>+</operator> <operator>(</operator><name>r</name> <operator>*</operator> <call><name>lv_trigo_sin</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <name>LV_CPICKER_DEF_QF</name> <operator>+</operator> <name>TRI_OFFSET</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>LV_TRIGO_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>triangle_points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>cy</name> <operator>+</operator> <operator>(</operator><name>r</name> <operator>*</operator> <call><name>lv_trigo_sin</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <name>LV_CPICKER_DEF_QF</name> <operator>+</operator> <name>TRI_OFFSET</name> <operator>+</operator> <literal type="number">90</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>LV_TRIGO_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lv_draw_triangle</name><argument_list>(<argument><expr><name>triangle_points</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>style</name></expr></argument>, <argument><expr><name>LV_OPA_COVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_main</name> <init>= <expr><call><name>lv_cpicker_get_style</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_CPICKER_STYLE_MAIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>style</name></expr></argument>, <argument><expr><name>style_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style</name><operator>.</operator><name>body</name><operator>.</operator><name>radius</name></name> <operator>=</operator> <name>LV_RADIUS_CIRCLE</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>lv_area_t</name></type> <name>area_mid</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area_mid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cpicker</name><operator>-&gt;</operator><name>coords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_area_increment</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area_mid</name></expr></argument>, <argument><expr><operator>-</operator><name><name>style_main</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area_mid</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>preview</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_color_t</name></type> <name>color</name> <init>= <expr><call><name>lv_cpicker_get_color</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>style</name><operator>.</operator><name>body</name><operator>.</operator><name>main_color</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style</name><operator>.</operator><name>body</name><operator>.</operator><name>grad_color</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_area_increment</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area_mid</name></expr></argument>, <argument><expr><operator>-</operator><name><name>style_main</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area_mid</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_rect_grad</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_style_t</name></type> <name>style</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>style</name></expr></argument>, <argument><expr><call><name>lv_cpicker_get_style</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_CPICKER_STYLE_MAIN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>grad_area</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>grad_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>.</operator><name>body</name><operator>.</operator><name>radius</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>r</name> <init>= <expr><name><name>style</name><operator>.</operator><name>body</name><operator>.</operator><name>radius</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>r</name> <operator>&gt;</operator> <name>h</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>=</operator> <name>h</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>grad_area</name><operator>.</operator><name>x1</name></name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grad_area</name><operator>.</operator><name>x2</name></name> <operator>-=</operator> <name>r</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>lv_area_t</name></type> <name>rounded_edge_area</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rounded_edge_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rounded_edge_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>rounded_edge_area</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>.</operator><name>body</name><operator>.</operator><name>main_color</name></name> <operator>=</operator> <call><name>angle_to_mode_color</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style</name><operator>.</operator><name>body</name><operator>.</operator><name>grad_color</name></name> <operator>=</operator> <name><name>style</name><operator>.</operator><name>body</name><operator>.</operator><name>main_color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rounded_edge_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rounded_edge_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rounded_edge_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>rounded_edge_area</name><operator>.</operator><name>x2</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>style</name><operator>.</operator><name>body</name><operator>.</operator><name>main_color</name></name> <operator>=</operator> <call><name>angle_to_mode_color</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><literal type="number">359</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style</name><operator>.</operator><name>body</name><operator>.</operator><name>grad_color</name></name> <operator>=</operator> <name><name>style</name><operator>.</operator><name>body</name><operator>.</operator><name>main_color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rounded_edge_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>grad_w</name> <init>= <expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name>grad_area</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_step</name> <init>= <expr><call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name>LV_CPICKER_DEF_QF</name></expr></argument>, <argument><expr><literal type="number">360</literal> <operator>/</operator> <name>grad_w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>style</name><operator>.</operator><name>body</name><operator>.</operator><name>radius</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style</name><operator>.</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style</name><operator>.</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style</name><operator>.</operator><name>body</name><operator>.</operator><name>opa</name></name> <operator>=</operator> <name>LV_OPA_COVER</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">360</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>i_step</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>style</name><operator>.</operator><name>body</name><operator>.</operator><name>main_color</name></name> <operator>=</operator> <call><name>angle_to_mode_color</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style</name><operator>.</operator><name>body</name><operator>.</operator><name>grad_color</name></name> <operator>=</operator> <name><name>style</name><operator>.</operator><name>body</name><operator>.</operator><name>main_color</name></name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>lv_area_t</name></type> <name>rect_area</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>xi</name> <init>= <expr><operator>(</operator><name>i</name> <operator>*</operator> <name>grad_w</name><operator>)</operator> <operator>/</operator> <literal type="number">360</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rect_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><name><name>grad_area</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name>xi</name></expr></argument>, <argument><expr><name><name>grad_area</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name>grad_w</name> <operator>-</operator> <name>i_step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>grad_area</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>rect_area</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name>i_step</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>grad_area</name><operator>.</operator><name>y2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_indic</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_style_t</name></type> <name>style_cir</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>style_cir</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name><operator>.</operator><name>style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style_cir</name><operator>.</operator><name>body</name><operator>.</operator><name>radius</name></name> <operator>=</operator> <name>LV_RADIUS_CIRCLE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name><operator>.</operator><name>colored</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>style_cir</name><operator>.</operator><name>body</name><operator>.</operator><name>main_color</name></name> <operator>=</operator> <call><name>lv_cpicker_get_color</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style_cir</name><operator>.</operator><name>body</name><operator>.</operator><name>grad_color</name></name> <operator>=</operator> <name><name>style_cir</name><operator>.</operator><name>body</name><operator>.</operator><name>main_color</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>indic_area</name> <init>= <expr><call><name>get_indic_area</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>indic_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>style_cir</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>invalidate_indic</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_area_t</name></type> <name>indic_area</name> <init>= <expr><call><name>get_indic_area</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate_area</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>indic_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lv_area_t</name></type> <name>get_indic_area</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_main</name> <init>= <expr><call><name>lv_cpicker_get_style</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_CPICKER_STYLE_MAIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_indic</name> <init>= <expr><call><name>lv_cpicker_get_style</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_CPICKER_STYLE_INDICATOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>LV_CPICKER_TYPE_DISC</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>style_main</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>LV_CPICKER_TYPE_RECT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>h</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>indic_area</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>indic_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>cpicker</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name><name>ext</name><operator>-&gt;</operator><name>indic</name><operator>.</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>r</name> <operator>-</operator> <name><name>style_indic</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>indic_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>cpicker</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <name><name>ext</name><operator>-&gt;</operator><name>indic</name><operator>.</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>r</name> <operator>-</operator> <name><name>style_indic</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>indic_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>cpicker</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name><name>ext</name><operator>-&gt;</operator><name>indic</name><operator>.</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>r</name> <operator>+</operator> <name><name>style_indic</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>indic_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>cpicker</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <name><name>ext</name><operator>-&gt;</operator><name>indic</name><operator>.</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>r</name> <operator>+</operator> <name><name>style_indic</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name></expr>;</expr_stmt>

<return>return <expr><name>indic_area</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_cpicker_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name> <init>= <expr><call><name>ancestor_signal</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_obj_handle_get_type_signal</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CLEANUP</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_REFR_EXT_DRAW_PAD</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_indic</name> <init>= <expr><call><name>lv_cpicker_get_style</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_CPICKER_STYLE_INDICATOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>indic_pad</name> <init>= <expr><call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>style_indic</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>style_indic</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>indic_pad</name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name>indic_pad</name></expr></argument>, <argument><expr><name><name>style_indic</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>indic_pad</name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name>indic_pad</name></expr></argument>, <argument><expr><name><name>style_indic</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>LV_CPICKER_TYPE_RECT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>indic_pad</name> <operator>+=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name>indic_pad</name></expr></argument>, <argument><expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cpicker</name><operator>-&gt;</operator><name>ext_draw_pad</name></name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>cpicker</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr></argument>, <argument><expr><name>indic_pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CORD_CHG</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>lv_area_get_height</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_obj_refresh_ext_draw_pad</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refr_indic_pos</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_STYLE_CHG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_refresh_ext_draw_pad</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refr_indic_pos</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CONTROL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>param</name><operator>)</operator></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_RIGHT</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>LV_KEY_UP</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_color_hsv_t</name></type> <name>hsv_cur</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hsv_cur</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>hsv</name></name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>color_mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_CPICKER_COLOR_MODE_HUE</name></expr>:</case>
<expr_stmt><expr><name><name>hsv_cur</name><operator>.</operator><name>h</name></name> <operator>=</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>h</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">360</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_CPICKER_COLOR_MODE_SATURATION</name></expr>:</case>
<expr_stmt><expr><name><name>hsv_cur</name><operator>.</operator><name>s</name></name> <operator>=</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>s</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_CPICKER_COLOR_MODE_VALUE</name></expr>:</case>
<expr_stmt><expr><name><name>hsv_cur</name><operator>.</operator><name>v</name></name> <operator>=</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>v</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>lv_cpicker_set_hsv</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>hsv_cur</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_event_send</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_EVENT_VALUE_CHANGED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_LEFT</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>LV_KEY_DOWN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_color_hsv_t</name></type> <name>hsv_cur</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hsv_cur</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>hsv</name></name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>color_mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_CPICKER_COLOR_MODE_HUE</name></expr>:</case>
<expr_stmt><expr><name><name>hsv_cur</name><operator>.</operator><name>h</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>h</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>?</condition><then><expr><operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">360</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_CPICKER_COLOR_MODE_SATURATION</name></expr>:</case>
<expr_stmt><expr><name><name>hsv_cur</name><operator>.</operator><name>s</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>s</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>?</condition><then><expr><operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>s</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">100</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_CPICKER_COLOR_MODE_VALUE</name></expr>:</case>
<expr_stmt><expr><name><name>hsv_cur</name><operator>.</operator><name>v</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>v</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>?</condition><then><expr><operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>v</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">100</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>lv_cpicker_set_hsv</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>hsv_cur</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_event_send</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_EVENT_VALUE_CHANGED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESSED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>last_change_time</name></name> <operator>=</operator> <call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_indev_get_point</name><argument_list>(<argument><expr><call><name>lv_indev_get_act</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>last_press_point</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>double_click_reset</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESSING</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name> <init>= <expr><call><name>lv_indev_get_act</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>indev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_indev_get_point</name><argument_list>(<argument><expr><name>indev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>last_press_point</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>drag_limit</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>ext</name><operator>-&gt;</operator><name>last_press_point</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>drag_limit</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>last_change_time</name></name> <operator>=</operator> <call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>last_press_point</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>last_press_point</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name><name>cpicker</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name><name>cpicker</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint16_t</name></type> <name>w</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>angle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>LV_CPICKER_TYPE_RECT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>diff</name> <init>= <expr><call><name>lv_tick_elaps</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>last_change_time</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>diff</name> <operator>&gt;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>long_press_time</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ext</name><operator>-&gt;</operator><name>color_mode_fixed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>next_color_mode</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_indev_wait_release</name><argument_list>(<argument><expr><call><name>lv_indev_get_act</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>angle</name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>.</operator><name>x</name></name> <operator>*</operator> <literal type="number">360</literal><operator>)</operator> <operator>/</operator> <name>w</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>angle</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>angle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>angle</name> <operator>&gt;=</operator> <literal type="number">360</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>angle</name> <operator>=</operator> <literal type="number">359</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>LV_CPICKER_TYPE_DISC</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_main</name> <init>= <expr><call><name>lv_cpicker_get_style</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_CPICKER_STYLE_MAIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>r_in</name> <init>= <expr><name>w</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name>r_in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name>r_in</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r_in</name> <operator>-=</operator> <name><name>style_main</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>r_in</name> <operator>&gt;</operator> <name>LV_DPI</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r_in</name> <operator>-=</operator> <name><name>style_main</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>r_in</name> <operator>&lt;</operator> <name>LV_DPI</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r_in</name> <operator>=</operator> <name>LV_DPI</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>p</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>p</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name>r_in</name> <operator>*</operator> <name>r_in</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>diff</name> <init>= <expr><call><name>lv_tick_elaps</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>last_change_time</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>diff</name> <operator>&gt;</operator> <name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>long_press_time</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ext</name><operator>-&gt;</operator><name>color_mode_fixed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>next_color_mode</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_indev_wait_release</name><argument_list>(<argument><expr><call><name>lv_indev_get_act</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>angle</name> <operator>=</operator> <call><name>lv_atan2</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">360</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_color_hsv_t</name></type> <name>hsv_cur</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hsv_cur</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>hsv</name></name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>color_mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_CPICKER_COLOR_MODE_HUE</name></expr>:</case>
<expr_stmt><expr><name><name>hsv_cur</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name>angle</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_CPICKER_COLOR_MODE_SATURATION</name></expr>:</case>
<expr_stmt><expr><name><name>hsv_cur</name><operator>.</operator><name>s</name></name> <operator>=</operator> <operator>(</operator><name>angle</name> <operator>*</operator> <literal type="number">100</literal><operator>)</operator> <operator>/</operator> <literal type="number">360</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_CPICKER_COLOR_MODE_VALUE</name></expr>:</case>
<expr_stmt><expr><name><name>hsv_cur</name><operator>.</operator><name>v</name></name> <operator>=</operator> <operator>(</operator><name>angle</name> <operator>*</operator> <literal type="number">100</literal><operator>)</operator> <operator>/</operator> <literal type="number">360</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>lv_cpicker_set_hsv</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>hsv_cur</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_event_send</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_EVENT_VALUE_CHANGED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>next_color_mode</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>color_mode</name></name> <operator>=</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>color_mode</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refr_indic_pos</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>refr_indic_pos</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>invalidate_indic</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>LV_CPICKER_TYPE_RECT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>ind_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>color_mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_CPICKER_COLOR_MODE_HUE</name></expr>:</case>
<expr_stmt><expr><name>ind_pos</name> <operator>+=</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>h</name></name> <operator>*</operator> <name>w</name><operator>)</operator> <operator>/</operator> <literal type="number">360</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_CPICKER_COLOR_MODE_SATURATION</name></expr>:</case>
<expr_stmt><expr><name>ind_pos</name> <operator>+=</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>s</name></name> <operator>*</operator> <name>w</name><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_CPICKER_COLOR_MODE_VALUE</name></expr>:</case>
<expr_stmt><expr><name>ind_pos</name> <operator>+=</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>v</name></name> <operator>*</operator> <name>w</name><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name><operator>.</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>ind_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name><operator>.</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>h</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>LV_CPICKER_TYPE_DISC</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_main</name> <init>= <expr><call><name>lv_cpicker_get_style</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_CPICKER_STYLE_MAIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>r</name> <init>= <expr><name>w</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name><name>style_main</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>angle</name> <init>= <expr><call><name>get_angle</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name><operator>.</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>r</name> <operator>*</operator> <call><name>lv_trigo_sin</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <name>LV_TRIGO_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name><operator>.</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>r</name> <operator>*</operator> <call><name>lv_trigo_sin</name><argument_list>(<argument><expr><name>angle</name> <operator>+</operator> <literal type="number">90</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <name>LV_TRIGO_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name><operator>.</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>indic</name><operator>.</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>w</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>indic</name><operator>.</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>indic</name><operator>.</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>h</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>invalidate_indic</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>double_click_reset</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name> <init>= <expr><call><name>lv_indev_get_act</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_tick_elaps</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>last_click_time</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>indev</name><operator>-&gt;</operator><name>driver</name><operator>.</operator><name>long_press_time</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_color_hsv_t</name></type> <name>hsv_cur</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hsv_cur</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>hsv</name></name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>color_mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_CPICKER_COLOR_MODE_HUE</name></expr>:</case>
<expr_stmt><expr><name><name>hsv_cur</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name>LV_CPICKER_DEF_HUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_CPICKER_COLOR_MODE_SATURATION</name></expr>:</case>
<expr_stmt><expr><name><name>hsv_cur</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name>LV_CPICKER_DEF_SATURATION</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_CPICKER_COLOR_MODE_VALUE</name></expr>:</case>
<expr_stmt><expr><name><name>hsv_cur</name><operator>.</operator><name>v</name></name> <operator>=</operator> <name>LV_CPICKER_DEF_VALUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>lv_cpicker_set_hsv</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>hsv_cur</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name> <init>= <expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>, <argument><expr><name>LV_EVENT_VALUE_CHANGED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>last_click_time</name></name> <operator>=</operator> <call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LV_RES_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lv_color_t</name></type> <name>angle_to_mode_color</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>angle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_color_t</name></type> <name>color</name></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>color_mode</name></name></expr>)</condition>
<block>{<block_content>
<default>default:</default>
<case>case <expr><name>LV_CPICKER_COLOR_MODE_HUE</name></expr>:</case>
<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>lv_color_hsv_to_rgb</name><argument_list>(<argument><expr><name>angle</name> <operator>%</operator> <literal type="number">360</literal></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_CPICKER_COLOR_MODE_SATURATION</name></expr>:</case>
<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>lv_color_hsv_to_rgb</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>angle</name> <operator>%</operator> <literal type="number">360</literal><operator>)</operator> <operator>*</operator> <literal type="number">100</literal><operator>)</operator> <operator>/</operator> <literal type="number">360</literal></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_CPICKER_COLOR_MODE_VALUE</name></expr>:</case>
<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>lv_color_hsv_to_rgb</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>angle</name> <operator>%</operator> <literal type="number">360</literal><operator>)</operator> <operator>*</operator> <literal type="number">100</literal><operator>)</operator> <operator>/</operator> <literal type="number">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>color</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint16_t</name></type> <name>get_angle</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cpicker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_cpicker_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cpicker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>angle</name></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>color_mode</name></name></expr>)</condition>
<block>{<block_content>
<default>default:</default>
<case>case <expr><name>LV_CPICKER_COLOR_MODE_HUE</name></expr>:</case>
<expr_stmt><expr><name>angle</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_CPICKER_COLOR_MODE_SATURATION</name></expr>:</case>
<expr_stmt><expr><name>angle</name> <operator>=</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>s</name></name> <operator>*</operator> <literal type="number">360</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_CPICKER_COLOR_MODE_VALUE</name></expr>:</case>
<expr_stmt><expr><name>angle</name> <operator>=</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>hsv</name><operator>.</operator><name>v</name></name> <operator>*</operator> <literal type="number">360</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr> ;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>angle</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
