<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_objx\lv_table.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_table.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_TABLE</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_txt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_math.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_draw/lv_draw_label.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_themes/lv_theme.h"</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_OBJX_NAME</name></cpp:macro> <cpp:value>"lv_table"</cpp:value></cpp:define>








<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lv_table_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_table_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>lv_coord_t</name></type> <name>get_row_height</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>row_id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>refr_size</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>ancestor_signal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>lv_design_cb_t</name></type> <name>ancestor_scrl_design</name></decl>;</decl_stmt>















<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_table_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"table create started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>new_table</name> <init>= <expr><call><name>lv_obj_create</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>new_table</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>lv_table_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_allocate_ext_attr</name><argument_list>(<argument><expr><name>new_table</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_table_ext_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ancestor_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><name>new_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ancestor_scrl_design</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_scrl_design</name> <operator>=</operator> <call><name>lv_obj_get_design_cb</name><argument_list>(<argument><expr><name>new_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_plain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_plain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_plain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_plain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>row_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LV_TABLE_COL_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>col_w</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>LV_DPI</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><name>new_table</name></expr></argument>, <argument><expr><name>lv_table_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_design_cb</name><argument_list>(<argument><expr><name>new_table</name></expr></argument>, <argument><expr><name>lv_table_design</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>th</name> <init>= <expr><call><name>lv_theme_get_current</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>th</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_table_set_style</name><argument_list>(<argument><expr><name>new_table</name></expr></argument>, <argument><expr><name>LV_TABLE_STYLE_BG</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>table</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_table_set_style</name><argument_list>(<argument><expr><name>new_table</name></expr></argument>, <argument><expr><name>LV_TABLE_STYLE_CELL1</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>table</name><operator>.</operator><name>cell</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_table_set_style</name><argument_list>(<argument><expr><name>new_table</name></expr></argument>, <argument><expr><name>LV_TABLE_STYLE_CELL2</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>table</name><operator>.</operator><name>cell</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_table_set_style</name><argument_list>(<argument><expr><name>new_table</name></expr></argument>, <argument><expr><name>LV_TABLE_STYLE_CELL3</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>table</name><operator>.</operator><name>cell</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_table_set_style</name><argument_list>(<argument><expr><name>new_table</name></expr></argument>, <argument><expr><name>LV_TABLE_STYLE_CELL4</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>table</name><operator>.</operator><name>cell</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lv_table_set_style</name><argument_list>(<argument><expr><name>new_table</name></expr></argument>, <argument><expr><name>LV_TABLE_STYLE_BG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_plain_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>lv_obj_set_click</name><argument_list>(<argument><expr><name>new_table</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if>

<else>else <block>{<block_content>
<decl_stmt><decl><type><name>lv_table_ext_t</name> <modifier>*</modifier></type> <name>copy_ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_table_set_row_cnt</name><argument_list>(<argument><expr><name>new_table</name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>row_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_table_set_col_cnt</name><argument_list>(<argument><expr><name>new_table</name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>col_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lv_obj_refresh_style</name><argument_list>(<argument><expr><name>new_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"table created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_table</name></expr>;</return>
</block_content>}</block></function>













<function><type><name>void</name></type> <name>lv_table_set_cell_value</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_table_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>row</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>row_cnt</name></name> <operator>||</operator> <name>col</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_table_set_cell_value: invalid row or column"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cell</name> <init>= <expr><name>row</name> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name> <operator>+</operator> <name>col</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_table_cell_format_t</name></type> <name>format</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>format_byte</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_BIDI</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_bidi_dir_t</name></type> <name>base_dir</name> <init>= <expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>base_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_LTR</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>align</name></name> <operator>=</operator> <name>LV_LABEL_ALIGN_LEFT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>base_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_RTL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>align</name></name> <operator>=</operator> <name>LV_LABEL_ALIGN_RIGHT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>base_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_AUTO</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>align</name></name> <operator>=</operator> <call><name>lv_bidi_detect_base_dir</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>align</name></name> <operator>=</operator> <name>LV_LABEL_ALIGN_LEFT</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>right_merge</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>crop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name> <operator>=</operator> <call><name>lv_mem_realloc</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>format</name><operator>.</operator><name>format_byte</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refr_size</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_table_set_row_cnt</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>row_cnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_table_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>old_row_cnt</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>row_cnt</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>row_cnt</name></name> <operator>=</operator> <name>row_cnt</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>row_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name></name> <operator>=</operator> <call><name>lv_mem_realloc</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>row_cnt</name></name> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>old_row_cnt</name> <operator>&lt;</operator> <name>row_cnt</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>old_cell_cnt</name> <init>= <expr><name>old_row_cnt</name> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_cell_cnt</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>row_cnt</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>old_cell_cnt</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>new_cell_cnt</name> <operator>-</operator> <name>old_cell_cnt</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>refr_size</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_table_set_col_cnt</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>col_cnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>col_cnt</name> <operator>&gt;=</operator> <name>LV_TABLE_COL_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_table_set_col_cnt: too many columns. Must be &lt; LV_TABLE_COL_MAX."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_table_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>old_col_cnt</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name> <operator>=</operator> <name>col_cnt</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>row_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name></name> <operator>=</operator> <call><name>lv_mem_realloc</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>row_cnt</name></name> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>old_col_cnt</name> <operator>&lt;</operator> <name>col_cnt</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>old_cell_cnt</name> <init>= <expr><name>old_col_cnt</name> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>row_cnt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_cell_cnt</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>row_cnt</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>old_cell_cnt</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>new_cell_cnt</name> <operator>-</operator> <name>old_cell_cnt</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>refr_size</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>lv_table_set_col_width</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>col_id</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>col_id</name> <operator>&gt;=</operator> <name>LV_TABLE_COL_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_table_set_col_width: too big 'col_id'. Must be &lt; LV_TABLE_COL_MAX."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_table_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>col_w</name><index>[<expr><name>col_id</name></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refr_size</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>lv_table_set_cell_align</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>lv_label_align_t</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_table_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>row</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>row_cnt</name></name> <operator>||</operator> <name>col</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_table_set_cell_align: invalid row or column"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cell</name> <init>= <expr><name>row</name> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name> <operator>+</operator> <name>col</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_table_cell_format_t</name></type> <name>format</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>format_byte</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>align</name></name> <operator>=</operator> <name>align</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>format</name><operator>.</operator><name>format_byte</name></name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>lv_table_set_cell_type</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_table_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>row</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>row_cnt</name></name> <operator>||</operator> <name>col</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_table_set_cell_type: invalid row or column"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cell</name> <init>= <expr><name>row</name> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name> <operator>+</operator> <name>col</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>type</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>type</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if<condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>LV_TABLE_CELL_STYLE_CNT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>LV_TABLE_CELL_STYLE_CNT</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_table_cell_format_t</name></type> <name>format</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>format_byte</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>format</name><operator>.</operator><name>format_byte</name></name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>lv_table_set_cell_crop</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>crop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_table_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>row</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>row_cnt</name></name> <operator>||</operator> <name>col</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_table_set_cell_crop: invalid row or column"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cell</name> <init>= <expr><name>row</name> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name> <operator>+</operator> <name>col</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_table_cell_format_t</name></type> <name>format</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>format_byte</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>crop</name></name> <operator>=</operator> <name>crop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>format</name><operator>.</operator><name>format_byte</name></name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>lv_table_set_cell_merge_right</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_table_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>row</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>row_cnt</name></name> <operator>||</operator> <name>col</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_table_set_cell_merge_right: invalid row or column"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cell</name> <init>= <expr><name>row</name> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name> <operator>+</operator> <name>col</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_table_cell_format_t</name></type> <name>format</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>format_byte</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>right_merge</name></name> <operator>=</operator> <ternary><condition><expr><name>en</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>format</name><operator>.</operator><name>format_byte</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refr_size</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>lv_table_set_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>lv_table_style_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_table_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_TABLE_STYLE_BG</name></expr>:</case>
<expr_stmt><expr><call><name>lv_obj_set_style</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refr_size</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_TABLE_STYLE_CELL1</name></expr>:</case>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refr_size</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_TABLE_STYLE_CELL2</name></expr>:</case>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refr_size</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_TABLE_STYLE_CELL3</name></expr>:</case>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refr_size</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_TABLE_STYLE_CELL4</name></expr>:</case>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refr_size</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>












<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>lv_table_get_cell_value</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_table_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>row</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>row_cnt</name></name> <operator>||</operator> <name>col</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_table_set_cell_value: invalid row or column"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="string">""</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cell</name> <init>= <expr><name>row</name> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name> <operator>+</operator> <name>col</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return> 
</block_content>}</block></function>






<function><type><name>uint16_t</name></type> <name>lv_table_get_row_cnt</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_table_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>row_cnt</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>uint16_t</name></type> <name>lv_table_get_col_cnt</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_table_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name></expr>;</return>
</block_content>}</block></function>







<function><type><name>lv_coord_t</name></type> <name>lv_table_get_col_width</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>col_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>col_id</name> <operator>&gt;=</operator> <name>LV_TABLE_COL_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_table_set_col_width: too big 'col_id'. Must be &lt; LV_TABLE_COL_MAX."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_table_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>col_w</name><index>[<expr><name>col_id</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>









<function><type><name>lv_label_align_t</name></type> <name>lv_table_get_cell_align</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_table_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>row</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>row_cnt</name></name> <operator>||</operator> <name>col</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_table_set_cell_align: invalid row or column"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LV_LABEL_ALIGN_LEFT</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cell</name> <init>= <expr><name>row</name> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name> <operator>+</operator> <name>col</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LV_LABEL_ALIGN_LEFT</name></expr>;</return></block_content></block></if> 
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>lv_table_cell_format_t</name></type> <name>format</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>format_byte</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>align</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>








<function><type><name>lv_label_align_t</name></type> <name>lv_table_get_cell_type</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_table_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>row</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>row_cnt</name></name> <operator>||</operator> <name>col</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_table_get_cell_type: invalid row or column"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cell</name> <init>= <expr><name>row</name> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name> <operator>+</operator> <name>col</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if> 
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>lv_table_cell_format_t</name></type> <name>format</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>format_byte</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>type</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</return> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>








<function><type><name>lv_label_align_t</name></type> <name>lv_table_get_cell_crop</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_table_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>row</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>row_cnt</name></name> <operator>||</operator> <name>col</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_table_get_cell_crop: invalid row or column"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cell</name> <init>= <expr><name>row</name> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name> <operator>+</operator> <name>col</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if> 
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>lv_table_cell_format_t</name></type> <name>format</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>format_byte</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>crop</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>








<function><type><name>bool</name></type> <name>lv_table_get_cell_merge_right</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_table_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>row</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>row_cnt</name></name> <operator>||</operator> <name>col</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_table_get_cell_merge_right: invalid row or column"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cell</name> <init>= <expr><name>row</name> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name> <operator>+</operator> <name>col</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>lv_table_cell_format_t</name></type> <name>format</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>format_byte</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>right_merge</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>







<function><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>lv_table_get_style</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>lv_table_style_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_table_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_TABLE_STYLE_BG</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_TABLE_STYLE_CELL1</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_TABLE_STYLE_CELL2</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_TABLE_STYLE_CELL3</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_TABLE_STYLE_CELL4</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>style</name></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>bool</name></type> <name>lv_table_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_COVER_CHK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_DRAW_MAIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ancestor_scrl_design</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_table_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>bg_style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h_row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_point_t</name></type> <name>txt_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_area_t</name></type> <name>cell_area</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_area_t</name></type> <name>txt_area</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_txt_flag_t</name></type> <name>txt_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name> <init>= <expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>cell</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cell_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <name><name>bg_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>row_cnt</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>h_row</name> <operator>=</operator> <call><name>get_row_height</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cell_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>cell_area</name><operator>.</operator><name>y2</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cell_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>cell_area</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <name>h_row</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cell_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name><name>bg_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>lv_table_cell_format_t</name></type> <name>format</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>format_byte</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>right_merge</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>align</name></name> <operator>=</operator> <name>LV_LABEL_ALIGN_LEFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>crop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<decl_stmt><decl><type><name>lv_style_t</name></type> <name>cell_style</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cell_style</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>type</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cell_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>cell_area</name><operator>.</operator><name>x2</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cell_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>cell_area</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_w</name><index>[<expr><name>col</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>col_merge</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>col_merge</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col_merge</name> <operator>+</operator> <name>col</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>col_merge</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name> <operator>+</operator> <name>col_merge</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>format_byte</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name> <operator>+</operator> <name>col_merge</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>right_merge</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cell_area</name><operator>.</operator><name>x2</name></name> <operator>+=</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_w</name><index>[<expr><name>col</name> <operator>+</operator> <name>col_merge</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cell_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cell_style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>txt_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>cell_area</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name><name>cell_style</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>txt_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>cell_area</name><operator>.</operator><name>x2</name></name> <operator>-</operator> <name><name>cell_style</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>txt_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>cell_area</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <name><name>cell_style</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>txt_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>cell_area</name><operator>.</operator><name>y2</name></name> <operator>-</operator> <name><name>cell_style</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>crop</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>txt_flags</name> <operator>=</operator> <name>LV_TXT_FLAG_NONE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>txt_flags</name> <operator>=</operator> <name>LV_TXT_FLAG_EXPAND</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lv_txt_get_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txt_size</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>cell_style</name><operator>.</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>,
<argument><expr><name><name>cell_style</name><operator>.</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name><name>cell_style</name><operator>.</operator><name>text</name><operator>.</operator><name>line_space</name></name></expr></argument>,
<argument><expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txt_area</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>txt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>crop</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>txt_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>cell_area</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <name>h_row</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name><name>txt_size</name><operator>.</operator><name>y</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>txt_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>cell_area</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <name>h_row</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>txt_size</name><operator>.</operator><name>y</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>align</name></name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<case>case <expr><name>LV_LABEL_ALIGN_LEFT</name></expr>:</case> <expr_stmt><expr><name>txt_flags</name> <operator>|=</operator> <name>LV_TXT_FLAG_NONE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_LABEL_ALIGN_RIGHT</name></expr>:</case> <expr_stmt><expr><name>txt_flags</name> <operator>|=</operator> <name>LV_TXT_FLAG_RIGHT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_LABEL_ALIGN_CENTER</name></expr>:</case> <expr_stmt><expr><name>txt_flags</name> <operator>|=</operator> <name>LV_TXT_FLAG_CENTER</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>label_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>label_mask_ok</name></decl>;</decl_stmt>
<expr_stmt><expr><name>label_mask_ok</name> <operator>=</operator> <call><name>lv_area_intersect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>label_mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cell_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>label_mask_ok</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_draw_label</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txt_area</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>label_mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cell_style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>txt_flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p2</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>cell_area</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>cell_area</name><operator>.</operator><name>x2</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_txt_get_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txt_size</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>cell_style</name><operator>.</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>,
<argument><expr><name><name>cell_style</name><operator>.</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name><name>cell_style</name><operator>.</operator><name>text</name><operator>.</operator><name>line_space</name></name></expr></argument>,
<argument><expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txt_area</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>txt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p1</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>txt_area</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <name><name>txt_size</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>cell_style</name><operator>.</operator><name>text</name><operator>.</operator><name>line_space</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p2</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>txt_area</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <name><name>txt_size</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>cell_style</name><operator>.</operator><name>text</name><operator>.</operator><name>line_space</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_draw_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cell_style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cell</name> <operator>+=</operator> <name>col_merge</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>col_merge</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_DRAW_POST</name></expr>)</condition> <block>{<block_content>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_table_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name></decl>;</decl_stmt>


<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ancestor_signal</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_obj_handle_get_type_signal</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CLEANUP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_table_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>cell</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>cell</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cell</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>row_cnt</name></name></expr>;</condition> <incr><expr><name>cell</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>refr_size</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_table_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>+=</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_w</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>row_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>+=</operator> <call><name>get_row_height</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>bg_style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>+=</operator> <name><name>bg_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name> <operator>+</operator> <name><name>bg_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>+=</operator> <name><name>bg_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name><name>bg_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_size</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>w</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lv_coord_t</name></type> <name>get_row_height</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>row_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_table_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_point_t</name></type> <name>txt_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>txt_w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>cell_style</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>row_start</name> <init>= <expr><name>row_id</name> <operator>*</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>cell</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h_max</name> <init>= <expr><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>text</name><operator>.</operator><name>font</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name> <operator>+</operator>
<name><name>ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>cell</name> <operator>=</operator> <name>row_start</name></expr><operator>,</operator> <expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cell</name> <operator>&lt;</operator> <name>row_start</name> <operator>+</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name></expr>;</condition> <incr><expr><name>cell</name><operator>++</operator></expr><operator>,</operator> <expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>txt_w</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_w</name><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>col_merge</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>col_merge</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col_merge</name> <operator>+</operator> <name>col</name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>col_merge</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name> <operator>+</operator> <name>col_merge</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_table_cell_format_t</name></type> <name>format</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>format_byte</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name> <operator>+</operator> <name>col_merge</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>right_merge</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>txt_w</name> <operator>+=</operator> <name><name>ext</name><operator>-&gt;</operator><name>col_w</name><index>[<expr><name>col</name> <operator>+</operator> <name>col_merge</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>lv_table_cell_format_t</name></type> <name>format</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>format_byte</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cell_style</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cell_style</name><index>[<expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>type</name></name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>format</name><operator>.</operator><name>s</name><operator>.</operator><name>crop</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h_max</name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name><name>cell_style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>cell_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name> <operator>+</operator>
<name><name>cell_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name></expr></argument>,
<argument><expr><name>h_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><name>txt_w</name> <operator>-=</operator> <name><name>cell_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name> <operator>+</operator> <name><name>cell_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_txt_get_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txt_size</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cell_data</name><index>[<expr><name>cell</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>cell_style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>,
<argument><expr><name><name>cell_style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>letter_space</name></name></expr></argument>, <argument><expr><name><name>cell_style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name></expr></argument>, <argument><expr><name>txt_w</name></expr></argument>, <argument><expr><name>LV_TXT_FLAG_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h_max</name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>txt_size</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>cell_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name><name>cell_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name></expr></argument>, <argument><expr><name>h_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cell</name> <operator>+=</operator> <name>col_merge</name></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>col_merge</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>h_max</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
