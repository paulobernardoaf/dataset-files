<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_objx\lv_cont.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_cont.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_CONT</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_draw/lv_draw.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_draw/lv_draw_basic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_themes/lv_theme.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_area.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_color.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_math.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_bidi.h"</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_OBJX_NAME</name></cpp:macro> <cpp:value>"lv_cont"</cpp:value></cpp:define>








<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_cont_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_cont_refr_layout</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_cont_layout_col</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_cont_layout_row</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_cont_layout_center</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_cont_layout_pretty</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_cont_layout_grid</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_cont_refr_autofit</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>ancestor_signal</name></decl>;</decl_stmt>















<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_cont_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"container create started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>new_cont</name> <init>= <expr><call><name>lv_obj_create</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>new_cont</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ancestor_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><name>new_cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_allocate_ext_attr</name><argument_list>(<argument><expr><name>new_cont</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_cont_ext_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>lv_cont_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>new_cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>fit_left</name></name> <operator>=</operator> <name>LV_FIT_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>fit_right</name></name> <operator>=</operator> <name>LV_FIT_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>fit_top</name></name> <operator>=</operator> <name>LV_FIT_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>fit_bottom</name></name> <operator>=</operator> <name>LV_FIT_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>layout</name></name> <operator>=</operator> <name>LV_LAYOUT_OFF</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><name>new_cont</name></expr></argument>, <argument><expr><name>lv_cont_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>par</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>th</name> <init>= <expr><call><name>lv_theme_get_current</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>th</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_cont_set_style</name><argument_list>(<argument><expr><name>new_cont</name></expr></argument>, <argument><expr><name>LV_CONT_STYLE_MAIN</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>cont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lv_cont_set_style</name><argument_list>(<argument><expr><name>new_cont</name></expr></argument>, <argument><expr><name>LV_CONT_STYLE_MAIN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<decl_stmt><decl><type><name>lv_cont_ext_t</name> <modifier>*</modifier></type> <name>copy_ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>fit_left</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>fit_left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>fit_right</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>fit_right</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>fit_top</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>fit_top</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>fit_bottom</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>fit_bottom</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>layout</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>layout</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lv_obj_refresh_style</name><argument_list>(<argument><expr><name>new_cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"container created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_cont</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>void</name></type> <name>lv_cont_set_layout</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>, <parameter><decl><type><name>lv_layout_t</name></type> <name>layout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cont_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>layout</name></name> <operator>==</operator> <name>layout</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>layout</name></name> <operator>=</operator> <name>layout</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name><name>cont</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_SIGNAL_CHILD_CHG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><name>void</name></type> <name>lv_cont_set_fit4</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>, <parameter><decl><type><name>lv_fit_t</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>lv_fit_t</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>lv_fit_t</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>lv_fit_t</name></type> <name>bottom</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>lv_cont_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>fit_left</name></name> <operator>==</operator> <name>left</name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>fit_right</name></name> <operator>==</operator> <name>right</name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>fit_top</name></name> <operator>==</operator> <name>top</name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>fit_bottom</name></name> <operator>==</operator> <name>bottom</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>fit_left</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>fit_right</name></name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>fit_top</name></name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>fit_bottom</name></name> <operator>=</operator> <name>bottom</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name><name>cont</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_SIGNAL_CHILD_CHG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><name>lv_layout_t</name></type> <name>lv_cont_get_layout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cont_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>layout</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>lv_fit_t</name></type> <name>lv_cont_get_fit_left</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cont_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>fit_left</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>lv_fit_t</name></type> <name>lv_cont_get_fit_right</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cont_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>fit_right</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>lv_fit_t</name></type> <name>lv_cont_get_fit_top</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cont_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>fit_top</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>lv_fit_t</name></type> <name>lv_cont_get_fit_bottom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_cont_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>fit_bottom</name></name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_cont_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name></decl>;</decl_stmt>


<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ancestor_signal</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_obj_handle_get_type_signal</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_STYLE_CHG</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>lv_cont_refr_layout</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_cont_refr_autofit</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CHILD_CHG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_cont_refr_layout</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_cont_refr_autofit</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CORD_CHG</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>lv_area_get_height</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_cont_refr_layout</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_cont_refr_autofit</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PARENT_SIZE_CHG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_cont_refr_autofit</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_cont_refr_layout</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_layout_t</name></type> <name>type</name> <init>= <expr><call><name>lv_cont_get_layout</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_child</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>LV_LAYOUT_OFF</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>LV_LAYOUT_CENTER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_cont_layout_center</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <name>LV_LAYOUT_COL_L</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>LV_LAYOUT_COL_M</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>LV_LAYOUT_COL_R</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_cont_layout_col</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <name>LV_LAYOUT_ROW_T</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>LV_LAYOUT_ROW_M</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>LV_LAYOUT_ROW_B</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_cont_layout_row</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <name>LV_LAYOUT_PRETTY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_cont_layout_pretty</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <name>LV_LAYOUT_GRID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_cont_layout_grid</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_cont_layout_col</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_layout_t</name></type> <name>type</name> <init>= <expr><call><name>lv_cont_get_layout</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>child</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lv_align_t</name></type> <name>align</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>hpad_corr</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_LAYOUT_COL_L</name></expr>:</case>
<expr_stmt><expr><name>hpad_corr</name> <operator>=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>align</name> <operator>=</operator> <name>LV_ALIGN_IN_TOP_LEFT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_LAYOUT_COL_M</name></expr>:</case>
<expr_stmt><expr><name>hpad_corr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>align</name> <operator>=</operator> <name>LV_ALIGN_IN_TOP_MID</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_LAYOUT_COL_R</name></expr>:</case>
<expr_stmt><expr><name>hpad_corr</name> <operator>=</operator> <operator>-</operator><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>align</name> <operator>=</operator> <name>LV_ALIGN_IN_TOP_RIGHT</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>hpad_corr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>align</name> <operator>=</operator> <name>LV_ALIGN_IN_TOP_LEFT</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>



<expr_stmt><expr><call><name>lv_obj_set_protect</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_PROTECT_CHILD_CHG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>last_cord</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr></init></decl>;</decl_stmt>
<macro><name>LV_LL_READ_BACK</name><argument_list>(<argument>cont-&gt;child_ll</argument>, <argument>child</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_hidden</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name> <operator>||</operator> <call><name>lv_obj_is_protected</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>LV_PROTECT_POS</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>cont</name></expr></argument>, <argument><expr><name>align</name></expr></argument>, <argument><expr><name>hpad_corr</name></expr></argument>, <argument><expr><name>last_cord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last_cord</name> <operator>+=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>lv_obj_clear_protect</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_PROTECT_CHILD_CHG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_cont_layout_row</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_layout_t</name></type> <name>type</name> <init>= <expr><call><name>lv_cont_get_layout</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>child</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lv_align_t</name></type> <name>align</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>vpad_corr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_bidi_dir_t</name></type> <name>base_dir</name> <init>= <expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_LAYOUT_ROW_T</name></expr>:</case>
<expr_stmt><expr><name>vpad_corr</name> <operator>=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>align</name> <operator>=</operator> <ternary><condition><expr><name>base_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_RTL</name></expr> ?</condition><then> <expr><name>LV_ALIGN_IN_TOP_RIGHT</name></expr> </then><else>: <expr><name>LV_ALIGN_IN_TOP_LEFT</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_LAYOUT_ROW_M</name></expr>:</case>
<expr_stmt><expr><name>vpad_corr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>align</name> <operator>=</operator> <ternary><condition><expr><name>base_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_RTL</name></expr> ?</condition><then> <expr><name>LV_ALIGN_IN_RIGHT_MID</name></expr></then><else>: <expr><name>LV_ALIGN_IN_LEFT_MID</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_LAYOUT_ROW_B</name></expr>:</case>
<expr_stmt><expr><name>vpad_corr</name> <operator>=</operator> <operator>-</operator><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>align</name> <operator>=</operator> <ternary><condition><expr><name>base_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_RTL</name></expr> ?</condition><then> <expr><name>LV_ALIGN_IN_BOTTOM_RIGHT</name></expr></then><else>: <expr><name>LV_ALIGN_IN_BOTTOM_LEFT</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>vpad_corr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>align</name> <operator>=</operator> <ternary><condition><expr><name>base_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_RTL</name></expr> ?</condition><then> <expr><name>LV_ALIGN_IN_TOP_RIGHT</name></expr> </then><else>: <expr><name>LV_ALIGN_IN_TOP_LEFT</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>



<expr_stmt><expr><call><name>lv_obj_set_protect</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_PROTECT_CHILD_CHG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>last_cord</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>base_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_RTL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>last_cord</name> <operator>=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>last_cord</name> <operator>=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<macro><name>LV_LL_READ_BACK</name><argument_list>(<argument>cont-&gt;child_ll</argument>, <argument>child</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_hidden</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name> <operator>||</operator> <call><name>lv_obj_is_protected</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>LV_PROTECT_POS</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><name>base_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_RTL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>cont</name></expr></argument>, <argument><expr><name>align</name></expr></argument>, <argument><expr><operator>-</operator><name>last_cord</name></expr></argument>, <argument><expr><name>vpad_corr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>cont</name></expr></argument>, <argument><expr><name>align</name></expr></argument>, <argument><expr><name>last_cord</name></expr></argument>, <argument><expr><name>vpad_corr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>last_cord</name> <operator>+=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>lv_obj_clear_protect</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_PROTECT_CHILD_CHG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_cont_layout_center</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>obj_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h_tot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>LV_LL_READ</name><argument_list>(<argument>cont-&gt;child_ll</argument>, <argument>child</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_hidden</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name> <operator>||</operator> <call><name>lv_obj_is_protected</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>LV_PROTECT_POS</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>h_tot</name> <operator>+=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>obj_num</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>

<if_stmt><if>if<condition>(<expr><name>obj_num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>h_tot</name> <operator>-=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>lv_obj_set_protect</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_PROTECT_CHILD_CHG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>last_cord</name> <init>= <expr><operator>-</operator><operator>(</operator><name>h_tot</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<macro><name>LV_LL_READ_BACK</name><argument_list>(<argument>cont-&gt;child_ll</argument>, <argument>child</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_hidden</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name> <operator>||</operator> <call><name>lv_obj_is_protected</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>LV_PROTECT_POS</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_ALIGN_CENTER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>last_cord</name> <operator>+</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last_cord</name> <operator>+=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>lv_obj_clear_protect</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_PROTECT_CHILD_CHG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_cont_layout_pretty</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>child_rs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>child_rc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>child_tmp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w_obj</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>act_y</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>child_rs</name> <operator>=</operator> <call><name>lv_ll_get_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cont</name><operator>-&gt;</operator><name>child_ll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name>child_rs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>lv_obj_set_protect</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_PROTECT_CHILD_CHG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>child_rc</name> <operator>=</operator> <name>child_rs</name></expr>;</expr_stmt> 
<while>while<condition>(<expr><name>child_rs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h_row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w_row</name> <init>=
<expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>obj_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<do>do <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_hidden</name><argument_list>(<argument><expr><name>child_rc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator> <call><name>lv_obj_is_protected</name><argument_list>(<argument><expr><name>child_rc</name></expr></argument>, <argument><expr><name>LV_PROTECT_POS</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>w_row</name> <operator>+</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>child_rc</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>w_obj</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><name>child_rc</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>obj_num</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>child_rc</name> <operator>=</operator> <call><name>lv_ll_get_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cont</name><operator>-&gt;</operator><name>child_ll</name></name></expr></argument>, <argument><expr><name>child_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>w_row</name> <operator>+=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>child_rc</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>h_row</name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name>h_row</name></expr></argument>, <argument><expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>child_rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>obj_num</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>lv_obj_is_protected</name><argument_list>(<argument><expr><name>child_rc</name></expr></argument>, <argument><expr><name>LV_PROTECT_FOLLOW</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>child_rc</name> <operator>=</operator> <call><name>lv_ll_get_prev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cont</name><operator>-&gt;</operator><name>child_ll</name></name></expr></argument>, <argument><expr><name>child_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name>obj_num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>child_rs</name> <operator>=</operator> <name>child_rc</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block> while<condition>(<expr><name>child_rc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>


<if_stmt><if>if<condition>(<expr><name>obj_num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>child_rc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name>child_rc</name></expr></argument>, <argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_TOP_MID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>act_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h_row</name> <operator>=</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>child_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>obj_num</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name>child_rs</name></expr></argument>, <argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_TOP_MID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>act_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>obj_num</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj1</name> <init>= <expr><name>child_rs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj2</name> <init>= <expr><call><name>lv_ll_get_prev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cont</name><operator>-&gt;</operator><name>child_ll</name></name></expr></argument>, <argument><expr><name>child_rs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>w_row</name> <operator>=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>obj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>pad</name> <init>= <expr><operator>(</operator><name>w_obj</name> <operator>-</operator> <name>w_row</name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>, <argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_TOP_LEFT</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>act_y</name> <operator>+</operator> <operator>(</operator><name>h_row</name> <operator>-</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name>obj2</name></expr></argument>, <argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_TOP_RIGHT</name></expr></argument>, <argument><expr><operator>-</operator><name>pad</name></expr></argument>, <argument><expr><name>act_y</name> <operator>+</operator> <operator>(</operator><name>h_row</name> <operator>-</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>obj2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><name>w_row</name> <operator>-=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name> <operator>*</operator> <name>obj_num</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>new_opad</name> <init>= <expr><operator>(</operator><name>w_obj</name> <operator>-</operator> <name>w_row</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>obj_num</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>act_x</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><name>child_tmp</name> <operator>=</operator> <name>child_rs</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>child_tmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_hidden</name><argument_list>(<argument><expr><name>child_tmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator> <call><name>lv_obj_is_protected</name><argument_list>(<argument><expr><name>child_tmp</name></expr></argument>, <argument><expr><name>LV_PROTECT_POS</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name>child_tmp</name></expr></argument>, <argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_TOP_LEFT</name></expr></argument>, <argument><expr><name>act_x</name></expr></argument>,
<argument><expr><name>act_y</name> <operator>+</operator> <operator>(</operator><name>h_row</name> <operator>-</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>child_tmp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>act_x</name> <operator>+=</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>child_tmp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>new_opad</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>child_tmp</name> <operator>==</operator> <name>child_rc</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>child_tmp</name> <operator>=</operator> <call><name>lv_ll_get_prev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cont</name><operator>-&gt;</operator><name>child_ll</name></name></expr></argument>, <argument><expr><name>child_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>child_rc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>act_y</name> <operator>+=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name> <operator>+</operator> <name>h_row</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>child_rs</name> <operator>=</operator> <call><name>lv_ll_get_prev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cont</name><operator>-&gt;</operator><name>child_ll</name></name></expr></argument>, <argument><expr><name>child_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>child_rc</name> <operator>=</operator> <name>child_rs</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>lv_obj_clear_protect</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_PROTECT_CHILD_CHG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_cont_layout_grid</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w_tot</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w_obj</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><call><name>lv_obj_get_child</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w_fit</name> <init>= <expr><call><name>lv_obj_get_width_fit</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h_obj</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><call><name>lv_obj_get_child</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>obj_row</name> <init>= <expr><operator>(</operator><name>w_fit</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>w_obj</name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name><operator>)</operator></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x_ofs</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>obj_row</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x_ofs</name> <operator>=</operator> <name>w_obj</name> <operator>+</operator> <operator>(</operator><name>w_fit</name> <operator>-</operator> <operator>(</operator><name>obj_row</name> <operator>*</operator> <name>w_obj</name><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><name>obj_row</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>x_ofs</name> <operator>=</operator> <name>w_tot</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>w_obj</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y_ofs</name> <init>= <expr><name>h_obj</name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>inner</name></name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>lv_obj_set_protect</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_PROTECT_CHILD_CHG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>act_x</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>act_y</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>obj_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>LV_LL_READ_BACK</name><argument_list>(<argument>cont-&gt;child_ll</argument>, <argument>child</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_hidden</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name> <operator>||</operator> <call><name>lv_obj_is_protected</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>LV_PROTECT_POS</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>obj_row</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_obj_set_pos</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>act_x</name></expr></argument>, <argument><expr><name>act_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>act_x</name> <operator>+=</operator> <name>x_ofs</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lv_obj_set_pos</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>x_ofs</name></expr></argument>, <argument><expr><name>act_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>obj_cnt</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>obj_cnt</name> <operator>&gt;=</operator> <name>obj_row</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>obj_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>act_x</name> <operator>=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>act_y</name> <operator>+=</operator> <name>y_ofs</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>lv_obj_clear_protect</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_PROTECT_CHILD_CHG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_cont_refr_autofit</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_cont_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>fit_left</name></name> <operator>==</operator> <name>LV_FIT_NONE</name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>fit_right</name></name> <operator>==</operator> <name>LV_FIT_NONE</name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>fit_top</name></name> <operator>==</operator> <name>LV_FIT_NONE</name> <operator>&amp;&amp;</operator>
<name><name>ext</name><operator>-&gt;</operator><name>fit_bottom</name></name> <operator>==</operator> <name>LV_FIT_NONE</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>tight_area</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_area_t</name></type> <name>ori</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>child_i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>par_style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_area_t</name></type> <name>flood_area</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flood_area</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>par</name><operator>-&gt;</operator><name>coords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flood_area</name><operator>.</operator><name>x1</name></name> <operator>+=</operator> <name><name>par_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flood_area</name><operator>.</operator><name>x2</name></name> <operator>-=</operator> <name><name>par_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flood_area</name><operator>.</operator><name>y1</name></name> <operator>+=</operator> <name><name>par_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flood_area</name><operator>.</operator><name>y2</name></name> <operator>-=</operator> <name><name>par_style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ori</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tight_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_children</name> <init>= <expr><ternary><condition><expr><call><name>lv_ll_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cont</name><operator>-&gt;</operator><name>child_ll</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>has_children</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tight_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name>LV_COORD_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tight_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name>LV_COORD_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tight_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name>LV_COORD_MIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tight_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name>LV_COORD_MIN</name></expr>;</expr_stmt>

<macro><name>LV_LL_READ</name><argument_list>(<argument>cont-&gt;child_ll</argument>, <argument>child_i</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_hidden</name><argument_list>(<argument><expr><name>child_i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tight_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><name><name>tight_area</name><operator>.</operator><name>x1</name></name></expr></argument>, <argument><expr><name><name>child_i</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tight_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><name><name>tight_area</name><operator>.</operator><name>y1</name></name></expr></argument>, <argument><expr><name><name>child_i</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tight_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>tight_area</name><operator>.</operator><name>x2</name></name></expr></argument>, <argument><expr><name><name>child_i</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tight_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>tight_area</name><operator>.</operator><name>y2</name></name></expr></argument>, <argument><expr><name><name>child_i</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name><name>tight_area</name><operator>.</operator><name>x1</name></name> <operator>-=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tight_area</name><operator>.</operator><name>x2</name></name> <operator>+=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tight_area</name><operator>.</operator><name>y1</name></name> <operator>-=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tight_area</name><operator>.</operator><name>y2</name></name> <operator>+=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>new_area</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_area</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ori</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>fit_left</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_FIT_TIGHT</name></expr>:</case> <expr_stmt><expr><name><name>new_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>tight_area</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_FIT_FLOOD</name></expr>:</case> <expr_stmt><expr><name><name>new_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>flood_area</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_FIT_FILL</name></expr>:</case> <expr_stmt><expr><name><name>new_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <ternary><condition><expr><name>has_children</name></expr> ?</condition><then> <expr><call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><name><name>tight_area</name><operator>.</operator><name>x1</name></name></expr></argument>, <argument><expr><name><name>flood_area</name><operator>.</operator><name>x1</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>flood_area</name><operator>.</operator><name>x1</name></name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>fit_right</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_FIT_TIGHT</name></expr>:</case> <expr_stmt><expr><name><name>new_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>tight_area</name><operator>.</operator><name>x2</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_FIT_FLOOD</name></expr>:</case> <expr_stmt><expr><name><name>new_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>flood_area</name><operator>.</operator><name>x2</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_FIT_FILL</name></expr>:</case> <expr_stmt><expr><name><name>new_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <ternary><condition><expr><name>has_children</name></expr> ?</condition><then> <expr><call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>tight_area</name><operator>.</operator><name>x2</name></name></expr></argument>, <argument><expr><name><name>flood_area</name><operator>.</operator><name>x2</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>flood_area</name><operator>.</operator><name>x2</name></name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>fit_top</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_FIT_TIGHT</name></expr>:</case> <expr_stmt><expr><name><name>new_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>tight_area</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_FIT_FLOOD</name></expr>:</case> <expr_stmt><expr><name><name>new_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>flood_area</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_FIT_FILL</name></expr>:</case> <expr_stmt><expr><name><name>new_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <ternary><condition><expr><name>has_children</name></expr> ?</condition><then> <expr><call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><name><name>tight_area</name><operator>.</operator><name>y1</name></name></expr></argument>, <argument><expr><name><name>flood_area</name><operator>.</operator><name>y1</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>flood_area</name><operator>.</operator><name>y1</name></name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>fit_bottom</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_FIT_TIGHT</name></expr>:</case> <expr_stmt><expr><name><name>new_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>tight_area</name><operator>.</operator><name>y2</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_FIT_FLOOD</name></expr>:</case> <expr_stmt><expr><name><name>new_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>flood_area</name><operator>.</operator><name>y2</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_FIT_FILL</name></expr>:</case> <expr_stmt><expr><name><name>new_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <ternary><condition><expr><name>has_children</name></expr> ?</condition><then> <expr><call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>tight_area</name><operator>.</operator><name>y2</name></name></expr></argument>, <argument><expr><name><name>flood_area</name><operator>.</operator><name>y2</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>flood_area</name><operator>.</operator><name>y2</name></name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>


<if_stmt><if>if<condition>(<expr><name><name>cont</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>!=</operator> <name><name>new_area</name><operator>.</operator><name>x1</name></name> <operator>||</operator> <name><name>cont</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>!=</operator> <name><name>new_area</name><operator>.</operator><name>y1</name></name> <operator>||</operator> <name><name>cont</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x2</name></name> <operator>!=</operator> <name><name>new_area</name><operator>.</operator><name>x2</name></name> <operator>||</operator>
<name><name>cont</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y2</name></name> <operator>!=</operator> <name><name>new_area</name><operator>.</operator><name>y2</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cont</name><operator>-&gt;</operator><name>coords</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name><name>cont</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>LV_SIGNAL_CORD_CHG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ori</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name><name>par</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>LV_SIGNAL_CHILD_CHG</name></expr></argument>, <argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_auto_realign</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_obj_realign</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<macro><name>LV_LL_READ</name><argument_list>(<argument>cont-&gt;child_ll</argument>, <argument>child_i</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name><name>child_i</name><operator>-&gt;</operator><name>signal_cb</name></name><argument_list>(<argument><expr><name>child_i</name></expr></argument>, <argument><expr><name>LV_SIGNAL_PARENT_SIZE_CHG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
