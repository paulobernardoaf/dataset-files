<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_objx\lv_btn.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_btn.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_BTN</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_group.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_draw/lv_draw.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_themes/lv_theme.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_area.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_color.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_math.h"</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_OBJX_NAME</name></cpp:macro> <cpp:value>"lv_btn"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_BTN_INK_VALUE_MAX</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_BTN_INK_VALUE_MAX_SHIFT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>








<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lv_btn_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_btn_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>&amp;&amp;</operator> <name>LV_BTN_INK_EFFECT</name></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_btn_ink_effect_anim</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>, <parameter><decl><type><name>lv_anim_value_t</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_btn_ink_effect_anim_ready</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>ancestor_signal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>lv_design_cb_t</name></type> <name>ancestor_design</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>&amp;&amp;</operator> <name>LV_BTN_INK_EFFECT</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>lv_coord_t</name></type> <name>ink_act_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>ink_obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>lv_btn_state_t</name></type> <name>ink_bg_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>lv_btn_state_t</name></type> <name>ink_top_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>ink_ready</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>ink_playback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>lv_point_t</name></type> <name>ink_point</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>















<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_btn_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"button create started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>new_btn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>new_btn</name> <operator>=</operator> <call><name>lv_cont_create</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_btn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>new_btn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ancestor_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><name>new_btn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ancestor_design</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_design</name> <operator>=</operator> <call><name>lv_obj_get_design_cb</name><argument_list>(<argument><expr><name>new_btn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>lv_btn_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_allocate_ext_attr</name><argument_list>(<argument><expr><name>new_btn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_btn_ext_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>LV_BTN_STATE_REL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>LV_BTN_STATE_REL</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_btn_rel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>LV_BTN_STATE_PR</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_btn_pr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>LV_BTN_STATE_TGL_REL</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_btn_tgl_rel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>LV_BTN_STATE_TGL_PR</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_btn_tgl_pr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>LV_BTN_STATE_INA</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_btn_ina</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>toggle</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>&amp;&amp;</operator> <name>LV_BTN_INK_EFFECT</name></expr></cpp:if>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ink_in_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ink_wait_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ink_out_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><name>new_btn</name></expr></argument>, <argument><expr><name>lv_btn_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_design_cb</name><argument_list>(<argument><expr><name>new_btn</name></expr></argument>, <argument><expr><name>lv_btn_design</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>par</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_btn_set_layout</name><argument_list>(<argument><expr><name>new_btn</name></expr></argument>, <argument><expr><name>LV_LAYOUT_CENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_set_click</name><argument_list>(<argument><expr><name>new_btn</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<decl_stmt><decl><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>th</name> <init>= <expr><call><name>lv_theme_get_current</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>th</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name>new_btn</name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_REL</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>btn</name><operator>.</operator><name>rel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name>new_btn</name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_PR</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>btn</name><operator>.</operator><name>pr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name>new_btn</name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_TGL_REL</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>btn</name><operator>.</operator><name>tgl_rel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name>new_btn</name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_TGL_PR</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>btn</name><operator>.</operator><name>tgl_pr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name>new_btn</name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_INA</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>btn</name><operator>.</operator><name>ina</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lv_obj_set_style</name><argument_list>(<argument><expr><name>new_btn</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>LV_BTN_STATE_REL</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<decl_stmt><decl><type><name>lv_btn_ext_t</name> <modifier>*</modifier></type> <name>copy_ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>toggle</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>toggle</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>&amp;&amp;</operator> <name>LV_BTN_INK_EFFECT</name></expr></cpp:if>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ink_in_time</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>ink_in_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ink_wait_time</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>ink_wait_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ink_out_time</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>ink_out_time</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>ext</name><operator>-&gt;</operator><name>styles</name></name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>styles</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>styles</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lv_obj_refresh_style</name><argument_list>(<argument><expr><name>new_btn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"button created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_btn</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>void</name></type> <name>lv_btn_set_toggle</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>tgl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btn_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>toggle</name></name> <operator>=</operator> <ternary><condition><expr><name>tgl</name> <operator>!=</operator> <name>false</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_btn_set_state</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>, <parameter><decl><type><name>lv_btn_state_t</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btn_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>state</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_style</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>lv_btn_toggle</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btn_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_BTN_STATE_REL</name></expr>:</case> <expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_BTN_STATE_TGL_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_BTN_STATE_PR</name></expr>:</case> <expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_BTN_STATE_TGL_PR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_BTN_STATE_TGL_REL</name></expr>:</case> <expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_BTN_STATE_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_BTN_STATE_TGL_PR</name></expr>:</case> <expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_BTN_STATE_PR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_btn_set_ink_in_time</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>&amp;&amp;</operator> <name>LV_BTN_INK_EFFECT</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_btn_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ink_in_time</name></name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>btn</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>time</name></expr>;</expr_stmt> 
<macro><name>LV_LOG_WARN</name><argument_list>(<argument><literal type="string">"`lv_btn_set_ink_ink_time` has no effect if LV_BTN_INK_EFEFCT or LV_USE_ANIMATION "</literal>
<literal type="string">"is disabled"</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_btn_set_ink_wait_time</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>&amp;&amp;</operator> <name>LV_BTN_INK_EFFECT</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_btn_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ink_wait_time</name></name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>btn</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>time</name></expr>;</expr_stmt> 
<macro><name>LV_LOG_WARN</name><argument_list>(<argument><literal type="string">"`lv_btn_set_ink_wait_time` has no effect if LV_BTN_INK_EFEFCT or LV_USE_ANIMATION "</literal>
<literal type="string">"is disabled"</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_btn_set_ink_out_time</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>&amp;&amp;</operator> <name>LV_BTN_INK_EFFECT</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_btn_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ink_out_time</name></name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>btn</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>time</name></expr>;</expr_stmt> 
<macro><name>LV_LOG_WARN</name><argument_list>(<argument><literal type="string">"`lv_btn_set_ink_out_time` has no effect if LV_BTN_INK_EFEFCT or LV_USE_ANIMATION "</literal>
<literal type="string">"is disabled"</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>lv_btn_set_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>, <parameter><decl><type><name>lv_btn_style_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btn_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_BTN_STYLE_REL</name></expr>:</case> <expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>LV_BTN_STATE_REL</name></expr>]</index></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_BTN_STYLE_PR</name></expr>:</case> <expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>LV_BTN_STATE_PR</name></expr>]</index></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_BTN_STYLE_TGL_REL</name></expr>:</case> <expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>LV_BTN_STATE_TGL_REL</name></expr>]</index></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_BTN_STYLE_TGL_PR</name></expr>:</case> <expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>LV_BTN_STATE_TGL_PR</name></expr>]</index></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_BTN_STYLE_INA</name></expr>:</case> <expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>LV_BTN_STATE_INA</name></expr>]</index></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>


<expr_stmt><expr><call><name>lv_obj_set_style</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><name>lv_btn_state_t</name></type> <name>lv_btn_get_state</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btn_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>state</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>lv_btn_get_toggle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_btn_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name><name>ext</name><operator>-&gt;</operator><name>toggle</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><name>uint16_t</name></type> <name>lv_btn_get_ink_in_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>&amp;&amp;</operator> <name>LV_BTN_INK_EFFECT</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_btn_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>ink_in_time</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>btn</name></expr>;</expr_stmt> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><name>uint16_t</name></type> <name>lv_btn_get_ink_wait_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>&amp;&amp;</operator> <name>LV_BTN_INK_EFFECT</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_btn_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>ink_wait_time</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>btn</name></expr>;</expr_stmt> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><name>uint16_t</name></type> <name>lv_btn_get_ink_out_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>&amp;&amp;</operator> <name>LV_BTN_INK_EFFECT</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_btn_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>ink_out_time</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>btn</name></expr>;</expr_stmt> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>







<function><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>lv_btn_get_style</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>, <parameter><decl><type><name>lv_btn_style_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_btn_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_btn_state_t</name></type> <name>state</name> <init>= <expr><call><name>lv_btn_get_state</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<if_stmt><if>if<condition>(<expr><operator>(</operator><name>type</name> <operator>==</operator> <name>LV_BTN_STYLE_REL</name> <operator>&amp;&amp;</operator> <name>state</name> <operator>==</operator> <name>LV_BTN_STATE_REL</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>type</name> <operator>==</operator> <name>LV_BTN_STYLE_PR</name> <operator>&amp;&amp;</operator> <name>state</name> <operator>==</operator> <name>LV_BTN_STATE_PR</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>type</name> <operator>==</operator> <name>LV_BTN_STYLE_TGL_REL</name> <operator>&amp;&amp;</operator> <name>state</name> <operator>==</operator> <name>LV_BTN_STATE_TGL_REL</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>type</name> <operator>==</operator> <name>LV_BTN_STYLE_TGL_PR</name> <operator>&amp;&amp;</operator> <name>state</name> <operator>==</operator> <name>LV_BTN_STATE_TGL_PR</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>type</name> <operator>==</operator> <name>LV_BTN_STYLE_INA</name> <operator>&amp;&amp;</operator> <name>state</name> <operator>==</operator> <name>LV_BTN_STATE_INA</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_BTN_STYLE_REL</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>LV_BTN_STATE_REL</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_BTN_STYLE_PR</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>LV_BTN_STATE_PR</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_BTN_STYLE_TGL_REL</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>LV_BTN_STATE_TGL_REL</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_BTN_STYLE_TGL_PR</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>LV_BTN_STATE_TGL_PR</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_BTN_STYLE_INA</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>LV_BTN_STATE_INA</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>style</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>style</name></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>bool</name></type> <name>lv_btn_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_COVER_CHK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_DRAW_MAIN</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>&amp;&amp;</operator> <name>LV_BTN_INK_EFFECT</name></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>btn</name> <operator>!=</operator> <name>ink_obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ancestor_design</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name> <init>= <expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_btn_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>ink_playback</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_style_t</name></type> <name>style_tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>style_tmp</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>ink_bg_state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style_tmp</name><operator>.</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>ink_top_state</name></expr>]</index></name><operator>-&gt;</operator><name><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>btn</name><operator>-&gt;</operator><name>coords</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>style_tmp</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>r_max</name> <init>= <expr><call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lv_area_t</name></type> <name>cir_area</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>coord_state</name> <init>=
<expr><ternary><condition><expr><name>ink_act_value</name> <operator>&lt;</operator> <name>LV_BTN_INK_VALUE_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>ink_act_value</name></expr> </then><else>: <expr><name>LV_BTN_INK_VALUE_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_point_t</name></type> <name>p_act</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_act</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>ink_point</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_act</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>ink_point</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>x_err</name> <init>= <expr><operator>(</operator><name><name>btn</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name>w</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <name><name>p_act</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>y_err</name> <init>= <expr><operator>(</operator><name><name>btn</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <name>h</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <name><name>p_act</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_act</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <operator>(</operator><name>x_err</name> <operator>*</operator> <name>coord_state</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>LV_BTN_INK_VALUE_MAX_SHIFT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_act</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <operator>(</operator><name>y_err</name> <operator>*</operator> <name>coord_state</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>LV_BTN_INK_VALUE_MAX_SHIFT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>half_side</name> <init>= <expr><call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cir_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>p_act</name><operator>.</operator><name>x</name></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>half_side</name> <operator>*</operator> <name>coord_state</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>LV_BTN_INK_VALUE_MAX_SHIFT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cir_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>p_act</name><operator>.</operator><name>y</name></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>half_side</name> <operator>*</operator> <name>coord_state</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>LV_BTN_INK_VALUE_MAX_SHIFT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cir_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>p_act</name><operator>.</operator><name>x</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>half_side</name> <operator>*</operator> <name>coord_state</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>LV_BTN_INK_VALUE_MAX_SHIFT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cir_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>p_act</name><operator>.</operator><name>y</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>half_side</name> <operator>*</operator> <name>coord_state</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>LV_BTN_INK_VALUE_MAX_SHIFT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_area_intersect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cir_area</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>btn</name><operator>-&gt;</operator><name>coords</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>cir_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>r_state</name> <init>=
<expr><ternary><condition><expr><name>ink_act_value</name> <operator>&gt;</operator> <name>LV_BTN_INK_VALUE_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>ink_act_value</name> <operator>-</operator> <name>LV_BTN_INK_VALUE_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>style_tmp</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>ink_top_state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style_tmp</name><operator>.</operator><name>body</name><operator>.</operator><name>radius</name></name> <operator>=</operator> <name>r_max</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>ink_bg_state</name></expr>]</index></name><operator>-&gt;</operator><name><name>body</name><operator>.</operator><name>radius</name></name> <operator>-</operator> <name>r_max</name><operator>)</operator> <operator>*</operator> <name>r_state</name><operator>)</operator> <operator>&gt;&gt;</operator>
<operator>(</operator><name>LV_BTN_INK_VALUE_MAX_SHIFT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style_tmp</name><operator>.</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cir_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>style_tmp</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>lv_style_t</name></type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>ink_bg_state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_style_mix</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>ink_bg_state</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>ink_top_state</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name>ink_act_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>btn</name><operator>-&gt;</operator><name>coords</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ancestor_design</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_DRAW_POST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ancestor_design</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_btn_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name></decl>;</decl_stmt>


<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ancestor_signal</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_obj_handle_get_type_signal</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_btn_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>tgl</name> <init>= <expr><call><name>lv_btn_get_toggle</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESSED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LV_BTN_STATE_REL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_BTN_STATE_PR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>&amp;&amp;</operator> <name>LV_BTN_INK_EFFECT</name></expr></cpp:if>
<expr_stmt><expr><name>ink_bg_state</name> <operator>=</operator> <name>LV_BTN_STATE_REL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ink_top_state</name> <operator>=</operator> <name>LV_BTN_STATE_PR</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LV_BTN_STATE_TGL_REL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_BTN_STATE_TGL_PR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>&amp;&amp;</operator> <name>LV_BTN_INK_EFFECT</name></expr></cpp:if>
<expr_stmt><expr><name>ink_bg_state</name> <operator>=</operator> <name>LV_BTN_STATE_TGL_REL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ink_top_state</name> <operator>=</operator> <name>LV_BTN_STATE_TGL_PR</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>&amp;&amp;</operator> <name>LV_BTN_INK_EFFECT</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>ink_obj</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ink_obj</name> <operator>!=</operator> <name>btn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_anim_del</name><argument_list>(<argument><expr><name>ink_obj</name></expr></argument>, <argument><expr><operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_btn_ink_effect_anim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>ink_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ink_obj</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>ink_in_time</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ink_obj</name> <operator>=</operator> <name>btn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ink_playback</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ink_ready</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_indev_get_point</name><argument_list>(<argument><expr><call><name>lv_indev_get_act</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ink_point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_anim_t</name></type> <name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>var</name></name> <operator>=</operator> <name>btn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>LV_BTN_INK_VALUE_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>exec_cb</name></name> <operator>=</operator> <operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_btn_ink_effect_anim</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>path_cb</name></name> <operator>=</operator> <name>lv_anim_path_linear</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>ready_cb</name></name> <operator>=</operator> <name>lv_btn_ink_effect_anim_ready</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>act_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>ink_in_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_anim_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESS_LOST</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LV_BTN_STATE_PR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_BTN_STATE_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LV_BTN_STATE_TGL_PR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_BTN_STATE_TGL_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESSING</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_indev_is_dragging</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LV_BTN_STATE_PR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_BTN_STATE_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LV_BTN_STATE_TGL_PR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_BTN_STATE_TGL_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_RELEASED</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><call><name>lv_indev_is_dragging</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>toggled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LV_BTN_STATE_PR</name> <operator>&amp;&amp;</operator> <name>tgl</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_BTN_STATE_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>toggled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LV_BTN_STATE_TGL_PR</name> <operator>&amp;&amp;</operator> <name>tgl</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_BTN_STATE_TGL_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>toggled</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LV_BTN_STATE_PR</name> <operator>&amp;&amp;</operator> <name>tgl</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_BTN_STATE_TGL_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>toggled</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LV_BTN_STATE_TGL_PR</name> <operator>&amp;&amp;</operator> <name>tgl</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_BTN_STATE_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>toggled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>tgl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_event_send</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_EVENT_VALUE_CHANGED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>toggled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LV_BTN_STATE_PR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_BTN_STATE_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LV_BTN_STATE_TGL_PR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_BTN_STATE_TGL_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>&amp;&amp;</operator> <name>LV_BTN_INK_EFFECT</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>toggle</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ink_top_state</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>ink_ready</name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>ink_out_time</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ink_obj</name> <operator>=</operator> <name>btn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ink_playback</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>lv_indev_get_point</name><argument_list>(<argument><expr><call><name>lv_indev_get_act</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ink_point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_anim_t</name></type> <name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>var</name></name> <operator>=</operator> <name>ink_obj</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name>LV_BTN_INK_VALUE_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>exec_cb</name></name> <operator>=</operator> <operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_btn_ink_effect_anim</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>path_cb</name></name> <operator>=</operator> <name>lv_anim_path_linear</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>ready_cb</name></name> <operator>=</operator> <name>lv_btn_ink_effect_anim_ready</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>act_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>ink_out_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_anim_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CONTROL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>param</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_RIGHT</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>LV_KEY_UP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>lv_btn_get_toggle</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_BTN_STATE_TGL_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>state</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_event_send</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_EVENT_VALUE_CHANGED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_LEFT</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>LV_KEY_DOWN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>lv_btn_get_toggle</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_BTN_STATE_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_event_send</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_EVENT_VALUE_CHANGED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CLEANUP</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>&amp;&amp;</operator> <name>LV_BTN_INK_EFFECT</name></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>btn</name> <operator>==</operator> <name>ink_obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_anim_del</name><argument_list>(<argument><expr><name>ink_obj</name></expr></argument>, <argument><expr><operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_btn_ink_effect_anim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ink_obj</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>&amp;&amp;</operator> <name>LV_BTN_INK_EFFECT</name></expr></cpp:if>






<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_btn_ink_effect_anim</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>, <parameter><decl><type><name>lv_anim_value_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>btn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ink_act_value</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_btn_ink_effect_anim_ready</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>lv_btn_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ink_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_btn_state_t</name></type> <name>state</name> <init>= <expr><call><name>lv_btn_get_state</name><argument_list>(<argument><expr><name>ink_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>ink_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ink_ready</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>state</name> <operator>==</operator> <name>LV_BTN_STATE_REL</name> <operator>||</operator> <name>state</name> <operator>==</operator> <name>LV_BTN_STATE_TGL_REL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>toggle</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ink_playback</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_anim_t</name></type> <name>new_a</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new_a</name><operator>.</operator><name>var</name></name> <operator>=</operator> <name>ink_obj</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_a</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name>LV_BTN_INK_VALUE_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_a</name><operator>.</operator><name>end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_a</name><operator>.</operator><name>exec_cb</name></name> <operator>=</operator> <operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_btn_ink_effect_anim</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_a</name><operator>.</operator><name>path_cb</name></name> <operator>=</operator> <name>lv_anim_path_linear</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_a</name><operator>.</operator><name>ready_cb</name></name> <operator>=</operator> <name>lv_btn_ink_effect_anim_ready</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_a</name><operator>.</operator><name>act_time</name></name> <operator>=</operator> <operator>-</operator><name><name>ext</name><operator>-&gt;</operator><name>ink_wait_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_a</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>ink_out_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_a</name><operator>.</operator><name>playback</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_a</name><operator>.</operator><name>playback_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_a</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_a</name><operator>.</operator><name>repeat_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_anim_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ink_playback</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ink_obj</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
