<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_objx\lv_list.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_list.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_LIST</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_group.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_themes/lv_theme.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_anim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_math.h"</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_OBJX_NAME</name></cpp:macro> <cpp:value>"lv_list"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LIST_LAYOUT_DEF</name></cpp:macro> <cpp:value>LV_LAYOUT_COL_M</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LV_LIST_DEF_ANIM_TIME</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LIST_DEF_ANIM_TIME</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_list_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_list_btn_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_list_btn_single_select</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lv_list_is_list_btn</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>list_btn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lv_list_is_list_img</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>list_btn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lv_list_is_list_label</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>list_btn</name></decl></parameter>)</parameter_list>;</function_decl>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_IMG</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>img_signal</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>label_signal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>ancestor_page_signal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>ancestor_btn_signal</name></decl>;</decl_stmt>
















<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_list_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"list create started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>new_list</name> <init>= <expr><call><name>lv_page_create</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>new_list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ancestor_page_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_page_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_list_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_allocate_ext_attr</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_list_ext_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>style_img</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_REL</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_btn_rel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_PR</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_btn_pr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_TGL_REL</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_btn_tgl_rel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_TGL_PR</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_btn_tgl_pr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_INA</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>lv_style_btn_ina</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>single_mode</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>last_sel</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>selected_btn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>last_clicked_btn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>, <argument><expr><name>lv_list_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_page_set_anim_time</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>, <argument><expr><name>LV_LIST_DEF_ANIM_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_page_set_scrl_fit2</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>, <argument><expr><name>LV_FIT_FLOOD</name></expr></argument>, <argument><expr><name>LV_FIT_TIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_size</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>LV_DPI</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>LV_DPI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_page_set_scrl_layout</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>, <argument><expr><name>LV_LIST_LAYOUT_DEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_list_set_sb_mode</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>, <argument><expr><name>LV_SB_MODE_DRAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>th</name> <init>= <expr><call><name>lv_theme_get_current</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>th</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_list_set_style</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>, <argument><expr><name>LV_LIST_STYLE_BG</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>list</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_list_set_style</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>, <argument><expr><name>LV_LIST_STYLE_SCRL</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>list</name><operator>.</operator><name>scrl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_list_set_style</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>, <argument><expr><name>LV_LIST_STYLE_SB</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>list</name><operator>.</operator><name>sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_list_set_style</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>, <argument><expr><name>LV_LIST_STYLE_BTN_REL</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>list</name><operator>.</operator><name>btn</name><operator>.</operator><name>rel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_list_set_style</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>, <argument><expr><name>LV_LIST_STYLE_BTN_PR</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>list</name><operator>.</operator><name>btn</name><operator>.</operator><name>pr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_list_set_style</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>, <argument><expr><name>LV_LIST_STYLE_BTN_TGL_REL</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>list</name><operator>.</operator><name>btn</name><operator>.</operator><name>tgl_rel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_list_set_style</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>, <argument><expr><name>LV_LIST_STYLE_BTN_TGL_PR</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>list</name><operator>.</operator><name>btn</name><operator>.</operator><name>tgl_pr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_list_set_style</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>, <argument><expr><name>LV_LIST_STYLE_BTN_INA</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>list</name><operator>.</operator><name>btn</name><operator>.</operator><name>ina</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lv_list_set_style</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>, <argument><expr><name>LV_LIST_STYLE_BG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_transp_fit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_list_set_style</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>, <argument><expr><name>LV_LIST_STYLE_SCRL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>lv_list_ext_t</name> <modifier>*</modifier></type> <name>copy_ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy_btn</name> <init>= <expr><call><name>lv_list_get_next_btn</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>copy_btn</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>img_src</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_IMG</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy_img</name> <init>= <expr><call><name>lv_list_get_btn_img</name><argument_list>(<argument><expr><name>copy_btn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>copy_img</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>img_src</name> <operator>=</operator> <call><name>lv_img_get_src</name><argument_list>(<argument><expr><name>copy_img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>lv_list_add_btn</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>, <argument><expr><name>img_src</name></expr></argument>, <argument><expr><call><name>lv_list_get_btn_text</name><argument_list>(<argument><expr><name>copy_btn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>copy_btn</name> <operator>=</operator> <call><name>lv_list_get_next_btn</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>copy_btn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>lv_list_set_style</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>, <argument><expr><name>LV_LIST_STYLE_BTN_REL</name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_REL</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_list_set_style</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>, <argument><expr><name>LV_LIST_STYLE_BTN_PR</name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_PR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_list_set_style</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>, <argument><expr><name>LV_LIST_STYLE_BTN_TGL_REL</name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_TGL_REL</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_list_set_style</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>, <argument><expr><name>LV_LIST_STYLE_BTN_TGL_PR</name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_TGL_REL</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_list_set_style</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>, <argument><expr><name>LV_LIST_STYLE_BTN_INA</name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_INA</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lv_obj_refresh_style</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"list created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_list</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>lv_list_clean</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>scrl</name> <init>= <expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_obj_clean</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>lv_list_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_list_add_btn</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>img_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>last_btn</name> <init>= <expr><call><name>lv_list_get_prev_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>pos_x_ori</name> <init>= <expr><call><name>lv_obj_get_x</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>pos_y_ori</name> <init>= <expr><call><name>lv_obj_get_y</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lv_list_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>liste</name></decl>;</decl_stmt>
<expr_stmt><expr><name>liste</name> <operator>=</operator> <call><name>lv_btn_create</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>ancestor_btn_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_btn_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><name>liste</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name>liste</name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_REL</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_REL</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name>liste</name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_PR</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_PR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name>liste</name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_TGL_REL</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_TGL_REL</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name>liste</name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_TGL_PR</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_TGL_PR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name>liste</name></expr></argument>, <argument><expr><name>LV_BTN_STYLE_INA</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_INA</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_page_glue_obj</name><argument_list>(<argument><expr><name>liste</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_btn_set_layout</name><argument_list>(<argument><expr><name>liste</name></expr></argument>, <argument><expr><name>LV_LAYOUT_ROW_M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_layout_t</name></type> <name>list_layout</name> <init>= <expr><call><name>lv_list_get_layout</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>layout_ver</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>list_layout</name> <operator>==</operator> <name>LV_LAYOUT_COL_M</name> <operator>||</operator> <name>list_layout</name> <operator>==</operator> <name>LV_LAYOUT_COL_L</name> <operator>||</operator> <name>list_layout</name> <operator>==</operator> <name>LV_LAYOUT_COL_R</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>layout_ver</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>layout_ver</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_btn_set_fit2</name><argument_list>(<argument><expr><name>liste</name></expr></argument>, <argument><expr><name>LV_FIT_FLOOD</name></expr></argument>, <argument><expr><name>LV_FIT_TIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w</name> <init>= <expr><ternary><condition><expr><name>last_btn</name></expr> ?</condition><then> <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>last_btn</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><name>LV_DPI</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_btn_set_fit2</name><argument_list>(<argument><expr><name>liste</name></expr></argument>, <argument><expr><name>LV_FIT_NONE</name></expr></argument>, <argument><expr><name>LV_FIT_TIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_width</name><argument_list>(<argument><expr><name>liste</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>lv_obj_set_protect</name><argument_list>(<argument><expr><name>liste</name></expr></argument>, <argument><expr><name>LV_PROTECT_PRESS_LOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><name>liste</name></expr></argument>, <argument><expr><name>lv_list_btn_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_IMG</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>img</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>img_src</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>img</name> <operator>=</operator> <call><name>lv_img_create</name><argument_list>(<argument><expr><name>liste</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_img_set_src</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name>img_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_style</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>style_img</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_click</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>img_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>img_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><name>txt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>btn_hor_pad</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STYLE_REL</name></expr>]</index></name><operator>-&gt;</operator><name><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name> <operator>-</operator>
<name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STYLE_REL</name></expr>]</index></name><operator>-&gt;</operator><name><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name> <init>= <expr><call><name>lv_label_create</name><argument_list>(<argument><expr><name>liste</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_label_set_text</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_click</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_label_set_long_mode</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_LABEL_LONG_SROLL_CIRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name>liste</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LV_BIDI_DIR_RTL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_obj_set_width</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name><name>label</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x2</name></name> <operator>-</operator> <name><name>liste</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>-</operator> <name>btn_hor_pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_obj_set_width</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name><name>liste</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x2</name></name> <operator>-</operator> <name><name>label</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>-</operator> <name>btn_hor_pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name>label_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>label_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>


<block>{<block_content>
<decl_stmt><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>g</name> <init>= <expr><call><name>lv_obj_get_group</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>lv_group_get_focused</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_list_set_btn_selected</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>liste</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>lv_obj_set_pos</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>pos_x_ori</name></expr></argument>, <argument><expr><name>pos_y_ori</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>liste</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>bool</name></type> <name>lv_list_remove</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_list_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>e</name> <init>= <expr><call><name>lv_list_get_next_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <name>index</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_obj_del</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>lv_list_get_next_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>void</name></type> <name>lv_list_set_single_mode</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_list_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>single_mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>







<function><type><name>void</name></type> <name>lv_list_set_btn_selected</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>btn</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><literal type="string">"lv_btn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_list_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>selected_btn</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_btn_state_t</name></type> <name>s</name> <init>= <expr><call><name>lv_btn_get_state</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>selected_btn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>s</name> <operator>==</operator> <name>LV_BTN_STATE_PR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>selected_btn</name></name></expr></argument>, <argument><expr><name>LV_BTN_STATE_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>s</name> <operator>==</operator> <name>LV_BTN_STATE_TGL_PR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>selected_btn</name></name></expr></argument>, <argument><expr><name>LV_BTN_STATE_TGL_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>selected_btn</name></name> <operator>=</operator> <name>btn</name></expr>;</expr_stmt>



<if_stmt><if>if<condition>(<expr><name>btn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>last_sel</name></name> <operator>=</operator> <name>btn</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>selected_btn</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_btn_state_t</name></type> <name>s</name> <init>= <expr><call><name>lv_btn_get_state</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>selected_btn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>s</name> <operator>==</operator> <name>LV_BTN_STATE_REL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>selected_btn</name></name></expr></argument>, <argument><expr><name>LV_BTN_STATE_PR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>s</name> <operator>==</operator> <name>LV_BTN_STATE_TGL_REL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>selected_btn</name></name></expr></argument>, <argument><expr><name>LV_BTN_STATE_TGL_PR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_page_focus</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>selected_btn</name></name></expr></argument>, <argument><expr><name>LV_ANIM_ON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function><type><name>void</name></type> <name>lv_list_set_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>lv_list_style_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_list_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_btn_style_t</name></type> <name>btn_style_refr</name> <init>= <expr><name>LV_BTN_STYLE_REL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_LIST_STYLE_BG</name></expr>:</case>
<expr_stmt><expr><call><name>lv_page_set_style</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_BG</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
<case>case <expr><name>LV_LIST_STYLE_SCRL</name></expr>:</case> <expr_stmt><expr><call><name>lv_page_set_style</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_SCRL</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_LIST_STYLE_SB</name></expr>:</case> <expr_stmt><expr><call><name>lv_page_set_style</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_SB</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_LIST_STYLE_EDGE_FLASH</name></expr>:</case> <expr_stmt><expr><call><name>lv_page_set_style</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_EDGE_FLASH</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_LIST_STYLE_BTN_REL</name></expr>:</case>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_REL</name></expr>]</index></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>
<expr_stmt><expr><name>btn_style_refr</name> <operator>=</operator> <name>LV_BTN_STYLE_REL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_LIST_STYLE_BTN_PR</name></expr>:</case>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_PR</name></expr>]</index></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>
<expr_stmt><expr><name>btn_style_refr</name> <operator>=</operator> <name>LV_BTN_STYLE_PR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_LIST_STYLE_BTN_TGL_REL</name></expr>:</case>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_TGL_REL</name></expr>]</index></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>
<expr_stmt><expr><name>btn_style_refr</name> <operator>=</operator> <name>LV_BTN_STYLE_TGL_REL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_LIST_STYLE_BTN_TGL_PR</name></expr>:</case>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_TGL_PR</name></expr>]</index></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>
<expr_stmt><expr><name>btn_style_refr</name> <operator>=</operator> <name>LV_BTN_STYLE_TGL_PR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_LIST_STYLE_BTN_INA</name></expr>:</case>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_INA</name></expr>]</index></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>
<expr_stmt><expr><name>btn_style_refr</name> <operator>=</operator> <name>LV_BTN_STYLE_INA</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>LV_LIST_STYLE_BTN_PR</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>LV_LIST_STYLE_BTN_REL</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>LV_LIST_STYLE_BTN_TGL_REL</name> <operator>||</operator>
<name>type</name> <operator>==</operator> <name>LV_LIST_STYLE_BTN_TGL_PR</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>LV_LIST_STYLE_BTN_INA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>btn</name> <operator>=</operator> <call><name>lv_list_get_prev_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>btn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_btn_set_style</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>btn_style_refr</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>btn_style_refr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>btn</name> <operator>=</operator> <call><name>lv_list_get_prev_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_list_set_layout</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>lv_layout_t</name></type> <name>layout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>layout</name> <operator>==</operator> <call><name>lv_list_get_layout</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name> <init>= <expr><call><name>lv_list_get_prev_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<while>while<condition>(<expr><name>btn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>layout</name> <operator>==</operator> <name>LV_LAYOUT_COL_M</name> <operator>||</operator> <name>layout</name> <operator>==</operator> <name>LV_LAYOUT_COL_L</name> <operator>||</operator> <name>layout</name> <operator>==</operator> <name>LV_LAYOUT_COL_R</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_btn_set_fit2</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_FIT_FLOOD</name></expr></argument>, <argument><expr><name>LV_FIT_TIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>layout</name> <operator>==</operator> <name>LV_LAYOUT_ROW_M</name> <operator>||</operator> <name>layout</name> <operator>==</operator> <name>LV_LAYOUT_ROW_T</name> <operator>||</operator> <name>layout</name> <operator>==</operator> <name>LV_LAYOUT_ROW_B</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_btn_set_fit</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_FIT_TIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>btn</name> <operator>=</operator> <call><name>lv_list_get_prev_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>layout</name> <operator>==</operator> <name>LV_LAYOUT_COL_M</name> <operator>||</operator> <name>layout</name> <operator>==</operator> <name>LV_LAYOUT_COL_L</name> <operator>||</operator> <name>layout</name> <operator>==</operator> <name>LV_LAYOUT_COL_R</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_page_set_scrl_fit2</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_FIT_FLOOD</name></expr></argument>, <argument><expr><name>LV_FIT_TIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>layout</name> <operator>==</operator> <name>LV_LAYOUT_ROW_M</name> <operator>||</operator> <name>layout</name> <operator>==</operator> <name>LV_LAYOUT_ROW_T</name> <operator>||</operator> <name>layout</name> <operator>==</operator> <name>LV_LAYOUT_ROW_B</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_page_set_scrl_fit2</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_FIT_TIGHT</name></expr></argument>, <argument><expr><name>LV_FIT_TIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_cont_set_fit2</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_FIT_NONE</name></expr></argument>, <argument><expr><name>LV_FIT_TIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_page_set_scrl_layout</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>bool</name></type> <name>lv_list_get_single_mode</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_list_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>single_mode</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>lv_list_get_btn_text</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><literal type="string">"lv_btn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name> <init>= <expr><call><name>lv_list_get_btn_label</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>label</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>lv_label_get_text</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_list_get_btn_label</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><literal type="string">"lv_btn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name> <init>= <expr><call><name>lv_obj_get_child</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>label</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>(<expr><call><name>lv_list_is_list_label</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>lv_obj_get_child</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>label</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>label</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_list_get_btn_img</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><literal type="string">"lv_btn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_IMG</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>img</name> <init>= <expr><call><name>lv_obj_get_child</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>img</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>(<expr><call><name>lv_list_is_list_img</name><argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>img</name> <operator>=</operator> <call><name>lv_obj_get_child</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>img</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>img</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>







<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_list_get_prev_btn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>prev_btn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>scrl</name> <init>= <expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>btn</name> <operator>=</operator> <call><name>lv_obj_get_child</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>, <argument><expr><name>prev_btn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>btn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>(<expr><call><name>lv_list_is_list_btn</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>btn</name> <operator>=</operator> <call><name>lv_obj_get_child</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>, <argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>btn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>btn</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_list_get_next_btn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>prev_btn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>scrl</name> <init>= <expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>btn</name> <operator>=</operator> <call><name>lv_obj_get_child_back</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>, <argument><expr><name>prev_btn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>btn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>(<expr><call><name>lv_list_is_list_btn</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>btn</name> <operator>=</operator> <call><name>lv_obj_get_child_back</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>, <argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>btn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>btn</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int32_t</name></type> <name>lv_list_get_btn_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><literal type="string">"lv_btn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>list</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>e</name> <init>= <expr><call><name>lv_list_get_next_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>e</name> <operator>==</operator> <name>btn</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>index</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>lv_list_get_next_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>uint16_t</name></type> <name>lv_list_get_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_list_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>





<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_list_get_btn_selected</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_list_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>selected_btn</name></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>lv_layout_t</name></type> <name>lv_list_get_layout</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>lv_page_get_scrl_layout</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>lv_list_get_style</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>lv_list_style_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_list_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_LIST_STYLE_BG</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_page_get_style</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_BG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_LIST_STYLE_SCRL</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_page_get_style</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_SCRL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_LIST_STYLE_SB</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_page_get_style</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_SB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_LIST_STYLE_EDGE_FLASH</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_page_get_style</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_EDGE_FLASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_LIST_STYLE_BTN_REL</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_REL</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_LIST_STYLE_BTN_PR</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_PR</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_LIST_STYLE_BTN_TGL_REL</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_TGL_REL</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_LIST_STYLE_BTN_TGL_PR</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_TGL_PR</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_LIST_STYLE_BTN_INA</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>styles_btn</name><index>[<expr><name>LV_BTN_STATE_INA</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>style</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>style</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>lv_list_up</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>scrl</name> <init>= <expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>e_prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>lv_list_get_prev_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y2</name></name> <operator>&lt;=</operator> <name><name>list</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y2</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>e_prev</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>new_y</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><call><name>lv_obj_get_y</name><argument_list>(<argument><expr><name>e_prev</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>e_prev</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>lv_list_get_anim_time</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_obj_set_y</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>, <argument><expr><name>new_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_anim_t</name></type> <name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>var</name></name> <operator>=</operator> <name>scrl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>start</name></name> <operator>=</operator> <call><name>lv_obj_get_y</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>new_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>exec_cb</name></name> <operator>=</operator> <operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_obj_set_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>path_cb</name></name> <operator>=</operator> <name>lv_anim_path_linear</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>ready_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>act_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name>LV_LIST_DEF_ANIM_TIME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_anim_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>e_prev</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>lv_list_get_prev_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>lv_list_down</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>scrl</name> <init>= <expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>e</name></decl>;</decl_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>lv_list_get_prev_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>new_y</name> <init>= <expr><operator>-</operator><call><name>lv_obj_get_y</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>lv_list_get_anim_time</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_obj_set_y</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>, <argument><expr><name>new_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_anim_t</name></type> <name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>var</name></name> <operator>=</operator> <name>scrl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>start</name></name> <operator>=</operator> <call><name>lv_obj_get_y</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>new_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>exec_cb</name></name> <operator>=</operator> <operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_obj_set_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>path_cb</name></name> <operator>=</operator> <name>lv_anim_path_linear</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>ready_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>act_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name>LV_LIST_DEF_ANIM_TIME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_anim_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>lv_list_get_prev_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_list_focus</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>, <parameter><decl><type><name>lv_anim_enable_t</name></type> <name>anim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<expr_stmt><expr><name>anim</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>list</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_page_focus</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>btn</name></expr></argument>, <argument><expr><ternary><condition><expr><name>anim</name> <operator>==</operator> <name>LV_ANIM_OFF</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>lv_list_get_anim_time</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_list_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name></decl>;</decl_stmt>


<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ancestor_page_signal</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_obj_handle_get_type_signal</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_RELEASED</name> <operator>||</operator> <name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESSED</name> <operator>||</operator> <name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESSING</name> <operator>||</operator>
<name>sign</name> <operator>==</operator> <name>LV_SIGNAL_LONG_PRESS</name> <operator>||</operator> <name>sign</name> <operator>==</operator> <name>LV_SIGNAL_LONG_PRESS_REP</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name> <init>= <expr><call><name>lv_indev_get_act</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_indev_type_t</name></type> <name>indev_type</name> <init>= <expr><call><name>lv_indev_get_type</name><argument_list>(<argument><expr><name>indev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>indev_type</name> <operator>==</operator> <name>LV_INDEV_TYPE_KEYPAD</name> <operator>||</operator>
<operator>(</operator><name>indev_type</name> <operator>==</operator> <name>LV_INDEV_TYPE_ENCODER</name> <operator>&amp;&amp;</operator> <call><name>lv_group_get_editing</name><argument_list>(<argument><expr><call><name>lv_obj_get_group</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>btn</name> <operator>=</operator> <call><name>lv_list_get_prev_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>btn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>lv_btn_get_state</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LV_BTN_STATE_PR</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>btn</name> <operator>=</operator> <call><name>lv_list_get_prev_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<decl_stmt><decl><type><name>lv_list_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if<condition>(<expr><name>btn</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESSED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_event_send</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_EVENT_PRESSED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESSING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_event_send</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_EVENT_PRESSING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_LONG_PRESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_event_send</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_EVENT_LONG_PRESSED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_LONG_PRESS_REP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_event_send</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_EVENT_LONG_PRESSED_REPEAT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_RELEASED</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>last_sel</name></name> <operator>=</operator> <name>btn</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><name><name>indev</name><operator>-&gt;</operator><name>proc</name><operator>.</operator><name>long_pr_sent</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_event_send</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_EVENT_SHORT_CLICKED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>lv_indev_is_dragging</name><argument_list>(<argument><expr><name>indev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator> <name>res</name> <operator>==</operator> <name>LV_RES_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_event_send</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_EVENT_CLICKED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>LV_RES_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_event_send</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>LV_EVENT_RELEASED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_FOCUS</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_indev_type_t</name></type> <name>indev_type</name> <init>= <expr><call><name>lv_indev_get_type</name><argument_list>(<argument><expr><call><name>lv_indev_get_act</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>indev_type</name> <operator>==</operator> <name>LV_INDEV_TYPE_ENCODER</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>g</name> <init>= <expr><call><name>lv_obj_get_group</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>lv_group_get_editing</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_list_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>last_sel</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_list_set_btn_selected</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>last_sel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_list_set_btn_selected</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>lv_list_get_next_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lv_list_set_btn_selected</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_list_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>last_clicked_btn</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_list_set_btn_selected</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>last_clicked_btn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>last_clicked_btn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>last_sel</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_list_set_btn_selected</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>last_sel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_list_set_btn_selected</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>lv_list_get_next_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_DEFOCUS</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<expr_stmt><expr><call><name>lv_list_set_btn_selected</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>lv_list_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>last_clicked_btn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>selected_btn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_EDITABLE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type> <name>editable</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>editable</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CONTROL</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>param</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_RIGHT</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>LV_KEY_DOWN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_list_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>selected_btn</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn_prev</name> <init>= <expr><call><name>lv_list_get_next_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>selected_btn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>btn_prev</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_list_set_btn_selected</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>btn_prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name> <init>= <expr><call><name>lv_list_get_next_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>btn</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lv_list_set_btn_selected</name><argument_list>(<argument><expr><name>list</name></expr></argument>,
<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_LEFT</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>LV_KEY_UP</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_list_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>selected_btn</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn_next</name> <init>= <expr><call><name>lv_list_get_prev_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>selected_btn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>btn_next</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_list_set_btn_selected</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>btn_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name> <init>= <expr><call><name>lv_list_get_next_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>btn</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_list_set_btn_selected</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_list_btn_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name></decl>;</decl_stmt>


<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ancestor_btn_signal</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_obj_handle_get_type_signal</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_RELEASED</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>list</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_list_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name><operator>.</operator><name>scroll_prop_ip</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>g</name> <init>= <expr><call><name>lv_obj_get_group</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>lv_group_get_focused</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>list</name> <operator>&amp;&amp;</operator> <call><name>lv_indev_is_dragging</name><argument_list>(<argument><expr><call><name>lv_indev_get_act</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn_i</name> <init>= <expr><call><name>lv_list_get_prev_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>btn_i</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_btn_state_t</name></type> <name>s</name> <init>= <expr><call><name>lv_btn_get_state</name><argument_list>(<argument><expr><name>btn_i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>s</name> <operator>==</operator> <name>LV_BTN_STATE_PR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name>btn_i</name></expr></argument>, <argument><expr><name>LV_BTN_STATE_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>s</name> <operator>==</operator> <name>LV_BTN_STATE_TGL_PR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name>btn_i</name></expr></argument>, <argument><expr><name>LV_BTN_STATE_TGL_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>btn_i</name> <operator>=</operator> <call><name>lv_list_get_prev_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>btn_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><call><name>lv_list_set_btn_selected</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>last_clicked_btn</name></name> <operator>=</operator> <name>btn</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><call><name>lv_indev_is_dragging</name><argument_list>(<argument><expr><call><name>lv_indev_get_act</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>single_mode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_list_btn_single_select</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESS_LOST</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>list</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_list_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name><operator>.</operator><name>scroll_prop_ip</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CLEANUP</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>list</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>sel</name> <init>= <expr><call><name>lv_list_get_btn_selected</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>sel</name> <operator>==</operator> <name>btn</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_list_set_btn_selected</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>lv_list_get_next_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_list_btn_single_select</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>list</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>e</name> <init>= <expr><call><name>lv_list_get_next_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>e</name> <operator>==</operator> <name>btn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>LV_BTN_STATE_TGL_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lv_btn_set_state</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>LV_BTN_STATE_REL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>lv_list_get_next_btn</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>bool</name></type> <name>lv_list_is_list_btn</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>list_btn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_obj_type_t</name></type> <name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_get_type</name><argument_list>(<argument><expr><name>list_btn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>cnt</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;</operator> <name>LV_MAX_ANCESTOR_NUM</name></expr>;</condition> <incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>type</name><operator>.</operator><name>type</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>type</name><operator>.</operator><name>type</name><index>[<expr><name>cnt</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"lv_btn"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>bool</name></type> <name>lv_list_is_list_label</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>list_label</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_obj_type_t</name></type> <name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_get_type</name><argument_list>(<argument><expr><name>list_label</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>cnt</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;</operator> <name>LV_MAX_ANCESTOR_NUM</name></expr>;</condition> <incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>type</name><operator>.</operator><name>type</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>type</name><operator>.</operator><name>type</name><index>[<expr><name>cnt</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"lv_label"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>bool</name></type> <name>lv_list_is_list_img</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>list_img</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_obj_type_t</name></type> <name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_obj_get_type</name><argument_list>(<argument><expr><name>list_img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>cnt</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;</operator> <name>LV_MAX_ANCESTOR_NUM</name></expr>;</condition> <incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>type</name><operator>.</operator><name>type</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>type</name><operator>.</operator><name>type</name><index>[<expr><name>cnt</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"lv_img"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
